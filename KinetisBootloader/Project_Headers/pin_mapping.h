/**
 * @file      pin_mapping.h (derived from MK20D5.usbdmHardware)
 * @version   1.2.0
 * @brief     Pin declarations for MK20DX128VLF5
 *
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#ifndef PROJECT_HEADERS_PIN_MAPPING_H
#define PROJECT_HEADERS_PIN_MAPPING_H

#include <stddef.h>
#include "derivative.h"

#include "pcr.h"

/**
 * Namespace enclosing USBDM classes
 */
namespace USBDM {

/**
 * @addtogroup USBDM_Group USBDM Peripheral Interface
 * @brief Hardware Peripheral Interface and library
 * @{
 */
/* Template:_common_settings.xml */

   /**
    * @tparam  T  Type of comparison object (inferred)
    * @param   a  Left-hand object for comparison
    * @param   b  Right-hand object for comparison
    *
    * @return Smaller of a or b
    */
   template<class T> 
   constexpr T min(const T a, const T b) {
      return (b < a) ? b : a;
   }

   /**
    * @tparam  T  Type of comparison object (inferred)
    * @param   a  Left-hand object for comparison
    * @param   b  Right-hand object for comparison
    *
    * @return Larger of a or b
    */
   template<class T> 
   constexpr T max(const T a, const T b) {
      return (b > a) ? b : a;
   }

#if defined(PCC)

/** Dummy port information for pins without an associated PCR */
constexpr PortInfo  __attribute__((unused)) NoPortInfo {0, 0, static_cast<IRQn_Type>(-1)};

#if defined(PCC_PCC_PORTA_CGC_MASK)
/** Port information for PORTA*/
constexpr PortInfo  __attribute__((unused)) PortAInfo {PORTA_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTA)), PORTA_IRQn};
#endif

#if defined(PCC_PCC_PORTB_CGC_MASK)
/** Port information for PORTB*/
constexpr PortInfo  __attribute__((unused)) PortBInfo {PORTB_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTB)), PORTB_IRQn};
#endif

#if defined(PCC_PCC_PORTC_CGC_MASK)
/** Port information for PORTC*/
constexpr PortInfo  __attribute__((unused)) PortCInfo {PORTC_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTC)), PORTC_IRQn};
#endif

#if defined(PCC_PCC_PORTD_CGC_MASK)
/** Port information for PORTD*/
constexpr PortInfo  __attribute__((unused)) PortDInfo {PORTD_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTD)), PORTD_IRQn};
#endif

#if defined(PCC_PCC_PORTE_CGC_MASK)
/** Port information for PORTE*/
constexpr PortInfo  __attribute__((unused)) PortEInfo {PORTE_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTE)), PORTE_IRQn};
#endif

#if defined(PCC_PCC_PORTF_CGC_MASK)
/** Port information for PORTF*/
constexpr PortInfo  __attribute__((unused)) PortFInfo {PORTF_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTF)), PORTF_IRQn};
#endif

#if defined(PCC_PCC_PORTG_CGC_MASK)
/** Port information for PORTG*/
constexpr PortInfo  __attribute__((unused)) PortGInfo {PORTG_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTG)), PORTG_IRQn};
#endif

#else // defined(PCC)
/** Dummy port information for pins without an associated PCR */
constexpr PortInfo  __attribute__((unused)) NoPortInfo {0, 0, static_cast<IRQn_Type>(-1)};

#ifdef SIM_SCGC5_PORTA_MASK
/** Port information for PORTA */
#ifndef PORTA_IRQS
constexpr PortInfo  __attribute__((unused)) PortAInfo {PORTA_BasePtr, SIM_SCGC5_PORTA_MASK, (static_cast<IRQn_Type>(-1))};
#else
constexpr IRQn_Type PORTA_IRQS_AR[] = PORTA_IRQS;
constexpr PortInfo  __attribute__((unused)) PortAInfo {PORTA_BasePtr, SIM_SCGC5_PORTA_MASK, PORTA_IRQS_AR[0]};
#endif
#endif

#ifdef SIM_SCGC5_PORTB_MASK
/** Port information for PORTB */
#ifndef PORTB_IRQS
constexpr PortInfo  __attribute__((unused)) PortBInfo {PORTB_BasePtr, SIM_SCGC5_PORTB_MASK, (static_cast<IRQn_Type>(-1))};
#else
constexpr IRQn_Type PORTB_IRQS_AR[] = PORTB_IRQS;
constexpr PortInfo  __attribute__((unused)) PortBInfo {PORTB_BasePtr, SIM_SCGC5_PORTB_MASK, PORTB_IRQS_AR[0]};
#endif
#endif

#ifdef SIM_SCGC5_PORTC_MASK
/** Port information for PORTC */
#ifndef PORTC_IRQS
constexpr PortInfo  __attribute__((unused)) PortCInfo {PORTC_BasePtr, SIM_SCGC5_PORTC_MASK, (static_cast<IRQn_Type>(-1))};
#else
constexpr IRQn_Type PORTC_IRQS_AR[] = PORTC_IRQS;
constexpr PortInfo  __attribute__((unused)) PortCInfo {PORTC_BasePtr, SIM_SCGC5_PORTC_MASK, PORTC_IRQS_AR[0]};
#endif
#endif

#ifdef SIM_SCGC5_PORTD_MASK
/** Port information for PORTD */
#ifndef PORTD_IRQS
constexpr PortInfo  __attribute__((unused)) PortDInfo {PORTD_BasePtr, SIM_SCGC5_PORTD_MASK, (static_cast<IRQn_Type>(-1))};
#else
constexpr IRQn_Type PORTD_IRQS_AR[] = PORTD_IRQS;
constexpr PortInfo  __attribute__((unused)) PortDInfo {PORTD_BasePtr, SIM_SCGC5_PORTD_MASK, PORTD_IRQS_AR[0]};
#endif
#endif

#ifdef SIM_SCGC5_PORTE_MASK
/** Port information for PORTE */
#ifndef PORTE_IRQS
constexpr PortInfo  __attribute__((unused)) PortEInfo {PORTE_BasePtr, SIM_SCGC5_PORTE_MASK, (static_cast<IRQn_Type>(-1))};
#else
constexpr IRQn_Type PORTE_IRQS_AR[] = PORTE_IRQS;
constexpr PortInfo  __attribute__((unused)) PortEInfo {PORTE_BasePtr, SIM_SCGC5_PORTE_MASK, PORTE_IRQS_AR[0]};
#endif
#endif

#endif // defined(PCC)

/** Class to static check signal mapping is valid */
template<class Info, int signalNum> class CheckSignal {
   static_assert((signalNum<Info::numSignals), "Non-existent signal - Modify Configure.usbdm");
   static_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != UNMAPPED_PCR), "Signal is not mapped to a pin - Modify Configure.usbdm");
   static_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != INVALID_PCR),  "Signal doesn't exist in this device/package");
   static_assert((signalNum>=Info::numSignals)||((Info::info[signalNum].gpioBit == UNMAPPED_PCR)||(Info::info[signalNum].gpioBit == INVALID_PCR)||(Info::info[signalNum].gpioBit >= 0)), "Illegal signal");
};

/** Enables mapping of all allocated pins during startup using mapAllPins() */
static constexpr bool MAP_ALL_PINS = false;

/** Used to configure pin-mapping before 1st use of peripherals */
extern void mapAllPins();

/* END Template:_common_settings.xml */

/*
 * Peripheral Information Classes
 */
/**
 * @addtogroup OSC_Group OSC, Crystal Oscillator
 * @brief Abstraction for Crystal Oscillator
 * @{
 */
#define USBDM_OSC0_IS_DEFINED
/**
 * Peripheral information for OSC, Crystal Oscillator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Osc0Info {
public:
   // Template:osc0_mk

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = OSC0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile OSC_Type &osc() {
      return *reinterpret_cast<OSC_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = true;

   //! Frequency of OSC Clock or Crystal
   static constexpr uint32_t osc_clock = 16000000UL;

   //! Frequency of 32K OSC Clock or Crystal (if applicable)
   static constexpr uint32_t osc32k_clock = 0UL;

   //! Oscillator control register
   static constexpr uint32_t cr =
      OSC_CR_ERCLKEN(1)  | // External Reference Enable
      OSC_CR_EREFSTEN(0) | // External Reference Stop Enable
      OSC_CR_SCP(2);       // Oscillator load capacitance

   /**
    * Get OSC clock (internal, assumed available)
    *
    * @return Clock frequency as uint32_t in Hz
    */
   static constexpr uint32_t getOscClock() {
      return osc_clock;
   }

   /**
    * Get OSC clock (external, gated by OSC_CR_ERCLKEN)
    *
    * @return Clock frequency as uint32_t in Hz
    */
   static uint32_t getOscerClock() {
      return (osc().CR&OSC_CR_ERCLKEN_MASK)?osc_clock:0;
   }

   /**
    * Get OSC32KCLK clock
    *
    * @return Clock frequency as uint32_t in Hz
   
    * @note This clock is only available if a 32kHz crystal or external clock is used 
    */
   static uint32_t getOsc32kClock() {
      return osc32k_clock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: XTAL0                = PTA19 (p25)                    */  { PortAInfo,  GPIOA_BasePtr,  19,      PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   1: EXTAL0               = PTA18 (p24)                    */  { PortAInfo,  GPIOA_BasePtr,  18,      PORT_PCR_MUX(0)|defaultPcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCHR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0x000CUL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCHR = PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0xCU);
   }

};

/** 
 * End group OSC_Group
 * @}
 */
/**
 * @addtogroup RTC_Group RTC, Real Time Clock
 * @brief Abstraction for Real Time Clock
 * @{
 */
#define USBDM_RTC_IS_DEFINED
/**
 * Peripheral information for RTC, Real Time Clock.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class RtcInfo {
public:
   // Template:rtc_war_rar_tsie

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = RTC_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile RTC_Type &rtc() {
      return *reinterpret_cast<RTC_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Whether to configure RTC
   //! If disabled then no RTC registers are touched.
   //! This is useful if RTC is not powered as register access will trap.
   static constexpr bool configure_rtc = 0;

   //! Frequency of RTC External Clock or Crystal
   static constexpr uint32_t osc_input_freq = 32768UL;

   //! Oscillator control register
   static constexpr uint32_t cr =
      RTC_CR_OSCE(0) | // Enables 32kHz oscillator [RTC_32K]
      RTC_CR_CLKO(0) | // Disables RTC 32kHz Clock Output
      RTC_CR_UM(0)   | // Update Mode
      RTC_CR_SUP(0)  | // Supervisor access
      RTC_CR_WPE(0)  | // Wakeup Pin Enable
      RTC_CR_SCP(0);   // RTC Oscillator load capacitance

   //! RTC Time Compensation Register
   static constexpr uint32_t tcr =
      RTC_TCR_CIR(0) | // Compensation Interval Register
      RTC_TCR_TCR(0);  // Time Compensation Register

   //! RTC Lock Register
   static constexpr uint32_t lr =
      RTC_LR_LRL(1) | // Lock Register Lock
      RTC_LR_SRL(1) | // Status Register Lock 
      RTC_LR_CRL(1) | // Control Register Lock
      RTC_LR_TCL(1);  // Time Compensation Lock

   #if defined(RTC_WAR_TSRW)
   //! RTC Write Access Register
   static constexpr uint32_t war =
      RTC_WAR_IERW(1) | // Interrupt Enable Register Write
      RTC_WAR_LRW(1)  | // Lock Register Write
      RTC_WAR_SRW(1)  | // Status Register Write
      RTC_WAR_CRW(1)  | // Control Register Write
      RTC_WAR_TCRW(1) | // Time Compensation Register Write
      RTC_WAR_TARW(1) | // Time Alarm Register Write
      RTC_WAR_TPRW(1) | // Time Prescaler Register Write
      RTC_WAR_TSRW(1);  // Time Seconds Register Write
   #endif

   #if defined(RTC_RAR_TSRR)
   //! RTC Read Access Register
   static constexpr uint32_t rar =
      RTC_RAR_IERR(1) | // Interrupt Enable Register Read  
      RTC_RAR_LRR(1)  | // Lock Register Read              
      RTC_RAR_SRR(1)  | // Status Register Read            
      RTC_RAR_CRR(1)  | // Control Register Read           
      RTC_RAR_TCRR(1) | // Time Compensation Register Read 
      RTC_RAR_TARR(1) | // Time Alarm Register Read        
      RTC_RAR_TPRR(1) | // Time Prescaler Register Read    
      RTC_RAR_TSRR(1);  // Time Seconds Register Read
   #endif

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = RTC_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqAlarmHandlerInstalled   = 0;

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqSecondsHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   //! Time for cold start (corrected for 12 leap years since 1970)
   static constexpr uint32_t coldStartTime = 
            ((((2019-1970)*365UL +
               (181) +
               (1+12-1))*24 +
              (12))*60 +
             (0))*60;

   /** 
    *  Enable clock to Rtc
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableRtcClock();
#else
      SIM->SCGC6 |= SIM_SCGC6_RTC_MASK;
#endif
   }

   /** 
    *  Disable clock to Rtc
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableRtcClock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_RTC_MASK;
#endif
   }

   /**
    * Get RTC clock frequency (internal, not masked by RTC_CR_CLKO)
    *
    * @return Clock frequency as uint32_t
    */
   static uint32_t getInternalClock() {
      // RTC uses EXTAL32/XTAL32 clock
      return (rtc().CR&RTC_CR_OSCE_MASK)?osc_input_freq:0;
   }

   /**
    * Get RTC clock frequency (external, masked by RTC_CR_CLKO)
    *
    * @return Clock frequency as uint32_t
    */
   static uint32_t getExternalClock() {
      return (rtc().CR&RTC_CR_CLKO_MASK)?0:getInternalClock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 3;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: XTAL32               = XTAL32 (p14)                   */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   1: EXTAL32              = EXTAL32 (p15)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   2: RTC_CLKOUT           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group RTC_Group
 * @}
 */
/**
 * @addtogroup MCG_Group MCG, Multipurpose Clock Generator
 * @brief Abstraction for Multipurpose Clock Generator
 * @{
 */
#define USBDM_MCG_IS_DEFINED
/**
 * Peripheral information for MCG, Multipurpose Clock Generator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class McgInfo {
public:
   // Template:mcg_mk

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = MCG_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile MCG_Type &mcg() {
      return *reinterpret_cast<MCG_Type *>(baseAddress);
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = MCG_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   //! Indicates need for special handling of CLKDIV1 register
   static constexpr int ERRATA_E2448 = 0;

   enum ClockMode : uint8_t {
      ClockMode_FEI      = 0,
      ClockMode_FEE,
      ClockMode_FBI,
      ClockMode_BLPI,
      ClockMode_FBE,
      ClockMode_BLPE,
      ClockMode_PBE,
      ClockMode_PEE,
   };

   //! Frequency of Slow Internal Reference Clock [~32kHz]
   static constexpr uint32_t system_slow_irc_clock = 32768UL;

   //! Frequency of Fast Internal Reference Clock [~4MHz]
   static constexpr uint32_t system_fast_irc_clock = 4000000UL;

   //! PLL VDIV min value
   static constexpr uint32_t pll_vdiv_min = 24;

   //! PLL post divider
   static constexpr uint32_t pll_post_divider = 1;

   //! Structure for clock configurations
   struct ClockInfo {
      //! System Clock Divider Register 1
      const uint32_t clkdiv1;

   #ifdef SIM_CLKDIV3_PLLFLLDIV
      //! PLLFLL clock divider divisor & fraction
      const uint32_t clkdiv3;
   #endif

      //! SIM SOPT2 - Clock selectors for various peripherals
      const uint32_t sopt2;

      //! Clock Mode
      const ClockMode clockMode:8;

      //! Control Register 1 - FRDIV, IRCLKEN, IREFSTEN, (-CLKS, -IREFS)
      const uint8_t c1;
      //! Control Register 2 - LOCRE0, RANGE0, HGO0, EREFS0, IRCS, (-LP)
      const uint8_t c2;
      //! Control Register 4 - DMX32, DRST_DRS
      const uint8_t c4;
      //! Control Register 5 - PLLCLKEN0, PLLSTEN0, PRDIV0
      const uint8_t c5;
      //! Control Register 6 - LOLIE0, CME0, VDIV0, (-PLLS)
      const uint8_t c6;
      //! Status and Control Register - FCRDIV
      const uint8_t sc;
      //! Control Register 7 - OSCSEL
      const uint8_t c7;
      //! Control Register 8 - LOCRE1, LOLRE, CME1
      const uint8_t c8;
   };

   /**
    * Get MCGERCLK
    *
    * @return MCGERCLK as uint32_t
    */
   static uint32_t getErcClock() {
   
      switch((mcg().C7&MCG_C7_OSCSEL_MASK)) {
         default               : return 0;
         case MCG_C7_OSCSEL(0) : return Osc0Info::getOscClock();
         case MCG_C7_OSCSEL(1) : return RtcInfo::getInternalClock();
      }
   }

   /**
    * Get Internal MCGIRCLK (ungated by MCG_C1_IRCLKEN_MASK)
    *
    * @return MCGIRCLK as uint32_t
    */
   static uint32_t getInternalIrcClock() {
         if (mcg().C2&MCG_C2_IRCS_MASK) {
   #ifdef MCG_SC_FCRDIV_MASK
            return (system_fast_irc_clock/(1<<((mcg().SC&MCG_SC_FCRDIV_MASK)>>MCG_SC_FCRDIV_SHIFT)));
   #else
            return system_fast_irc_clock;
   #endif
         }
         else {
            return system_slow_irc_clock;
         }
   }

   /**
    * Get MCGIRCLK (gated by MCG_C1_IRCLKEN_MASK)
    *
    * @return MCGIRCLK as uint32_t
    */
   static uint32_t getMcgIrClock() {
      if (mcg().C1&MCG_C1_IRCLKEN_MASK) {
         return getInternalIrcClock();
      }
      else {
         return 0;
      }
   }

};

/** 
 * End group MCG_Group
 * @}
 */
/**
 * @addtogroup SIM_Group SIM, System Integration Module
 * @brief Abstraction for System Integration Module
 * @{
 */
#define USBDM_SIM_IS_DEFINED
/**
 * Peripheral information for SIM, System Integration Module.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
   /**
    * RAM size
    */
   enum SimRamSize {
      SimRamSize_8KiB   = SIM_SOPT1_RAMSIZE(1),  //!< 8KiB RAM
      SimRamSize_16KiB  = SIM_SOPT1_RAMSIZE(3),  //!< 16KiB RAM
      SimRamSize_24KiB  = SIM_SOPT1_RAMSIZE(4),  //!< 24KiB RAM
      SimRamSize_32KiB  = SIM_SOPT1_RAMSIZE(5),  //!< 32KiB RAM
      SimRamSize_64KiB  = SIM_SOPT1_RAMSIZE(7),  //!< 64KiB RAM
      SimRamSize_96KiB  = SIM_SOPT1_RAMSIZE(8),  //!< 96KiB RAM
      SimRamSize_128KiB = SIM_SOPT1_RAMSIZE(9),  //!< 128KiB RAM
      SimRamSize_256KiB = SIM_SOPT1_RAMSIZE(11), //!< 256KiB RAM
   };

   /**
    * Selects the ERCLK32K clock source
    */
   enum SimOsc32kSel {
      SimOsc32kSel_Osc32kClk  = SIM_SOPT1_OSC32KSEL(0), //!< OSC0 operating as 32K oscillator
      SimOsc32kSel_Rtc32kClk  = SIM_SOPT1_OSC32KSEL(2), //!< Rtc32k clock
      SimOsc32kSel_LpoClk     = SIM_SOPT1_OSC32KSEL(3), //!< LPO Clock
   };

    
   /**
    * USB full-speed clock sources
    */
   enum SimUsbFullSpeedClockSource {
      SimUsbFullSpeedClockSource_External   = SIM_SOPT2_USBSRC(0), //!< External bypass clock (USB_CLKIN)
      SimUsbFullSpeedClockSource_Peripheral = SIM_SOPT2_USBSRC(1), //!< Peripheral clock selected by SIM.SOPT2[PLLFLLSEL] divided by SIM.CLKDIV2
   };

   /**
    * Peripheral Clock sources
    */
   enum SimPeripheralClockSource {
      SimPeripheralClockSource_McgFll = SIM_SOPT2_PLLFLLSEL(0), //!< MCG FLL Clock
      SimPeripheralClockSource_McgPll = SIM_SOPT2_PLLFLLSEL(1), //!< MCG PLL Clock
   #ifdef USB_CLK_RECOVER_IRC_EN_REG_EN_MASK
      SimPeripheralClockSource_Irc48m = SIM_SOPT2_PLLFLLSEL(3), //!< IRC 48MHz clock
   #endif
   };

   /**
    * Debug trace clock select.
    *
    * Selects the trace clock source.
    */
   enum SimTraceClockoutSel {
      SimTraceClockoutSel_McgClkout = SIM_SOPT2_TRACECLKSEL(0), //!< MCG output clock (MCGOUTCLK)
      SimTraceClockoutSel_CoreClk   = SIM_SOPT2_TRACECLKSEL(1), //!< Core/system clock
   };

   /**
    * Selects the clock to output on the CLKOUT pin.
    */
   enum SimClkoutSel {
      SimClkoutSel_FlexBus   = SIM_SOPT2_CLKOUTSEL(0),  //!< FlexBus
      SimClkoutSel_Reserved1 = SIM_SOPT2_CLKOUTSEL(1),  //!<
      SimClkoutSel_Flash     = SIM_SOPT2_CLKOUTSEL(2),  //!< Flash
      SimClkoutSel_Lpo       = SIM_SOPT2_CLKOUTSEL(3),  //!< LPO (1kHz)
      SimClkoutSel_McgirClk  = SIM_SOPT2_CLKOUTSEL(4),  //!< McgirClk
      SimClkoutSel_RTC       = SIM_SOPT2_CLKOUTSEL(5),  //!< RTC 32.768kHz
      SimClkoutSel_OscerClk0 = SIM_SOPT2_CLKOUTSEL(6),  //!< OscerClk0
      SimClkoutSel_Reserved7 = SIM_SOPT2_CLKOUTSEL(7),  //!<
   };

   /**
    * RTC clock out select
    * Selects the clock to be output on the RTC_CLKOUT pin.
    */
   enum RtcClkoutSel {
      RtcClkoutSel_1Hz   = SIM_SOPT2_RTCCLKOUTSEL(0),//!< RTC 1 Hz clock is output on the RTC_CLKOUT pin.
      RtcClkoutSel_32kHz = SIM_SOPT2_RTCCLKOUTSEL(1),//!< RTC 32.768kHz clock is output on the RTC_CLKOUT pin.
   };

   /**
    * FlexTimer 0 Hardware Trigger 0 Source Select
    */
   enum SimFtm0Trg0Src {
      SimFtm0Trg0Src_Cmp0 = SIM_SOPT4_FTM0TRG0SRC(0),//!< Cmp0 output
      SimFtm0Trg0Src_Ftm1 = SIM_SOPT4_FTM0TRG0SRC(1),//!< Ftm1 channel match
   };

   /**
    * FTM1 External Clock Pin Select
    *
    * Selects the external pin used to drive the clock to the FTM1 module.
    * NOTE: The selected pin must also be configured for the FTM external clock function through the
    * appropriate pin control register in the port control module.
    */
   enum SimFtm1ClkSel {
      SimFtm1ClkSel_FtmClk0 = SIM_SOPT4_FTM1CLKSEL(0),//!< FtmClk0 pin
      SimFtm1ClkSel_FtmClk1 = SIM_SOPT4_FTM1CLKSEL(1),//!< FtmClk1 pin
   };

   /**
    * FlexTimer 0 External Clock Pin Select
    *
    * Selects the external pin used to drive the clock to the FTM0 module.
    * NOTE: The selected pin must also be configured for the FTM external clock function through the
    * appropriate pin control register in the port control module.
    */
   enum SimFtm0ClkSel {
      SimFtm0ClkSel_FtmClk0 = SIM_SOPT4_FTM0CLKSEL(0),//!< FtmClk0 pin
      SimFtm0ClkSel_FtmClk1 = SIM_SOPT4_FTM0CLKSEL(1),//!< FtmClk1 pin
   };

   /**
    *  FTM1 channel 0 input capture source select
    *  
    *  Selects the source for FTM1 channel 0 input capture.
    *  NOTE: When the FTM is not in input capture mode, clear this field.
    */
   enum SimFtm1Ch0Src {
      SimFtm1Ch0Src_Ftm1Ch0 = SIM_SOPT4_FTM1CH0SRC(0),//!< Ftm1Ch0
      SimFtm1Ch0Src_Cmp0    = SIM_SOPT4_FTM1CH0SRC(1),//!< Cmp0 output
      SimFtm1Ch0Src_Cmp1    = SIM_SOPT4_FTM1CH0SRC(2),//!< Cmp1 output
      SimFtm1Ch0Src_UsbSof  = SIM_SOPT4_FTM1CH0SRC(3),//!< USB SOF 
   };

   /**
    * FTM1 Fault 0 Select
    * 
    * Selects the source of FTM1 fault 0.
    * NOTE: The pin source for fault 0 must be configured for the FTM module fault function through the
    * appropriate pin control register in the port control module.
    */
   enum SimFtm1Flt0 {
      SimFtm1Flt0_Ftm1Flt0 = SIM_SOPT4_FTM1FLT0(0),//!< FTM1 Fault 0 pin
      SimFtm1Flt0_Cmp0     = SIM_SOPT4_FTM1FLT0(1),//!< Cmp0 output
   };

   /**
    * FTM0 Fault 1 Select
    * 
    * Selects the source of FTM0 fault 1.
    * NOTE: The pin source for fault 1 must be configured for the FTM module fault function through the
    * appropriate pin control register in the port control module.
    */
   enum SimFtm0Flt1 {
      SimFtm0Flt1_Ftm0Flt1 = SIM_SOPT4_FTM0FLT1(0),//!< FTM0 Fault 1 pin
      SimFtm0Flt1_Cmp1     = SIM_SOPT4_FTM0FLT1(1),//!< Cmp1 output
   };

   /**
    * FTM0 Fault 0 Select
    * 
    * Selects the source of FTM0 fault 0.
    * NOTE: The pin source for fault 0 must be configured for the FTM module fault function through the
    * appropriate pin control register in the port control module.
    */
   enum SimFtm0Flt0 {
      SimFtm0Flt0_Ftm0Flt0 = SIM_SOPT4_FTM0FLT0(0),//!< FTM0 Fault 0 pin
      SimFtm0Flt0_Cmp0     = SIM_SOPT4_FTM0FLT0(1),//!< Cmp0 output
   };

   /**
    * UART 1 receive data source select
    *
    * Selects the source for the UART 1 receive data.
    */
   enum SimUart1RxSrc {
      SimUart1RxSrc_Uart1Rx   = SIM_SOPT5_UART1RXSRC(0),//!< Uart1 Rx direct
      SimUart1RxSrc_Cmp0      = SIM_SOPT5_UART1RXSRC(1),//!< Cmp0 output
      SimUart1RxSrc_Cmp1      = SIM_SOPT5_UART1RXSRC(2),//!< Cmp1 output
      SimUart1RxSrc_Reserved3 = SIM_SOPT5_UART1RXSRC(3),//!< Reserved
   };

   /**
    * UART 1 transmit data source select
    *
    * Selects the source for the UART 1 transmit data.
    */
   enum SimUart1TxSrc {
      SimUart1TxSrc_Direct             = SIM_SOPT5_UART1TXSRC(0),//!< Uart1 Tx Direct
      SimUart1TxSrc_ModulatedbyFtm1Ch0 = SIM_SOPT5_UART1TXSRC(1),//!< Uart1 Tx Modulated by Ftm1 Ch0
   };

   /**
    * UART 0 receive data source select
    *
    * Selects the source for the UART 0 receive data.
    */
   enum SimUart0RxSrc {
      SimUart0RxSrc_Uart0Rx   = SIM_SOPT5_UART0RXSRC(0),//!< Uart0 Rx direct
      SimUart0RxSrc_Cmp0      = SIM_SOPT5_UART0RXSRC(1),//!< Cmp0 output
      SimUart0RxSrc_Cmp1      = SIM_SOPT5_UART0RXSRC(2),//!< Cmp1 output
      SimUart0RxSrc_Reserved3 = SIM_SOPT5_UART0RXSRC(3),//!< Reserved
   };

   /**
    * UART 0 transmit data source select
    *
    * Selects the source for the UART 0 transmit data.
    */
   enum SimUart0TxSrc {
      SimUart0TxSrc_Direct             = SIM_SOPT5_UART0TXSRC(0),//!< Uart0 Tx Direct
      SimUart0TxSrc_ModulatedbyFtm1Ch0 = SIM_SOPT5_UART0TXSRC(1),//!< Uart0 Tx Modulated by Ftm1 Ch0
   };

   /**
    * Selects the ADC0 Trigger source in STOP and VLPS modes, or when ADC0 Alternative Trigger is active.
    */
   enum SimAdc0Trigger {
      SimAdc0Trigger_PdbExTrig    = SIM_SOPT7_ADC0TRGSEL(0),   //!< External Trigger Source PDBx_EXTRG
      SimAdc0Trigger_Cmp0         = SIM_SOPT7_ADC0TRGSEL(1),   //!< Comparator 0
      SimAdc0Trigger_Cmp1         = SIM_SOPT7_ADC0TRGSEL(2),   //!< Comparator 1
      SimAdc0Trigger_Cmp2         = SIM_SOPT7_ADC0TRGSEL(3),   //!< Comparator 2 (if present)
      SimAdc0Trigger_PitCh0       = SIM_SOPT7_ADC0TRGSEL(4),   //!< PIT Channel 0
      SimAdc0Trigger_PitCh1       = SIM_SOPT7_ADC0TRGSEL(5),   //!< PIT Channel 1
      SimAdc0Trigger_PitCh2       = SIM_SOPT7_ADC0TRGSEL(6),   //!< PIT Channel 2
      SimAdc0Trigger_PitCh3       = SIM_SOPT7_ADC0TRGSEL(7),   //!< PIT Channel 3
      SimAdc0Trigger_Ftm0         = SIM_SOPT7_ADC0TRGSEL(8),   //!< FTM0 Init and Ext Trigger Outputs
      SimAdc0Trigger_Ftm1         = SIM_SOPT7_ADC0TRGSEL(9),   //!< FTM1 Init and Ext Trigger Outputs
      SimAdc0Trigger_Ftm2         = SIM_SOPT7_ADC0TRGSEL(10),  //!< FTM2 Init and Ext Trigger Outputs (if present)
      SimAdc0Trigger_Ftm3         = SIM_SOPT7_ADC0TRGSEL(11),  //!< FTM3 Init and Ext Trigger Outputs (if present)
      SimAdc0Trigger_RtcAlarm     = SIM_SOPT7_ADC0TRGSEL(12),  //!< RTC Alarm
      SimAdc0Trigger_RtcSeconds   = SIM_SOPT7_ADC0TRGSEL(13),  //!< RTC Seconds
      SimAdc0Trigger_Lptrm        = SIM_SOPT7_ADC0TRGSEL(14),  //!< LPTMR
      SimAdc0Trigger_15           = SIM_SOPT7_ADC0TRGSEL(15),  //!< Reserved
   };

   /**
    * Selects the ADC0 trigger mode.
    * 
    *    _Pdb              - ADC is triggered by PDB which selects the pretrigger (SC1[0..n]/R[0..n]
    *    _Alt_PreTrigger_0 - ADC is triggered by SimAdc0Trigger selection and uses pretrigger 0 = A (SC1[0]/R[0])
    *    _Alt_PreTrigger_1 - ADC is triggered by SimAdc0Trigger selection and uses pretrigger 1 = B (SC1[1]/R[1])
    */
   enum SimAdc0TriggerMode {
      SimAdc0TriggerMode_Pdb               = SIM_SOPT7_ADC0ALTTRGEN(0),                              //!< PDB trigger
      SimAdc0TriggerMode_Alt_PreTrigger_0  = SIM_SOPT7_ADC0ALTTRGEN(1)|SIM_SOPT7_ADC0PRETRGSEL(0),   //!< Pre-trigger 0 = A (SC1[0])
      SimAdc0TriggerMode_Alt_PreTrigger_1  = SIM_SOPT7_ADC0ALTTRGEN(1)|SIM_SOPT7_ADC0PRETRGSEL(1),   //!< Pre-trigger 1 = B (SC1[1])
   };

class SimInfo {
public:
   // Template:sim_mk20d5

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = SIM_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile SIM_Type &sim() {
      return *reinterpret_cast<SIM_Type *>(baseAddress);
   }

   /**
    * Get RAM size
    *
    * @return RAM size value
    */
   static SimRamSize getRamSize() {
   
      return static_cast<SimRamSize>(sim().SOPT1&SIM_SOPT1_RAMSIZE_MASK);
   }

   /**
    * Get ERCLK32K clock frequency
    *
    * @return Clock frequency as a uint32_t in Hz
    */
   static uint32_t getErc32kClock() {
   
      switch(sim().SOPT1&SIM_SOPT1_OSC32KSEL_MASK) {
         default                     : return 0;
         case SimOsc32kSel_Osc32kClk : return Osc0Info::getOsc32kClock();
         case SimOsc32kSel_Rtc32kClk : return RtcInfo::getExternalClock();
         case SimOsc32kSel_LpoClk    : return 1000;
      }
   }

   /**
    * Set ERCLK32K clock source
    *
    * @param simOsc32kSel Clock source
    */
   static void setErc32kClock(SimOsc32kSel simOsc32kSel) {
      sim().SOPT1 = (sim().SOPT1&~SIM_SOPT1_OSC32KSEL_MASK) | simOsc32kSel;
   }

   //! System Options Register 1
   static constexpr uint32_t sopt1 = 
   #ifdef SIM_SOPT1_OSC32KOUT
      SIM_SOPT1_OSC32KOUT(-1) |    // 32K oscillator clock out pin select
   #endif
      SIM_SOPT1_OSC32KSEL(2);     // 32K oscillator clock select

   /**
    * Selects the clock to output on the CLKOUT pin.
    *
    * @param simClkoutSel
    */
   static void setClkout(SimClkoutSel simClkoutSel) {
      sim().SOPT2 = (sim().SOPT2&~SIM_SOPT2_CLKOUTSEL_MASK) | simClkoutSel;
   }

   /**
    * Set Peripheral clock source
    *
    * @param simPeripheralClockSource Clock source for peripheral clock
    */
   static void setPeripheralClock(SimPeripheralClockSource simPeripheralClockSource) {
      sim().SOPT2 = (sim().SOPT2&~SIM_SOPT2_PLLFLLSEL_MASK) | simPeripheralClockSource;
   }

   /**
    * Get Peripheral clock frequency
    *
    * @return Frequency as a uint32_t in Hz
    */
   static uint32_t getPeripheralClock() {
      
      switch(sim().SOPT2&SIM_SOPT2_PLLFLLSEL_MASK) {
         default:                     return 0;
         case SimPeripheralClockSource_McgFll : return SystemMcgFllClock;
         case SimPeripheralClockSource_McgPll : return SystemMcgPllClock;
      }
   }

   /** 
    * Get UART0 input clock frequency
    *
    * @return Clock frequency in Hz
    */
   static inline uint32_t getUart0Clock() {
      return SystemCoreClock;
   }

   /** 
    * Get UART1 input clock frequency
    *
    * @return Clock frequency in Hz
    */
   static inline uint32_t getUart1Clock() {
      return SystemCoreClock;
   }

   /** 
    * Get UART2 input clock frequency
    *
    * @return Clock frequency in Hz
    */
   static inline uint32_t getUart2Clock() {
      return SystemBusClock;
   }

   #ifdef SIM_SOPT2_USBSRC_MASK
   /**
    * Set USB Full-speed clock source
    *
    * @param simUsbFullSpeedClockSource Clock source for peripheral clock
    */
   static void setUsbFullSpeedClock(SimUsbFullSpeedClockSource simUsbFullSpeedClockSource) {
      sim().SOPT2 = (sim().SOPT2&~SIM_SOPT2_USBSRC_MASK) | simUsbFullSpeedClockSource;
   }

   /**
    * Get USB clock frequency
    *
    * @return Clock frequency as a uint32_t in Hz
    */
   static uint32_t getUsbClock() {
      switch ((sim().SOPT2&SIM_SOPT2_USBSRC_MASK)) {
         default:
         case SimUsbFullSpeedClockSource_External   : return 48000000;
         case SimUsbFullSpeedClockSource_Peripheral : return  (getPeripheralClock()*
            (((sim().CLKDIV2&SIM_CLKDIV2_USBFRAC_MASK)>>SIM_CLKDIV2_USBFRAC_SHIFT)+1))/
            (((sim().CLKDIV2&SIM_CLKDIV2_USBDIV_MASK)>>SIM_CLKDIV2_USBDIV_SHIFT)+1);
      }
   }
   #endif

   //! System Options Register 2
   static constexpr uint32_t sopt2 = 
   #ifdef SIM_SOPT2_TRACECLKSEL
      SIM_SOPT2_TRACECLKSEL(0) |      // Debug trace clock select
   #endif
   #ifdef SIM_SOPT2_TIMESRC
      SIM_SOPT2_TIMESRC(-1) |          // IEEE 1588 timestamp clock source select
   #endif
   #ifdef SIM_SOPT2_RMIISRC
      SIM_SOPT2_RMIISRC(-1) |          // Ethernet RMII clock source select
   #endif
   #ifdef SIM_SOPT2_SDHCSRC
         SIM_SOPT2_SDHCSRC(-1) |       // SDHC clock source select
   #endif
   #ifdef SIM_SOPT2_UART0SRC
      SIM_SOPT2_UART0SRC(-1) |         // UART0 clock source select
   #endif
   #ifdef SIM_SOPT2_LPUARTSRC
         SIM_SOPT2_LPUARTSRC(-1) |     // LPUART clock source select
   #endif
   #ifdef SIM_SOPT2_LPUART0SRC
         SIM_SOPT2_LPUART0SRC(-1) |     // LPUART clock source select
   #endif
   #ifdef SIM_SOPT2_PTD7PAD
         SIM_SOPT2_PTD7PAD(0) |       // PTD7 pad drive strength
   #endif
   #ifdef SIM_SOPT2_TPMSRC
         SIM_SOPT2_TPMSRC(-1) |        // TPM clock source select
   #endif
   #ifdef SIM_SOPT2_USBSRC
         SIM_SOPT2_USBSRC(1) |        // USB clock source select
   #endif
   #ifdef SIM_SOPT2_FBSL
         SIM_SOPT2_FBSL(-1) |          // FlexBus security level
   #endif
   #ifdef SIM_SOPT2_PLLFLLSEL
         SIM_SOPT2_PLLFLLSEL(1)|      // PLL/FLL clock select
   #endif
   #ifdef SIM_SOPT2_RTCCLKOUTSEL
         SIM_SOPT2_RTCCLKOUTSEL(1) |  // RTC clock out select
   #endif
         SIM_SOPT2_CLKOUTSEL(2);      // CLKOUT pin clock source select

   //! System Options Register 4
   static constexpr uint32_t sopt4 = 
   #ifdef SIM_SOPT4_FTM3TRG1SRC
      SIM_SOPT4_FTM3TRG1SRC(-1) |   // FlexTimer 3 Hardware Trigger 1 Source Select
   #endif
   #ifdef SIM_SOPT4_FTM3TRG0SRC
      SIM_SOPT4_FTM3TRG0SRC(-1) |   // FlexTimer 3 Hardware Trigger 0 Source Select
   #endif
   #ifdef SIM_SOPT4_FTM0TRG1SRC
      SIM_SOPT4_FTM0TRG1SRC(-1) |   // FlexTimer 0 Hardware Trigger 1 Source Select
   #endif
   #ifdef SIM_SOPT4_FTM0TRG0SRC
      SIM_SOPT4_FTM0TRG0SRC(0) |   // FlexTimer 0 Hardware Trigger 0 Source Select
   #endif
   #ifdef SIM_SOPT4_FTM3CLKSEL
      SIM_SOPT4_FTM3CLKSEL(-1)  |   // FlexTimer 3 External Clock Pin Select
   #endif
   #ifdef SIM_SOPT4_FTM2CLKSEL
      SIM_SOPT4_FTM2CLKSEL(-1)  |   // FlexTimer 2 External Clock Pin Select
   #endif
   #ifdef SIM_SOPT4_FTM1CLKSEL
      SIM_SOPT4_FTM1CLKSEL(0)  |   // FlexTimer 1 External Clock Pin Select
   #endif
   #ifdef SIM_SOPT4_FTM0CLKSEL
      SIM_SOPT4_FTM0CLKSEL(0)  |   // FlexTimer 0 External Clock Pin Select
   #endif
   #ifdef SIM_SOPT4_FTM2CH1SRC
      SIM_SOPT4_FTM2CH1SRC(-1)  |   // FTM2 channel 1 input capture source select
   #endif
   #ifdef SIM_SOPT4_FTM2CH0SRC
      SIM_SOPT4_FTM2CH0SRC(-1)  |   // FTM2 channel 0 input capture source select
   #endif
   #ifdef SIM_SOPT4_FTM1CH0SRC
      SIM_SOPT4_FTM1CH0SRC(0)  |   // FTM1 channel 0 input capture source select
   #endif
   #ifdef SIM_SOPT4_FTM3FLT0
      SIM_SOPT4_FTM3FLT0(-1)    |   // FlexTimer 3 Fault 0 Select
   #endif
   #ifdef SIM_SOPT4_FTM2FLT0
      SIM_SOPT4_FTM2FLT0(-1)    |   // FlexTimer 2 Fault 0 Select
   #endif
   #ifdef SIM_SOPT4_FTM1FLT0
      SIM_SOPT4_FTM1FLT0(0)    |   // FlexTimer 1 Fault 0 Select
   #endif
   #ifdef SIM_SOPT4_FTM0FLT3
      SIM_SOPT4_FTM0FLT3(-1)    |   // FlexTimer 0 Fault 3 Select
   #endif
   #ifdef SIM_SOPT4_FTM0FLT2
      SIM_SOPT4_FTM0FLT2(-1)    |   // FlexTimer 0 Fault 2 Select
   #endif
      SIM_SOPT4_FTM0FLT1(0)    |   // FlexTimer 0 Fault 1 Select
      SIM_SOPT4_FTM0FLT0(0);       // FlexTimer 0 Fault 0 Select

   /**
    * Select FlexTimer 0 Hardware Trigger 0 Source
    *
    * @param simFtm0Trg0Src Trigger Source
    */
   static void setFtm0Trg0Src(SimFtm0Trg0Src simFtm0Trg0Src) {
      sim().SOPT4 = (sim().SOPT4&~SIM_SOPT4_FTM0TRG0SRC_MASK)|simFtm0Trg0Src;   
   }

   /**
    * Select FlexTimer 1 External Clock Pin
    *
    * @param simFtm1ClkSel Clock Pin
    */
   static void setFtm1ClkSel(SimFtm1ClkSel simFtm1ClkSel) {
      sim().SOPT4 = (sim().SOPT4&~SIM_SOPT4_FTM1CLKSEL_MASK)|simFtm1ClkSel;      
   }

   /**
    * Select FTM0 External Clock Pin
    *
    * @param simFtm0ClkSel Clock Pin
    */
   static void setFtm0ClkSel(SimFtm0ClkSel simFtm0ClkSel) {
      sim().SOPT4 = (sim().SOPT4&~SIM_SOPT4_FTM0CLKSEL_MASK)|simFtm0ClkSel;      
   }

   /**
    * Select FTM1 channel 0 input capture source
    *
    * @param simFtm1Ch0Src Capture Source
    */
   static void setFtm1Ch0Src(SimFtm1Ch0Src simFtm1Ch0Src) {
      sim().SOPT4 = (sim().SOPT4&~SIM_SOPT4_FTM1CH0SRC_MASK)|simFtm1Ch0Src;      
   }

   /**
    * Select FTM1 Fault 0 Select
    *
    * @param simFtm1Flt0 Fault Source
    */
   static void setFtm1Flt0(SimFtm1Flt0 simFtm1Flt0) {
      sim().SOPT4 = (sim().SOPT4&~SIM_SOPT4_FTM1FLT0_MASK)|simFtm1Flt0;      
   }

   /**
    * Select FTM0 Fault 1 Select
    *
    * @param simFtm0Flt1 Fault Source
    */
   static void setFtm0Flt1(SimFtm0Flt1 simFtm0Flt1) {
      sim().SOPT4 = (sim().SOPT4&~SIM_SOPT4_FTM0FLT1_MASK)|simFtm0Flt1;      
   }

   /**
    * Select FTM0 Fault 0 Select
    *
    * @param simFtm0Flt0 Fault Source
    */
   static void setFtm0Flt0(SimFtm0Flt0 simFtm0Flt0) {
      sim().SOPT4 = (sim().SOPT4&~SIM_SOPT4_FTM0FLT0_MASK)|simFtm0Flt0;      
   }

   /**
    * Select UART 1 receive data source
    *
    * @param simUart1RxSrc UART Rx source
    */
   static void setUart1RxSrc(SimUart1RxSrc simUart1RxSrc) {
      sim().SOPT5 = (sim().SOPT5&~SIM_SOPT5_UART1RXSRC_MASK)|simUart1RxSrc;      
   }

   /**
    * Select UART 1 transmit data source select
    *
    * @param simUart1TxSrc UART Tx source
    */
   static void setUart1TxSrc(SimUart1TxSrc simUart1TxSrc) {
      sim().SOPT5 = (sim().SOPT5&~SIM_SOPT5_UART1TXSRC_MASK)|simUart1TxSrc;      
   }

   /**
    * Select UART 0 receive data source
    *
    * @param simUart0RxSrc UART Rx source
    */
   static void setUart0RxSrc(SimUart0RxSrc simUart0RxSrc) {
      sim().SOPT5 = (sim().SOPT5&~SIM_SOPT5_UART0RXSRC_MASK)|simUart0RxSrc;      
   }

   /**
    * Select UART 0 transmit data source select
    *
    * @param simUart0TxSrc UART Tx source
    */
   static void setUart0TxSrc(SimUart0TxSrc simUart0TxSrc) {
      sim().SOPT5 = (sim().SOPT5&~SIM_SOPT5_UART0TXSRC_MASK)|simUart0TxSrc;      
   }

   //! System Options Register 5
   static constexpr uint32_t sopt5 = 
      SIM_SOPT5_UART0TXSRC(0) |      // UART 0 transmit data source select
      SIM_SOPT5_UART0RXSRC(0) |      // UART 0 receive data source select
      SIM_SOPT5_UART1TXSRC(0) |      // UART 1 transmit data source select
      SIM_SOPT5_UART1RXSRC(0) |      // UART 1 receive data source select
   #ifdef SIM_SOPT5_LPUART0RXSRC
      SIM_SOPT5_LPUART0RXSRC(-1) |  // LPUART 0 receive data source select
   #endif
   #ifdef SIM_SOPT5_LPUART0TXSRC
      SIM_SOPT5_LPUART0TXSRC(-1) |  // LPUART 0 transmit data source select
   #endif
      0;

   /**
    * Select the ADC0 Trigger source
    * 
    * If PDB is selected by SimAdc0Trigger then Pre-trigger 0/1 is determined by the PDB setup,
    * otherwise Pre-trigger 0/1 is determined by this parameter.
    * For example, setAdc0Triggers(SimAdc0TriggerMode_Alt_PreTrigger_1, SimAdc0Trigger_PitCh0) will set the trigger source
    * to PIT channel 0 and conversion will use SC1[1]/R[1]. 
    *
    * @param[in] simAdc0TriggerMode Select ADC0 Trigger mode 
    * @param[in] simAdc0Trigger     Select the ADC0 Trigger source in STOP and VLPS modes, or when ADC0 Alternative Trigger is active.
    */
   static void setAdc0Triggers(SimAdc0TriggerMode simAdc0TriggerMode, SimAdc0Trigger simAdc0Trigger=SimAdc0Trigger_PdbExTrig) {
      sim().SOPT7 = (sim().SOPT7&~(SIM_SOPT7_ADC0TRGSEL_MASK|SIM_SOPT7_ADC0ALTTRGEN_MASK))|simAdc0Trigger|simAdc0TriggerMode;
   };

   //! System Options Register 7
   static constexpr uint32_t sopt7 = 
   #ifdef SIM_SOPT7_ADC1ALTTRGEN
      SIM_SOPT7_ADC1ALTTRGEN(-1) |    // ADC1 alternate trigger enable
      SIM_SOPT7_ADC1PRETRGSEL(-1) |   // ADC1 pretrigger select
      SIM_SOPT7_ADC1TRGSEL(-1) |      // ADC1 trigger select

   #endif
      SIM_SOPT7_ADC0ALTTRGEN(0) |    // ADC0 alternate trigger enable
      SIM_SOPT7_ADC0PRETRGSEL(0) |   // ADC0 pretrigger select
      SIM_SOPT7_ADC0TRGSEL(0);       // ADC0 trigger select

   #ifdef SIM_CLKDIV2_USBDIV_MASK
   //! System Clock Divider Register 2
   //! USB clock divider divisor & fraction
   static constexpr uint32_t clkdiv2 = 2;
   #endif

   /**
    * Initialise SIM registers
    */
   static void initRegs() {
   #ifdef SIM_SCGC4_USBOTG_MASK
      // The USB interface must be disabled for clock changes to have effect
      sim().SCGC4 &= ~SIM_SCGC4_USBOTG_MASK;
   #endif
   
      sim().SOPT1 = sopt1;
      // sim_sopt2_pllfllsel may also be altered by MCG clock code
      sim().SOPT2 = sopt2;
      sim().SOPT4 = sopt4;
      sim().SOPT5 = sopt5;
      sim().SOPT7 = sopt7;
   
   #ifdef SIM_CLKDIV2_USBDIV_MASK
      sim().CLKDIV2 = clkdiv2;
   #endif
   }

};

/** 
 * End group SIM_Group
 * @}
 */
/**
 * @addtogroup PMC_Group PMC, Power Management Controller
 * @brief Abstraction for Power Management Controller
 * @{
 */
#define USBDM_PMC_IS_DEFINED
/**
 * Peripheral information for PMC, Power Management Controller.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class PmcInfo {
public:
   // Template:pmc_mk

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = PMC_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile PMC_Type &pmc() {
      return *reinterpret_cast<PMC_Type *>(baseAddress);
   }

   //! Default value for Low Voltage Detect Status And Control 1 register
   static constexpr uint32_t pmc_lvdsc1  = 
   #ifdef PMC_LVDSC1_LVDV
      PMC_LVDSC1_LVDV(0)   | // Low-Voltage Detect Voltage Select
   #endif
      PMC_LVDSC1_LVDIE(0) | // Low-Voltage Detect Interrupt Enable
      PMC_LVDSC1_LVDRE(0);  // Low-Voltage Detect Reset Enable

   //! Frequency of Low Power Oscillator (LPO) Clock [~1kHz]
   static constexpr uint32_t system_low_power_clock = 1000UL;

   //! Default value for Low Voltage Detect Status And Control 2 register
   static constexpr uint32_t pmc_lvdsc2  = 
   #ifdef PMC_LVDSC2_LVWV
      PMC_LVDSC2_LVWV(0)   | // Low-Voltage Warning Voltage Select
   #endif
      PMC_LVDSC2_LVWIE(0);  // Low-Voltage Warning Interrupt Enable

   /**
    * Get LPO clock
    *
    * @return frequency in Hz as uint32_t
    */
   static constexpr uint32_t getLpoClock() {
      return system_low_power_clock;
   }

   #ifdef PMC_REGSC_BGEN
   //! Default value for Regulator Status And Control register
   static constexpr uint32_t pmc_regsc  = 
      PMC_REGSC_BGEN(0) | // Bandgap Enable In VLPx Operation
      PMC_REGSC_BGBE(0);  // Bandgap Buffer Enable   

   #endif
   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = PMC_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

};

/** 
 * End group PMC_Group
 * @}
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Abstraction for Analogue Input
 * @{
 */
#define USBDM_ADC0_IS_DEFINED
/**
 * Peripheral information for ADC, Analogue Input.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
#ifndef USBDM_ADC_CLOCK_SOURCES_DEFINED
#define USBDM_ADC_CLOCK_SOURCES_DEFINED
   /**
    * ADC input clock source.
    */
   enum AdcClockSource {
      AdcClockSource_Bus      = ADC_CFG1_ADICLK(0), //!< Bus Clock
      AdcClockSource_Busdiv2  = ADC_CFG1_ADICLK(1), //!< Bus Clock / 2
      AdcClockSource_Alt      = ADC_CFG1_ADICLK(2), //!< Alternate clock (ALTCLK)
      AdcClockSource_Asynch   = ADC_CFG1_ADICLK(3), //!< Asynchronous clock (ADACK Internal ADC clock source)
      AdcClockSource_Default  = AdcClockSource_Asynch
   };
#endif

class Adc0Info {
public:
   // Template:adc0_diff_a

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = ADC0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile ADC_Type &adc() {
      return *reinterpret_cast<ADC_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = ADC0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /**
    *  Get input clock frequency for ADC
    *  
    *  @param adcClockSource Clock source chosen for ADC
    *
    *  @return Frequency in Hz
    */
   static unsigned getInputClockFrequency(AdcClockSource adcClockSource) {
      switch (adcClockSource) {
         case AdcClockSource_Bus:
            return SystemBusClock;
         case AdcClockSource_Busdiv2:
            return SystemBusClock/2;
         case AdcClockSource_Alt:
            return  Osc0Info::getOscerClock();;
         case AdcClockSource_Asynch:
            return 2000000; // Actually varies with ADLPC/ADHSC
         default:
            return 0;
            break;
      }
   }

   /**
    *  Get input clock frequency for ADC
    *
    *  @return Frequency in Hz
    */
   static unsigned getInputClockFrequency() {
      return getInputClockFrequency(static_cast<AdcClockSource>(adc().CFG1 & ADC_CFG1_ADICLK_MASK));
   }

   //! Default resolution
   static constexpr uint32_t defaultAdcResolution = ADC_CFG1_MODE(2);

   //! Default value for ADCx_CFG1 register
   static constexpr uint32_t cfg1  = 
       ADC_CFG1_ADICLK(3)|
       ADC_CFG1_MODE(2)|
       ADC_CFG1_ADLSMP(0)|
       ADC_CFG1_ADIV(0)|
       ADC_CFG1_ADLPC(0);

   //! Default value for ADCx_CFG2 register
    static constexpr uint32_t cfg2  = 
       ADC_CFG2_MUXSEL_MASK | // Choose 'b' channels
       ADC_CFG2_ADLSTS(0)|
       ADC_CFG2_ADHSC(0)|
       ADC_CFG2_ADACKEN(0);

   //! Default value for ADCx_SC2 register
   static constexpr uint32_t sc2  =
       ADC_SC2_ACFE(0)|
       ADC_SC2_ACFGT(0)|
       ADC_SC2_ACREN(0)|
       ADC_SC2_REFSEL(0)|
       ADC_SC2_DMAEN(0)|
       ADC_SC2_ADTRG(0);

   //! Default value for ADCx_CV1 register
   static constexpr uint32_t cv1  = 0;

   //! Default value for ADCx_CV2 register
   static constexpr uint32_t cv2  = 0;

   /** 
    *  Enable clock to Adc0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableAdc0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK;
#endif
   }

   /** 
    *  Disable clock to Adc0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableAdc0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_ADC0_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 28;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: ADC0_SE0             = ADC0_DP0 (p7)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   1: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   3: ADC0_SE3             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: ADC0_SE4b            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: ADC0_SE5b            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: ADC0_SE6b            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   7: ADC0_SE7b            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   8: ADC0_SE8             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   9: ADC0_SE9             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  10: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  11: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  12: ADC0_SE12            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  13: ADC0_SE13            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  14: ADC0_SE14            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  15: ADC0_SE15            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  16: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  17: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  18: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  19: ADC0_SE19            = ADC0_DM0 (p8)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*  20: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  21: ADC0_SE21            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  22: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  23: ADC0_SE23            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  24: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  25: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*  26: ADC0_SE26            = TempSensor (Internal)          */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*  27: ADC0_SE27            = BandGap (Internal)             */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

#define USBDM_ADC0_INFODP_IS_DEFINED
   class InfoDP {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
            /*   0: ADC0_DP0             = ADC0_DP0 (p7)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
            /*   1: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
            /*   2: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
            /*   3: ADC0_DP3             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

#define USBDM_ADC0_INFODM_IS_DEFINED
   class InfoDM {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
            /*   0: ADC0_DM0             = ADC0_DM0 (p8)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
            /*   1: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
            /*   2: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
            /*   3: ADC0_DM3             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End group ADC_Group
 * @}
 */
/**
 * @addtogroup CMP_Group CMP, Analogue Comparator
 * @brief Abstraction for Analogue Comparator
 * @{
 */
#define USBDM_CMP0_IS_DEFINED
/**
 * Peripheral information for CMP, Analogue Comparator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Cmp0Info {
public:
   // Template:cmp0

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = CMP0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile CMP_Type &cmp() {
      return *reinterpret_cast<CMP_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Pin number in Info table for comparator output
   static constexpr int outputPin  = 8;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! CMP Control Register 0
   static constexpr uint32_t cr0 =
      CMP_CR0_FILTER_CNT(0)     | // Filter Sample Count
      CMP_CR0_HYSTCTR(0);         // Comparator hard block hysteresis control

   #ifndef CMP_CR1_TRIGM
   #define CMP_CR1_TRIGM(x) 0
   #endif

   //! CMP Control Register 1
   static constexpr uint32_t cr1 =
      CMP_CR1_SE(0)    | // Sample Enable
      CMP_CR1_WE(0)    | // Windowing Enable
      CMP_CR1_TRIGM(0) | // Trigger Mode Enable
      CMP_CR1_PMODE(0) | // Power mode Select
      CMP_CR1_INV(0)   | // Comparator Invert
      CMP_CR1_COS(0)   | // Comparator Output Select
      CMP_CR1_OPE(0);    // Comparator Output Pin Enable

   //! CMP Filter Period Register
   static constexpr uint32_t fpr =
      CMP_FPR_FILT_PER(0); // Filter Sample Period

   //! CMP Status and Control Register
   static constexpr uint32_t scr =
   #ifdef CMP_SCR_DMAEN
      CMP_SCR_DMAEN(0) | // DMA Enable Control
   #endif
      CMP_SCR_IER(0) | // Comparator Interrupt Enable Rising
      CMP_SCR_IEF(0);  // Comparator Interrupt Enable Falling

   //! DAC Control Register
   static constexpr uint32_t daccr =
      CMP_DACCR_VRSEL(0); // Supply Voltage Reference Source Select

   //! MUX Control Register
   static constexpr uint32_t muxcr =
      CMP_MUXCR_PSEL(0)| // Plus Input Mux Control
      CMP_MUXCR_MSEL(0); // Minus Input Mux Control

   /** 
    *  Enable clock to Cmp0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableCmp0Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_CMP_MASK;
#endif
   }

   /** 
    *  Disable clock to Cmp0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableCmp0Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_CMP_MASK;
#endif
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = CMP0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: CMP0_IN0             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: CMP0_IN1             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: CMP0_IN2             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: CMP0_IN3             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   5: CMP0_IN5             = VREF_OUT (p13)                 */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   6: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   8: CMP0_OUT             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_CMP1_IS_DEFINED
/**
 * Peripheral information for CMP, Analogue Comparator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Cmp1Info {
public:
   // Template:cmp0

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = CMP1_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile CMP_Type &cmp() {
      return *reinterpret_cast<CMP_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Pin number in Info table for comparator output
   static constexpr int outputPin  = 8;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! CMP Control Register 0
   static constexpr uint32_t cr0 =
      CMP_CR0_FILTER_CNT(0)     | // Filter Sample Count
      CMP_CR0_HYSTCTR(0);         // Comparator hard block hysteresis control

   #ifndef CMP_CR1_TRIGM
   #define CMP_CR1_TRIGM(x) 0
   #endif

   //! CMP Control Register 1
   static constexpr uint32_t cr1 =
      CMP_CR1_SE(0)    | // Sample Enable
      CMP_CR1_WE(0)    | // Windowing Enable
      CMP_CR1_TRIGM(0) | // Trigger Mode Enable
      CMP_CR1_PMODE(0) | // Power mode Select
      CMP_CR1_INV(0)   | // Comparator Invert
      CMP_CR1_COS(0)   | // Comparator Output Select
      CMP_CR1_OPE(0);    // Comparator Output Pin Enable

   //! CMP Filter Period Register
   static constexpr uint32_t fpr =
      CMP_FPR_FILT_PER(0); // Filter Sample Period

   //! CMP Status and Control Register
   static constexpr uint32_t scr =
   #ifdef CMP_SCR_DMAEN
      CMP_SCR_DMAEN(0) | // DMA Enable Control
   #endif
      CMP_SCR_IER(0) | // Comparator Interrupt Enable Rising
      CMP_SCR_IEF(0);  // Comparator Interrupt Enable Falling

   //! DAC Control Register
   static constexpr uint32_t daccr =
      CMP_DACCR_VRSEL(0); // Supply Voltage Reference Source Select

   //! MUX Control Register
   static constexpr uint32_t muxcr =
      CMP_MUXCR_PSEL(0)| // Plus Input Mux Control
      CMP_MUXCR_MSEL(0); // Minus Input Mux Control

   /** 
    *  Enable clock to Cmp1
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableCmp1Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_CMP_MASK;
#endif
   }

   /** 
    *  Disable clock to Cmp1
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableCmp1Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_CMP_MASK;
#endif
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = CMP1_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: CMP1_IN0             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: CMP1_IN1             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   3: CMP1_IN3             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   5: CMP1_IN5             = VREF_OUT (p13)                 */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   6: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   7: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   8: CMP1_OUT             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group CMP_Group
 * @}
 */
/**
 * @addtogroup CMT_Group CMT, Carrier Modulator Transmitter
 * @brief Abstraction for Carrier Modulator Transmitter
 * @{
 */
#define USBDM_CMT_IS_DEFINED
/**
 * Peripheral information for CMT, Carrier Modulator Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class CmtInfo {
public:
   // Template:cmt_0

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = CMT_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile CMT_Type &cmt() {
      return *reinterpret_cast<CMT_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = CMT_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Cmt
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableCmtClock();
#else
      SIM->SCGC4 |= SIM_SCGC4_CMT_MASK;
#endif
   }

   /** 
    *  Disable clock to Cmt
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableCmtClock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_CMT_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: CMT_IRO              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group CMT_Group
 * @}
 */
/**
 * @addtogroup Control_Group CONTROL, Control
 * @brief Abstraction for Control
 * @{
 */
#define USBDM_CONTROL_IS_DEFINED
/**
 * Peripheral information for CONTROL, Control.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class ControlInfo {
public:
   // Template:control

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 10;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: RESET_b              = RESET_b (p26)                  */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   1: JTAG_TCLK            = PTA0 (p17)                     */  { PortAInfo,  GPIOA_BasePtr,  0,       PORT_PCR_MUX(7)|defaultPcrValue  },
         /*   2: SWD_CLK              = PTA0 (p17)                     */  { PortAInfo,  GPIOA_BasePtr,  0,       PORT_PCR_MUX(7)|defaultPcrValue  },
         /*   3: JTAG_TDI             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: JTAG_TDO             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: TRACE_SWO            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: JTAG_TMS             = PTA3 (p20)                     */  { PortAInfo,  GPIOA_BasePtr,  3,       PORT_PCR_MUX(7)|defaultPcrValue  },
         /*   7: SWD_DIO              = PTA3 (p20)                     */  { PortAInfo,  GPIOA_BasePtr,  3,       PORT_PCR_MUX(7)|defaultPcrValue  },
         /*   8: NMI_b                = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   9: JTAG_TRST_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCLR = pcrValue|PORT_PCR_MUX(7)|PORT_GPCLR_GPWE(0x0009UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x9U);
   }

};

/** 
 * End group Control_Group
 * @}
 */
/**
 * @addtogroup CRC_Group CRC, Cyclic Redundancy Check
 * @brief Abstraction for Cyclic Redundancy Check
 * @{
 */
#define USBDM_CRC0_IS_DEFINED
/**
 * Peripheral information for CRC, Cyclic Redundancy Check.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Crc0Info {
public:
   // Template:crc0_0x40032000

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = CRC0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile CRC_Type &crc() {
      return *reinterpret_cast<CRC_Type *>(baseAddress);
   }

   static constexpr uint32_t gpoly =  0;

   /** 
    *  Enable clock to Crc0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableCrc0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_CRC_MASK;
#endif
   }

   /** 
    *  Disable clock to Crc0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableCrc0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_CRC_MASK;
#endif
   }

};

/** 
 * End group CRC_Group
 * @}
 */
/**
 * @addtogroup CONSOLE_Group Console, Console Interface
 * @brief Abstraction for Console Interface
 * @{
 */
/** 
 * End group CONSOLE_Group
 * @}
 */
/**
 * @addtogroup DMA_Group DMA, Direct Memory Access (DMA)
 * @brief Abstraction for Direct Memory Access (DMA)
 * @{
 */
#define USBDM_DMA0_IS_DEFINED
/**
 * Peripheral information for DMA, Direct Memory Access (DMA).
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Dma0Info {
public:
   // Template:dma0_4ch

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = DMA0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile DMA_Type &dma() {
      return *reinterpret_cast<DMA_Type *>(baseAddress);
   }

   /** 
    *  Enable clock to Dma0
    */
   static void enableClock() {
#ifdef PCC
      // DMA is always clocked
#else
      SIM->SCGC7 |= SIM_SCGC7_DMA_MASK;
#endif
   }

   /** 
    *  Disable clock to Dma0
    */
   static void disableClock() {
#ifdef PCC
      // DMA is always clocked
#else
      SIM->SCGC7 &= ~SIM_SCGC7_DMA_MASK;
#endif
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = DMA0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   //! Number of DMA channels implemented
   static constexpr unsigned NumChannels = 4;

   //! Number of DMA vectors implemented
   static constexpr unsigned NumVectors = 4;

};

/** 
 * End group DMA_Group
 * @}
 */
/**
 * @addtogroup DMAMUX_Group DMAMUX, Direct Memory Access (DMA)
 * @brief Abstraction for Direct Memory Access (DMA)
 * @{
 */
#define USBDM_DMAMUX0_IS_DEFINED
/**
 * Peripheral information for DMAMUX, Direct Memory Access (DMA).
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Dmamux0Info {
public:
   // Template:dmamux0_4ch_trig_mk20d5

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = DMAMUX0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile DMAMUX_Type &dmamux() {
      return *reinterpret_cast<DMAMUX_Type *>(baseAddress);
   }

   /** 
    *  Enable clock to Dmamux0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableDmamux0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_DMAMUX0_MASK;
#endif
   }

   /** 
    *  Disable clock to Dmamux0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableDmamux0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_DMAMUX0_MASK;
#endif
   }

   // Number of DMA channels implemented
   static constexpr unsigned NumChannels = 4;

   static constexpr uint8_t chcfg0_source  = DMAMUX_CHCFG_SOURCE(0);
   static constexpr uint8_t chcfg1_source  = DMAMUX_CHCFG_SOURCE(0);
   static constexpr uint8_t chcfg2_source  = DMAMUX_CHCFG_SOURCE(0);
   static constexpr uint8_t chcfg3_source  = DMAMUX_CHCFG_SOURCE(0);
};

/** 
 * End group DMAMUX_Group
 * @}
 */
/**
 * @addtogroup EWM_Group EWM, External Watchdog Monitor
 * @brief Abstraction for External Watchdog Monitor
 * @{
 */
#define USBDM_EWM_IS_DEFINED
/**
 * Peripheral information for EWM, External Watchdog Monitor.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class EwmInfo {
public:
   // Template:ewm_int

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = EWM_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile EWM_Type &ewm() {
      return *reinterpret_cast<EWM_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = EWM_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Ewm
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableEwmClock();
#else
      SIM->SCGC4 |= SIM_SCGC4_EWM_MASK;
#endif
   }

   /** 
    *  Disable clock to Ewm
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableEwmClock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_EWM_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: EWM_IN               = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: EWM_OUT_b            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group EWM_Group
 * @}
 */
/**
 * @addtogroup FTFL_Group FTFL, Flash Memory Module
 * @brief Abstraction for Flash Memory Module
 * @{
 */
#define USBDM_FTFL_IS_DEFINED
/**
 * Peripheral information for FTFL, Flash Memory Module.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class FtflInfo {
public:
   // Template:ftfl_32k_flexrom

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = FTFL_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile FTFL_Type &ftfl() {
      return *reinterpret_cast<FTFL_Type *>(baseAddress);
   }

   struct EepromSizes {
      const uint16_t size;    // EEPROM size
      const uint8_t  value;   // Value to select size
   };

   /** EEPROM Data Set Size Field */
   static constexpr EepromSizes eepromSizes[] = {
         // Size  Value
         {  32,   0x09, },
         {  64,   0x08, },
         {  128,  0x07, },
         {  256,  0x06, },
         {  512,  0x05, },
         {  1024, 0x04, },
         {  2048, 0x03, },
   };

   struct PartitionInformation {
      const uint32_t flashSize;     //! Remaining data flash
      const uint32_t eeepromSize;   //! Flash allocated to EEPROM backing store
      const uint8_t  value;         //! Partition value
   };

   /** Flash partition information */
   static constexpr PartitionInformation partitionInformation[] {
         // Flash   Backing   Value
         { 32*1024, 0*1024 ,  0xFF},
         { 24*1024, 8*1024 ,  0x01},
         { 16*1024, 16*1024,  0x0A},
         { 8*1024,  24*1024,  0x09},
         { 0*1024,  32*1024,  0x08},
   };

   /** Selects EEPROM size */
   enum EepromSel {
      EepromSel_32Bytes,
      EepromSel_64Bytes,
      EepromSel_128Bytes,
      EepromSel_256Bytes,
      EepromSel_512Bytes,
      EepromSel_1KBytes,
      EepromSel_2KBytes,
   };

   /** Selects division of FlexNVM between flash and EEPROM backing storage */
   enum PartitionSel {
      PartitionSel_flash32K_eeprom0K,
      PartitionSel_flash24K_eeprom8K,
      PartitionSel_flash16K_eeprom16K,
      PartitionSel_flash8K_eeprom24K,
      PartitionSel_flash0K_eeprom32K,
   
      // All EEPROM
      PartitionSel_flash0K_eeprom_all = PartitionSel_flash0K_eeprom32K,
   };

   /**
    * Selects division of the EEPROM
    * Not supported on this device
    */
   enum SplitSel {
      // Not supported
      SplitSel_disabled=0x30,
   };

   //! FlexNVM - EEPROM size
   static constexpr EepromSel eepromSel = EepromSel_2KBytes;

   //! FlexNVM - Flash EEPROM partition
   static constexpr PartitionSel partitionSel = PartitionSel_flash0K_eeprom32K;

   //! FlexNVM - EEPROM partition - not available
   static constexpr SplitSel partitionSplit = SplitSel_disabled;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = FTFL_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Ftfl
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableFtflClock();
#else
      SIM->SCGC6 |= SIM_SCGC6_FTFL_MASK;
#endif
   }

   /** 
    *  Disable clock to Ftfl
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableFtflClock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_FTFL_MASK;
#endif
   }

};

/** 
 * End group FTFL_Group
 * @}
 */
/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Abstraction for PWM, Input capture and Output compare
 * @{
 */
#define USBDM_FTM_IS_DEFINED
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class FtmInfo {
public:
   // Template:ftm

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: FTM_CLKIN0           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: FTM_CLKIN1           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_FTM0_IS_DEFINED
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Ftm0Info {
public:
   // Template:ftm0_8ch

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! Number of channels implemented
   static constexpr unsigned NumChannels = 8;

   //! Number of channel event vectors implemented
   static constexpr unsigned NumChannelVectors = 1;

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = FTM0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile FTM_Type &ftm() {
      return *reinterpret_cast<FTM_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Timer external input frequency 
   static constexpr uint32_t ftmExternalClock =  0;

   //! Default Timer Modulo
   static constexpr uint32_t modulo = FTM_MOD_MOD(10000);

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)| // Centre-Aligned PWM Select
       FTM_SC_CLKS(1)|  // Clock Mode Selection
       FTM_SC_TOIE(0)|  // Timer Overflow Interrupt Enable
       FTM_SC_PS(0);    // Prescale Factor Selection 

   //! Default value for EXTTRIG) register
   static constexpr uint32_t exttrig  = 
       0x0|                              // External Trigger Enable
       FTM_EXTTRIG_INITTRIGEN(0);    // Initialization Trigger Enable 

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = FTM0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** Minimum resolution for PWM interval */
   static constexpr uint32_t minimumResolution=1?100:0;

   /** Minimum usable interval in ticks */      
   static constexpr uint32_t minimumInterval=1?20:0;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(ftm().SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): return 0;
      case FTM_SC_CLKS(1): return SystemBusClock;
      case FTM_SC_CLKS(2): return SystemMcgffClock;
      case FTM_SC_CLKS(3): return ftmExternalClock;
      }
   }

   /** 
    *  Enable clock to Ftm0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableFtm0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_FTM0_MASK;
#endif
   }

   /** 
    *  Disable clock to Ftm0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableFtm0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_FTM0_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 8;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: FTM0_CH0             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: FTM0_CH1             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: FTM0_CH2             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: FTM0_CH3             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: FTM0_CH4             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: FTM0_CH5             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: FTM0_CH6             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   7: FTM0_CH7             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

#define USBDM_FTM0_INFOFAULT_IS_DEFINED
   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
            /*   0: FTM0_FLT0            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
            /*   1: FTM0_FLT1            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
            /*   2: FTM0_FLT2            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
            /*   3: FTM0_FLT3            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

#define USBDM_FTM1_IS_DEFINED
/**
 * Peripheral information for FTM, PWM, Input capture and Output compare.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Ftm1Info {
public:
   // Template:ftm1_2ch

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! Number of channels implemented
   static constexpr unsigned NumChannels = 2;

   //! Number of channel event vectors implemented
   static constexpr unsigned NumChannelVectors = 1;

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = FTM1_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile FTM_Type &ftm() {
      return *reinterpret_cast<FTM_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Timer external input frequency 
   static constexpr uint32_t ftmExternalClock =  0;

   //! Default Timer Modulo
   static constexpr uint32_t modulo = FTM_MOD_MOD(10000);

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       FTM_SC_CPWMS(0)| // Centre-Aligned PWM Select
       FTM_SC_CLKS(1)|  // Clock Mode Selection
       FTM_SC_TOIE(0)|  // Timer Overflow Interrupt Enable
       FTM_SC_PS(0);    // Prescale Factor Selection 

   //! Default value for EXTTRIG) register
   static constexpr uint32_t exttrig  = 
       0x0|                              // External Trigger Enable
       FTM_EXTTRIG_INITTRIGEN(0);    // Initialization Trigger Enable 

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = FTM1_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** Minimum resolution for PWM interval */
   static constexpr uint32_t minimumResolution=1?100:0;

   /** Minimum usable interval in ticks */      
   static constexpr uint32_t minimumInterval=1?20:0;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(ftm().SC&FTM_SC_CLKS_MASK) {
      default:
      case FTM_SC_CLKS(0): return 0;
      case FTM_SC_CLKS(1): return SystemBusClock;
      case FTM_SC_CLKS(2): return SystemMcgffClock;
      case FTM_SC_CLKS(3): return ftmExternalClock;
      }
   }

   /** 
    *  Enable clock to Ftm1
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableFtm1Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_FTM1_MASK;
#endif
   }

   /** 
    *  Disable clock to Ftm1
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableFtm1Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_FTM1_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: FTM1_CH0             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: FTM1_CH1             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

#define USBDM_FTM1_INFOFAULT_IS_DEFINED
   class InfoFAULT {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 1;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
            /*   0: FTM1_FLT0            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

#define USBDM_FTM1_INFOQUAD_IS_DEFINED
   class InfoQUAD {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 2;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
            /*   0: FTM1_QD_PHA          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
            /*   1: FTM1_QD_PHB          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
         (void)pcrValue;
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
      }

   }; 

};

/** 
 * End group FTM_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Abstraction for Digital Input/Output
 * @{
 */
#define USBDM_GPIOA_IS_DEFINED
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class GpioAInfo {
public:
   // Template:gpioa_0x400ff000

   //! Describes the port/gpio
   static constexpr PinInfo pinInfo { PortAInfo, GPIOA_BasePtr, 0, GPIO_DEFAULT_PCR  };

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

};

#define USBDM_GPIOB_IS_DEFINED
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class GpioBInfo {
public:
   // Template:gpioa_0x400ff000

   //! Describes the port/gpio
   static constexpr PinInfo pinInfo { PortBInfo, GPIOB_BasePtr, 0, GPIO_DEFAULT_PCR  };

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

};

#define USBDM_GPIOC_IS_DEFINED
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class GpioCInfo {
public:
   // Template:gpioa_0x400ff000

   //! Describes the port/gpio
   static constexpr PinInfo pinInfo { PortCInfo, GPIOC_BasePtr, 0, GPIO_DEFAULT_PCR  };

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

};

#define USBDM_GPIOD_IS_DEFINED
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class GpioDInfo {
public:
   // Template:gpioa_0x400ff000

   //! Describes the port/gpio
   static constexpr PinInfo pinInfo { PortDInfo, GPIOD_BasePtr, 0, GPIO_DEFAULT_PCR  };

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

};

#define USBDM_GPIOE_IS_DEFINED
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class GpioEInfo {
public:
   // Template:gpioa_0x400ff000

   //! Describes the port/gpio
   static constexpr PinInfo pinInfo { PortEInfo, GPIOE_BasePtr, 0, GPIO_DEFAULT_PCR  };

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

};

/** 
 * End group GPIO_Group
 * @}
 */
/**
 * @addtogroup I2C_Group I2C, Inter-Integrated-Circuit Interface
 * @brief Abstraction for Inter-Integrated-Circuit Interface
 * @{
 */
#define USBDM_I2C0_IS_DEFINED
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class I2c0Info {
public:
   // Template:i2c0_mk10d5

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = I2C0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile I2C_Type &i2c() {
      return *reinterpret_cast<I2C_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = I2C_DEFAULT_PCR;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = true;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = I2C0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
      return SystemBusClock;
   }

   /** 
    *  Enable clock to I2c0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableI2c0Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_I2C0_MASK;
#endif
   }

   /** 
    *  Disable clock to I2c0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableI2c0Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_I2C0_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: I2C0_SCL             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: I2C0_SDA             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group I2C_Group
 * @}
 */
/**
 * @addtogroup I2S_Group I2S, Synchronous Audio Interface
 * @brief Abstraction for Synchronous Audio Interface
 * @{
 */
#define USBDM_I2S0_IS_DEFINED
/**
 * Peripheral information for I2S, Synchronous Audio Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class I2s0Info {
public:
   // Template:i2s0_2ch

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = I2S0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile I2S_Type &i2s() {
      return *reinterpret_cast<I2S_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = I2S_DEFAULT_PCR;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = true;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = I2S0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   /** 
    *  Enable clock to I2s0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableI2s0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_I2S_MASK;
#endif
   }

   /** 
    *  Disable clock to I2s0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableI2s0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_I2S_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 8;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: I2S0_MCLK            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: I2S0_RX_BCLK         = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: I2S0_RX_FS           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: I2S0_TX_BCLK         = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: I2S0_TX_FS           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: I2S0_TXD0            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   7: I2S0_RXD0            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group I2S_Group
 * @}
 */
/**
 * @addtogroup LLWU_Group LLWU, Low-leakage Wake-up Unit
 * @brief Abstraction for Low-leakage Wake-up Unit
 * @{
 */
#define USBDM_LLWU_IS_DEFINED
/**
 * Peripheral information for LLWU, Low-leakage Wake-up Unit.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class LlwuInfo {
public:
   // Template:llwu_pe4_filt2_rst_mk20d5

   // Module wake ups
   static constexpr uint8_t me =  
      LLWU_ME_WUME0(0) |  // LPTMR
      LLWU_ME_WUME1(0) |  // CMP0
      LLWU_ME_WUME2(0) |  // CMP1
      LLWU_ME_WUME3(0) |  // CMP2/3 (if present)
      LLWU_ME_WUME4(0) |  // TSI0 (if present)
      LLWU_ME_WUME5(0) |  // RTC Alarm
      LLWU_ME_WUME6(0) |  //
      LLWU_ME_WUME7(0);   // RTC Seconds

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = LLWU_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile LLWU_Type &llwu() {
      return *reinterpret_cast<LLWU_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   // LLWU Pin Enable registers
   static constexpr uint8_t pe1 = 
      LLWU_PE1_WUPE0(0)|   // LLWUP 0
      LLWU_PE1_WUPE1(0)|   // LLWUP 1
      LLWU_PE1_WUPE2(0)|   // LLWUP 2
      LLWU_PE1_WUPE3(0);   // LLWUP 3 

   static constexpr uint8_t pe2 = 
      LLWU_PE2_WUPE4(0)|   // LLWUP 4
      LLWU_PE2_WUPE5(0)|   // LLWUP 5
      LLWU_PE2_WUPE6(0)|   // LLWUP 6
      LLWU_PE2_WUPE7(0);   // LLWUP 7 

   static constexpr uint8_t pe3 = 
      LLWU_PE3_WUPE8(0)|   // LLWUP 8
      LLWU_PE3_WUPE9(0)|   // LLWUP 9
      LLWU_PE3_WUPE10(0)|  // LLWUP 10
      LLWU_PE3_WUPE11(0);  // LLWUP 11 

   static constexpr uint8_t pe4 = 
      LLWU_PE4_WUPE12(0)|  // LLWUP 12
      LLWU_PE4_WUPE13(0)|  // LLWUP 13
      LLWU_PE4_WUPE14(0)|  // LLWUP 14
      LLWU_PE4_WUPE15(0);  // LLWUP 15 

   // Pin Filter 1 register
   static constexpr uint8_t filt1 = 
      LLWU_FILT_FILTE(0) |   // Digital Filter On External Pin
      LLWU_FILT_FILTSEL(0);  // Filter Pin Select

   // Pin Filter 2 register
   static constexpr uint8_t filt2 =
      LLWU_FILT_FILTE(0) |   // Digital Filter On External Pin
      LLWU_FILT_FILTSEL(0);  // Filter Pin Select

   // LLWU Reset Enable register
   static constexpr uint8_t rst =
      LLWU_RST_LLRSTE(1) |  // Low-Leakage Mode RESET Enable
      LLWU_RST_RSTFILT(0);  // Digital Filter On RESET Pin

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = LLWU_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   //! Number of signals available in info table
   static constexpr int numSignals  = 16;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: LLWU_P0              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   2: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   3: LLWU_P3              = PTA4 (p21)                     */  { PortAInfo,  GPIOA_BasePtr,  4,       PORT_PCR_MUX(1)|defaultPcrValue  },
         /*   4: LLWU_P4              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: LLWU_P5              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: LLWU_P6              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   7: LLWU_P7              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   8: LLWU_P8              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   9: LLWU_P9              = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  10: LLWU_P10             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  11: LLWU_P11             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  12: LLWU_P12             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  13: LLWU_P13             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  14: LLWU_P14             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  15: LLWU_P15             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCLR = pcrValue|PORT_PCR_MUX(1)|PORT_GPCLR_GPWE(0x0010UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x10U);
   }

};

/** 
 * End group LLWU_Group
 * @}
 */
/**
 * @addtogroup LPTMR_Group LPTMR, Low Power Timer
 * @brief Abstraction for Low Power Timer
 * @{
 */
#define USBDM_LPTMR0_IS_DEFINED
/**
 * Peripheral information for LPTMR, Low Power Timer.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Lptmr0Info {
public:
   // Template:lptmr0

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = LPTMR0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile LPTMR_Type &lptmr() {
      return *reinterpret_cast<LPTMR_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! Default Timer Compare value
   static constexpr uint32_t cmr = 65535;

   //! Default PSR value
   static constexpr uint32_t psr = 
      LPTMR_PSR_PRESCALE(0)|
      LPTMR_PSR_PBYP(0)|
      LPTMR_PSR_PCS(0);

   //! Default CSR value
   static constexpr uint32_t csr = 
      LPTMR_CSR_TIE(0)|
      LPTMR_CSR_TMS(0)|
      LPTMR_CSR_TFC(0)|
      LPTMR_CSR_TPP(0)|
      LPTMR_CSR_TPS(0);

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = LPTMR0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as an uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(lptmr().PSR&LPTMR_PSR_PCS_MASK) {
      default:
      case LPTMR_PSR_PCS(0): return McgInfo::getMcgIrClock();
      case LPTMR_PSR_PCS(1): return PmcInfo::getLpoClock();
      case LPTMR_PSR_PCS(2): return SimInfo::getErc32kClock();
      case LPTMR_PSR_PCS(3): return Osc0Info::getOscerClock();
      }
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      float freq = getInputClockFrequency();
      if (lptmr().PSR&LPTMR_PSR_PBYP_MASK) {
         return freq;
      }
      return freq/(1<<(((lptmr().PSR&LPTMR_PSR_PRESCALE_MASK)>>LPTMR_PSR_PRESCALE_SHIFT)+1));
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      uint32_t freq = getInputClockFrequency();
      if (lptmr().PSR&LPTMR_PSR_PBYP_MASK) {
         return freq;
      }
      return freq/(1<<(((lptmr().PSR&LPTMR_PSR_PRESCALE_MASK)>>LPTMR_PSR_PRESCALE_SHIFT)+1));
   }

   /** 
    *  Enable clock to Lptmr0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableLptmr0Clock();
#else
      SIM->SCGC5 |= SIM_SCGC5_LPTMR_MASK;
#endif
   }

   /** 
    *  Disable clock to Lptmr0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableLptmr0Clock();
#else
      SIM->SCGC5 &= ~SIM_SCGC5_LPTMR_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 3;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: --                   = --                             */  { NoPortInfo, 0,         INVALID_PCR,  0 },
         /*   1: LPTMR0_ALT1          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: LPTMR0_ALT2          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group LPTMR_Group
 * @}
 */
/**
 * @addtogroup MCM_Group MCM, Miscellaneous Control Module
 * @brief Abstraction for Miscellaneous Control Module
 * @{
 */
#define USBDM_MCM_IS_DEFINED
/**
 * Peripheral information for MCM, Miscellaneous Control Module.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class McmInfo {
public:
   // Template:mcm_mk11d5

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = MCM_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile MCM_Type &mcm() {
      return *reinterpret_cast<MCM_Type *>(baseAddress);
   }

};

/** 
 * End group MCM_Group
 * @}
 */
/**
 * @addtogroup PDB_Group PDB, Programmable Delay Block
 * @brief Abstraction for Programmable Delay Block
 * @{
 */
#define USBDM_PDB0_IS_DEFINED
/**
 * Peripheral information for PDB, Programmable Delay Block.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Pdb0Info {
public:
   // Template:pdb0_1ch_2pt_0dac_2po

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = PDB0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile PDB_Type &pdb() {
      return *reinterpret_cast<PDB_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   static constexpr uint32_t pdb_sc = 
      PDB_SC_MULT(0) |      // Multiplication Factor Select for Prescaler
      PDB_SC_PDBIE(0) |     // Interrupt Enable
      PDB_SC_TRGSEL(0) |    // Trigger Input Source Select
      PDB_SC_PRESCALER(0) | // Prescaler Divider Select
      PDB_SC_DMAEN(0) |     // DMA Enable
      PDB_SC_CONT(0) |     // Continuous Mode Enable
      PDB_SC_PDBEIE(0) |    // Sequence Error Interrupt Enable
      PDB_SC_LDMOD(0);      // Load Mode Select

   static constexpr uint32_t pdb_mod = 
      PDB_MOD_MOD(65535);  // PDB Modulus

   static constexpr uint32_t pdb_idly = 
      PDB_IDLY_IDLY(0);  // Counter Modulus

   struct PdbChannel {
      uint32_t c1;
      uint32_t dly0;
      uint32_t dly1;
   };

   // Number of PDB channels
   static constexpr size_t numChannels = 1;

   // Default values for channel registers
   static constexpr PdbChannel pdb_ch[numChannels] = {
   {                   // Channel[0] Control Register 1
      PDB_C1_BB(0x0) |   // Pre-Trigger Back-to-Back Operation Enable
      PDB_C1_TOS(0x0) |  // Pre-Trigger Output Select
      PDB_C1_EN(0x0),    // Pre-Trigger Enable
      PDB_DLY_DLY(0),  // Channel[0] pre-trigger delay 0
      PDB_DLY_DLY(0),  // Channel[0] pre-trigger delay 1
   },
   };

   // Number of DACs
   static constexpr size_t numDacs = 0;

   static constexpr uint32_t pdb_poen = 
      PDB_POEN_POEN(0x0);   // Pulse-Out Enable

   // Number of PDB pulse outputs
   static constexpr size_t numPulseOutputs = 2;

   static constexpr uint32_t pdb_podly[numPulseOutputs] = {
      // Pulse Output[0] Delays {
      PDB_PODLY_DLY1(0) |  // Delay 1
      PDB_PODLY_DLY2(0),   // Delay 2

      // Pulse Output[1] Delays
      PDB_PODLY_DLY1(0) |  // Delay 1
      PDB_PODLY_DLY2(0),   // Delay 2
   }; 

   /**
     * Get PDB clock frequency
     *
     * @return Frequency as a uint32_t in Hz
     */
   static __attribute__((always_inline)) uint32_t getInputClockFrequency() {
      return SystemBusClock;
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = PDB0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Pdb0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enablePdb0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_PDB_MASK;
#endif
   }

   /** 
    *  Disable clock to Pdb0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disablePdb0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_PDB_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: PDB0_EXTRG           = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group PDB_Group
 * @}
 */
/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Abstraction for Programmable Interrupt Timer
 * @{
 */
#define USBDM_PIT_IS_DEFINED
/**
 * Peripheral information for PIT, Programmable Interrupt Timer.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class PitInfo {
public:
   // Template:pit_4ch

   //! Number of PIT channels
   static constexpr uint32_t NumChannels  = 4;

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = PIT_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile PIT_Type &pit() {
      return *reinterpret_cast<PIT_Type *>(baseAddress);
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = PIT_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 1;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   //! Default value for PIT load value register
   static constexpr uint32_t pit_ldval  = 4799;

   //! PIT operation in debug mode
   static constexpr uint32_t mcr = 
      PIT_MCR_FRZ(0) |  // Freeze in debug mode
      PIT_MCR_MDIS(0);  // Disable

   /**
    * Get clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static __attribute__((always_inline)) uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   /** 
    *  Enable clock to Pit
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enablePitClock();
#else
      SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;
#endif
   }

   /** 
    *  Disable clock to Pit
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disablePitClock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_PIT_MASK;
#endif
   }

};

/** 
 * End group PIT_Group
 * @}
 */
/**
 * @addtogroup Power_Group POWER, Power
 * @brief Abstraction for Power
 * @{
 */
#define USBDM_POWER_IS_DEFINED
/**
 * Peripheral information for POWER, Power.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class PowerInfo {
public:
   // Template:power

   //! Number of signals available in info table
   static constexpr int numSignals  = 13;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: VBAT                 = VBAT (p16)                     */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   1: VDD1                 = VDD1 (p1)                      */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   2: VDD2                 = VDD2 (p22)                     */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   3: VDD3                 = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: VDDA                 = VDDA (p9)                      */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   5: VOUT33               = VOUT33 (p5)                    */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   6: VREFH                = VREFH (p10)                    */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   7: VREFL                = VREFL (p11)                    */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   8: VREGIN               = VREGIN (p6)                    */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   9: VSS1                 = VSS1 (p2)                      */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*  10: VSS2                 = VSS2 (p23)                     */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*  11: VSS3                 = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  12: VSSA                 = VSSA (p12)                     */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
   };

};

/** 
 * End group Power_Group
 * @}
 */
/**
 * @addtogroup RCM_Group RCM, Reset Control Module
 * @brief Abstraction for Reset Control Module
 * @{
 */
#define USBDM_RCM_IS_DEFINED
/**
 * Peripheral information for RCM, Reset Control Module.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class RcmInfo {
public:
   // Template:rcm_mk10d5

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = RCM_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile RCM_Type &rcm() {
      return *reinterpret_cast<RCM_Type *>(baseAddress);
   }

   //! Reset Pin Filter Control Register
   static constexpr uint8_t rcm_rpfc = 
      RCM_RPFC_RSTFLTSS(0)|   // Reset pin filter select in stop mode
      RCM_RPFC_RSTFLTSRW(0);  // Reset pin filter select in run and wait modes

   //! Reset pin filter bus clock select
   static constexpr uint8_t rcm_rpfw = 
      RCM_RPFW_RSTFLTSEL(0); 

};

/** 
 * End group RCM_Group
 * @}
 */
/**
 * @addtogroup SMC_Group SMC, System Mode Controller
 * @brief Abstraction for System Mode Controller
 * @{
 */
#define USBDM_SMC_IS_DEFINED
/**
 * Peripheral information for SMC, System Mode Controller.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class SmcInfo {
public:
   // Template:smc_mk10d5

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = SMC_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile SMC_Type &smc() {
      return *reinterpret_cast<SMC_Type *>(baseAddress);
   }

   // Power Mode Protection Register
   static constexpr uint8_t pmprot =  
#ifdef SMC_PMPROT_AHSRUN
      SMC_PMPROT_AHSRUN(0) |  // Allow High Speed Run mode
#endif
      SMC_PMPROT_AVLP(1) |  // Allow very low power modes
      SMC_PMPROT_ALLS(1) |  // Allow low leakage stop mode
      SMC_PMPROT_AVLLS(1);  // Allow very low leakage stop mode

#ifdef SMC_PMCTRL_LPWUI
   // Power Mode Control Register
   static constexpr uint8_t pmctrl =  
      SMC_PMCTRL_LPWUI(1);   // Low Power Wake Up on Interrupt

#endif

   // VLLS Control Register
   static constexpr uint8_t stopctrl =  
#ifdef SMC_STOPCTRL_PSTOPO
      SMC_STOPCTRL_PSTOPO(0) |  // Partial Stop Option (if present)
#endif

      SMC_STOPCTRL_PORPO(0) |  // POR Power Option
#ifdef SMC_STOPCTRL_LPOPO
      SMC_STOPCTRL_LPOPO(0) |  // POR Power Option (if present)
#endif

      SMC_STOPCTRL_VLLSM(3);   // LLS or VLLS Mode Control

};

/** 
 * End group SMC_Group
 * @}
 */
/**
 * @addtogroup SPI_Group SPI, Serial Peripheral Interface
 * @brief Abstraction for Serial Peripheral Interface
 * @{
 */
#define USBDM_SPI0_IS_DEFINED
/**
 * Peripheral information for SPI, Serial Peripheral Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Spi0Info {
public:
   // Template:spi0_mk_pcsis6

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = SPI0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile SPI_Type &spi() {
      return *reinterpret_cast<SPI_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = true;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = SPI0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Spi0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableSpi0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_SPI0_MASK;
#endif
   }

   /** 
    *  Disable clock to Spi0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableSpi0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_SPI0_MASK;
#endif
   }

   //! Default communication clock phase and clock polarity (CPHA+CPOL)
   static constexpr uint32_t mode = 
      SPI_CTAR_MODE(0);

   //! Default communication order (MSB/LSB first)
   static constexpr uint32_t lsbfe = 
      SPI_CTAR_LSBFE(0);

   static uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   //! Default speed (Hz)
   static constexpr uint32_t speed = 
      10000000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 8;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: SPI0_SCK             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: SPI0_SIN             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: SPI0_SOUT            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: SPI0_PCS0            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: SPI0_PCS1            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: SPI0_PCS2            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: SPI0_PCS3            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   7: SPI0_PCS4            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group SPI_Group
 * @}
 */
/**
 * @addtogroup TSI_Group TSI, Touch Sense Interface
 * @brief Abstraction for Touch Sense Interface
 * @{
 */
#define USBDM_TSI0_IS_DEFINED
/**
 * Peripheral information for TSI, Touch Sense Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Tsi0Info {
public:
   // Template:tsi0_mk

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = TSI0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile TSI_Type &tsi() {
      return *reinterpret_cast<TSI_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   static constexpr uint32_t tsi_gencs = \
      TSI_GENCS_STPE(0)       |  // TSI STOP Enable
      TSI_GENCS_STM(0)        |  // Scan Trigger Mode
      TSI_GENCS_ESOR(1)       |  // EOS or OOR Interrupt select
      TSI_GENCS_ERIE(0)       |  // Error Interrupt Enable
      TSI_GENCS_TSIIE(0)      |  // Touch Sensing Input Interrupt Module Enable
      TSI_GENCS_PS(3)         |  // Electrode Oscillator Prescaler
      TSI_GENCS_NSCN(8-1)     |  // Consecutive Scan number
      TSI_GENCS_LPSCNITV(9)   |  // Low-Power Mode Scan Interval
      TSI_GENCS_LPCLKS(0);       // Low-Power Mode Clock Source

   static constexpr uint32_t tsi_scanc = \
      TSI_SCANC_AMPSC(3)           |  // Active Mode Prescaler
      TSI_SCANC_AMCLKS(0)          |  // Active Mode Clock Source
      TSI_SCANC_SMOD(8)            |  // Scan Period Modulus
      TSI_SCANC_EXTCHRG((16/2)-1)  |  // External Oscillator Charge Current select
      TSI_SCANC_REFCHRG((16/2)-1);    // Reference Oscillator Charge Current select

   static constexpr uint32_t tsi_pen = \
      (0x0) |    // Pins enable channel as TSI inputs
      TSI_PEN_LPSP(0);    // Low Power Scan channel

   static constexpr uint32_t tsi_threshold = \
      TSI_THRESHOLD_LTHH(0) |   // Low Power Channel Low Threshold value
      TSI_THRESHOLD_HTHH(0);    // Low Power Channel High Threshold value

   /**
    * Get input clock when configured in Active mode
    * 
    * @return frequency on Hz
    */
   static uint32_t getInputClockFrequency() {
      switch(tsi().SCANC&TSI_SCANC_AMCLKS_MASK) {
         case TSI_SCANC_AMCLKS(0):  return 1000;
         case TSI_SCANC_AMCLKS(1):  return McgInfo::getMcgIrClock();
         case TSI_SCANC_AMCLKS(2):  return Osc0Info::getOscerClock();
      }
      return 0;
   }

   /**
    * Get input clock when configured in low power mode
    * 
    * @return frequency on Hz
    */
   static uint32_t getLowPowerInputClockFrequency() {
      switch(tsi().GENCS&TSI_GENCS_LPCLKS_MASK) {
         case TSI_GENCS_LPCLKS(0):  return 1000;
         case TSI_GENCS_LPCLKS(1):  return SimInfo::getErc32kClock();
      }
      return 0;
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = TSI0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Tsi0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableTsi0Clock();
#else
      SIM->SCGC5 |= SIM_SCGC5_TSI0_MASK;
#endif
   }

   /** 
    *  Disable clock to Tsi0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableTsi0Clock();
#else
      SIM->SCGC5 &= ~SIM_SCGC5_TSI0_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 16;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: TSI0_CH0             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: TSI0_CH1             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: TSI0_CH2             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: TSI0_CH3             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: TSI0_CH4             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   5: TSI0_CH5             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   6: TSI0_CH6             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   7: TSI0_CH7             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   8: TSI0_CH8             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   9: TSI0_CH9             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  10: TSI0_CH10            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  11: TSI0_CH11            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  12: TSI0_CH12            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  13: TSI0_CH13            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  14: TSI0_CH14            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*  15: TSI0_CH15            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group TSI_Group
 * @}
 */
/**
 * @addtogroup UART_Group UART, Universal Asynchronous Receiver/Transmitter
 * @brief Abstraction for Universal Asynchronous Receiver/Transmitter
 * @{
 */
#define USBDM_UART0_IS_DEFINED
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Uart0Info {
public:
   // Template:uart0_mk10d10_c7816_cea709

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = UART0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile UART_Type &uart() {
      return *reinterpret_cast<UART_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = UART0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Uart0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableUart0Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_UART0_MASK;
#endif
   }

   /** 
    *  Disable clock to Uart0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableUart0Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_UART0_MASK;
#endif
   }

   //! Indicates whether the UART needs a write to clear status errors
   static constexpr bool statusNeedsWrite = false;

   //! Default Baud rate used if not explicitly given
   static constexpr uint32_t defaultBaudRate = 115200;

   //! Default buffer size for receive queue when interrupt driven
   static constexpr unsigned receiveBufferSize = 50;

   //! Default buffer size for transmit queue when interrupt driven
   static constexpr unsigned transmitBufferSize = 50;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static inline uint32_t getInputClockFrequency() {
      return SimInfo::getUart0Clock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 5;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: UART0_TX             = PTA2 (p19)                     */  { PortAInfo,  GPIOA_BasePtr,  2,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   1: UART0_RX             = PTA1 (p18)                     */  { PortAInfo,  GPIOA_BasePtr,  1,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   2: UART0_RTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: UART0_CTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   4: UART0_COL_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCLR = pcrValue|PORT_PCR_MUX(2)|PORT_GPCLR_GPWE(0x0006UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x6U);
   }

};

#define USBDM_UART1_IS_DEFINED
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Uart1Info {
public:
   // Template:uart1_mk10d10

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = UART1_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile UART_Type &uart() {
      return *reinterpret_cast<UART_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = UART1_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Uart1
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableUart1Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_UART1_MASK;
#endif
   }

   /** 
    *  Disable clock to Uart1
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableUart1Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_UART1_MASK;
#endif
   }

   //! Indicates whether the UART needs a write to clear status errors
   static constexpr bool statusNeedsWrite = false;

   //! Default Baud rate used if not explicitly given
   static constexpr uint32_t defaultBaudRate = 115200;

   //! Default buffer size for receive queue when interrupt driven
   static constexpr unsigned receiveBufferSize = 50;

   //! Default buffer size for transmit queue when interrupt driven
   static constexpr unsigned transmitBufferSize = 50;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static inline uint32_t getInputClockFrequency() {
      return SimInfo::getUart1Clock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: UART1_TX             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: UART1_RX             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: UART1_RTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: UART1_CTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART2_IS_DEFINED
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Uart2Info {
public:
   // Template:uart1_mk10d10

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = UART2_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile UART_Type &uart() {
      return *reinterpret_cast<UART_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = UART2_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Uart2
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableUart2Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_UART2_MASK;
#endif
   }

   /** 
    *  Disable clock to Uart2
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableUart2Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_UART2_MASK;
#endif
   }

   //! Indicates whether the UART needs a write to clear status errors
   static constexpr bool statusNeedsWrite = false;

   //! Default Baud rate used if not explicitly given
   static constexpr uint32_t defaultBaudRate = 115200;

   //! Default buffer size for receive queue when interrupt driven
   static constexpr unsigned receiveBufferSize = 50;

   //! Default buffer size for transmit queue when interrupt driven
   static constexpr unsigned transmitBufferSize = 50;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static inline uint32_t getInputClockFrequency() {
      return SimInfo::getUart2Clock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: UART2_TX             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   1: UART2_RX             = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   2: UART2_RTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: UART2_CTS_b          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group UART_Group
 * @}
 */
/**
 * @addtogroup USB_Group USB, USB OTG Controller
 * @brief Abstraction for USB OTG Controller
 * @{
 */
#define USBDM_USB0_IS_DEFINED
/**
 * Peripheral information for USB, USB OTG Controller.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Usb0Info {
public:
   // Template:usb0_otg_c

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = USB0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile USB_Type &usb() {
      return *reinterpret_cast<USB_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = USB0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 1;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Usb0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableUsb0Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_USBOTG_MASK;
#endif
   }

   /** 
    *  Disable clock to Usb0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableUsb0Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_USBOTG_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: USB0_DM              = USB0_DM (p4)                   */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   1: USB0_DP              = USB0_DP (p3)                   */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
         /*   2: USB_CLKIN            = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
         /*   3: USB_SOF_OUT          = --                             */  { NoPortInfo, 0,         UNMAPPED_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group USB_Group
 * @}
 */
/**
 * @addtogroup USBDCD_Group USBDCD, USB Device Charger Detection
 * @brief Abstraction for USB Device Charger Detection
 * @{
 */
#define USBDM_USBDCD0_IS_DEFINED
/**
 * Peripheral information for USBDCD, USB Device Charger Detection.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Usbdcd0Info {
public:
   // Template:usbdcd0_v1_1

   using USBHSDCD_Type = USBDCD_Type;

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = USBDCD0_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile USBDCD_Type &usbdcd() {
      return *reinterpret_cast<USBDCD_Type *>(baseAddress);
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = USBDCD0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /** 
    *  Enable clock to Usbdcd0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableUsbdcd0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_USBDCD_MASK;
#endif
   }

   /** 
    *  Disable clock to Usbdcd0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableUsbdcd0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_USBDCD_MASK;
#endif
   }

};

/** 
 * End group USBDCD_Group
 * @}
 */
/**
 * @addtogroup VREF_Group VREF, Voltage Reference
 * @brief Abstraction for Voltage Reference
 * @{
 */
#define USBDM_VREF_IS_DEFINED
/**
 * Peripheral information for VREF, Voltage Reference.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class VrefInfo {
public:
   // Template:vref_c

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = VREF_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile VREF_Type &vref() {
      return *reinterpret_cast<VREF_Type *>(baseAddress);
   }

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   static constexpr uint8_t vref_trm = 
       VREF_TRM_CHOPEN(1) | // Chop oscillator enable
       VREF_TRM_TRIM(32);   // Trim bits 

   static constexpr uint8_t vref_sc = 
       VREF_SC_VREFEN(1) |   // Internal Voltage Reference enable
       VREF_SC_REGEN(1) |    // Regulator enable
       VREF_SC_ICOMPEN(1) |  // Second order curvature compensation enable
       VREF_SC_MODE_LV(1);   // Buffer Mode selection 

   /** 
    *  Enable clock to Vref
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableVrefClock();
#else
      SIM->SCGC4 |= SIM_SCGC4_VREF_MASK;
#endif
   }

   /** 
    *  Disable clock to Vref
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableVrefClock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_VREF_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioAddress     gpioBit  PCR value
         /*   0: VREF_OUT             = VREF_OUT (p13)                 */  { NoPortInfo, 0,         FIXED_NO_PCR, 0 },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group VREF_Group
 * @}
 */
/**
 * @addtogroup WDOG_Group WDOG, Watchdog Timer
 * @brief Abstraction for Watchdog Timer
 * @{
 */
#define USBDM_WDOG_IS_DEFINED
/**
 * Peripheral information for WDOG, Watchdog Timer.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class WdogInfo {
public:
   // Template:wdog_mk

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = WDOG_BasePtr;

   //! Hardware base pointer
   __attribute__((always_inline)) static volatile WDOG_Type &wdog() {
      return *reinterpret_cast<WDOG_Type *>(baseAddress);
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = WDOG_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr uint32_t irqLevel =  8;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(wdog().STCTRLH&WDOG_STCTRLH_CLKSRC_MASK) {
      default:
      case WDOG_STCTRLH_CLKSRC(0): return PmcInfo::getLpoClock(); // LPO
      case WDOG_STCTRLH_CLKSRC(1): return SystemBusClock;         // Alt = System Bus Clock
      }
   }

};

/** 
 * End group WDOG_Group
 * @}
 */
/** 
 * End group USBDM_Group
 * @}
 */

} // End namespace USBDM


#include "gpio.h"
#include "adc.h"
#include "ftm.h"

/**
 * Namespace enclosing USBDM classes
 */
namespace USBDM {

/**
 * @addtogroup USBDM_Group USBDM Peripheral Interface
 * @brief Hardware Peripheral Interface and library
 * @{
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Abstraction for Analogue Input
 * @{
 */
using Adc_p8               = const USBDM::Adc0::Channel<19>;
using Adc_p7               = const USBDM::Adc0::Channel<0>;
using Adc_Internal         = const USBDM::Adc0::Channel<27>;
//using Adc_Internal         = const USBDM::Adc0::Channel<26>;
/** 
 * End group ADC_Group
 * @}
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Abstraction for Digital Input/Output
 * @{
 */
using Gpio_p21             = const USBDM::GpioA<4>;
/** 
 * End group GPIO_Group
 * @}
 */
/** 
 * End group USBDM_Group
 * @}
 */

} // End namespace USBDM

/**
 *
 * @page PinSummary Pin Mapping
 *
 * @section PinsByPinName Pins by Pin Name
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  ADC0_DM0                 | ADC0_DM0/ADC0_SE19                          | p8                        | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC0_SE0                           | p7                        | -       
 *  BandGap                  | ADC0_SE27                                   | Internal                  | -       
 *  EXTAL32                  | EXTAL32                                     | p15                       | -       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | p17                       | SWD_CLK       
 *  PTA1                     | UART0_RX                                    | p18                       | SWD_Rx       
 *  PTA2                     | UART0_TX                                    | p19                       | SWD_Tx       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | p20                       | SWD_DIO       
 *  PTA4                     | GPIOA_4/LLWU_P3                             | p21                       | BOOT_BTN       
 *  PTA18                    | EXTAL0                                      | p24                       | 16 MHz Crystal       
 *  PTA19                    | XTAL0                                       | p25                       | 16 MHz Crystal       
 *  PTB0                     | -                                           | p27                       | -       
 *  PTB1                     | -                                           | p28                       | -       
 *  PTB2                     | -                                           | p29                       | -       
 *  PTB3                     | -                                           | p30                       | -       
 *  PTB16                    | -                                           | p31                       | -       
 *  PTB17                    | -                                           | p32                       | -       
 *  PTC0                     | -                                           | p33                       | -       
 *  PTC1                     | -                                           | p34                       | -       
 *  PTC2                     | -                                           | p35                       | -       
 *  PTC3                     | -                                           | p36                       | -       
 *  PTC4                     | -                                           | p37                       | -       
 *  PTC5                     | -                                           | p38                       | -       
 *  PTC6                     | -                                           | p39                       | -       
 *  PTC7                     | -                                           | p40                       | -       
 *  PTD0                     | -                                           | p41                       | -       
 *  PTD1                     | -                                           | p42                       | -       
 *  PTD2                     | -                                           | p43                       | -       
 *  PTD3                     | -                                           | p44                       | -       
 *  PTD4                     | -                                           | p45                       | -       
 *  PTD5                     | -                                           | p46                       | -       
 *  PTD6                     | -                                           | p47                       | -       
 *  PTD7                     | -                                           | p48                       | -       
 *  RESET_b                  | RESET_b                                     | p26                       | Reset       
 *  TempSensor               | ADC0_SE26                                   | Internal                  | -       
 *  USB0_DM                  | USB0_DM                                     | p4                        | USBDM       
 *  USB0_DP                  | USB0_DP                                     | p3                        | USBDP       
 *  VBAT                     | VBAT                                        | p16                       | Vdd       
 *  VDD1                     | VDD1                                        | p1                        | Vdd       
 *  VDD2                     | VDD2                                        | p22                       | Vdd       
 *  VDDA                     | VDDA                                        | p9                        | Vdd       
 *  VOUT33                   | VOUT33                                      | p5                        | Vdd       
 *  VREFH                    | VREFH                                       | p10                       | Vdd       
 *  VREFL                    | VREFL                                       | p11                       | Vss       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5                  | p13                       | Unused       
 *  VREGIN                   | VREGIN                                      | p6                        | 5V_Fused       
 *  VSS1                     | VSS1                                        | p2                        | Vss       
 *  VSS2                     | VSS2                                        | p23                       | Vss       
 *  VSSA                     | VSSA                                        | p12                       | Vss       
 *  XTAL32                   | XTAL32                                      | p14                       | Unused       
 *
 *
 * @section PinsByLocation Pins by Location
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  TempSensor               | ADC0_SE26                                   | Internal                  | -       
 *  VDD1                     | VDD1                                        | p1                        | Vdd       
 *  VSS1                     | VSS1                                        | p2                        | Vss       
 *  USB0_DP                  | USB0_DP                                     | p3                        | USBDP       
 *  USB0_DM                  | USB0_DM                                     | p4                        | USBDM       
 *  VOUT33                   | VOUT33                                      | p5                        | Vdd       
 *  VREGIN                   | VREGIN                                      | p6                        | 5V_Fused       
 *  ADC0_DP0                 | ADC0_DP0/ADC0_SE0                           | p7                        | -       
 *  ADC0_DM0                 | ADC0_DM0/ADC0_SE19                          | p8                        | -       
 *  VDDA                     | VDDA                                        | p9                        | Vdd       
 *  VREFH                    | VREFH                                       | p10                       | Vdd       
 *  VREFL                    | VREFL                                       | p11                       | Vss       
 *  VSSA                     | VSSA                                        | p12                       | Vss       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5                  | p13                       | Unused       
 *  XTAL32                   | XTAL32                                      | p14                       | Unused       
 *  EXTAL32                  | EXTAL32                                     | p15                       | -       
 *  VBAT                     | VBAT                                        | p16                       | Vdd       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | p17                       | SWD_CLK       
 *  PTA1                     | UART0_RX                                    | p18                       | SWD_Rx       
 *  PTA2                     | UART0_TX                                    | p19                       | SWD_Tx       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | p20                       | SWD_DIO       
 *  PTA4                     | GPIOA_4/LLWU_P3                             | p21                       | BOOT_BTN       
 *  VDD2                     | VDD2                                        | p22                       | Vdd       
 *  VSS2                     | VSS2                                        | p23                       | Vss       
 *  PTA18                    | EXTAL0                                      | p24                       | 16 MHz Crystal       
 *  PTA19                    | XTAL0                                       | p25                       | 16 MHz Crystal       
 *  RESET_b                  | RESET_b                                     | p26                       | Reset       
 *  PTB0                     | -                                           | p27                       | -       
 *  PTB1                     | -                                           | p28                       | -       
 *  PTB2                     | -                                           | p29                       | -       
 *  PTB3                     | -                                           | p30                       | -       
 *  PTB16                    | -                                           | p31                       | -       
 *  PTB17                    | -                                           | p32                       | -       
 *  PTC0                     | -                                           | p33                       | -       
 *  PTC1                     | -                                           | p34                       | -       
 *  PTC2                     | -                                           | p35                       | -       
 *  PTC3                     | -                                           | p36                       | -       
 *  PTC4                     | -                                           | p37                       | -       
 *  PTC5                     | -                                           | p38                       | -       
 *  PTC6                     | -                                           | p39                       | -       
 *  PTC7                     | -                                           | p40                       | -       
 *  PTD0                     | -                                           | p41                       | -       
 *  PTD1                     | -                                           | p42                       | -       
 *  PTD2                     | -                                           | p43                       | -       
 *  PTD3                     | -                                           | p44                       | -       
 *  PTD4                     | -                                           | p45                       | -       
 *  PTD5                     | -                                           | p46                       | -       
 *  PTD6                     | -                                           | p47                       | -       
 *  PTD7                     | -                                           | p48                       | -       
 *
 *
 * @section PinsByFunction Pins by Function
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTD7                     | -                                           | p48                       | -       
 *  ADC0_DM0                 | ADC0_DM0/ADC0_SE19                          | p8                        | -       
 *  ADC0_DP0                 | ADC0_DP0/ADC0_SE0                           | p7                        | -       
 *  TempSensor               | ADC0_SE26                                   | Internal                  | -       
 *  BandGap                  | ADC0_SE27                                   | Internal                  | -       
 *  PTA18                    | EXTAL0                                      | p24                       | 16 MHz Crystal       
 *  EXTAL32                  | EXTAL32                                     | p15                       | -       
 *  PTA4                     | GPIOA_4/LLWU_P3                             | p21                       | BOOT_BTN       
 *  PTA0                     | JTAG_TCLK/SWD_CLK                           | p17                       | SWD_CLK       
 *  PTA3                     | JTAG_TMS/SWD_DIO                            | p20                       | SWD_DIO       
 *  RESET_b                  | RESET_b                                     | p26                       | Reset       
 *  PTA1                     | UART0_RX                                    | p18                       | SWD_Rx       
 *  PTA2                     | UART0_TX                                    | p19                       | SWD_Tx       
 *  USB0_DM                  | USB0_DM                                     | p4                        | USBDM       
 *  USB0_DP                  | USB0_DP                                     | p3                        | USBDP       
 *  VBAT                     | VBAT                                        | p16                       | Vdd       
 *  VDD1                     | VDD1                                        | p1                        | Vdd       
 *  VDD2                     | VDD2                                        | p22                       | Vdd       
 *  VDDA                     | VDDA                                        | p9                        | Vdd       
 *  VOUT33                   | VOUT33                                      | p5                        | Vdd       
 *  VREFH                    | VREFH                                       | p10                       | Vdd       
 *  VREFL                    | VREFL                                       | p11                       | Vss       
 *  VREF_OUT                 | VREF_OUT/CMP1_IN5/CMP0_IN5                  | p13                       | Unused       
 *  VREGIN                   | VREGIN                                      | p6                        | 5V_Fused       
 *  VSS1                     | VSS1                                        | p2                        | Vss       
 *  VSS2                     | VSS2                                        | p23                       | Vss       
 *  VSSA                     | VSSA                                        | p12                       | Vss       
 *  PTA19                    | XTAL0                                       | p25                       | 16 MHz Crystal       
 *  XTAL32                   | XTAL32                                      | p14                       | Unused       
 *
 */

#endif /* PROJECT_HEADERS_PIN_MAPPING_H */
