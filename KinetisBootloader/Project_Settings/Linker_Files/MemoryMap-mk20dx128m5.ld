/* MemoryMap-mk-sramu.ld (Packages\100.ARM_DeviceOptions\Project_Settings\Linker_Files)
 *
 * Memory map for devices with SRAM_U allocation for bit-band/bme
 */
 
/* ---- <<< Use Configuration Wizard in Context Menu >>> ---- */

/* <o> Stack Size
   <i> Required amount of stack space
   <i> In CMSIS this will determine the ISR stack size
   <0x0-0x2000:4> 
*/
__stack_size = 0x1000;

/* <o> Minimum Heap Size 
   <i> This is the minimum allocated.  
   <i> Available heap may be larger.
   <0x0-0x2000:4> 
*/
__heap_size  = 0x1000;

/* <o0> Size of RAM region reserved for bit-band or bit-manipulation-engine (bytes) 
   <i>  Space is allocated in SRAM_U memory region
   <i>  Each byte as also mapped to 8 words in .bitband memory region (if present)
   <i>
   <i>  C Example:
   <i>    // Variable allocated in bitband/bme accessible region (SRAM_U)
   <i>    // May be uint8_t, uint16_t or uint32_t
   <i>    __attribute__ ((section(".sram_u"))) uint32_t variable;
   <i>
   <i>    // Each word of array maps to an individual bit in bit-band
   <i>    __attribute__ ((section(".bitband"))) uint32_t variable_bits[8*sizeof(variable)];
   <i>
   <i>  See bme.h and bitband.h for more information
   <0x0-0x1000:4> 
*/
__sram_u_size = 0;
   
/*
 * Memory Map generated by USBDM New Project Wizard for MK20DX128M5
 */
MEMORY
{
  bitband        (rw)  : ORIGIN = 0x22000000, LENGTH = 0x02000000
  aips0          (rw)  : ORIGIN = 0x40000000, LENGTH = 0x00080000
  aips1          (rw)  : ORIGIN = 0x40080000, LENGTH = 0x0007F000
  gpio           (rw)  : ORIGIN = 0x400FF000, LENGTH = 0x00001000
  gpioBitband    (rw)  : ORIGIN = 0x42000000, LENGTH = 0x02000000
  peripherals    (rw)  : ORIGIN = 0xE0000000, LENGTH = 0x00100000
/*
    <o>  flexRAM address <constant>
    <o1> flexRAM size    <constant>
 */
  flexRAM        (rw)  : ORIGIN = 0x14000000, LENGTH = 0x00000800
/*
    <o>  Flex NVM address <constant>
    <o1> Flex NVM size    <constant>
 */
  flexNVM        (rx)  : ORIGIN = 0x10000000, LENGTH = 0x00008000
/*
    <o>  FLASH  address
    <o1> FLASH  size  
 */
  flash          (rx)  : ORIGIN = 0x00000000, LENGTH = 0x4000
/*
    <o>  FLASH stub address <constant>
    <o1> FLASH stub size    <constant>
 */
  flashStub      (rx)  : ORIGIN = 0x00008000, LENGTH = 0x00018000
/*
    <o>  ram_high address <constant>
    <o1> ram_high size    <constant>
 */
  ram_high       (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00002000
/*
    <o>  ram_low address <constant>
    <o1> ram_low size    <constant>
 */
  ram_low        (rwx) : ORIGIN = 0x1FFFE000, LENGTH = 0x00002000
/*
 * Guard region above stack for GDB 
 */
  gdbGuard       (r)   : ORIGIN = 0x20000000, LENGTH = 0x00000020
};

REGION_ALIAS("ram","ram_low");


/*
  <h> Section placement in RAM
  <i> The RAM on Cortex-M4 Kinetis devices is divided into upper and lower memory regions.
  <i> These settings control which region is used for various linker sections.
*/
/*  <s1>  Micro Trace Buffer                <"ram_low"=> ram_low <"ram_high"=> ram_high <i> mtb_ram        */
REGION_ALIAS("mtb_ram", 	   "ram_low");
/*  <s1>  Vector table relocated to RAM     <"ram_low"=> ram_low <"ram_high"=> ram_high <i> interrupts_ram */
REGION_ALIAS("interrupts_ram", "ram_low");
/*  <s1>  USB Endpoint buffers              <"ram_low"=> ram_low <"ram_high"=> ram_high <i> bdts_ram       */
REGION_ALIAS("bdts_ram",       "ram_low");
/*  <s1>  Initialised DATA                  <"ram_low"=> ram_low <"ram_high"=> ram_high <i> data_ram       */
REGION_ALIAS("data_ram",       "ram_low");
/*  <s1>  Non-initialised DATA              <"ram_low"=> ram_low <"ram_high"=> ram_high <i> noinit_ram     */
REGION_ALIAS("noinit_ram",     "ram_low");
/*  <s1>  Zeroed Data (BSS)                 <"ram_low"=> ram_low <"ram_high"=> ram_high <i> bss_ram        */
REGION_ALIAS("bss_ram",        "ram_low");
/*  <s1>  Heap                              <"ram_low"=> ram_low <"ram_high"=> ram_high <i> heap_ram       */
REGION_ALIAS("heap_ram",       "ram_low");
/*  <s1>  Stack                             <"ram_low"=> ram_low <"ram_high"=> ram_high <i> stack_ram      */
REGION_ALIAS("stack_ram",      "ram_high");
/* </h> */

/* These must be in upper RAM */
REGION_ALIAS("sram_u_ram",     "ram_high");
REGION_ALIAS("bitband_ram",    "ram_high");


