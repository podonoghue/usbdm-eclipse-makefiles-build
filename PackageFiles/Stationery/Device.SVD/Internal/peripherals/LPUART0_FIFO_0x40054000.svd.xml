<!--
Devices using this peripheral: 
      MKL82Z7
-->
      <peripheral>
         <?sourceFile "LPUART0_FIFO_0x40054000" ?>
         <name>LPUART0</name>
         <description>Universal Asynchronous Receiver/Transmitter</description>
         <groupName>LPUART</groupName>
         <headerStructName>LPUART</headerStructName>
         <baseAddress>0x40054000</baseAddress>
         <size>32</size>
         <access>read-write</access>
         <resetValue>0x0</resetValue>
         <resetMask>0xFFFFFFFF</resetMask>
         <addressBlock>
            <offset>0x0</offset>
            <size>0x20</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>BAUD</name>
               <description>Baud Rate Register</description>
               <addressOffset>0x0</addressOffset>
               <resetValue>0xF000004</resetValue>
               <fields>
                  <field>
                     <name>SBR</name>
                     <description>Baud Rate Modulo Divisor.\n
The 13 bits in SBR[12:0] set the modulo divide rate for the baud rate generator. When SBR is 1 - 8191,
the baud rate equals &quot;baud clock / ((OSR+1) x SBR)&quot;. The 13-bit baud rate setting [SBR12:SBR0] must
only be updated when the transmitter and receiver are both disabled (LPUART_CTRL[RE] and
LPUART_CTRL[TE] are both 0)</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>13</bitWidth>
                  </field>
                  <field>
                     <name>SBNS</name>
                     <description>Stop Bit Number Select\n
SBNS determines whether data characters are one or two stop bits. This bit should only be changed when
the transmitter and receiver are both disabled</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>One stop bit</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Two stop bits</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXEDGIE</name>
                     <description>RX Input Active Edge Interrupt Enable\n
Enables the receive input active edge, RXEDGIF, to generate interrupt requests. Changing CTRL[LOOP]
or CTRL[RSRC] when RXEDGIE is set can cause the RXEDGIF to set</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Hardware interrupts from LPUART_STAT[RXEDGIF] disabled (use polling)</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Hardware interrupt requested when LPUART_STAT[RXEDGIF] flag is 1</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>LBKDIE</name>
                     <description>LIN Break Detect Interrupt Enable\n
LBKDIE enables the LIN break detect flag, LBKDIF, to generate interrupt requests</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Hardware interrupts from LPUART_STAT[LBKDIF] disabled (use polling)</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Hardware interrupt requested when LPUART_STAT[LBKDIF] flag is 1</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RESYNCDIS</name>
                     <description>Resynchronization Disable\n
When set, disables the resynchronization of the received data word when a data one followed by data
zero transition is detected. This bit should only be changed when the receiver is disabled</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Resynchronization during received data word is supported</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Resynchronization during received data word is disabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>BOTHEDGE</name>
                     <description>Both Edge Sampling\n
Enables sampling of the received data on both edges of the baud rate clock, effectively doubling the
number of times the receiver samples the input data for a given oversampling ratio. This bit must be set for
oversampling ratios between x4 and x7 and is optional for higher oversampling ratios. This bit should only
be changed when the receiver is disabled</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Receiver samples input data using the rising edge of the baud rate clock</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Receiver samples input data using the rising and falling edge of the baud rate clock</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MATCFG</name>
                     <description>Match Configuration\n
Configures the match addressing mode used</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00</name>
                           <description>Address Match Wakeup</description>
                           <value>0b00</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01</name>
                           <description>Idle Match Wakeup</description>
                           <value>0b01</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10</name>
                           <description>Match On and Match Off</description>
                           <value>0b10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11</name>
                           <description>Enables RWU on Data Match and Match On/Off for transmitter CTS input</description>
                           <value>0b11</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RDMAE</name>
                     <description>Receiver Full DMA Enable (only on device with DMA)\n
RDMAE configures the receiver data register full flag, LPUART_STAT[RDRF], to generate a DMA request</description>
                     <bitOffset>21</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>DMA request disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>DMA request enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field derivedFrom="RDMAE" > <name>TDMAE</name> <description>Transmitter DMA Enable (only on device with DMA)\n
TDMAE configures the transmit data register empty flag, LPUART_STAT[TDRE], to generate a DMA request</description> <bitOffset>23</bitOffset> </field>
                  <field>
                     <name>OSR</name>
                     <description>Over Sampling Ratio\n
This field configures the oversampling ratio for the receiver between 4x (00011) and 32x (11111). Writing
an invalid oversampling ratio will default to an oversampling ratio of 16 (01111). This field should only be
changed when the transmitter and receiver are both disabled</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>5</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00000</name>
                           <description>Oversampling ratio of 16</description>
                           <value>0b00000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b00011</name>
                           <description>Oversampling ratio of 4, requires BOTHEDGE to be set</description>
                           <value>0b00011</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b00100</name>
                           <description>Oversampling ratio of 5, requires BOTHEDGE to be set</description>
                           <value>0b00100</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b00101</name>
                           <description>Oversampling ratio of 6, requires BOTHEDGE to be set</description>
                           <value>0b00101</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b00110</name>
                           <description>Oversampling ratio of 7, requires BOTHEDGE to be set</description>
                           <value>0b00110</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b00111</name>
                           <description>Oversampling ratio of 8</description>
                           <value>0b00111</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01000</name>
                           <description>Oversampling ratio of 9</description>
                           <value>0b01000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01001</name>
                           <description>Oversampling ratio of 10</description>
                           <value>0b01001</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01010</name>
                           <description>Oversampling ratio of 11</description>
                           <value>0b01010</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01011</name>
                           <description>Oversampling ratio of 12</description>
                           <value>0b01011</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01100</name>
                           <description>Oversampling ratio of 13</description>
                           <value>0b01100</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01101</name>
                           <description>Oversampling ratio of 14</description>
                           <value>0b01101</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01110</name>
                           <description>Oversampling ratio of 15</description>
                           <value>0b01110</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01111</name>
                           <description>Oversampling ratio of 16</description>
                           <value>0b01111</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10000</name>
                           <description>Oversampling ratio of 17</description>
                           <value>0b10000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10001</name>
                           <description>Oversampling ratio of 18</description>
                           <value>0b10001</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10010</name>
                           <description>Oversampling ratio of 19</description>
                           <value>0b10010</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10011</name>
                           <description>Oversampling ratio of 20</description>
                           <value>0b10011</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10100</name>
                           <description>Oversampling ratio of 21</description>
                           <value>0b10100</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10101</name>
                           <description>Oversampling ratio of 22</description>
                           <value>0b10101</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10110</name>
                           <description>Oversampling ratio of 23</description>
                           <value>0b10110</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10111</name>
                           <description>Oversampling ratio of 24</description>
                           <value>0b10111</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11000</name>
                           <description>Oversampling ratio of 25</description>
                           <value>0b11000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11001</name>
                           <description>Oversampling ratio of 26</description>
                           <value>0b11001</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11010</name>
                           <description>Oversampling ratio of 27</description>
                           <value>0b11010</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11011</name>
                           <description>Oversampling ratio of 28</description>
                           <value>0b11011</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11100</name>
                           <description>Oversampling ratio of 29</description>
                           <value>0b11100</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11101</name>
                           <description>Oversampling ratio of 30</description>
                           <value>0b11101</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11110</name>
                           <description>Oversampling ratio of 31</description>
                           <value>0b11110</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11111</name>
                           <description>Oversampling ratio of 32</description>
                           <value>0b11111</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>M10</name>
                     <description>10-bit Mode select
The M10 bit causes a tenth bit to be part of the serial transmission. This bit should only be changed when
the transmitter and receiver are both disabled</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Receiver and transmitter use 8-bit or 9-bit data characters</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Receiver and transmitter use 10-bit data characters</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MAEN2</name>
                     <description>Match Address Mode Enable 2</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Normal operation</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Enables automatic address matching or data matching mode for MATCH[MA2]</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MAEN1</name>
                     <description>Match Address Mode Enable 1</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Normal operation</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Enables automatic address matching or data matching mode for MATCH[MA1]</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>STAT</name>
               <description>Status Register</description>
               <addressOffset>0x4</addressOffset>
               <resetValue>0xC00000</resetValue>
               <fields>
                  <field>
                     <name>STAT</name>
                     <?ignoreOverlap?>
                     <description>Status Flags</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
                  <field>
                     <name>MA2F</name>
                     <description>Match 2 Flag\n
MA2F is set whenever the next character to be read from LPUART_DATA matches MA2. \n
To clear MA2F, write a logic one to the MA2F</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Received data is not equal to MA2</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Received data is equal to MA2</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MA1F</name>
                     <description>Match 1 Flag\n
MA1F is set whenever the next character to be read from LPUART_DATA matches MA1. \n
To clear MA1F, write a logic one to the MA1F</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Received data is not equal to MA1</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Received data is equal to MA1</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PF</name>
                     <description>Parity Error Flag\n
PF is set whenever the next character to be read from LPUART_DATA was received when parity is
enabled (PE = 1) and the parity bit in the received character does not agree with the expected parity value. \n
To clear PF, write a logic one to the PF</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No parity error</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Parity error</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>FE</name>
                     <description>Framing Error Flag\n
FE is set whenever the next character to be read from LPUART_DATA was received with logic 0 detected
where a stop bit was expected. \n
To clear NF, write logic one to the NF</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No framing error detected. This does not guarantee the framing is correct</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Framing error</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>NF</name>
                     <description>Noise Flag\n
The advanced sampling technique used in the receiver takes three samples in each of the received bits. If
any of these samples disagrees with the rest of the samples within any bit time in the frame then noise is
detected for that character. NF is set whenever the next character to be read from DATA was
received with noise detected within the character. \n
To clear NF, write logic one to the NF</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No noise detected</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Noise detected in the received character in DATA</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>OR</name>
                     <description>Receiver Overrun Flag\n
OR is set when software fails to prevent the receive data register from overflowing with data. The OR bit is
set immediately after the stop bit has been completely received for the dataword that overflows the buffer
and all the other error flags (FE, NF, and PF) are prevented from setting. The data in the shift register is
lost, but the data already in the LPUART data registers is not affected. If LBKDE is enabled and a LIN
Break is detected, the OR field asserts if LBKDIF is not cleared before the next data character is received.
While the OR flag is set, no additional data is stored in the data buffer even if sufficient room exists. \n
To clear OR, write logic 1 to the OR flag</description>
                     <bitOffset>19</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No overrun</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Receive overrun (new LPUART data lost)</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>IDLE</name>
                     <description>Idle Line Flag\n
IDLE is set when the LPUART receive line becomes idle for a full character time after a period of activity.
When ILT is cleared, the receiver starts counting idle bit times after the start bit.\n
To clear IDLE, write logic 1 to the IDLE flag</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No idle line detected</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Idle line detected</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RDRF</name>
                     <description>Receive Data Register Full Flag\n
RDRF is set when the receive buffer (LPUART_DATA) is full. \n
To clear RDRF, read the LPUART_DATA register</description>
                     <bitOffset>21</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Receive data buffer empty</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Receive data buffer full</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TC</name>
                     <description>Transmission Complete Flag\n
TC is cleared when there is a transmission in progress or when a preamble or break character is loaded.
TC is set when the transmit buffer is empty and no data, preamble, or break character is being transmitted</description>
                     <bitOffset>22</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Transmitter active (sending data, a preamble, or a break)</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Transmitter idle (transmission activity complete)</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TDRE</name>
                     <description>Transmit Data Register Empty Flag\n
TDRE will set when the transmit data register (LPUART_DATA) is empty. To clear TDRE, write to the
LPUART data register (LPUART_DATA)</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Transmit data buffer full</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Transmit data buffer empty</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RAF</name>
                     <description>Receiver Active Flag\n
RAF is set when the receiver detects the beginning of a valid start bit, and RAF is cleared automatically
when the receiver detects an idle line</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Receiver idle waiting for a start bit</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>receiver active (RXD input not idle)</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>LBKDE</name>
                     <description>LIN Break Detection Enable\n
LBKDE selects a longer break character detection length.\n
While LBKDE is set, receive data is not stored in the receive data buffer</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Normal break character detection</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>LIN break detection is enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>BRK13</name>
                     <description>Break Character Generation Length\n
BRK13 selects a longer transmitted break character length. Detection of a framing error is not affected by
the state of this bit. This bit should only be changed when the transmitter is disabled</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Short break</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Long break</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RWUID</name>
                     <description>Receive Wake Up Idle Detect
For RWU on idle character, RWUID controls whether the idle character that wakes up the receiver sets the
IDLE bit. For address match wakeup, RWUID controls if the IDLE bit is set when the address does not
match. This bit should only be changed when the receiver is disabled</description>
                     <bitOffset>27</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>During receive standby state (RWU = 1), the IDLE bit does not get set upon detection of an idle character.\n
During address match wakeup, the IDLE bit does not get set when an address does not match</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>During receive standby state (RWU = 1), the IDLE bit gets set upon detection of an idle character.\n
During address match wakeup, the IDLE bit does get set when an address does not match</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXINV</name>
                     <description>Receive Data Inversion\n
Setting this bit reverses the polarity of the received data input</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Receive data not inverted</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Receive data inverted</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MSBF</name>
                     <description>MSB First\n
Setting this bit reverses the order of the bits that are transmitted and received on the wire. This bit does
not affect the polarity of the bits, the location of the parity bit or the location of the start or stop bits. This bit
should only be changed when the transmitter and receiver are both disabled</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>LSB (bit0) is the first data bit that is transmitted or received</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>MSB (bit9, bit8, bit7 or bit6) is the first data bit that is transmitted or received</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXEDGIF</name>
                     <description>LPUART_RX Pin Active Edge Interrupt Flag
RXEDGIF is set when an active edge, falling if RXINV = 0, rising if RXINV=1, on the LPUART_RX pin
occurs. RXEDGIF is cleared by writing a 1 to it</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No active edge on the receive pin has occurred</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>An active edge on the receive pin has occurred</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>LBKDIF</name>
                     <description>LIN Break Detect Interrupt Flag\n
LBKDIF is set when the LIN break detect circuitry is enabled and a LIN break character is detected.
LBKDIF is cleared by writing a 1 to it</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No LIN break character has been detected</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>LIN break character has been detected</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>CTRL</name>
               <description>Control Register</description>
               <addressOffset>0x8</addressOffset>
               <resetMask>0x7FFFFFFF</resetMask>
               <fields>
                  <field>
                     <name>CTRL</name>
                     <?ignoreOverlap?>
                     <description>Control features</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>32</bitWidth>
                  </field>
                  <field>
                     <name>PT</name>
                     <description>Parity Type\n
Provided parity is enabled (PE = 1), this bit selects even or odd parity. Odd parity means the total number
of 1s in the data character, including the parity bit, is odd. Even parity means the total number of 1s in the
data character, including the parity bit, is even</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Even parity</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Odd parity</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PE</name>
                     <description>Parity Enable\n
Enables hardware parity generation and checking. When parity is enabled, the bit immediately before the
stop bit is treated as the parity bit</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Parity function disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Parity function enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>ILT</name>
                     <description>Idle Line Type Select\n
Determines when the receiver starts counting logic 1s as idle character bits. The count begins either after
a valid start bit or after the stop bit. If the count begins after the start bit, then a string of logic 1s preceding
the stop bit can cause false recognition of an idle character. Beginning the count after the stop bit avoids
false idle character recognition, but requires properly synchronized transmissions</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Idle character bit count starts after start bit</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Idle character bit count starts after stop bit</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>WAKE</name>
                     <description>Receiver Wakeup Method Select\n
Determines which condition wakes the LPUART when RWU=1:\n
- Address mark in the most significant bit position of a received data character, or\n
- An idle condition on the receive pin input signal</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Idle-line wakeup</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Address-mark wakeup</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>M</name>
                     <description>9-Bit or 8-Bit Mode Select</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Normal - start + 8 data bits + stop</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Receiver and transmitter use 9-bit data characters start + 8 data bits + 9th data bit + stop</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RSRC</name>
                     <description>Receiver Source Select\n
This field has no meaning or effect unless the LOOPS field is set. When LOOPS is set, the RSRC field
determines the source for the receiver shift register input</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Internal loop back mode and the UART does not use the RxD pins</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Single-wire UART mode where the TxD pin is connected to the transmitter output and receiver input</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>DOZEEN</name>
                     <description>Stops in Doze Mode</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Enabled in Doze mode</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Disabled in Doze mode</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>LOOPS</name>
                     <description>Loop Mode Select\n
When set, the Rx pin is disconnected from the LPUART and the transmitter output is internally connected to the receiver input. \n
The transmitter and the receiver must be enabled to use the loop function</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Normal operation - RxD and TxD use separate pins</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Loop mode where transmitter output is internally connected to receiver input. The receiver input is determined by the RSRC bit</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>IDLECFG</name>
                     <description>Idle Configuration</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>3</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b000</name>
                           <description>1 idle character</description>
                           <value>0b000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b001</name>
                           <description>2 idle characters</description>
                           <value>0b001</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b010</name>
                           <description>4 idle characters</description>
                           <value>0b010</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b011</name>
                           <description>8 idle characters</description>
                           <value>0b011</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b100</name>
                           <description>16 idle characters</description>
                           <value>0b100</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b101</name>
                           <description>32 idle characters</description>
                           <value>0b101</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b110</name>
                           <description>64 idle characters</description>
                           <value>0b110</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b111</name>
                           <description>128 idle characters</description>
                           <value>0b111</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MA2IE</name>
                     <description>Match 2 Interrupt Enable</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Interrupt disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Interrupt enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field derivedFrom="MA2IE" > <name>MA1IE</name> <description>Match 1 Interrupt Enable</description> <bitOffset>15</bitOffset> </field>
                  <field>
                     <name>SBK</name>
                     <description>Send Break\n
Writing a 1 and then a 0 to SBK queues a break character in the transmit data stream</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Normal transmitter operation</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Queue break character(s) to be sent</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RWU</name>
                     <description>Receiver Wakeup Control\n
This field can be set to place the LPUART receiver in a standby state. RWU automatically clears when an
RWU event occurs, that is, an IDLE event when CTRL[WAKE] is clear or an address match when
CTRL[WAKE] is set with STAT[RWUID] is clear</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Normal receiver operation</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Receiver in standby waiting for wakeup condition</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RE</name>
                     <description>Receiver Enable\n
Enables the LPUART receiver. When RE is written to 0, this register bit will read as 1 until the receiver
finishes receiving the current character (if any)</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Receiver disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Receiver enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TE</name>
                     <description>Transmitter Enable\n
Enables the LPUART transmitter. TE can also be used to queue an idle preamble by clearing and then
setting TE. When TE is cleared, this register bit will read as 1 until the transmitter has completed the
current character and the LPUART_TX pin is tristated</description>
                     <bitOffset>19</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Transmitter disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Transmitter enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>ILIE</name>
                     <description>Idle Line Interrupt Enable\n
ILIE enables the idle line flag, STAT[IDLE], to generate interrupt requests</description>
                     <bitOffset>20</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>IDLE interrupt requests disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>IDLE interrupt requests enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RIE</name>
                     <description>Receiver Interrupt Enable for RDRF</description>
                     <bitOffset>21</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Hardware interrupts from RDRF disabled; use polling</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Hardware interrupt requested when RDRF flag is 1</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TCIE</name>
                     <description>Transmission Complete Interrupt Enable\n
TCIE enables the transmission complete flag, TC, to generate interrupt requests</description>
                     <bitOffset>22</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>TC interrupt requests disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>TC interrupt requests enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TIE</name>
                     <description>Transmit Interrupt Enable for TDRE\n
Enables STAT[TDRE] to generate interrupt requests</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Hardware interrupts from TDRE disabled; use polling</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Hardware interrupt requested when TDRE flag is 1</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PEIE</name>
                     <description>Parity Error Interrupt Enable\n
This bit enables the parity error flag (PF) to generate hardware interrupt requests</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>PF interrupt requests are disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>PF interrupt requests are enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>FEIE</name>
                     <description>Framing Error Interrupt Enable\n
This bit enables the framing error flag (FE) to generate hardware interrupt requests</description>
                     <bitOffset>25</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>FE interrupt requests are disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>FE interrupt requests are enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>NEIE</name>
                     <description>Noise Error Interrupt Enable\n
This bit enables the noise flag (NF) to generate hardware interrupt requests</description>
                     <bitOffset>26</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>NF interrupt requests are disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>NF interrupt requests are enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>ORIE</name>
                     <description>Overrun Error Interrupt Enable\n
This bit enables the overrun flag (OR) to generate hardware interrupt requests</description>
                     <bitOffset>27</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>OR interrupts are disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>OR interrupt requests are enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXINV</name>
                     <description>Transmit Data Inversion\n
Setting this bit reverses the polarity of the transmitted data output</description>
                     <bitOffset>28</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Transmit data is not inverted</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Transmit data is inverted</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXDIR</name>
                     <description>Transmitter Pin Data Direction in Single-Wire mode\n
When the LPUART is configured for single-wire half-duplex operation (LOOPS = RSRC = 1), this bit
determines the direction of data at the LPUART_TX pin. When clearing TXDIR, the transmitter will finish
receiving the current character (if any) before the receiver starts receiving data from the LPUART_TX pin</description>
                     <bitOffset>29</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>TxD pin is an input in single-wire mode</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>TxD pin is an output in single-wire mode</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>R9T8</name>
                     <description>Receive Bit 9 / Transmit Bit 8</description>
                     <bitOffset>30</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
                  <field>
                     <name>R8T9</name>
                     <description>Receive Bit 8 / Transmit Bit 9</description>
                     <bitOffset>31</bitOffset>
                     <bitWidth>1</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>DATA</name>
               <description>Data Register\n
Reads return the contents of the read-only receive data buffer and writes go to the write-only transmit data buffer.
Reads and writes of this register are also involved in the automatic flag clearing mechanisms for the UART status flags</description>
               <addressOffset>0xC</addressOffset>
               <fields>
                  <field>
                     <name>RT</name>
                     <description>Read receive data buffer or write transmit data buffer</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>10</bitWidth>
                  </field>
                  <field>
                     <name>IDLINE</name>
                     <description>Idle Line\n
Indicates the receiver line was idle before receiving the character in DATA[9:0]. Unlike the IDLE flag, this
bit can set for the first character received when the receiver is first enabled</description>
                     <bitOffset>11</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Not idle before</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Idle before</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXEMPT</name>
                     <description>Receive Buffer Empty\n
Asserts when there is no data in the receive buffer. This field does not take into account data that is in the
receive shift register</description>
                     <bitOffset>12</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Not empty</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Empty</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>FRAME</name>
                     <description>Frame Error\n
Indicates the current received dataword contained in DATA[R9:R0] was received with a frame
error</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No frame error</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Frame error</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXSPECIAL</name>
                     <?ignoreOverlap?>
                     <description>Transmit Special Character\n
Indicates a break or idle character is to be transmitted instead of the contents in DATA[T9:T0].
T9 is used to indicate a break character when 0 and a idle character when 1, he contents of
DATA[T8:T0] should be zero</description>
                     <bitOffset>13</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>write-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Normal character</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Break or Idle character</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PARITYE</name>
                     <description>Parity Error\n
The current received dataword contained in DATA[R9:R0] was received with a parity error</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No parity error</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Parity error</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>NOISY</name>
                     <description>Noise Error\n
The current received dataword contained in DATA[R9:R0] was received with noise</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No noise</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Noise error</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>MATCH</name>
               <description>Match Address Register\n
The MA1 and MA2 registers are compared to input data addresses when the most significant bit is set and
the associated BAUD[MAEN] bit is set. \n
If a match occurs, the following data is transferred to the data register. \n
If a match fails, the following data is discarded. \n
Software should only write a MA register when the associated BAUD[MAEN] bit is clear</description>
               <addressOffset>0x10</addressOffset>
               <fields>
                  <field>
                     <name>MA1</name>
                     <description>Match Address 1</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>10</bitWidth>
                  </field>
                  <field>
                     <name>MA2</name>
                     <description>Match Address 2</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>10</bitWidth>
                  </field>
               </fields>
            </register>
            <register>
               <name>MODIR</name>
               <description>MODEM IrDA register\n
The MODEM register controls options for setting the modem configuration</description>
               <addressOffset>0x14</addressOffset>
               <fields>
                  <field>
                     <name>TXCTSE</name>
                     <description>Transmitter clear-to-send enable</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>CTS has no effect on the transmitter</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Enables clear-to-send operation. The transmitter checks the state of CTS each time it is ready to send a character. If CTS is asserted, the character is sent. If CTS is deasserted, the signal TXD remains in the mark state and transmission is delayed until CTS is asserted. Changes in CTS as a character is being sent do not affect its transmission</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXRTSE</name>
                     <description>Transmitter request-to-send enable</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>The transmitter has no effect on RTS</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>When a character is placed into an empty transmitter data buffer , RTS asserts one bit time before the start bit is transmitted. RTS deasserts one bit time after all characters in the transmitter data buffer and shift register are completely sent, including the last stop bit</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXRTSPOL</name>
                     <description>Transmitter request-to-send polarity</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Transmitter RTS is active low</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Transmitter RTS is active high</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXRTSE</name>
                     <description>Receiver request-to-send enable</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>The receiver has no effect on RTS</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>RTS assertion is configured by the RTSWATER field</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXCTSC</name>
                     <description>Transmit CTS Configuration</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>CTS input is sampled at the start of each character</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>CTS input is sampled when the transmitter is idle</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXCTSSRC</name>
                     <description>Transmit CTS Source</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>CTS input is the CTS pin</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>CTS input is the inverted Receiver Match result</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RTSWATER</name>
                     <description>Receive RTS Configuration</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>RTS asserts when the receiver FIFO is full or receiving a character that causes the FIFO to become full</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>RTS asserts when the receive FIFO is less than or equal to the RXWATER configuration and negates when the receive FIFO is greater than the RXWATER configuration</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TNP</name>
                     <description>Transmitter narrow pulse</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00</name>
                           <description>1/OSR</description>
                           <value>0b00</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01</name>
                           <description>2/OSR</description>
                           <value>0b01</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10</name>
                           <description>3/OSR</description>
                           <value>0b10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11</name>
                           <description>4/OSR</description>
                           <value>0b11</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>IREN</name>
                     <description>Infrared enable</description>
                     <bitOffset>18</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>IR disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>IR enabled</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>FIFO</name>
               <description>FIFO Register</description>
               <addressOffset>0x18</addressOffset>
               <resetValue>0xC00022</resetValue>
               <fields>
                  <field>
                     <name>RXFIFOSIZE</name>
                     <description>Receive FIFO. Buffer Depth</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>3</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b000</name>
                           <description>Receive FIFO/Buffer depth = 1 dataword</description>
                           <value>0b000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b001</name>
                           <description>Receive FIFO/Buffer depth = 4 datawords</description>
                           <value>0b001</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b010</name>
                           <description>Receive FIFO/Buffer depth = 8 datawords</description>
                           <value>0b010</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b011</name>
                           <description>Receive FIFO/Buffer depth = 16 datawords</description>
                           <value>0b011</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b100</name>
                           <description>Receive FIFO/Buffer depth = 32 datawords</description>
                           <value>0b100</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b101</name>
                           <description>Receive FIFO/Buffer depth = 64 datawords</description>
                           <value>0b101</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b110</name>
                           <description>Receive FIFO/Buffer depth = 128 datawords</description>
                           <value>0b110</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b111</name>
                           <description>Receive FIFO/Buffer depth = 256 datawords</description>
                           <value>0b111</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXFE</name>
                     <description>Receive FIFO Enable</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Receive FIFO is not enabled. Buffer is depth 1. (Legacy support)</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Receive FIFO is enabled. Buffer is depth indicted by RXFIFOSIZE</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXFIFOSIZE</name>
                     <description>Transmit FIFO. Buffer Depth</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>3</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b000</name>
                           <description>Transmit FIFO/Buffer depth = 1 dataword</description>
                           <value>0b000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b001</name>
                           <description>Transmit FIFO/Buffer depth = 4 datawords</description>
                           <value>0b001</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b010</name>
                           <description>Transmit FIFO/Buffer depth = 8 datawords</description>
                           <value>0b010</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b011</name>
                           <description>Transmit FIFO/Buffer depth = 16 datawords</description>
                           <value>0b011</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b100</name>
                           <description>Transmit FIFO/Buffer depth = 32 datawords</description>
                           <value>0b100</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b101</name>
                           <description>Transmit FIFO/Buffer depth = 64 datawords</description>
                           <value>0b101</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b110</name>
                           <description>Transmit FIFO/Buffer depth = 128 datawords</description>
                           <value>0b110</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b111</name>
                           <description>Transmit FIFO/Buffer depth = 256 datawords</description>
                           <value>0b111</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXFE</name>
                     <description>Transmit FIFO Enable</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Transmit FIFO is not enabled. Buffer is depth 1. (Legacy support)</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Transmit FIFO is enabled. Buffer is depth indicated by TXFIFOSIZE</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXUFE</name>
                     <description>Receive FIFO Underflow Interrupt Enable</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>RXUF flag does not generate an interrupt to the host</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>RXUF flag generates an interrupt to the host</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXOFE</name>
                     <description>Transmit FIFO Overflow Interrupt Enable</description>
                     <bitOffset>9</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>TXOF flag does not generate an interrupt to the host</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>TXOF flag generates an interrupt to the host</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXIDEN</name>
                     <description>Receiver Idle Empty Enable</description>
                     <bitOffset>10</bitOffset>
                     <bitWidth>3</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b000</name>
                           <description>Disable RDRF assertion due to partially filled FIFO when receiver is idle</description>
                           <value>0b000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b001</name>
                           <description>Enable RDRF assertion due to partially filled FIFO when receiver is idle for 1 character</description>
                           <value>0b001</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b010</name>
                           <description>Enable RDRF assertion due to partially filled FIFO when receiver is idle for 2 characters</description>
                           <value>0b010</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b011</name>
                           <description>Enable RDRF assertion due to partially filled FIFO when receiver is idle for 4 characters</description>
                           <value>0b011</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b100</name>
                           <description>Enable RDRF assertion due to partially filled FIFO when receiver is idle for 8 characters</description>
                           <value>0b100</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b101</name>
                           <description>Enable RDRF assertion due to partially filled FIFO when receiver is idle for 16 characters</description>
                           <value>0b101</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b110</name>
                           <description>Enable RDRF assertion due to partially filled FIFO when receiver is idle for 32 characters</description>
                           <value>0b110</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b111</name>
                           <description>Enable RDRF assertion due to partially filled FIFO when receiver is idle for 64 characters</description>
                           <value>0b111</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXFLUSH</name>
                     <description>Receive FIFO/Buffer Flush</description>
                     <bitOffset>14</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>write-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No flush operation occurs</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>All data in the receive FIFO/buffer is cleared out</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXFLUSH</name>
                     <description>Transmit FIFO/Buffer Flush</description>
                     <bitOffset>15</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>write-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No flush operation occurs</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>All data in the transmit FIFO/Buffer is cleared out</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXUF</name>
                     <description>Receiver Buffer Underflow Flag</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No receive buffer underflow has occurred since the last time the flag was cleared</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>At least one receive buffer underflow has occurred since the last time the flag was cleared</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXOF</name>
                     <description>Transmitter Buffer Overflow Flag</description>
                     <bitOffset>17</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No transmit buffer overflow has occurred since the last time the flag was cleared</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>At least one transmit buffer overflow has occurred since the last time the flag was cleared</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RXEMPT</name>
                     <description>Receive Buffer/FIFO Empty</description>
                     <bitOffset>22</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Receive buffer is not empty</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Receive buffer is empty</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>TXEMPT</name>
                     <description>Transmit Buffer/FIFO Empty</description>
                     <bitOffset>23</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Transmit buffer is not empty</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Transmit buffer is empty</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>WATER</name>
               <description>Watermark Register</description>
               <addressOffset>0x1C</addressOffset>
               <fields>
                  <field>
                     <name>TXWATER</name>
                     <description>Transmit Watermark</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>TXCOUNT</name>
                     <description>Transmit Counter</description>
                     <bitOffset>8</bitOffset>
                     <bitWidth>8</bitWidth>
                     <access>read-only</access>
                  </field>
                  <field>
                     <name>RXWATER</name>
                     <description>Receive Watermark</description>
                     <bitOffset>16</bitOffset>
                     <bitWidth>8</bitWidth>
                  </field>
                  <field>
                     <name>RXCOUNT</name>
                     <description>Receive Counter</description>
                     <bitOffset>24</bitOffset>
                     <bitWidth>8</bitWidth>
                     <access>read-only</access>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
