<!--
Devices using this peripheral: 
      MK28F15
      MK65F18
      MK66F18
-->
      <peripheral>
         <?sourceFile "FTFE_XACCH" ?>
         <?preferredAccessWidth "32" ?>
         <name>FTFE</name>
         <description>Flash Memory Interface</description>
         <groupName>FTFE</groupName>
         <headerStructName>FTFE</headerStructName>
         <baseAddress>0x40020000</baseAddress>
         <size>32</size>
         <access>read-write</access>
         <resetValue>0x0</resetValue>
         <resetMask>0xFFFFFFFF</resetMask>
         <addressBlock>
            <offset>0x0</offset>
            <size>0x14</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "8" ?>
            <offset>0x16</offset>
            <size>0x13</size>
            <usage>registers</usage>
         </addressBlock>
         <addressBlock>
            <?width "8" ?>
            <offset>0x2B</offset>
            <size>0x1</size>
            <usage>registers</usage>
         </addressBlock>
         <registers>
            <register>
               <name>FSTAT</name>
               <description>Flash Status Register</description>
               <addressOffset>0x0</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>MGSTAT0</name>
                     <description>Command Completion Status Flag \n
The MGSTAT0 status flag is set if an error is detected during execution of a flash command or during the flash reset sequence.\n
As a status flag, this bit cannot (and need not) be cleared by the user unlike the other error flags in this register</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No error detected</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Error detected</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>FPVIOL</name>
                     <description>Flash Protection Violation Flag \n
The FPVIOL error bit indicates an attempt was made to program or erase an address in a protected area of program flash or data flash memory during a command write sequence or a write was attempted to a protected area of the FlexRAM while enabled for EEPROM.  \n
While FPVIOL is set, the CCIF flag cannot be cleared to launch a command. The FPVIOL bit is cleared by writing a 1 to it. Writing a 0 to the FPVIOL bit has no effect</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No violation</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Violation detected</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>ACCERR</name>
                     <description>Flash Access Error Flag \n
The ACCERR error bit indicates an illegal access has occurred to a flash memory 
resource caused by a violation of the command write sequence or issuing an illegal flash command</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No access error</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Access error</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RDCOLERR</name>
                     <description>FTF Read Collision Error Flag \n
Indicates that the MCU attempted a read from a flash memory resource that was being manipulated by a flash command</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No collision error</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Collision error</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>CCIF</name>
                     <description>Command Complete Interrupt Flag \n
Indicates that a flash command or EEPROM file system operation has completed</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Command in progress</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Command complete</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>FCNFG</name>
               <description>Flash Configuration Register</description>
               <addressOffset>0x1</addressOffset>
               <size>8</size>
               <resetValue>0x6</resetValue>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>EEERDY</name>
                     <description>EEEPROM Ready  (If FlexNVM is available)\n
Indicates if the EEPROM backup data has been copied to the FlexRAM and is available for read access\n
Writes to FlexRAM clear EEERDY and initiate EEPROM programming</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>EEPROM not ready</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>EEPROM ready\t- FlexRAM is configured and ready for EEPROM operations</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RAMRDY</name>
                     <description>RAM Ready \n
This flag indicates the current status of the FlexRAM/programming acceleration RAM\n
If EEPROM is enabled the FlexRAM is used for EEPROM emulation, otherwise it may be used as traditional RAM</description>
                     <bitOffset>1</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>FlexRAM is unavailable (EEPROM use)</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>FlexRAM is available</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>PFLSH</name>
                     <description>Flash memory configuration \n
This bit indicates if the FTF module supports FlexMemory or only Data Flash\</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Supports FlexMemory</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Program flash only</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>SWAP</name>
                     <description>Program Flash Swap Flag \n
The SWAP flag indicates which half of the program flash space is located at relative address 0x0000.\n
(Not all devices support the swap function)</description>
                     <bitOffset>3</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>PFlash 1st half @ 0x0000</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>PFlash 2nd half @ 0x0000\t- If supported by device</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>ERSSUSP</name>
                     <description>Erase Suspend \n
The ERSSUSP bit allows the user to suspend (interrupt) the Erase Flash Sector command while it is executing</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No suspend requested</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Suspend requested</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>ERSAREQ</name>
                     <description>Erase All Request \n
Indicates a debugger issued a request to the memory controller to execute the Erase All Blocks command. This will: \n
\t- Erase All Blocks \n
\t- Verify the erased state \n
\t- Program the Flash Configuration Field to the unsecure state (FSEC[SEC]=10)</description>
                     <bitOffset>5</bitOffset>
                     <bitWidth>1</bitWidth>
                     <access>read-only</access>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>No active request\t- Writing 1 initiates a request</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Active request</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>RDCOLLIE</name>
                     <description>Read Collision Error Interrupt Enable \n
The RDCOLLIE bit controls interrupt generation when a flash memory read collision error occurs</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Interrupt disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Interrupt enabled\t- Interrupt request whenever an read collision error is detected</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>CCIE</name>
                     <description>Command Complete Interrupt Enable \n
The CCIE bit controls interrupt generation when a flash command completes</description>
                     <bitOffset>7</bitOffset>
                     <bitWidth>1</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Interrupt disabled</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Interrupt enabled\t- Interrupt request whenever the FSTAT[CCIF] flag is set</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>FSEC</name>
               <description>Flash Security Register</description>
               <addressOffset>0x2</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>SEC</name>
                     <description>Flash Security\nMCU security status</description>
                     <bitOffset>0</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00</name>
                           <description>Secure</description>
                           <value>0b00</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01</name>
                           <description>Secure</description>
                           <value>0b01</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10</name>
                           <description>Unsecure</description>
                           <value>0b10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11</name>
                           <description>Secure</description>
                           <value>0b11</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>FSLACC</name>
                     <description>Freescale Failure Analysis Access Code</description>
                     <bitOffset>2</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00</name>
                           <description>Access granted</description>
                           <value>0b00</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01</name>
                           <description>Access denied</description>
                           <value>0b01</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10</name>
                           <description>Access denied</description>
                           <value>0b10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11</name>
                           <description>Access granted</description>
                           <value>0b11</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>MEEN</name>
                     <description>Mass Erase Enable Bits</description>
                     <bitOffset>4</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00</name>
                           <description>Mass erase enabled</description>
                           <value>0b00</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01</name>
                           <description>Mass erase enabled</description>
                           <value>0b01</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10</name>
                           <description>Mass erase disabled</description>
                           <value>0b10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11</name>
                           <description>Mass erase enabled</description>
                           <value>0b11</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
                  <field>
                     <name>KEYEN</name>
                     <description>Backdoor Key Security Enable\n
Backdoor key access allows the device to be unsecured by a special code</description>
                     <bitOffset>6</bitOffset>
                     <bitWidth>2</bitWidth>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b00</name>
                           <description>Backdoor disabled</description>
                           <value>0b00</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b01</name>
                           <description>Backdoor disabled</description>
                           <value>0b01</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b10</name>
                           <description>Backdoor enabled</description>
                           <value>0b10</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b11</name>
                           <description>Backdoor disabled</description>
                           <value>0b11</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>FOPT</name>
               <description>Flash Option Register \n
Usage is device dependent. \n
Refer to the device&apos;s Chip Configuration details for the definition and use of these bits</description>
               <addressOffset>0x3</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>OPT</name>
                     <description>Nonvolatile Option \n
These bits are loaded from flash to this register at reset</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <dim>12</dim>
               <dimIncrement>1</dimIncrement>
               <dimIndex>3:Flash address [7..0],2:Flash address [15..8],1:Flash address [23..16],0:FCMD (Flash command),7:Data Byte 3,6:Data Byte 2,5:Data Byte 1,4:Data Byte 0,B:Data Byte 7,A:Data Byte 6,9:Data Byte 5,8:Data Byte 4</dimIndex>
               <name>FCCOB%s</name>
               <description>FCCOB %s - Usually %m \n
The Flash Common Command Object registers provides a command code and relevant parameters to the memory controller.\n
Some commands return information to the FCCOB registers when complete,
Usage varies with command</description>
               <addressOffset>0x4</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>CCOB%s</name>
                     <description>%m</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <dim>4</dim>
               <dimIncrement>1</dimIncrement>
               <dimIndex>3:PROT[7..0],2:PROT[15..8],1:PROT[23..16],0:PROT[31..24]</dimIndex>
               <name>FPROT%s</name>
               <description>Program Flash Protection \n
Each PROT bit protects 1/32 of the total program flash from program and erase operations</description>
               <addressOffset>0x10</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>PROT</name>
                     <description>Program Flash Region Protect</description>
                     <bitOffset>0</bitOffset>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Program flash region is protected</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Program flash region is not protected</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>FEPROT</name>
               <description>EEPROM Protection Register (If EEPROM present)\n
Each EPROT bit protects 1/8 of the configured EEPROM data from program and erase operations.\n
(Only applicable to devices with EEPROM)</description>
               <addressOffset>0x16</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>EPROT</name>
                     <description>EEPROM Region Protection</description>
                     <bitOffset>0</bitOffset>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Region is protected</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Region is unprotected</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>FDPROT</name>
               <description>Data Flash Protection Register  (If Data Flash present)\n
Each FDPROT bit protects 1/8 of the configured Data Flash from program and erase operations</description>
               <addressOffset>0x17</addressOffset>
               <size>8</size>
               <resetMask>0xFF</resetMask>
               <fields>
                  <field>
                     <name>DPROT</name>
                     <description>Data Flash Region Protect</description>
                     <bitOffset>0</bitOffset>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Data Flash region is protected</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Data Flash region is not protected</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <dim>4</dim>
               <dimIncrement>1</dimIncrement>
               <dimIndex>3,2,1,0</dimIndex>
               <name>XACCH%s</name>
               <description>Execute-only Access Registers (high)\n
The XACC registers define which program flash segments are restricted to data read or execute only or both data and instruction fetches.\n
The eight XACC registers allow up to 64 restricted segments of equal memory size</description>
               <addressOffset>0x18</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetMask>0x0</resetMask>
               <fields>
                  <field>
                     <name>XA</name>
                     <description>Execute Access</description>
                     <bitOffset>0</bitOffset>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Accessible in execute mode only (as an instruction fetch)</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Accessible as data or in execute mode</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <dim>4</dim>
               <dimIncrement>1</dimIncrement>
               <dimIndex>3,2,1,0</dimIndex>
               <name>XACCL%s</name>
               <description>Execute-only Access Registers (low)\n
The XACC registers define which program flash segments are restricted to data read or execute only or both data and instruction fetches.\n
The eight XACC registers allow up to 64 restricted segments of equal memory size</description>
               <addressOffset>0x1C</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetMask>0x0</resetMask>
               <fields>
                  <field>
                     <name>XA</name>
                     <description>Execute Access</description>
                     <bitOffset>0</bitOffset>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Accessible in execute mode only (as an instruction fetch)</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Accessible as data or in execute mode</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <dim>4</dim>
               <dimIncrement>1</dimIncrement>
               <dimIndex>3,2,1,0</dimIndex>
               <name>SACCH%s</name>
               <description>Supervisor-only Access Registers (high)\n
The SACC registers define which program flash segments are restricted to supervisor only or user and supervisor access.\n
The eight SACC registers allow up to 64 restricted segments of equal memory size</description>
               <addressOffset>0x20</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetMask>0x0</resetMask>
               <fields>
                  <field>
                     <name>SA</name>
                     <description>Supervisor-only access control</description>
                     <bitOffset>0</bitOffset>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Associated segment is accessible in supervisor mode only</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Associated segment is accessible in user or supervisor mode</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <dim>4</dim>
               <dimIncrement>1</dimIncrement>
               <dimIndex>3,2,1,0</dimIndex>
               <name>SACCL%s</name>
               <description>Supervisor-only Access Registers (low)\n
The SACC registers define which program flash segments are restricted to supervisor only or user and supervisor access.\n
The eight SACC registers allow up to 64 restricted segments of equal memory size</description>
               <addressOffset>0x24</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetMask>0x0</resetMask>
               <fields>
                  <field>
                     <name>SA</name>
                     <description>Supervisor-only access control</description>
                     <bitOffset>0</bitOffset>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b0</name>
                           <description>Associated segment is accessible in supervisor mode only</description>
                           <value>0b0</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1</name>
                           <description>Associated segment is accessible in user or supervisor mode</description>
                           <value>0b1</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
            <register>
               <name>FACSS</name>
               <description>Flash Access Segment Size Register\n
Determines which bits in the address are used to index into the SACC and XACC bitmaps to get the appropriate permission flags</description>
               <addressOffset>0x28</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetMask>0x0</resetMask>
               <fields>
                  <field>
                     <name>SGSIZE</name>
                     <description>Segment Size</description>
                     <bitOffset>0</bitOffset>
                  </field>
               </fields>
            </register>
            <register>
               <name>FACSN</name>
               <description>Flash Access Segment Number Register\n
Provides the number of program flash segments that are available for XACC and SACC permissions</description>
               <addressOffset>0x2B</addressOffset>
               <size>8</size>
               <access>read-only</access>
               <resetMask>0x0</resetMask>
               <fields>
                  <field>
                     <name>NUMSG</name>
                     <description>Number of Segments Indicator</description>
                     <bitOffset>0</bitOffset>
                     <enumeratedValues>
                        <enumeratedValue>
                           <name>0b100000</name>
                           <description>Program flash memory is divided into 32 segments (64 Kbytes, 128 Kbytes)</description>
                           <value>0b100000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b101000</name>
                           <description>Program flash memory is divided into 40 segments (160 Kbytes)</description>
                           <value>0b101000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b110000</name>
                           <description>Program flash memory is divided into 48 segments (768 Kbytes, 1.5 Mbytes)</description>
                           <value>0b110000</value>
                        </enumeratedValue>
                        <enumeratedValue>
                           <name>0b1000000</name>
                           <description>Program flash memory is divided into 64 segments (256 Kbytes, 512 Kbytes, 1 Mbyte, 2 Mbytes)</description>
                           <value>0b1000000</value>
                        </enumeratedValue>
                     </enumeratedValues>
                  </field>
               </fields>
            </register>
         </registers>
      </peripheral>
