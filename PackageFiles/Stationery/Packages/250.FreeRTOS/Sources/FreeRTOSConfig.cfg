/*
 * FreeRTOS Kernel V10.2.0
 * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * http://www.FreeRTOS.org
 * http://aws.amazon.com/freertos
 *
 */

#ifndef _FREERTOS_CONFIG_CFG_
#define _FREERTOS_CONFIG_CFG_

/*-----------------------------------------------------------
 * Application specific definitions.
 *
 * These definitions should be adjusted for your particular hardware and
 * application requirements.
 *
 * THESE PARAMETERS ARE DESCRIBED WITHIN THE 'CONFIGURATION' SECTION OF THE
 * FreeRTOS API DOCUMENTATION AVAILABLE ON THE FreeRTOS.org WEB SITE.
 *
 * See http://www.freertos.org/a00110.html
 *----------------------------------------------------------*/

//-------- <<< Use Configuration Wizard in Context Menu >>> -----------------
//

//   <q>RTOS scheduler method
//      <i> Chooses between the Preemptive or Cooperative RTOS scheduler.   
//      <i> (configUSE_PREEMPTION)
//      <0=> Cooperative
//      <1=> Preemptive
#define configUSE_PREEMPTION                  (1)

//   <q>Use low-power tickless Idle
//      <i>Use alternative timer method when suspended for longer periods
//      <i>(configUSE_TICKLESS_IDLE)
//      <0=> Tickless idle disabled
//      <1=> Tickless idle enabled
#define configUSE_TICKLESS_IDLE               (1)

/* in Kinetis this contains the system core clock speed */
extern uint32_t SystemCoreClock;

//   Frequency of tick clock counter [Hz]
//   Frequency in Hz at which the internal clock that drives the peripheral 
//   used to generate the tick interrupt.
#define configCPU_CLOCK_HZ                    SystemCoreClock

//   <o>RTOS Tick Rate [Hz] <1-10000>
//      <i>The frequency of the RTOS tick interrupt. 
//      <i>(configTICK_RATE_HZ)
#define configTICK_RATE_HZ                    ((TickType_t) 200)

//   <q>Size of Tick counter variable  <constant>
//      <i> Time is measured in 'ticks' - which is the number of times the tick interrupt has executed since the RTOS kernel was started. 
//      <i> The tick count is held in a variable of type TickType_t.
//      <i> This option selects the size of this type.
//      <i> Using a 16-bit type will greatly improve performance on 8 and 16 bit architectures, but limits 
//      <i> the maximum specifiable time period to 65535 'ticks'.  
//      <i> A 250Hz tick rate and 16-bit size would result in a maximum task delay or block of 262 seconds. 
//      <i> A 250Hz tick rate and 32-bit size would result in a maximum task delay or block of 17179869 seconds. 
//      <i>(configUSE_16_BIT_TICKS)
//         <0=>unsigned 32bit type
//         <1=>unsigned 16bit type
#define configUSE_16_BIT_TICKS                (0)

// <h> Tasks

//   <o>Number of application Task priority levels   <1-10>
//      <i>The number of priorities available to the application tasks. 
//      <i>Any number of tasks can share the same priority. 
//      <i>Co-routines are prioritised separately - see configMAX_CO_ROUTINE_PRIORITIES. 
//      <i>(configMAX_PRIORITIES) 
#define configMAX_PRIORITIES                  (5)

//   <o>Task name length <1-20>
//      <i>The maximum permissible length of the descriptive name given to a task when the task is created
//      <i> The length is specified in the number of characters including the NULL termination byte. 
//      <i>(configMAX_TASK_NAME_LEN) 
#define configMAX_TASK_NAME_LEN               (10)

//   <q>Configure whether the Idle Task should yield
//      <i> This only has effect if
//      <i> - The preemptive scheduler is being used.
//      <i> - The application creates tasks that run at the idle priority.
//      <i>(configIDLE_SHOULD_YIELD)
//         <0=> Disabled
//         <1=> Enabled
#define configIDLE_SHOULD_YIELD               (1)

//   <q>Support Tag values for tasks  
//      <i>(configUSE_APPLICATION_TASK_TAG)
//         <0=> Disabled
//         <1=> Enabled
#define configUSE_APPLICATION_TASK_TAG        (0)

// </h> Tasks

// <h> Co-routines

// <q>Use Co-routines
//    <i>(configUSE_CO_ROUTINES)
//      <0=> Unavailable
//      <1=> Available
#define configUSE_CO_ROUTINES                 (0)

//   <o>Number of Co-routine priority levels   <1-10>
//      <i>The number of priorities available to the co-routines. 
//      <i>Any number of  co-routines can share the same priority. 
//      <i>Tasks are prioritised separately - see configMAX_PRIORITIES. 
//      <i>(configMAX_CO_ROUTINE_PRIORITIES) 
#define configMAX_CO_ROUTINE_PRIORITIES       (2)

// </h> Co-routines

// <h> Timers

//   <q>Timer availability
//      <0=> Unavailable
//      <1=> Available
#define configUSE_TIMERS                      (1)

//   <o>Timer task priority <1-20>
//      <i>Sets the priority of the software timer service/daemon task
//      <i>(configTIMER_TASK_PRIORITY)
#define configTIMER_TASK_PRIORITY             (2)

//#define configTIMER_TASK_PRIORITY               (configMAX_PRIORITIES - 1)

//   <o>Timer queue length <1-20>
//      <i>Sets the length of the software timer command queue.
//      <i>(configTIMER_QUEUE_LENGTH)
#define configTIMER_QUEUE_LENGTH              (10)

//   <o>Timer stack depth [x configMINIMAL_STACK_SIZE] <1-20>
//      <i>Sets the stack depth allocated to the software timer service/daemon task
//      <i>(configTIMER_TASK_STACK_DEPTH)
#define configTIMER_TASK_STACK_DEPTH          (configMINIMAL_STACK_SIZE * 2)

// </h> Timers

// <h> Mutexes
//   <q>Provide MUTEX functionality  
//      <i>(configUSE_MUTEXES)
//      <0=> Mutexes are not available
//      <1=> Mutexes are available
#define configUSE_MUTEXES                     (1)

//   <q>Provide Recursive MUTEX functionality  
//      <i>(configUSE_RECURSIVE_MUTEXES)
//         <0=> Recursive Mutexes are not available
//         <1=> Recursive Mutexes are available
#define configUSE_RECURSIVE_MUTEXES           (1)

//   <q>Provide Counting MUTEX functionality  
//      <i>(configUSE_COUNTING_SEMAPHORES)
//         <0=> Counting Mutexes are not available
//         <1=> Counting Mutexes are available
#define configUSE_COUNTING_SEMAPHORES         (1)

// </h> Mutexes

//#define configUSE_TASK_NOTIFICATIONS            1

//#define configUSE_QUEUE_SETS                    0

//#define configUSE_TIME_SLICING                  0

//#define configUSE_NEWLIB_REENTRANT              0

// <h> Memory management

// <q>Enable allocation of FreeRTOS object statically
// <i> If configSUPPORT_STATIC_ALLOCATION is set to 1 then:
// <i>  - RTOS objects can be created using RAM provided by the application writer. 
// <i>  - The application writer must also provide two callback functions:
// <i>    - vApplicationGetIdleTaskMemory() to provide the memory for use by the RTOS Idle task, and
// <i>    - vApplicationGetTimerTaskMemory() to provide memory for use by the RTOS Daemon/Timer Service (if configUSE_TIMERS is set to 1) 
// <i> (configSUPPORT_STATIC_ALLOCATION)
#define configSUPPORT_STATIC_ALLOCATION              (0)

//#define configSUPPORT_DYNAMIC_ALLOCATION        1

// <o> Memory Management method
//    <i> This selects between several different memory management methods.
//    <i> The chosen method is used internally by FreeRTOS to allocate memory
//    <i> for stacks (tasks, timers etc) and some internal structures.
//    <i> See http://www.freertos.org/a00111.html
//    <i> (configFRTOS_MEMORY_SCHEME)
//       <1=> Method 1 - Simple allocator without de-allocation
//       <2=> Method 2 - Best fit with de-allocation but no coalescence 
//       <3=> Method 3 - Wrap standard C library malloc() and free()
//       <4=> Method 4 - Best fit with de-allocation and coalescence 
//       <5=> Method 5 - Allows non-contiguous regions for heap
//
#define configFRTOS_MEMORY_SCHEME 3

//   <o>Default stack size [words] <92-100000>
//      <i>Default size of the task stacks.
//      <i>Determines the idle task stack size
//      <i>(configMINIMAL_STACK_SIZE)
#define configMINIMAL_STACK_SIZE              ((unsigned short) 100)

//   <o2>Total Heap Size [bytes] <0-100000:4>
//      <i>The total amount of RAM available in the FreeRTOS heap. 
//      <i>This value will only be used if configSUPPORT_DYNAMIC_ALLOCATION is set to 1 and
//      <i>the application makes use of one of the sample memory allocation schemes provided.
//      <i>This is forced to zero if Memory Management Method 3 (C malloc) is used
//      <i>(configTOTAL_HEAP_SIZE)
#define configTOTAL_HEAP_SIZE                 ((size_t) ((configFRTOS_MEMORY_SCHEME == 3)?0:10000))

//   <o>Check for stack overflow  
//      <i>Method 1 - Check stack value when swapping tasks
//      <i>Method 2 - Method 1 + Check stack sentinel value overwrites when swapping tasks
//      <i>(configCHECK_FOR_STACK_OVERFLOW)
//         <0=> Disabled
//         <1=> Method 1 - Check stack value when swapping tasks
//         <2=> Method 2 - Method 1 + Check stack sentinel value overwrites when swapping tasks
#define configCHECK_FOR_STACK_OVERFLOW        (2)

// </h> Memory Management

// <h> Hook functions
//   <q>Use IDLE Hook
//      <i>The idle task is created automatically when the RTOS scheduler
//      <i>is started to ensure there is always at least one task that
//      <i>is able to run. It is created at the lowest possible priority
//      <i>to ensure it does not use any CPU time if there are higher
//      <i>priority application tasks in the ready state. 
//      <i> If enabled you may provide void vApplicationIdleHook( void );
//      <i>  (configUSE_IDLE_HOOK)
//        <0=> Hook disabled
//        <1=> Hook enabled
#define configUSE_IDLE_HOOK                   (1)

//   <q>Use TICK Hook
//      <i>The tick interrupt can optionally call an application defined hook
//      <i>(or callback) function - the tick hook. 
//      <i>The tick hook provides a convenient place to implement timer functionality. 
//      <i> If enabled you may provide void vApplicationTickHook( void );
//      <i>  (configUSE_TICK_HOOK)
//         <0=> Hook disabled
//         <1=> Hook enabled
#define configUSE_TICK_HOOK                   (1)

//   <q>Use malloc() failure hook  
//      <i> This callback is called if the FreeRTOS heap is exhausted
//      <i>If enabled you may provide void vApplicationMallocFailedHook( void );
//      <i>(configUSE_MALLOC_FAILED_HOOK)
//         <0=> Hook disabled
//         <1=> Hook enabled
#define configUSE_MALLOC_FAILED_HOOK          (1)

//#define configUSE_STATS_FORMATTING_FUNCTIONS    0

//#define configUSE_DAEMON_TASK_STARTUP_HOOK      0

// </h>


// <h> API availability
// <i>These may be left enabled as the linker will remove unused API functions anyway

// <q>USE vTaskPrioritySet <constant>
// <i> (INCLUDE_vTaskPrioritySet)
#define INCLUDE_vTaskPrioritySet              (1)

// <q>USE uxTaskPriorityGet  <constant>
// <i>  (INCLUDE_uxTaskPriorityGet)
#define INCLUDE_uxTaskPriorityGet             (1)

// <q>USE vTaskDelete  <constant>
// <i>  (INCLUDE_vTaskDelete)
#define INCLUDE_vTaskDelete                   (1)

// <q>USE vTaskSuspend  <constant>
// <i>  (INCLUDE_vTaskSuspend)
#define INCLUDE_vTaskSuspend                  (1)

// <q>USE vTaskCleanUpResources  <constant>
// <i>  (INCLUDE_vTaskCleanUpResources)
#define INCLUDE_vTaskCleanUpResources         (1)

// <q>USE vTaskDelayUntil  <constant>
// <i>  (INCLUDE_vTaskDelayUntil)
#define INCLUDE_vTaskDelayUntil               (1)

// <q>USE vTaskDelay  <constant>
// <i>  (INCLUDE_vTaskDelay)
#define INCLUDE_vTaskDelay                    (1)

// </h> API availability

// <e> Debug
// <i> These options enable features used with a kernel aware debugging
#define usbdmFtreeRTOSDebugEnable (0)
//   <q>Use Trace facility  
//   <i> Enable to include additional structure members and functions to assist with execution visualisation and tracing. 
//      <i>(configUSE_TRACE_FACILITY)
#define configUSE_TRACE_FACILITY              (usbdmFtreeRTOSDebugEnable?(1):0)

//#define configNUM_THREAD_LOCAL_STORAGE_POINTERS 5 // use this?

//#define configAPPLICATION_ALLOCATED_HEAP        0

//   <o>Maximum number of queues and semaphores Registry entries <1-20>
//      <i> The queue registry has two purposes, both of which are associated with RTOS kernel aware debugging:
//      <i> - It allows a textual name to be associated with a queue for easy queue identification within a debugging GUI.
//      <i> - It contains the information required by a debugger to locate each registered queue and semaphore.
//      <i> This should not be used unless using a RTOS aware debugger
//      <i>(configQUEUE_REGISTRY_SIZE)
#define configQUEUE_REGISTRY_SIZE             (usbdmFtreeRTOSDebugEnable?(5):0)

//   <q>Generate runtime statistics
//      <i>Accumulates runtime data for Task display.
//      <i>(configGENERATE_RUN_TIME_STATS)
#define configGENERATE_RUN_TIME_STATS            (usbdmFtreeRTOSDebugEnable?(1):0)

//   <q>Generate RTOS information block
//      <i> This creates a code structure that allows the RTOS aware debugger to locate RTOS resources
//      <i> (configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H)
#define configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H            (usbdmFtreeRTOSDebugEnable?(1):0)

//   <q>Record stack usage
//      <i>Accumulates runtime data for Stack Usage display.
//      <i>(configRECORD_STACK_HIGH_ADDRESS)
#define configRECORD_STACK_HIGH_ADDRESS            (usbdmFtreeRTOSDebugEnable?(1):0)
// </e> Debug

#endif /* _FREERTOS_CONFIG_CFG_ */

