<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- usbphy_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="High Speed USB PHY">

   <xi:include href="_default_instance.xml"/>
   <xi:include href="_mapPinsOption.xml"/>

   <binaryOption key="usbphy_ctrl_sftrst"
      hidden="true"
      typeName="UsbphyReset"
      description="Soft-reset of PHY registers"
      toolTip="Soft-reset the USBPHY_PWD, USBPHY_TX, USBPHY_RX, and USBPHY_CTRL registers">
      <choice value="1" name="Hold in reset"       enum="HoldInReset" isDefault="true" />
      <choice value="0" name="Release from reset"  enum="Release"   />
   </binaryOption>

   <binaryOption key="usbphy_ctrl_clkgate"
      hidden="true"
      typeName="UsbphyUtmiClkEn"
      description="UTMI clock gate"
      toolTip="Clock gate for UTMI\n
               Configuration state is kept while gated\n
               UTMI clocks can be automatically enabled on any wakeup event when USB\n
               is suspended while ENAUTOCLR_CLKGATE bit of USBPHY_CTRL is enabled">
      <choice value="1" name="Disabled" enum="Disabled" isDefault="true" />
      <choice value="0" name="Enabled"  enum="Enabled"   />
   </binaryOption>

   <binaryOption key="usbphy_pll_sic_pll_power"
      hidden="true"
      register="pll_sic"
      typeName="UsbPllPwr"
      description="Power up the USB PLL"
      toolTip="Power control for the USB PLL">
      <choice value="1" name="Disabled" enum="Disabled" isDefault="true" />
      <choice value="0" name="Enabled"  enum="Enabled"   />
   </binaryOption>

   <choiceOption key="usbphy_pll_sic_pll_div_sel"
      ref="(/OSC0/osc_clock==12_MHz)?0:((/OSC0/osc_clock==16_MHz)?1:2)"
      enabledBy="(/OSC0/osc_cr_erclken)&amp;&amp;((/OSC0/osc_clock==12_MHz)||(/OSC0/osc_clock==16_MHz)||(/OSC0/osc_clock==24_MHz))
                 ##Disabled by unsuitable input clock (OSCERCLK)"
      register="pll_sic"
      locked="true"
      derived="true"
      typeName="UsbPllInputClkFrq"
      description="USB PLL feedback loop divider"
      toolTip="The USB PLL produces a 480MHz clock from the input clock.\n
               This field sets the PLL feedback divider appropriately.\n
               It is chosen to match the input clock frequency (OSCCLK)">
      <choice value="0b10" name="12MHz input" enum="12MHz"  isDefault="true" />
      <choice value="0b01" name="16MHz input" enum="16MHz"  />
      <choice value="0b00" name="24MHz input" enum="24MHz"  />
   </choiceOption>

   <intOption key="pfd_pll_frequency"
      enabledBy="(/OSC0/osc_clock==12_MHz)||(/OSC0/osc_clock==16_MHz)||(/OSC0/osc_clock==24_MHz)
                 ##Disabled by unsuitable input clock (OSCCLK)"
      description="Fixed frequency output of the USBPLL"
      toolTip="This fixed frequency clock is produced by the USBPLL from the input clock (12/16/24MHz)"
      value="400000000"
      units="Hz"
      locked="true" />

   <for keys="n" dim="/SIM/numberOfClockSettings" >
      <aliasCategoryOption key="/MCG/ClockConfig[%(n)]" derived="true" locked="true" >

         <aliasOption key="/OSC0/osc_cr_erclken" locked="false" />
         <aliasOption key="/MCG/mcg_c1_irclken[%(n)]" />
         <aliasOption key="/OSC0/osc_clock" />

         <binaryOption key="usbpllPreconditionsMet[%(n)]"
            ref="(/SMC/smc_pmctrl_runm[%(n)]!=1)&amp;&amp;(/OSC0/osc_cr_erclken)&amp;&amp;(/MCG/mcg_c1_irclken[%(n)])&amp;&amp;((/OSC0/osc_clock==12_MHz)||(/OSC0/osc_clock==16_MHz)||(/OSC0/osc_clock==24_MHz))"
            locked="true"
            derived="true"
            description="USB PLL preconditions"
            toolTip="Indicates if preconditions for USB PLL operation are satisfied\n
                     - In RUN or HSRUN mode
                     - 32kHz IRC is available (MCG_C1.IRCLKEN=1)\n
                     - OSC0 is available (OSC_CR.ERCLKEN=1) and of correct frequency (12,16 or 24MHz)\n">
            <choice value="0" name="Pll not available"  isDefault="true" />
            <choice value="1" name="PLL available"      />
         </binaryOption>

         <binaryOption key="usbphy_pll_sic_pll_enable[%(n)]"
            enabledBy="usbpllPreconditionsMet[%(n)], Preconditions not met"
            typeName="UsbPllClock"
            description="Enable clock output"
            toolTip="Enables the clock output from the USB PLL[%(n)]">
            <choice value="0" enum="Disabled" name="Disabled" />
            <choice value="1" enum="Enabled" name="Enabled" isDefault="true" />
         </binaryOption>

         <binaryOption key="usbphy_pll_sic_pll_en_usb_clks[%(n)]"
            enabledBy="usbpllPreconditionsMet[%(n)], Preconditions not met"
            typeName="UsbPllUsbClock"
            description="Enable USB clock output"
            toolTip="Enables the USB clock output from the USB PHY PLL[%(n)]">
            <choice value="0" enum="Disabled" name="Disabled" />
            <choice value="1" enum="Enabled" name="Enabled" />
         </binaryOption>

         <choiceOption key="usbphy_anactrl_pfd_frac[%(n)]"
            enabledBy="usbpllPreconditionsMet[%(n)], Preconditions not met"
            target="internal_pfd_clock_frequency[%(n)]"
            typeName="UsbPfdClkFreq"
            description="PFD clock [USBPFDCLK] divider"
            toolTip="USBPFD (Phase Fractional Divider) input/output ratio">
            <choice value="18"  name="/18 = 400.00 MHz" enum="F400000000" ref="pfd_pll_frequency" />
            <choice value="19"  name="/19 = 378.95 MHz" enum="F378947368" ref="(pfd_pll_frequency*18)/19"/>
            <choice value="20"  name="/20 = 360.00 MHz" enum="F360000000" ref="(pfd_pll_frequency*18)/20"/>
            <choice value="21"  name="/21 = 342.86 MHz" enum="F342857143" ref="(pfd_pll_frequency*18)/21"/>
            <choice value="22"  name="/22 = 327.27 MHz" enum="F327272727" ref="(pfd_pll_frequency*18)/22"/>
            <choice value="23"  name="/23 = 313.04 MHz" enum="F313043478" ref="(pfd_pll_frequency*18)/23"/>
            <choice value="24"  name="/24 = 300.00 MHz" enum="F300000000" ref="(pfd_pll_frequency*18)/24"/>
            <choice value="25"  name="/25 = 288.00 MHz" enum="F288000000" ref="(pfd_pll_frequency*18)/25"/>
            <choice value="26"  name="/26 = 276.92 MHz" enum="F276923077" ref="(pfd_pll_frequency*18)/26"/>
            <choice value="27"  name="/27 = 266.67 MHz" enum="F266666667" ref="(pfd_pll_frequency*18)/27"/>
            <choice value="28"  name="/28 = 257.15 MHz" enum="F257142857" ref="(pfd_pll_frequency*18)/28"/>
            <choice value="29"  name="/29 = 248.28 MHz" enum="F248275862" ref="(pfd_pll_frequency*18)/29"/>
            <choice value="30"  name="/30 = 240.00 MHz" enum="F240000000" ref="(pfd_pll_frequency*18)/30" isDefault="true" />
            <choice value="31"  name="/31 = 232.25 MHz" enum="F232258065" ref="(pfd_pll_frequency*18)/31"/>
            <choice value="32"  name="/32 = 225.00 MHz" enum="F225000000" ref="(pfd_pll_frequency*18)/32"/>
            <choice value="33"  name="/33 = 218.18 MHz" enum="F218181818" ref="(pfd_pll_frequency*18)/33"/>
            <choice value="34"  name="/34 = 211.76 MHz" enum="F211764706" ref="(pfd_pll_frequency*18)/34"/>
            <choice value="35"  name="/35 = 205.71 MHz" enum="F205714286" ref="(pfd_pll_frequency*18)/35"/>
         </choiceOption>

         <intOption key="internal_pfd_clock_frequency[%(n)]"
            enabledBy="usbpllPreconditionsMet[%(n)], Preconditions not met"
            description="Internal PFD clock (after PLL)"
            toolTip="Clock available from the USBPFD"
            derived="true"
            units="Hz"
            locked="true"
            disabledValue="0" />

         <choiceOption key="usbphy_anactrl_pfd_clk_sel[%(n)]"
            enabledBy="usbpllPreconditionsMet[%(n)], Preconditions not met"
            target="/SIM/usb1pfdclk_Clock[%(n)]"
            typeName="UsbPfdClkSrc"
            description="PFD clock [USBPFDCLK] output selection"
            toolTip="Clock to output as PFD output clock [USBPFDCLK]">
            <choice value="0b00" name="Input clock"  enum="Xtal"     ref="/OSC0/oscer_clock"                      />
            <choice value="0b11" name="pfd_clk"      enum="Pfd"      ref="internal_pfd_clock_frequency[%(n)]"     />
            <choice value="0b10" name="pfd_clk/2"    enum="PfdDiv2"  ref="(internal_pfd_clock_frequency[%(n)])/2" isDefault="true"/>
            <choice value="0b01" name="pfd_clk/4"    enum="PfdDiv4"  ref="(internal_pfd_clock_frequency[%(n)])/4" />
         </choiceOption>

         <aliasOption key="/SIM/usb1pfdclk_Clock[%(n)]" />
      </aliasCategoryOption>
   </for>

   <clockCodeTemplate variable="usbphy_ctrl_sftrst"
   ><![CDATA[
      \t/**
      \t * Apply %description
      \t *
      \t * %tooltip
      \t
      \t * @note The PHY is held in reset until releasePhyReset()
      \t */
      \tstatic void assertPhyReset() {
      \t   %register_SET = %mask;
      \t   (void)%register;
      \t}

      \t/**
      \t * Release %description
      \t *
      \t * %tooltip
      \t */
      \tstatic void releasePhyReset() {
      \t   %register_CLR = %mask;
      \t}\n\n
   ]]></clockCodeTemplate>

   <clockCodeTemplate variable="usbphy_ctrl_clkgate"
   ><![CDATA[
      \t/**
      \t * Enable %description
      \t *
      \t * %tooltip
      \t */
      \tstatic void enableUtmiClocks() {
      \t   %register_CLR = %mask;
      \t}

      \t/**
      \t * Disable %description
      \t *
      \t * %tooltip
      \t */
      \tstatic void disableUtmiClocks() {
      \t   %register_SET = %mask;
      \t}\n\n
   ]]></clockCodeTemplate>

   <clockCodeTemplate variable="usbphy_pll_sic_pll_power"
   ><![CDATA[
      \t/**
      \t * Enable %description
      \t *
      \t * %tooltip
      \t */
      \tstatic void enablePllPower() {
      \t   %register_CLR = %mask;
      \t}

      \t/**
      \t * Disable %description
      \t *
      \t * %tooltip
      \t */
      \tstatic void disablePllPower() {
      \t   %register_SET = %mask;
      \t}\n\n
   ]]></clockCodeTemplate>

   <clockCodeTemplate variable="usbphy_pll_sic_pll_div_sel"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * %tooltip
      \t *
      \t * @param %paramName
      \t */
      \tstatic void setPllInputFrequency(%paramType %paramName) {
      \t   %register_CLR = %mask;
      \t   %register_SET = %paramName;
      \t}

      \t /// %description
      \t static constexpr %paramType %paramName_default = %symbolicExpression; // %shortDescription \n\n
   ]]></clockCodeTemplate>

   <clockCodeTemplate variable="usbphy_anactrl_pfd_frac[]"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setPfdClkFrequency(%paramType %paramName) {
      \t   %register_CLR = %mask;
      \t   %register_SET = %paramName;
      \t}

      \t /// %description
      \t static constexpr %paramType %paramName_default = %symbolicExpression; // %shortDescription\n\n
   ]]></clockCodeTemplate>

   <clockCodeTemplate variable="usbphy_anactrl_pfd_clk_sel[]"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setPfdClockSrc(%paramType %paramName) {
      \t   %register_CLR = %mask;
      \t   %register_SET = %paramName;
      \t}

      \t /// %description
      \t static constexpr %paramType %paramName_default = %symbolicExpression; // %shortDescription\n\n
   ]]></clockCodeTemplate>

   <setTemplate variables="usbphy_anactrl_pfd_clk_sel[],usbphy_anactrl_pfd_frac[]"
   ><![CDATA[
      \t/**
      \t * %description0
      \t *
      %paramDescription
      \t */
      \tstatic void setPfdClk(
      %params) {
      \t   %register_CLR = %mask;
      \t   %register_SET = %paramExpression;
      \t}\n\n
   ]]></setTemplate>

   <template > <![CDATA[
      \t/**
      \t * Get USB1PFDCLK frequency
      \t *
      \t * @return USB1PFDCLK frequency in Hz
      \t */
      \tstatic unsigned getClockFrequency() {
      \t
      \t   if ((usbphy->ANACTRL & USBPHY_ANACTRL_PFD_CLKGATE_MASK) != 0) {
      \t      // Gated (disabled)
      \t      return 0;
      \t   }
      \t   unsigned frac = (usbphy->ANACTRL & USBPHY_ANACTRL_PFD_FRAC_MASK)>>USBPHY_ANACTRL_CLR_PFD_FRAC_SHIFT;
      \t   unsigned pfdClock = (480000000UL*18)/frac;
      \t
      \t   switch(usbphy->ANACTRL & USBPHY_ANACTRL_PFD_CLK_SEL_MASK) {
      \t      default:
      \t      case UsbPfdClkSrc_Xtal    : return Osc0Info::getOscerClock();
      \t      case UsbPfdClkSrc_Pfd     : return pfdClock;
      \t      case UsbPfdClkSrc_PfdDiv2 : return pfdClock/2;
      \t      case UsbPfdClkSrc_PfdDiv4 : return pfdClock/4;
      \t   }
      \t}\n\n
   ]]></template>

   <template key="/USBPHY/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n
   ]]></template>

   <xi:include href="_irqOption.xml"/>

   <xi:include href="_clockOption.xml"/>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id = "usbphy_files">
      <copy source="Project_Headers/usbphy.h"                   target="Project_Headers/usbphy.h"                     overwrite="true"  derived="true" />
   </projectActionList>

   <signals/>

</peripheralPage>
