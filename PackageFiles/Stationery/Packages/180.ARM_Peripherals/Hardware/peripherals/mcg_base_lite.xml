<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- mgc_lite.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="MCG" description="Multipurpose Clock Generator">

   <xi:include href="_default_instance.xml"/>

   <xi:include href="_currentClockSelection.xml"/>

   <category name="LIRC" description="Low Speed Internal Reference Clock Sources [LIRC]"
      toolTip="SLOW_IRC, FAST_IRC, MCGIRCLK" >
      <intOption key="system_slow_irc_clock"
         origin="SLOW IRC"
         units="Hz"
         description="Frequency of Slow Internal Reference [SIRC] Clock"
         toolTip="Dependent on device and clock Trim. [Typically ~2MHz]"
         value="2MHz" />

      <intOption key="system_fast_irc_clock"
         origin="FAST IRC"
         units="Hz"
         description="Frequency of Fast Internal Reference [FIRC] Clock"
         toolTip="Dependent on device and clock Trim. [Typically ~8MHz]"
         value="8MHz" />
   </category>

   <category name="HIRC" description="High Speed Internal Clock Sources"
      toolTip="IRCLK48MCLK, USB_CLKIN, LPO" >

      <intOption key="system_usb_clkin_clock"
         origin="USB Clock In pin"
         units="Hz"
         description="Frequency of External USB Clock"
         toolTip="Externally provided clock for USB on USB_CLKIN"
         value="0" />

      <intOption key="system_irc48m_clock"
         constant="true"
         units="Hz"
         description="Frequency of Internal 48MHz Clock"
         toolTip="48 MHz Internal Oscillator [Trimmed against USB bus]"
         origin="48MHz clock from IRC48MCLK"
         value="48MHz" />
   </category>

   <category name="LPO" description="Low Power Clock Sources" >
      <aliasOption key="/PMC/system_low_power_clock"/>
   </category>

   <category name="OSC" description="OSC External Reference Clock/Oscillator [OSCCLK]" >
      <aliasOption key="/OSC0/osc_input_freq" constant="false" />
      <binaryOption key="mcg_c2_erefs0" condition="mcg_c2_erefs0_present"
         description="External Reference Select"
         toolTip="Determines whether a clock or crystal is used for the external reference clock"
         disabledValue="1">
         <choice value="0" name="External clock" />
         <choice value="1" name="Oscillator" isDefault="true" />
      </binaryOption>
      <binaryOption key="mcg_c2_hgo0" condition="mcg_c2_hgo0_present"
         description="Oscillator Gain"
         toolTip="Controls the crystal oscillator mode of operation">
         <choice value="0" name="Low power" isDefault="true"/>
         <choice value="1" name="High gain" />
      </binaryOption>
      <choiceOption key="mcg_c2_range0" condition="mcg_c2_range0_present"
         derived="true"
         constant="true"
         description="Frequency Range Select"
         toolTip="Selects the frequency range for the crystal oscillator">
         <choice value="0" name="Low range" />
         <choice value="1" name="High range" />
         <choice value="2" name="Very High range" />
            <choice value="0" name="Unused" />
      </choiceOption>
      <aliasOption key="/OSC0/osc_clock" />

   </category>

   <category name="RTC" description="RTC External Reference Clock/Oscillator [ERCLK32K]">
      <aliasOption key="/SIM/sim_sopt1_osc32ksel"   optional="true" constant="false" />
      <aliasOption key="/SIM/system_erclk32k_clock" optional="true"/>
   </category>

   <aliasOption key="/SIM/numberOfClockSettings" />

   <binaryOption key="enableClockConfiguration[0]" constant="true" hidden="true" >
      <choice value="false" name="Disabled" />
      <choice value="true"  name="Enabled"  isDefault="true"/>
   </binaryOption>

   <for keys="n" dim="1,/SIM/numberOfClockSettings">
      <binaryOption key="enableClockConfiguration[%(n)]"
         hidden="true"
         description="Enable this clock settings"
         toolTip="If disabled this clock setting will be removed from the generated code" >
         <choice value="false" name="Disabled" isDefault="true" />
         <choice value="true"  name="Enabled" />
      </binaryOption>
   </for>

   <for keys="n" dim="/SIM/numberOfClockSettings">
      <categoryOption key="ClockConfig[%(n)]"
         description="Clock configuration"
         toolTip="Clock configurations for different run modes"
         value="ClockConfig_%(n)"
         disabledValue="Disabled" >

         <aliasOption key="enableClockConfiguration[%(n)]" constant="false" />

         <aliasOption key="/SMC/smc_pmctrl_runm[%(n)]" constant="false" />

      <binaryOption key="mcg_mc_hircen[%(n)]" condition="mcg_mc_hircen_present"
         enabledBy="/SMC/smc_pmctrl_runm[%(n)] == 0"
         description="High-frequency IRC Clock Enable [MCGPCLK]"
         toolTip="Enables the HIRC even when MCG_Lite is not working at HIRC mode">
         <choice value="0" name="Enabled as required by MCG mode" />
         <choice value="1" name="Always enabled" />
      </binaryOption>

      <binaryOption key="mcg_mc_hirclpen[%(n)]" condition="mcg_mc_hirclpen_present"
         description="High-frequency IRC Low-power Mode Enable [MCGPCLK]"
         toolTip="Enables the HIRC in Low-power modes such as Stop/VLPR/VLPW/VLPS mode">
         <choice value="0" name="Disabled in low power modes" />
         <choice value="1" name="Enabled in low power modes"  />
      </binaryOption>

      <binaryOption key="mcg_c2_ircs[%(n)]"
         description="Internal Reference [MCGIRCLK] Clock Source"
         toolTip="Clock Source for MCGIRCLK" >
         <choice value="0" name="Slow internal reference clock" isDefault="true"/>
         <choice value="1" name="Fast internal reference clock" />
      </binaryOption>

      <binaryOption key="mcg_c1_irclken[%(n)]"
         description="Internal Reference Clock Enable [MCGIRCLK]"
         toolTip="Enables the LIRC, even when MCG_Lite is not working at LIRC modes[%(n)]">
         <choice value="0" name="Enabled as required by MCG mode" />
         <choice value="1" name="Always enabled" isDefault="true" />
      </binaryOption>

      <binaryOption key="mcg_c1_irefsten[%(n)]"
         description="Internal Reference Stop Enable [MCGIRCLK]"
         toolTip="Determines if the LIRC is enabled in Stop mode">
         <choice value="0" name="IR disabled in STOP" />
         <choice value="1" name="IR enabled in STOP" />
      </binaryOption>

      <choiceOption key="mcg_sc_fcrdiv[%(n)]"
         description="Internal Clock Reference Divider[LIRC_DIV1]"
         toolTip="Selects the amount to divide down the selected internal reference clock\n
            The FIR clock is available for use as MCGOUTCLK and after further division as MCGIRCLK">
         <choice value="0" name="Divide by 1" isDefault="true" />
         <choice value="1" name="Divide by 2" />
         <choice value="2" name="Divide by 4" />
         <choice value="3" name="Divide by 8" />
         <choice value="4" name="Divide by 16" />
         <choice value="5" name="Divide by 32" />
         <choice value="6" name="Divide by 64" />
         <choice value="7" name="Divide by 128" />
      </choiceOption>

      <intOption key="system_lirc_clock[%(n)]"
         constant="true"
         units="Hz"
         description="Frequency of Low Speed Internal Reference [LIRC_CLK] "
         toolTip="Derived from system_slow_irc_clock or system_fast_irc_clock"
         value="2000000"/>

         <choiceOption key="mcgClockMode[%(n)]"
            enumStem="McgClockMode"
            valueFormat="%s"
            description="MCG Clock Mode"
            toolTip="Clock Modes\n
               LIRC_8MHz  -  8 MHz low power internal reference clock\n
               LIRC_2MHz  -  2 MHz low power internal reference clock\n
               HIRC_48MHz -  48 MHz high speed internal reference clock\n
               EXT        -  External reference clock (OSCCLK)" >
            <choice name="2 MHz low power IRC (LIRC_2MHz)"  enum="LIRC_2MHz"  code="McgClockMode_LIRC_2M"    value="0"  />
            <choice name="8 MHz low power IRC (LIRC_8MHz)"  enum="LIRC_8MHz"  code="McgClockMode_LIRC_8M"    value="1"  />
            <choice name="48 MHz IRC (HIRC_48MHz)"          enum="HIRC_48MHz" code="McgClockMode_HIRC_48MHz" value="2"  />
            <choice name="External (EXT)"                   enum="EXT"        code="McgClockMode_EXT"        value="3"  />
         </choiceOption>

      <intOption key="system_lirc_div1_clock[%(n)]"
         constant="true"
         units="Hz"
         description="Frequency of Low Speed Internal Reference [LIRC_DIV1_CLK] "
         toolTip="Derived from system_slow_irc_clock or system_fast_irc_clock/lirc_div1"
         value="2000000" />

      <choiceOption key="mcg_mc_lirc_div2[%(n)]"
         description="Second Low-frequency Internal Reference Clock Divider"
         toolTip="Selects the factor value to further divide the LIRC source">
         <choice value="0" name="Divide by 1" isDefault="true" />
         <choice value="1" name="Divide by 2" />
         <choice value="2" name="Divide by 4" />
         <choice value="3" name="Divide by 8" />
         <choice value="4" name="Divide by 16" />
         <choice value="5" name="Divide by 32" />
         <choice value="6" name="Divide by 64" />
         <choice value="7" name="Divide by 128" />
      </choiceOption>

      <intOption key="system_mcgirclk_clock[%(n)]"
         derived="true"
         constant="true"
         units="Hz"
         description="Frequency of Internal Reference [MCGIRCLK] "
         toolTip="Derived from Slow IRC or Fast IRC/lirc_div1/lirc_div2"
         value="2000000" />

      <intOption key="system_mcgpclk_clock[%(n)]"
         derived="true"
         constant="true"
         units="Hz"
         description="MCGPCLK Output clock frequency"
         toolTip="Output of HIRC_48MHz available as peripheral clock"
         value="48000000" />

      <aliasOption key="/OSC0/osc_undiv_clock" optional="true" />
      <aliasOption key="/OSC0/osc_clock" constant="true" />
      <aliasOption key="/SIM/system_erclk32k_clock" constant="true" />
      <aliasOption key="/PMC/system_low_power_clock" constant="true" />

      <stringOption key="system_mcgoutclk_clock_source[%(n)]"
         derived="true"
         constant="true"
         description="System MCG Output Clock source [MCGOUTCLK]"
         toolTip="Source of MCG Output Clock\n
                  Determined by current clock mode" />

      <intOption key="system_mcgoutclk_clock[%(n)]"
         derived="true"
         constant="true"
         units="Hz"
         description="System MCG Output Clock [MCGOUTCLK]"
         toolTip="MCG Main clock output\n
                  Derived from HIRC_48MHz, LIRC-8M/2M, EXT" />

      <aliasOption key="/SIM/system_core_clock[%(n)]"    constant="false" />
      <aliasOption key="/SIM/system_bus_clock[%(n)]"     constant="false" />

      <category name="Device Parameters" description="Register values">
         <category name="MCG_C1" description="MCG Control Register 1">
            <choiceOption key="mcg_c1_clks[%(n)]"
               derived="true"
               constant="true"
               description="MCGOUTCLK Clock Source Select"
               toolTip="Selects the clock source for MCGOUTCLK\n
                        This option is determined by the Clock Mode selection\n" >
               <choice value="0" name="HIRC clock [HIRC mode]" />
               <choice value="1" name="LIRC clock [LIRC2M or LIRC8M mode]" />
               <choice value="2" name="External clock (OSCCLK)[EXT mode]" />
               <choice value="3" name="Reserved" />
            </choiceOption>
            <aliasOption key="mcg_c1_irclken[%(n)]" />
            <aliasOption key="mcg_c1_irefsten[%(n)]" />
         </category>

         <category name="MCG_C2" description="MCG Control Register 2">
            <aliasOption key="mcg_c2_range0" optional="true" />
            <aliasOption key="mcg_c2_hgo0" optional="true" />
            <aliasOption key="mcg_c2_erefs0" />
            <aliasOption key="mcg_c2_ircs[%(n)]" />
         </category>

         <category name="MCG_SC" description="MCG Status and Control Register" >
            <aliasOption key="mcg_sc_fcrdiv[%(n)]" />
         </category>

         <category name="MCG_MC" description="MCG Miscellaneous Control Register" >
            <aliasOption key="mcg_mc_hircen[%(n)]" />
            <aliasOption key="mcg_mc_lirc_div2[%(n)]" />
         </category>
      </category>
      </categoryOption>
   </for>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.ClockValidator_MCG_Lite" dim="/SIM/numberOfClockSettings">
   </validate>

   <projectActionList id = "mcg_files" >
      <copy source="Startup_Code/mcg_lite.cpp"            target="Startup_Code/mcg_lite.cpp"             overwrite="true"  derived="true" />
      <copy source="Project_Headers/mcg_lite.h"           target="Project_Headers/mcg.h"                 overwrite="true"  derived="true" />
      <copy source="Snippets/mcg-lite-test.cpp"           target="Snippets/mcg-lite-test.cpp"            overwrite="true"  derived="true" />
      <copy source="Snippets/mcg-run-mode-test-mk22f.cpp" target="Snippets/mcg-run-mode-test-mk22f.cpp"  overwrite="true"  derived="true" />
      <copy source="Snippets/mcg-run-mode-test-mk20.cpp"  target="Snippets/mcg-run-mode-test-mk20.cpp"   overwrite="true"  derived="true" />
      <deleteResource target="Project_Headers/clock_configure.h" />
      <deleteResource target="Startup_Code/clock.c" />
   </projectActionList>

   <template><![CDATA[
      \t//! Frequency of Slow Internal Reference Clock [~2MHz]
      \tstatic constexpr uint32_t system_slow_lirc_clock = $(system_slow_irc_clock)UL;

      \t//! Frequency of Fast Internal Reference Clock [~8MHz]
      \tstatic constexpr uint32_t system_fast_lirc_clock = $(system_fast_irc_clock)UL;

      \t//! Frequency of High Speed Internal Reference Clock [~48MHz]
      \tstatic constexpr uint32_t system_hirc_clock      = $(system_irc48m_clock)UL;

      \t/**
      \t * Get HIRC_CLK
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic uint32_t getMcgPClk() {
      \t   // Directly enabled or required by current MCG clock mode
      \t   if ((mcg->MC&MCG_MC_HIRCEN_MASK) || ((mcg->S&MCG_S_CLKST_MASK) == MCG_S_CLKST(0))) {
      \t      return system_hirc_clock;
      \t   }
      \t   else {
      \t      return 0;
      \t   }
      \t}

      \t/**
      \t * Get LIRC_CLK
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic uint32_t getLircClk() {
      \t   if ((mcg->C1&MCG_C1_IRCLKEN_MASK) || ((mcg->S&MCG_S_CLKST_MASK) == MCG_S_CLKST(1))) {
      \t      if (mcg->C2&MCG_C2_IRCS_MASK) {
      \t         return system_fast_lirc_clock;
      \t      }
      \t      else {
      \t         return system_slow_lirc_clock;
      \t      }
      \t   }
      \t   else {
      \t      return 0;
      \t   }
      \t}

      \t/**
      \t * Get LIRC_DIV1_CLK
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic uint32_t getLircDiv1Clk() {
      \t   return getLircClk()/(1<<((mcg->SC&MCG_SC_FCRDIV_MASK)>>MCG_SC_FCRDIV_SHIFT));
      \t}
      \t
      \t/**
      \t * Get MCGIRCLK
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic uint32_t getMcgIrClock() {
      \t   return getLircDiv1Clk()/(1<<((mcg->MC&MCG_MC_LIRC_DIV2_MASK)>>MCG_MC_LIRC_DIV2_SHIFT));
      \t}

      \t/**
      \t * Get MCGOUTCLK
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic uint32_t getMcgOutClock() {
      \t   switch (mcg->S&MCG_S_CLKST_MASK) {
      \t   case MCG_S_CLKST(0): // HIRC
      \t      return getMcgPClk();
      \t   case MCG_S_CLKST(1): // LIRC (IRC2Mz/IRC8Mz)/DIV1
      \t      return getLircDiv1Clk();
      \t   case MCG_S_CLKST(2): // External clock (OSC0)
      \t      return Osc0Info::getOscClock();
      \t   default:
      \t   case MCG_S_CLKST(3): // Reserved
      \t      return 0;
      \t   }
      \t}\n\n
   ]]></template>

   <template key="ClockInfoType" namespace="all" ><![CDATA[
      \t//! Structure for clock configurations
      \tstruct ClockInfo {
      \t   //! System Clock Divider Register 1
      \t   const uint32_t clkdiv1;

      \t   //! SIM SOPT2 - Clock selectors for various peripherals
      \t   const uint32_t sopt2;

      \t   //! Clock Mode
      \t   const McgClockMode clockMode;

      \t   //! Run Mode
      \t   const SmcRunMode runMode;

      \t   //! Control Register 1 - IRCLKEN, IREFSTEN, (-CLKS)
      \t   const uint8_t c1;
      \t   //! Control Register 2 - RANGE0, HGO0, EREFS0, IRCS
      \t   const uint8_t c2;
      \t   //! Status and Control Register - FCRDIV
      \t   const uint8_t sc;
      \t   //! Miscellaneous Control Register - HIRCEN, LIRC_DIV2 (-HIRCLPEN)
      \t   const uint8_t mc;
      \t};
   ]]></template>

   <for keys="n" dim="/SIM/numberOfClockSettings">
      <template key="ClockConfig" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]" ><![CDATA[
         \t$(ClockConfig[%(n)]://-- missing name for configuration --),\n
      ]]></template>
   </for>

   <for keys="n" dim="/SIM/numberOfClockSettings">
      <template key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]"
      ><![CDATA[
         \t{  // $(ClockConfig[%(n)]) ($(mcgClockMode[%(n)].enum[]))
         \t\n
      ]]></template>

      <initialValueTemplate key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]"
         terminator=","
         variables="
            /SIM/sim_clkdiv1_outdiv4[%(n)],
            /SIM/sim_clkdiv1_outdiv3[%(n)],
            /SIM/sim_clkdiv1_outdiv2[%(n)],
            /SIM/sim_clkdiv1_outdiv1[%(n)]"
      ><![CDATA[\t   /// SIM CLKDIV1 System Clock Divider Register 1 %initExpression\n\n ]]></initialValueTemplate>

      <initialValueTemplate key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]"
         terminator=","
         variables=
            "/SIM/sim_clkdiv3_pllfll[%(n)]"
      ><![CDATA[\t   /// SIM CLKDIV3 System Clock Divider Register 3 %initExpression\n\n ]]></initialValueTemplate>

      <template key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]" ><![CDATA[
         \t   Sim::DefaultSopt2Values[$(ClockConfig[%(n)])].sopt2,\n\n
      ]]></template>

      <initialValueTemplate key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]"
         terminator=","
         variables="
            mcgClockMode[%(n)]"
      ><![CDATA[\t   /// Clock Mode %initExpression\n\n ]]></initialValueTemplate>

      <initialValueTemplate key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]"
         terminator=","
         variables=
            "/SMC/smc_pmctrl_runm[%(n)]"
      ><![CDATA[\t   /// Run Mode %initExpression\n\n ]]></initialValueTemplate>

      <initialValueTemplate key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]"
         terminator=","
         variables="
            mcg_c1_irclken[%(n)],
            mcg_c1_irefsten[%(n)]"
      ><![CDATA[\t   /// Control Register 1 - Excluding CLKS %initExpression\n\n ]]></initialValueTemplate>

      <initialValueTemplate key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]"
         terminator=","
         variables="
             mcg_c2_range0,
             mcg_c2_hgo0,
             mcg_c2_erefs0,
             mcg_c2_ircs[%(n)]"
      ><![CDATA[\t   /// Control Register 2 - %initExpression\n\n ]]></initialValueTemplate>

      <initialValueTemplate key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]"
         terminator=","
         variables=
            "mcg_sc_fcrdiv[%(n)]"
      ><![CDATA[\t   /// Status and Control Register %initExpression\n\n ]]></initialValueTemplate>

      <initialValueTemplate key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]"
         terminator=","
         variables="
            mcg_mc_hircen[%(n)],
            mcg_mc_lirc_div2[%(n)]"
      ><![CDATA[\t   /// Miscellaneous Control Register - Excluding HIRCLPEN %initExpression\n\n ]]></initialValueTemplate>

      <template key="McgClockInfoEntries" namespace="all" codeGenCondition="enableClockConfiguration[%(n)]" ><![CDATA[
         \t},\n
      ]]></template>
   </for>
</peripheralPage>
