<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- ftmre_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Flash Memory Interface">

   <xi:include href="_default_instance.xml"/>

   <xi:include href="_mapPinsOption.xml"/>

   <xi:include href="_irqOption.xml"/>

   <intOption key="ftmre_fccobix_ccobix" condition="ftmre_fccobix_ccobix_present"
      description="Common Command Register Index"
      toolTip="Selects which word of the FCCOB register array is being read or written to"
   />

   <choiceOption key="ftmre_fsec_keyen" condition="ftmre_fsec_keyen_present"
      enumStem="FtmreFsecKeyen"
      toolTip="The KEYEN[1:0] bits define the enabling of backdoor key access to the flash module.  \n
               NOTE: 01 is the preferred KEYEN state to disable backdoor key access"
      description="Backdoor Key Security Enable Bits" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Disabled"    value="1" enum="Disabled"/>
      <choice name="Enabled"     value="2" enum="Enabled"/>
      <choice name="Disabled"    value="3" enum="Disabled"/>
   </choiceOption>

   <choiceOption key="ftmre_fsec_sec" condition="ftmre_fsec_sec_present"
      enumStem="FtmreFsecSec"
      toolTip="Defines the security state of the MCU. If the flash module is unsecured using backdoor key access, the SEC field is forced to 10. \n
               NOTE: 01 is the preferred SEC state to set MCU to secured state"
      description="Flash Security Bits" >
      <choice name="Secured"     value="0" enum="Secured"/>
      <choice name="Secured"     value="1" enum="Secured"/>
      <choice name="Unsecured"   value="2" enum="Unsecured"/>
      <choice name="Secured"     value="3" enum="Secured"/>
   </choiceOption>

   <binaryOption key="ftmre_fclkdiv_fdivld" condition="ftmre_fclkdiv_fdivld_present"
      enumStem="FtmreFclkdivFdivld"
      description="Clock Divider Loaded" >
      <choice name="FCLKDIV register has not been written since the last reset"  value="0" enum="FclkdivRegisterHasNotBeenWrittenSinceTheLastReset"/>
      <choice name="FCLKDIV register has been written since the last reset"      value="1" enum="FclkdivRegisterHasBeenWrittenSinceTheLastReset"/>
   </binaryOption>

   <binaryOption key="ftmre_fclkdiv_fdivlck" condition="ftmre_fclkdiv_fdivlck_present"
      enumStem="FtmreFclkdivFdivlck"
      description="Clock Divider Locked" >
      <choice name="FDIV field is open for writing"                                                                                                                                    value="0" enum="FdivFieldIsOpenForWriting"/>
      <choice name="FDIV value is locked and cannot be changed. After the lock bit is set high, only reset can clear this bit and restore writability to the FDIV field in user mode"  value="1" enum="FdivValueIsLockedAndCannotBeChangedAfterTheLockBitIsSetHigh_OnlyResetCanClearThisBitAndRestoreWritabilityToTheFdivFieldInUserMode"/>
   </binaryOption>

   <intOption key="ftmre_fclkdiv_fdiv" condition="ftmre_fclkdiv_fdiv_present"
      description="Clock Divider Bits"
      toolTip="FDIV[5:0] must be set to effectively divide BUSCLK down to 1MHz to control timed events during flash program and erase algorithms"
   />

   <binaryOption key="ftmre_fstat_ccif" condition="ftmre_fstat_ccif_present"
      enumStem="FtmreFstatCcif"
      toolTip="Indicates that a flash command has completed. The CCIF flag is cleared by writing a 1 to CCIF to launch a command and CCIF will stay low until command completion or command violation"
      description="Command Complete Interrupt Flag" >
      <choice name="Flash command is in progress"  value="0" enum="FlashCommandIsInProgress"/>
      <choice name="Flash command has completed"   value="1" enum="FlashCommandHasCompleted"/>
   </binaryOption>

   <binaryOption key="ftmre_fstat_accerr" condition="ftmre_fstat_accerr_present"
      enumStem="FtmreFstatAccerr"
      toolTip="Indicates an illegal access has occurred to the flash memory caused by either a violation of the command write sequence or issuing an illegal flash command. While ACCERR is set, the CCIF flag cannot be cleared to launch a command. Write a 1 to this field to clear it"
      description="Flash Access Error Flag" >
      <choice name="No access error is detected"      value="0" enum="NoAccessErrorIsDetected"/>
      <choice name="Flash Protection Violation Flag"  value="1" enum="FlashProtectionViolationFlag"/>
   </binaryOption>

   <binaryOption key="ftmre_fstat_mgbusy" condition="ftmre_fstat_mgbusy_present"
      enumStem="FtmreFstatMgbusy"
      toolTip="Reflects the active state of the memory controller"
      description="Memory Controller Busy Flag" >
      <choice name="Memory controller is idle"                                       value="0" enum="MemoryControllerIsIdle"/>
      <choice name="Memory controller is busy executing a flash command (CCIF = 0)"  value="1" enum="MemoryControllerIsBusyExecutingAFlashCommandCcif0"/>
   </binaryOption>

   <binaryOption key="ftmre_fcnfg_ccie" condition="ftmre_fcnfg_ccie_present"
      enumStem="FtmreFcnfgCcie"
      toolTip="Controls interrupt generation when a flash command has completed"
      description="Command Complete Interrupt Enable" >
      <choice name="Command complete interrupt is disabled"                                              value="0" enum="CommandCompleteInterruptIsDisabled"/>
      <choice name="An interrupt will be requested whenever the CCIF flag in the FSTAT register is set"  value="1" enum="AnInterruptWillBeRequestedWheneverTheCcifFlagInTheFstatRegisterIsSet"/>
   </binaryOption>

   <binaryOption key="ftmre_fprot_fpopen" condition="ftmre_fprot_fpopen_present"
      enumStem="FtmreFprotFpopen"
      toolTip="The FPOPEN bit determines the protection function for program or erase operations"
      description="Flash Protection Operation Enable" >
      <choice name="The FPHDIS and FPLDIS fields define unprotected address ranges as specified by the corresponding FPHS and FPLS fields"     value="0" enum="TheFphdisAndFpldisFieldsDefineUnprotectedAddressRangesAsSpecifiedByTheCorrespondingFphsAndFplsFields"/>
      <choice name="The FPHDIS and FPLDIS fields enable protection for the address range specified by the corresponding FPHS and FPLS fields"  value="1" enum="TheFphdisAndFpldisFieldsEnableProtectionForTheAddressRangeSpecifiedByTheCorrespondingFphsAndFplsFields"/>
   </binaryOption>

   <binaryOption key="ftmre_fprot_fphdis" condition="ftmre_fprot_fphdis_present"
      enumStem="FtmreFprotFphdis"
      toolTip="The FPHDIS bit determines whether there is a protected/unprotected area in a specific region of the flash
memory ending with global address 0x7FFF"
      description="Flash Protection Higher Address Range Disable" >
      <choice name="Protection/Unprotection enabled"   value="0" enum="ProtectionUnprotectionEnabled"/>
      <choice name="Protection/Unprotection disabled"  value="1" enum="ProtectionUnprotectionDisabled"/>
   </binaryOption>

   <intOption key="ftmre_fprot_fphs" condition="ftmre_fprot_fphs_present"
      description="Flash Protection Higher Address Size"
      toolTip="The FPHS bits determine the size of the protected/unprotected area in flash memory. \n
               The FPHS bits can be written to only while the FPHDIS bit is set"
   />

   <binaryOption key="ftmre_fprot_fpldis" condition="ftmre_fprot_fpldis_present"
      enumStem="FtmreFprotFpldis"
      toolTip="The FPLDIS bit determines whether there is a protected/unprotected area in a specific region of the flash memory beginning with global address 0x0_0000"
      description="Flash Protection Lower Address Range Disable" >
      <choice name="Protection/Unprotection enabled"   value="0" enum="ProtectionUnprotectionEnabled"/>
      <choice name="Protection/Unprotection disabled"  value="1" enum="ProtectionUnprotectionDisabled"/>
   </binaryOption>

   <intOption key="ftmre_fprot_fpls" condition="ftmre_fprot_fpls_present"
      description="Flash Protection Lower Address Size"
      toolTip="The FPLS bits determine the size of the protected/unprotected area in flash memory.  \n
               The FPLS bits can only be written to while the FPLDIS bit is set"
   />

<!-- Grahic here -->  

   <for keys="field:name"
        values="
      ftmre_fsec_keyen:FsecKeyen;
      ftmre_fsec_sec:FsecSec;
      ftmre_fclkdiv_fdivld:FclkdivFdivld;
      ftmre_fclkdiv_fdivlck:FclkdivFdivlck;
      ftmre_fstat_ccif:FstatCcif;
      ftmre_fstat_accerr:FstatAccerr;
      ftmre_fstat_mgbusy:FstatMgbusy;
      ftmre_fcnfg_ccie:FcnfgCcie;
      ftmre_fprot_fpopen:FprotFpopen;
      ftmre_fprot_fphdis:FprotFphdis;
      ftmre_fprot_fpldis:FprotFpldis">
      <setTemplate variables="%(field)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %defaultFieldExpression
         \t}\n\n
      ]]></setTemplate>
   </for>

<!--   ========== FTMRE Init class =============================== -->

   <template key="init_description" namespace="all">
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_class)::Init init {
      \t *
      \t *   // Setup values
      \t *   0,                                        // Common Command Register Index,
      \t *   FtmreFsecKeyen_Disabled                   // Backdoor Key Security Enable Bits,
      \t *   FtmreFsecSec_Secured                      // Flash Security Bits,
      \t *   FtmreFclkdivFdivld_FclkdivRegisterHasNotBeenWrittenSinceTheLastReset    // Clock Divider Loaded,
      \t *   FtmreFclkdivFdivlck_FdivFieldIsOpenForWriting    // Clock Divider Locked,
      \t *   0,                                        // Clock Divider Bits,
      \t *   FtmreFstatCcif_FlashCommandIsInProgress    // Command Complete Interrupt Flag,
      \t *   FtmreFstatAccerr_NoAccessErrorIsDetected    // Flash Access Error Flag,
      \t *   FtmreFstatMgbusy_MemoryControllerIsIdle    // Memory Controller Busy Flag,
      \t *   FtmreFcnfgCcie_CommandCompleteInterruptIsDisabled    // Command Complete Interrupt Enable,
      \t *   FtmreFprotFpopen_TheFphdisAndFpldisFieldsDefineUnprotectedAddressRangesAsSpecifiedByTheCorrespondingFphsAndFplsFields    // Flash Protection Operation Enable,
      \t *   FtmreFprotFphdis_ProtectionUnprotectionEnabled    // Flash Protection Higher Address Range Disable,
      \t *   0,                                        // Flash Protection Higher Address Size,
      \t *   FtmreFprotFpldis_ProtectionUnprotectionEnabled    // Flash Protection Lower Address Range Disable,
      \t *   0,                                        // Flash Protection Lower Address Size,
      \t * };
      \t *
      \t * // Initialise $(_class) from values specified above
      \t * $(_class)::configure(init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm">
   <![CDATA[
      class $(_class)BasicInfo {
      \t
      public:
      \t
      \t/**
      \t * Type definition for $(_class) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)(const uint32_t &);
      \t\n
   ]]>
   </template>

   <template namespace="usbdm">
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <setTemplate namespace="usbdm" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></setTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="ftmre_fccobix_ccobix"
   ><![CDATA[
      \t   /// Flash CCOB Index Register 
      \t   uint8_t fccobix = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="ftmre_fsec_keyen,ftmre_fsec_sec"
   ><![CDATA[
      \t   /// Flash Security Register 
      \t   uint8_t fsec = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="ftmre_fclkdiv_fdivld,ftmre_fclkdiv_fdivlck,ftmre_fclkdiv_fdiv"
   ><![CDATA[
      \t   /// Flash Clock Divider Register 
      \t   uint8_t fclkdiv = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="ftmre_fstat_ccif,ftmre_fstat_accerr,ftmre_fstat_mgbusy"
   ><![CDATA[
      \t   /// Flash Status Register 
      \t   uint8_t fstat = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="ftmre_fcnfg_ccie"
   ><![CDATA[
      \t   /// Flash Configuration Register 
      \t   uint8_t fcnfg = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="ftmre_fprot_fpopen,ftmre_fprot_fphdis,ftmre_fprot_fphs,ftmre_fprot_fpldis,ftmre_fprot_fpls"
   ><![CDATA[
      \t   /// Flash Protection Register 
      \t   uint8_t fprot = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName = %enumClass_Normal;\n\n
   ]]></initialValueTemplate>

<!--   Configure methods -->

   <template discardRepeats="true" key="/FTMRE/InitMethod" namespace="all" ><![CDATA[
      \t/**
      \t * Configure FTMRE from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      // Only set call-back if feature enabled
      \t      setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t   enable();
      \t
      \t   ftmre->FCCOBIX    = init.fccobix;
      \t   ftmre->FSEC    = init.fsec;
      \t   ftmre->FCLKDIV    = init.fclkdiv;
      \t   ftmre->FSTAT    = init.fstat;
      \t   ftmre->FCNFG    = init.fcnfg;
      \t   ftmre->FCCOB    = init.fccob;
      \t   ftmre->FCCOBLO    = init.fccoblo;
      \t   ftmre->FCCOBHI    = init.fccobhi;
      \t   ftmre->FPROT    = init.fprot;
      \t   ftmre->FOPT    = init.fopt;
      \t
      \t   calibrate();
      \t}
      \t
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}\n
   ]]></template>

<!--   Constructors -->

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%enumParam0 = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <setTemplate namespace="usbdm"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      #if $(irqHandlingMethod)
      \t      %registerName = %paramExpression;
      #else
      \t      (void)%paramExpression;
      #endif
      \t   }\n\n
   ]]></setTemplate>

   <for keys="r"
      values="
            ftmre_fsec_keyen;
            ftmre_fsec_sec;
            ftmre_fclkdiv_fdivld;
            ftmre_fclkdiv_fdivlck;
            ftmre_fstat_ccif;
            ftmre_fstat_accerr;
            ftmre_fstat_mgbusy;
            ftmre_fcnfg_ccie;
            ftmre_fprot_fpopen;
            ftmre_fprot_fphdis;
            ftmre_fprot_fpldis
            ">
      <setTemplate namespace="usbdm"
         variables="%(r)"
         linePadding="xxx">
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %comments
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

   <for keys="r"
      values="
            ftmre_fccobix_ccobix;
            ftmre_fclkdiv_fdiv;
            ftmre_fprot_fphs;
            ftmre_fprot_fpls
            ">
      <setTemplate namespace="usbdm"
         variables="%(r)"
         linePadding="xxx">
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(unsigned value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | value;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

<!--   Default Initialisation value -->

   <initialValueTemplate
      separator=","
      terminator=","
      variables="
            ftmre_fsec_keyen,
            ftmre_fsec_sec,
            ftmre_fclkdiv_fdivld,
            ftmre_fclkdiv_fdivlck,
            ftmre_fstat_ccif,
            ftmre_fstat_accerr,
            ftmre_fstat_mgbusy,
            ftmre_fcnfg_ccie,
            ftmre_fprot_fpopen,
            ftmre_fprot_fphdis,
            ftmre_fprot_fpldis,
            irqLevel
         "
   ><![CDATA[
      $(init_description)
      \ttypedef $(_class)BasicInfo::Init Init;
      \t
      \t/**
      \t * Default initialisation value for $(_class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <template namespace="usbdm">
      <![CDATA[
      \t}; // $(_class)::BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm">
      <![CDATA[
      }; // $(_class)::BasicInfo\n\n
   ]]>
   </template>

<signals />

</peripheralPage>
