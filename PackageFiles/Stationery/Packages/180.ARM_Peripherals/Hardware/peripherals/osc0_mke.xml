<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >

<!-- osc0_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="System Oscillator" >

   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2                    (fProvider.getName())
    *  $(_Baseclass)    => e.g FTM0 => Ftm             (fPeripheral.getClassBaseName())
    *  $(_instance)     => e.g FTM0 => 0, PTA => A     (fPeripheral.getInstance())
    *  $(_Class)        => e.g FTM2 => Ftm2            (fPeripheral.getClassName())
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT  (fPeripheral.getBaseName())
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %paramType[index]               As for %paramType
    * %paramName[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %fieldAssignment         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %maskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->
   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Baseclass)BasicInfo&quot;" />

   <!-- ************* CR ****************** -->

   <choiceOption key="osc_cr_oscMode" condition="osc_cr_oscos_present"
      valueFormat="OSC_CR_OSCOS(%s),OSC_CR_HGO(%s)"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="OscMode"
      description="OSC0 mode"
      toolTip="Determines oscillator power mode and\n
               whether an external clock or crystal is used." >
      <choice value="0,0" name="External clock"          enum="ExternalClock"        isDefault="true" />
      <choice value="1,0" name="Low Power Oscillator"    enum="LowPowerOscillator"   />
      <choice value="1,1" name="High Gain Oscillator"    enum="HighPowerOscillator"  />
   </choiceOption>

   <constant key="/OscMode_ExternalClock"            type="Long" value="0"  condition="osc_cr_oscos_present" />
   <constant key="/OscMode_LowGainOsc"               type="Long" value="1"  condition="osc_cr_oscos_present" />
   <constant key="/OscMode_HighGainOsc"              type="Long" value="2"  condition="osc_cr_oscos_present" />

   <intOption key="osc_input_freq"
      units="Hz"
      description="OSC input frequency"
      toolTip="Frequency of external crystal or clock on XTAL/EXTAL"
      value="8000000"
      disabledValue="0" />

   <binaryOption key="osc_cr_oscen" condition="osc_cr_oscen_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo&amp;&amp;(osc_cr_oscMode!=/OscMode_ExternalClock)"
      typeName="OscEnable"
      toolTip="Enables the OSC module. The OSC module can also be enabled by the ICS module"
      description="OSC Enable" >
      <choice name="OSC disabled"  value="0" enum="Disabled" isDefault="true" />
      <choice name="OSC enabled"   value="1" enum="Enabled" />
   </binaryOption>

   <intOption key="osc_clock"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      ref="osc_input_freq"
      valueFormat="%s"
      locked="true"
      derived="true"
      hidden="true"
      units="Hz"
      description="Frequency of OSC Clock or Crystal [OSCCLK]"
      toolTip="Frequency of oscillator or external clock if OSC is enabled"
      disabledValue="0"
      min="1" />

   <binaryOption key="osc_cr_oscsten" condition="osc_cr_oscsten_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo&amp;&amp;osc_cr_oscen"
      typeName="OscInStopMode"
      toolTip="Controls whether or not the OSC clock remains enabled when MCU enters Stop mode when OSCEN is set.\n
               OSCSTEN has no effect if ICS requests OSC enable"
      description="OSC Enable in Stop mode" >
      <choice name="Disabled in Stop mode"  value="0" enum="Disabled" isDefault="true" />
      <choice name="Enabled in Stop mode"   value="1" enum="Enabled"  />
   </binaryOption>

   <binaryOption key="osc_cr_oscos" condition="osc_cr_oscos_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      ref="osc_cr_oscMode&gt;=@/OscMode_LowGainOsc"
      derived="true"
      locked="true"
      typeName="OscOutputSelect"
      toolTip="Selects the output clock of the OSC module"
      description="OSC Output Select" >
      <choice name="External clock source"    value="0" enum="ExternalClock" isDefault="true" />
      <choice name="Oscillator clock source"  value="1" enum="Oscillator" />
   </binaryOption>

   <binaryOption key="osc_cr_range" condition="osc_cr_range_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      ref="osc_input_freq&gt;=4_MHz"
      derived="true"
      locked="true"
      typeName="OscFrequencyRange"
      toolTip="Selects the frequency range for the OSC module"
      description="Frequency Range Select" >
      <choice name="Low range of 32 kHz"     value="0" enum="LowRange" isDefault="true" />
      <choice name="High range of 4-20 MHz"  value="1" enum="HighRange" />
   </binaryOption>

   <binaryOption key="osc_cr_hgo" condition="osc_cr_hgo_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      ref="osc_cr_oscMode&gt;=@/OscMode_HighGainOsc"
      derived="true"
      locked="true"
      typeName="OscCrHgo"
      toolTip="Controls the OSC mode of operation"
      description="High Gain Oscillator Select" >
      <choice name="Low-power mode"  value="0" enum="LowPowerMode" isDefault="true" />
      <choice name="High-gain mode"  value="1" enum="HighGainMode" />
   </binaryOption>

   <intOption key="oscer_clock"
      enabledBy="osc_cr_oscen||!osc_cr_oscos"
      ref="osc_clock"
      valueFormat="%s"
      derived="true"
      locked="true"
      units="Hz"
      description="OSC External reference clock [OSCERCLK]"
      toolTip="Frequency of clock available from OSC"
      value="8000000"
      disabledValue="0" />

<!-- Grahic here -->

   <for keys="field:name"
        values="
      osc_cr_oscen:OscEnable;
      osc_cr_oscsten:OscStopMode;
      osc_cr_oscMode:OscMode;
      osc_cr_range:OscFrequencyRange" >
      <variableTemplate variables="%(field)" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %fieldAssignment
         \t}\n\n
      ]]></variableTemplate>
   </for>

<!--   ========== OSC Init class =============================== -->

   <template key="init_description" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init init {
      \t *
      \t *   // Setup values
      \t *   OscEnable_Enabled ,           // OSC Enable - OSC enabled
      \t *   OscInStopMode_Enabled ,       // OSC Enable in Stop mode - Enabled in Stop mode
      \t *   OscMode_LowPowerOscillator ,  // OSC0 mode - Low Power Oscillator
      \t *   OscFrequencyRange_HighRange,  // Frequency Range Select - High range of 4-20 MHz
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure(init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" >
   <![CDATA[
      class $(_Baseclass)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate namespace="usbdm" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="osc_cr_oscen,osc_cr_oscsten,osc_cr_oscos,osc_cr_range,osc_cr_hgo"
   ><![CDATA[
      \t   /// Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

<!--   Constructors -->

   <for keys="r"
      values="
            osc_cr_oscen;
            osc_cr_oscsten;
            osc_cr_oscMode;
            osc_cr_range
            " >
      <variableTemplate namespace="usbdm" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      separator=","
      terminator=","
      variables="
            osc_cr_oscen,
            osc_cr_oscsten,
            osc_cr_oscMode,
            osc_cr_range
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></variableTemplate>

<!--   Default Configure -->

   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
      <![CDATA[
      \t/**
      \t * Configure $(_BASENAME)
      \t */
      \tstatic void configure(const Init &configValue) {
      \t   osc->CR              = configValue.cr;
      \t}
      \t\n
   ]]>
   </template>

   <template discardRepeats="true" key="/$(_BASENAME)/InitMethod" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t
      \t/**
      \t * Default initialisation for $(_BASENAME)
      \t */
      \tstatic void defaultConfigure() {
      \t   Info::configure(Info::DefaultInitValue);
      \t}
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" >
      <![CDATA[
      \t}; // $(_Baseclass)BasicInfo::Init\n\n
   ]]>
   </template>

   <variableTemplate
      variables="osc_clock"
   ><![CDATA[
      \t//! Frequency of OSC Clock or Crystal
      \tstatic constexpr uint32_t osc_clock = %initExpression
      \t\n
   ]]></variableTemplate>

   <template><![CDATA[
      \t/**
      \t * Get OSC clock
      \t *
      \t * @return Clock frequency as uint32_t in Hz
      \t */
      \tstatic uint32_t getOscClock() {
      \t   switch(osc->CR&(OSC_CR_OSCINIT_MASK|OSC_CR_OSCOS_MASK)) {
      \t      case OSC_CR_OSCINIT(0)|OSC_CR_OSCOS(0):
      \t      case OSC_CR_OSCINIT(1)|OSC_CR_OSCOS(0):
      \t         // External clock - assume valid
      \t         return osc_clock;
      \t         break;
      \t      case OSC_CR_OSCINIT(1)|OSC_CR_OSCOS(1):
      \t         // Oscillator selected and valid
      \t         return (osc->CR&OSC_CR_OSCINIT_MASK)?osc_clock:0;
      \t      default :
      \t         return 0;
      \t      break;
      \t   }
      \t}\n\n
   ]]></template>

   <template namespace="usbdm" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
      <![CDATA[
      }; // $(_Baseclass)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id = "osc0_files" >
      <copy source="Project_Headers/osc-MKE.h"  target="Project_Headers/osc.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->
   <!-- Already included -->
   <!-- template key="/ICS/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template -->

   <template key="/ICS/ClockStartupBefore" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <signals enabledBy="enablePeripheralSupport"/>

</peripheralPage>
