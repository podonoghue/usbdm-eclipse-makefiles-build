<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- uart_mke.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

   <!-- Enable for this peripheral -->
   <binaryOption key="usedAsConsole"
      description="usedAsConsole"
      toolTip="Indicates if this device is allocated as the Console for I/O"
      ref='(/Console/consoleEnable)&amp;&amp;(/Console/consoleDevice.name=="$(_Baseclass) $(_instance)")'
      locked="true"
      derived="true" >
      <choice value="0" name="Not used as console" />
      <choice value="1" name="Used as console" />
   </binaryOption>

   <binaryOption key="enablePeripheralSupport"
      enabledBy="!usedAsConsole"
      hidden="true"
      description="Enable peripheral support"
      toolTip="Code will also be generated if this UART is used as the console"
      disabledValue="true"
      >
      <choice value="false" name="Minimal code for $(_NAME)"  />
      <choice value="true"  name="Generate code for $(_NAME)"/>
   </binaryOption>

   <equation key="irq_pattern"               value="^$(_NAME)_(.+)$;^$(_NAME)_$"  />
   <equation key="irq_ClassHandler"          value="$(_Class)::irqHandler&lt;$(_Class)IrqNum_$1&gt;;$(_Class)::irqHandler" />
   <equation key="irq_parameters"            value=""     />
   <equation key="irq_dummy_parameters"      value=""     />
   <equation key="irq_call"                  value=""     />
   <equation key="generateDefault"           value="false"  />
   <equation key="configureInStartupDefault" value="false"  />
   <xi:include href="enablePeripheral.xml"  />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <title />
   <aliasOption key="/SIM/sim_sopt2_uart$(_instance)src[]"              optional="true" locked="false" />
   <aliasOption key="/SIM/system_uart$(_instance)_fixedclocksource[]"   optional="true"/>
   <aliasOption key="/SIM/system_uart$(_instance)_clock[]"              optional="true" />

   <intOption key="oversampleRatio"  condition="uart_c4_osr_present"
      enabledBy="$(_BasicInfoGuard)"
      description="Number of samples per bit"
      toolTip="This value determines the number of times an Rx bit is sampled.\n
               This also affects the clock divider and hence the range of baud rates available"
       value="8" min="4" max="32"
      />

   <template  condition="uart_c4_osr_present" ><![CDATA[
   \t//! Number of samples per bit
   \tstatic constexpr uint32_t oversampleRatio = $(oversampleRatio);\n\n
   ]]></template>

   <choiceOption key="defaultBaudRate"
      enabledBy="$(_BasicInfoGuard)"
      valueFormat="%s"
      typeName="UartBaudRate"
      description="UART default baud rate"
      toolTip="Used by default UART setup" >
      <choice value="110"     name="110"     enum="110"    />
      <choice value="300"     name="300"     enum="300"    />
      <choice value="600"     name="600"     enum="600"    />
      <choice value="1200"    name="1200"    enum="1200"   />
      <choice value="2400"    name="2400"    enum="2400"   />
      <choice value="4800"    name="4800"    enum="4800"   />
      <choice value="9600"    name="9600"    enum="9600"   />
      <choice value="14400"   name="14400"   enum="14400"  />
      <choice value="19200"   name="19200"   enum="19200"  />
      <choice value="28800"   name="28800"   enum="28800"  />
      <choice value="38400"   name="38400"   enum="38400"  />
      <choice value="56000"   name="56000"   enum="56000"  />
      <choice value="57600"   name="57600"   enum="57600"  />
      <choice value="115200"  name="115200"  enum="115200" isDefault="true" />
   </choiceOption>

   <choiceOption key="uart_c2_tcie" condition="uart_c2_tcie_present"
      enabledBy="irqHandlingMethod"
      hidden="true"
      typeName="UartTxCompleteAction"
      description="Transmit complete action"
      toolTip="Enable interrupt on transmission complete" >
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uart_c2_tcie" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setTransmitCompleteAction(%params) const {
      \t   %register = (%register & ~%mask) | %paramExpression;
      \t}\n\n
   ]]></variableTemplate>

   <choiceOption key="uart_c2_ilie" condition="uart_c2_ilie_present"
      enabledBy="$(_BasicInfoGuard)"
      hidden="true"
      typeName="UartIdleLineDetectAction"
      description="Idle line detect sction"
      toolTip="Enable interrupt on tidele line detect" >
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uart_c2_ilie" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setIdleLineDetectAction(%params) const {
      \t   %register = (%register & ~%mask) | %paramExpression;
      \t}\n\n
   ]]></variableTemplate>

   <choiceOption key="uartTxEmptyAction" condition="!uart_c5_tdmas_present&amp;&amp;uart_c2_tie_present"
      enabledBy="$(_BasicInfoGuard)"
      hidden="true"
      valueFormat="UART_C2_TIE(%s)"
      typeName="UartTxEmptyAction"
      description="Transmit empty DMA/Interrupt action"
      toolTip="Enable transmit holding register empty DMA/Interrupt action" >
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <choiceOption key="uartTxEmptyAction" condition="uart_c5_tdmas_present&amp;&amp;uart_c2_tie_present"
      enabledBy="$(_BasicInfoGuard)"
      hidden="true"
      valueFormat="(UART_C5_TDMAS(%s)&lt;&lt;8),UART_C2_TIE(%s)"
      typeName="UartTxEmptyAction"
      description="Transmit empty DMA/Interrupt action"
      toolTip="Enable transmit holding register empty DMA/Interrupt action" >
      <choice value="0,0"   name="None"      enum="None"      />
      <choice value="0,1"   name="Interrupt" enum="Interrupt" />
      <choice value="1,1"   name="DMA"       enum="Dma"       />
   </choiceOption>

   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
       variables="uartTxEmptyAction" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setTransmitEmptyAction(%params) const {
      \t   uart->C2 = (uart->C2 & ~UART_C2_TIE_MASK)   | %paramExpression; \n
   ]]></variableTemplate>
   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uartTxEmptyAction"
      condition="uart_c5_tdmas_present" ><![CDATA[
      \t   uart->C5 = (uart->C5 & ~UART_C5_TDMAS_MASK) | %paramExpression>>8; \n
   ]]></variableTemplate>
   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
       variables="uartTxEmptyAction" ><![CDATA[
      \t}\n\n
   ]]></variableTemplate>

   <choiceOption key="uartRxFullAction" condition="!uart_c5_rdmas_present&amp;&amp;uart_c2_rie_present"
      enabledBy="$(_BasicInfoGuard)"
      hidden="true"
      valueFormat="UART_C2_RIE(%s)"
      typeName="UartRxFullAction"
      description="Receive full interrupt action"
      toolTip="Enable receive buffer full interrupt action" >
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <choiceOption key="uartRxFullAction" condition="uart_c5_rdmas_present&amp;&amp;uart_c2_rie_present"
      enabledBy="$(_BasicInfoGuard)"
      hidden="true"
      valueFormat="(UART_C5_RDMAS(%s)&lt;&lt;8),UART_C2_RIE(%s)"
      typeName="UartRxFullAction"
      description="Receive full DMA/interrupt action"
      toolTip="Enable receive buffer full DMA/interrupt action" >
      <choice value="0,0"   name="None"      enum="None"      />
      <choice value="0,1"   name="Interrupt" enum="Interrupt" />
      <choice value="1,1"   name="DMA"       enum="Dma"       />
   </choiceOption>

   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uartRxFullAction" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setReceiveFullAction(%params) const {
      \t   uart->C2 = (uart->C2 & ~UART_C2_RIE_MASK)   | %paramExpression;\n
   ]]></variableTemplate>
   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uartRxFullAction"
      condition="uart_c5_rdmas_present" ><![CDATA[
      \t   uart->C5 = (uart->C5 & ~UART_C5_RDMAS_MASK) | %paramExpression>>8;\n
   ]]></variableTemplate>
   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uartRxFullAction" ><![CDATA[
      \t}\n\n
   ]]></variableTemplate>

   <if condition="uart_c4_brfa_present" >
      <binaryOption key="uartClass"
         valueFormat="%s"
         enabledBy="irqHandlingMethod"
         description="Input buffering"
         toolTip="This option determines whether an interrupt-driven driver\n
                  incorporating a queue is used to buffer input data" >
         <choice name="Unbuffered" value="Uart_brfa_T" />
         <choice name="Buffered"   value="UartBuffered_brfa_T" />
      </binaryOption>
   <else_if condition="uart_c4_osr_present" />
      <binaryOption key="uartClass"
         valueFormat="%s"
         enabledBy="irqHandlingMethod"
         description="Input buffering"
         toolTip="This option determines whether an interrupt-driven driver\n
                  incorporating a queue is used to buffer input data" >
         <choice name="Unbuffered" value="Uart_osr_T" />
         <choice name="Buffered"   value="UartBuffered_osr_T" />
      </binaryOption>
   <else />
      <binaryOption key="uartClass"
         valueFormat="%s"
         enabledBy="irqHandlingMethod"
         description="Input buffering"
         toolTip="This option determines whether an interrupt-driven driver\n
                  incorporating a queue is used to buffer input data" >
         <choice name="Unbuffered" value="Uart_basic_T" />
         <choice name="Buffered"   value="UartBuffered_basic_T" />
      </binaryOption>
   </if>
   <intOption key="receiveBufferSize" description="Size of input buffer"
      enabledBy="uartClass"
      toolTip="This value determines the size of the receive buffer\n
               for the interrupt driven driver version  "
      value="50" min="1" max="1000"
   />

   <intOption key="transmitBufferSize" description="Size of output buffer"
      enabledBy="uartClass"
      toolTip="This value determines the size of the transmit buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
   />

   <template><![CDATA[
      \t//! Indicates whether the $(_BASENAME) needs a write to clear status errors
      \tstatic constexpr bool statusNeedsWrite = false;
      \t
      \t//! Default Baud rate used if not explicitly given
      \tstatic constexpr uint32_t defaultBaudRate = $(defaultBaudRate);
      \t
      \t//! Default buffer size for receive queue when interrupt driven
      \tstatic constexpr unsigned receiveBufferSize = $(receiveBufferSize);
      \t
      \t//! Default buffer size for transmit queue when interrupt driven
      \tstatic constexpr unsigned transmitBufferSize = $(transmitBufferSize);

      \t/**
      \t * Get input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic inline uint32_t getInputClockFrequency() {
      \t   return SimInfo::getUart$(_instance)Clock();
      \t}\n\n
   ]]></template>

   <template key="/$(_BASENAME)/Present"  ><![CDATA[\ ||\ 1]]></template>


   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME) interface
      \t *
      \t * <b>Example</b>
      \t * @code
      \t *  // Instantiate interface
      \t *  USBDM::$(_Class) $(_basename);
      \t *
      \t *  for(int i=0; i++;) {
      \t *     $(_basename).writeln("Hello world ", i);
      \t *  }
      \t *  @endcode
      \t */
      \ttypedef  $(/$(_NAME)/uartClass.definition:$(_Baseclass)_T)<$(_Info)> $(_Class);
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.UartValidate">
   </validate>

   <projectActionList id="uart_files">
      <copy source="Snippets/uart-example.cpp"     target="Snippets/uart-example.cpp"  overwrite="true"  derived="true" />
      <copy source="Project_Headers/uart-MKE.h"    target="Project_Headers/uart.h"     overwrite="true"  derived="true" macroReplace="true" />
      <copy source="Project_Headers/uart_queue.h"  target="Project_Headers/uart_queue.h"    overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="These settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <!--  ____ Signal mapping __________________ -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</fragment>
