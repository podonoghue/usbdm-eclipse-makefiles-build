<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- uart_mke.xml -->
<!--
Devices using this peripheral:
-->
<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="UART">

   <xi:include href="_default_instance.xml"/>

   <xi:include href="_mapPinsOption_on.xml"/>

   <aliasOption key="/SIM/sim_sopt2_uart$(_instance)src[]"            optional="true" constant="false" />
   <aliasOption key="/SIM/system_uart$(_instance)_fixedclocksource[]" optional="true"/>
   <aliasOption key="/SIM/system_uart$(_instance)_clock[]"            optional="true" />

   <intOption key="oversampleRatio"  condition="uart_c4_osr_present"
      description="Number of samples per bit"
      toolTip="This value determines the number of times an Rx bit is sampled.\n
               This also affects the clock divider and hence the range of baud rates available"
       value="8" min="4" max="32"
      />

   <template  condition="uart_c4_osr_present"><![CDATA[
   \t//! Number of samples per bit
   \tstatic constexpr uint32_t oversampleRatio = $(oversampleRatio);\n\n
   ]]></template>

   <choiceOption key="defaultBaudRate"
      valueFormat="%s"
      enumStem="UartBaudRate"
      description="UART default baud rate"
      toolTip="Used by default UART setup for stdio">
      <choice value="110"     name="110"     enum="110"    />
      <choice value="300"     name="300"     enum="300"    />
      <choice value="600"     name="600"     enum="600"    />
      <choice value="1200"    name="1200"    enum="1200"   />
      <choice value="2400"    name="2400"    enum="2400"   />
      <choice value="4800"    name="4800"    enum="4800"   />
      <choice value="9600"    name="9600"    enum="9600"   />
      <choice value="14400"   name="14400"   enum="14400"  />
      <choice value="19200"   name="19200"   enum="19200"  />
      <choice value="28800"   name="28800"   enum="28800"  />
      <choice value="38400"   name="38400"   enum="38400"  />
      <choice value="56000"   name="56000"   enum="56000"  />
      <choice value="57600"   name="57600"   enum="57600"  />
      <choice value="115200"  name="115200"  enum="115200" isDefault="true" />
   </choiceOption>

   <choiceOption key="uart_c2_tcie" condition="uart_c2_tcie_present"
      hidden="true"
      enumStem="UartTxCompleteAction"
      description="Transmit complete action"
      toolTip="Enable interrupt on transmission complete">
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <setTemplate key="/UART/commonMethods" namespace="all" discardRepeats="true"
      variables="uart_c2_tcie" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setTransmitCompleteAction(%params) const {
      \t   %register = (%register & ~%mask) | %paramExpression;
      \t}\n\n
   ]]></setTemplate>

   <choiceOption key="uart_c2_ilie" condition="uart_c2_ilie_present"
      hidden="true"
      enumStem="UartIdleLineDetectAction"
      description="Idle line detect sction"
      toolTip="Enable interrupt on tidele line detect">
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <setTemplate key="/UART/commonMethods" namespace="all" discardRepeats="true"
      variables="uart_c2_ilie" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setIdleLineDetectAction(%params) const {
      \t   %register = (%register & ~%mask) | %paramExpression;
      \t}\n\n
   ]]></setTemplate>

   <choiceOption key="uartTxEmptyAction" condition="!uart_c5_tdmas_present&amp;&amp;uart_c2_tie_present"
      hidden="true"
      valueFormat="UART_C2_TIE(%s)"
      enumStem="UartTxEmptyAction"
      description="Transmit empty DMA/Interrupt action"
      toolTip="Enable transmit holding register empty DMA/Interrupt action">
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <choiceOption key="uartTxEmptyAction" condition="uart_c5_tdmas_present&amp;&amp;uart_c2_tie_present"
      hidden="true"
      valueFormat="(UART_C5_TDMAS(%s)&lt;&lt;8),UART_C2_TIE(%s)"
      enumStem="UartTxEmptyAction"
      description="Transmit empty DMA/Interrupt action"
      toolTip="Enable transmit holding register empty DMA/Interrupt action">
      <choice value="0,0"   name="None"      enum="None"      />
      <choice value="0,1"   name="Interrupt" enum="Interrupt" />
      <choice value="1,1"   name="DMA"       enum="Dma"       />
   </choiceOption>

   <setTemplate key="/UART/commonMethods" namespace="all" discardRepeats="true"
       variables="uartTxEmptyAction" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setTransmitEmptyAction(%params) const {
      \t   uart->C2 = (uart->C2 & ~UART_C2_TIE_MASK)   | %paramExpression; \n
   ]]></setTemplate>
   <setTemplate key="/UART/commonMethods" namespace="all" discardRepeats="true"
      variables="uartTxEmptyAction"
      condition="uart_c5_tdmas_present" ><![CDATA[
      \t   uart->C5 = (uart->C5 & ~UART_C5_TDMAS_MASK) | %paramExpression>>8; \n
   ]]></setTemplate>
   <setTemplate key="/UART/commonMethods" namespace="all" discardRepeats="true"
       variables="uartTxEmptyAction" ><![CDATA[
      \t}\n\n
   ]]></setTemplate>

   <choiceOption key="uartRxFullAction" condition="!uart_c5_rdmas_present&amp;&amp;uart_c2_rie_present"
      hidden="true"
      valueFormat="UART_C2_RIE(%s)"
      enumStem="UartRxFullAction"
      description="Receive full interrupt action"
      toolTip="Enable receive buffer full interrupt action">
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <choiceOption key="uartRxFullAction" condition="uart_c5_rdmas_present&amp;&amp;uart_c2_rie_present"
      hidden="true"
      valueFormat="(UART_C5_RDMAS(%s)&lt;&lt;8),UART_C2_RIE(%s)"
      enumStem="UartRxFullAction"
      description="Receive full DMA/interrupt action"
      toolTip="Enable receive buffer full DMA/interrupt action">
      <choice value="0,0"   name="None"      enum="None"      />
      <choice value="0,1"   name="Interrupt" enum="Interrupt" />
      <choice value="1,1"   name="DMA"       enum="Dma"       />
   </choiceOption>

   <setTemplate key="/UART/commonMethods" namespace="all" discardRepeats="true"
      variables="uartRxFullAction" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setReceiveFullAction(%params) const {
      \t   uart->C2 = (uart->C2 & ~UART_C2_RIE_MASK)   | %paramExpression;\n
   ]]></setTemplate>
   <setTemplate key="/UART/commonMethods" namespace="all" discardRepeats="true"
      variables="uartRxFullAction"
      condition="uart_c5_rdmas_present" ><![CDATA[
      \t   uart->C5 = (uart->C5 & ~UART_C5_RDMAS_MASK) | %paramExpression>>8;\n
   ]]></setTemplate>
   <setTemplate key="/UART/commonMethods" namespace="all" discardRepeats="true"
      variables="uartRxFullAction" ><![CDATA[
      \t}\n\n
   ]]></setTemplate>

   <binaryOption key="uartClass" condition="!uart_c4_osr_present"
      description="Input buffering"
      toolTip="This option determines whether an interrupt-driven driver\n
               incorporating a queue is used to buffer input data" >
      <choice name="Unbuffered" value="Uart_brfa_T" />
      <choice name="Buffered"   value="UartBuffered_brfa_T" />
   </binaryOption>

   <binaryOption key="uartClass" condition="uart_c4_osr_present"
      description="Input buffering"
      toolTip="This option determines whether an interrupt-driven driver\n
               incorporating a queue is used to buffer input data" >
      <choice name="Unbuffered" value="Uart_osr_T" />
      <choice name="Buffered"   value="UartBuffered_osr_T" />
   </binaryOption>

   <intOption key="receiveBufferSize" description="Size of input buffer"
      toolTip="This value determines the size of the receive buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <intOption key="transmitBufferSize" description="Size of output buffer"
      toolTip="This value determines the size of the transmit buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <category name="Advanced" description="Advanced options">
      <aliasOption key="/SIM/sim_sopt5_uart$(_instance)ode"   optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt5_uart$(_instance)txsrc" optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt5_uart$(_instance)rxsrc" optional="true" constant="false" />
   </category>

   <stringOption key="irq_pattern"        constant="true" value="^UART%i_?((RxTx|Error|Lon)|.*)?$" hidden="true" />
   <stringOption key="irq_classHandler"   constant="true" value="%c%i::irq$2Handler" hidden="true" />
   <xi:include href="_irqOptionSubstituted.xml"/>

   <xi:include href="_clockOption.xml"/>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.UartValidate">
   </validate>

   <projectActionList id = "uart_files">
      <copy source="Snippets/uart-example.cpp"     target="Snippets/uart-example.cpp"  overwrite="true"  derived="true" />
      <copy source="Project_Headers/uart.h"        target="Project_Headers/uart.h"     overwrite="true"  derived="true" macroReplace="true" />
      <copy source="Project_Headers/uart_queue.h"  target="Project_Headers/uart_queue.h"    overwrite="true"  derived="true" />
   </projectActionList>

   <template><![CDATA[
   \t//! Indicates whether the UART needs a write to clear status errors
   \tstatic constexpr bool statusNeedsWrite = false;
   \t
   \t//! Default Baud rate used if not explicitly given
   \tstatic constexpr uint32_t defaultBaudRate = $(defaultBaudRate);
   \t
   \t//! Default buffer size for receive queue when interrupt driven
   \tstatic constexpr unsigned receiveBufferSize = $(receiveBufferSize);
   \t
   \t//! Default buffer size for transmit queue when interrupt driven
   \tstatic constexpr unsigned transmitBufferSize = $(transmitBufferSize);

   \t/**
   \t * Get input clock frequency
   \t *
   \t * @return Input clock frequency as a uint32_t in Hz
   \t */
   \tstatic inline uint32_t getInputClockFrequency() {
   \t   return SimInfo::getUart$(_instance)Clock();
   \t}\n\n
   ]]></template>

   <template key="/UART/Present" namespace="all"  ><![CDATA[\ ||\ 1]]></template>

   <template key="/UART/declarations" namespace="all"  ><![CDATA[
      \t/**
      \t * Class representing $(_name) interface
      \t *
      \t * <b>Example</b>
      \t * @code
      \t *  // Instantiate interface
      \t *  USBDM::$(_class) uart;
      \t *
      \t *  for(int i=0; i++;) {
      \t *     uart.writeln("Hello world ", i);
      \t *  }
      \t *  @endcode
      \t */
      \ttypedef  $(/$(_name)/uartClass:$(_base_class)_T)<$(_class)Info> $(_class);\n\n
   ]]></template>

   <signals/>
</peripheralPage>
