<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- sim_mkl43z4.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="System Integration Module" >

   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!-- ==================== Constants ==================== -->

   <!-- Peripheral speeds                  RUN       VLPR     -->
   <constant key="MCGOUTCLK_max"  value=" 48MHz,     8MHz"   type="Long" />
   <constant key="LPUART_max"     value=" 48MHz,     8MHz"   type="Long" />
   <constant key="TPM_max"        value=" 48MHz,     8MHz"   type="Long" />
   <constant key="FLEXIO_max"     value=" 48MHz,     8MHz"   type="Long" />
   <constant key="I2S_max"        value=" 25MHz,    16MHz"   type="Long" />

   <!-- LLWU wakeup devices -->
   <constant key="llwu_device_list"
      description="LLWU Wakeup sources"
      type="String"
      value="&quot;LPTMR0;CMP0;;;;RTC_Alarm;;RTC_Seconds&quot;" />

   <!-- Clock divider -->
   <constant key="clock_divider_type" type="Long" value="2" />

   <!-- DMA slots -->
   <choiceOption key="/DMAMUX0/dmamux_chcfg_src"
      hidden="true"
      typeName="DmamuxSlot"
      valueFormat="DMAMUX_CHCFG_SOURCE(%s)"
      toolTip="Specifies which DMA source (slot) is routed to a particular DMA channel"
      description="Mapping of DMA slot to DMA channel" >
      <choice value="0"  name="Disabled"           enum="Disabled"         />
      <choice value="2"  name="LPUART0 Receive"    enum="LPUART0_Receive"  />
      <choice value="3"  name="LPUART0 Transmit"   enum="LPUART0_Transmit" />
      <choice value="4"  name="LPUART1 Receive"    enum="LPUART1_Receive"  />
      <choice value="5"  name="LPUART1 Transmit"   enum="LPUART1_Transmit" />
      <choice value="6"  name="UART2 Receive"      enum="UART2_Receive"    />
      <choice value="7"  name="UART2 Transmit"     enum="UART2_Transmit"   />
      <choice value="10" name="FLEXIO Channel 0"   enum="FLEXIO_Channel0"  />
      <choice value="11" name="FLEXIO Channel 1"   enum="FLEXIO_Channel1"  />
      <choice value="12" name="FLEXIO Channel 2"   enum="FLEXIO_Channel2"  />
      <choice value="13" name="FLEXIO Channel 3"   enum="FLEXIO_Channel3"  />
      <choice value="14" name="I2S0 Receive"       enum="I2S0_Receive"     />
      <choice value="15" name="I2S0 Transmit"      enum="I2S0_Transmit"    />
      <choice value="16" name="SPI0 Receive"       enum="SPI0_Receive"     />
      <choice value="17" name="SPI0 Transmit"      enum="SPI0_Transmit"    />
      <choice value="18" name="SPI1 Receive"       enum="SPI1_Receive"     />
      <choice value="19" name="SPI1 Transmit"      enum="SPI1_Transmit"    />
      <choice value="22" name="I2C0"               enum="I2C0"             />
      <choice value="23" name="I2C1"               enum="I2C1"             />
      <choice value="24" name="TPM0 Channel 0"     enum="TPM0_Channel0"    />
      <choice value="25" name="TPM0 Channel 1"     enum="TPM0_Channel1"    />
      <choice value="26" name="TPM0 Channel 2"     enum="TPM0_Channel2"    />
      <choice value="27" name="TPM0 Channel 3"     enum="TPM0_Channel3"    />
      <choice value="28" name="TPM0 Channel 4"     enum="TPM0_Channel4"    />
      <choice value="29" name="TPM0 Channel 5"     enum="TPM0_Channel5"    />
      <choice value="32" name="TPM1 Channel 0"     enum="TPM1_Channel0"    />
      <choice value="33" name="TPM1 Channel 1"     enum="TPM1_Channel1"    />
      <choice value="34" name="TPM2 Channel 0"     enum="TPM2_Channel0"    />
      <choice value="35" name="TPM2 Channel 1"     enum="TPM2_Channel1"    />
      <choice value="40" name="ADC0"               enum="ADC0"             />
      <choice value="42" name="CMP0"               enum="CMP0"             />
      <choice value="45" name="DAC0"               enum="DAC0"             />
      <choice value="49" name="Port A"             enum="PortA"            />
      <choice value="51" name="Port C"             enum="PortC"            />
      <choice value="52" name="Port D"             enum="PortD"            />
      <choice value="54" name="TPM0 Overflow"      enum="TPM0_Overflow"    />
      <choice value="55" name="TPM1 Overflow"      enum="TPM1_Overflow"    />
      <choice value="56" name="TPM2 Overflow"      enum="TPM2_Overflow"    />
      <choice value="60" name="Always Enabled 60"  enum="AlwaysEnabled60"  />
      <choice value="61" name="Always Enabled 61"  enum="AlwaysEnabled61"  />
      <choice value="62" name="Always Enabled 62"  enum="AlwaysEnabled62"  />
      <choice value="63" name="Always Enabled 63"  enum="AlwaysEnabled63"  />
   </choiceOption>

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- Indicate RTC arrangement: OSC0/RTC(OSC1) share XTAL/EXTAL pins -->
   <binaryOption key="RtcForcing"
      locked="true"
      derived="true"
      ref="(/MCG/mcg_c2_oscMode==/OscMode_RTC_Controlled)?1:0"
      description="RTC control of OSC0"
      toolTip="Indicates if OSC0 is being controlled by RTC which shares XTAL/EXTAL pins" >
      <choice value="0" name="OSC0 is independent"        isDefault="true" />
      <choice value="1" name="OSC0 is controlled by RTC"                   />
   </binaryOption>

   <xi:include href="simCommon.xml"/>

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Baseclass)BasicInfo&quot;" />

   <!-- ************* COPC ****************** -->

   <category name="COPC" description="COP Control Register" >

      <choiceOption key="sim_copc_copt"
         description="COP Watchdog Timeout"
         typeName="SimCopDuration"
         valueFormat="SIM_COPC_COPCLKS(%s),SIM_COPC_COPT(%s)"
         toolTip="Selects the Computer Operating Properly Timeout\n
                  This is a write-once field" >
         <choice value="0,0" enum="Disabled"          name="Disabled" />
         <choice value="0,1" enum="32_cycles"         name="Timeout after 2^5 clock cycles" />
         <choice value="0,2" enum="256_cycles"        name="Timeout after 2^8 clock cycles" />
         <choice value="0,3" enum="1024_cycles"       name="Timeout after 2^10 clock cycles" />
         <choice value="1,1" enum="8192_cycles"       name="Timeout after 2^13 clock cycles" />
         <choice value="1,2" enum="65536_cycles"      name="Timeout after 2^16 clock cycles" />
         <choice value="1,3" enum="262144_cycles"     name="Timeout after 2^18 clock cycles" />
      </choiceOption>

      <choiceOption key="sim_copc_copclksel"
         enabledBy="sim_copc_copt>0"
         typeName="SimCopClkSrc"
         description="COP Clock Select"
         toolTip="Selects the clock source of the COP watchdog\n
                  This is a write-once field" >
         <choice value="0" enum="LpoClk"   name="LPO clock (1 kHz)" isDefault="true" />
         <choice value="1" enum="McgirClk" name="MCGIRCLK" />
         <choice value="2" enum="OscerClk" name="OSCERCLK" />
         <choice value="3" enum="BusClk"   name="Bus clock" />
      </choiceOption>

      <binaryOption key="sim_copc_copdbgen"
         enabledBy="sim_copc_copt>0"
         typeName="SimCopDebugMode"
         description="COP Debug Enable"
         toolTip="Controls whether COP is enabled in debug mode\n
                  This is a write-once field" >
         <choice value="0" enum="HeldReset" name="COP is disabled and the counter is reset" isDefault="true" />
         <choice value="1" enum="Enabled"   name="COP is enabled" />
      </binaryOption>

      <binaryOption key="sim_copc_copstpen"
         enabledBy="sim_copc_copt>0"
         typeName="SimCopStopMode"
         description="COP Stop Enable"
         toolTip="Controls whether COP is enabled in stop mode\n
                  This is a write-once field" >
         <choice value="0"  enum="HeldReset" name="COP is disabled and the counter is reset" isDefault="true" />
         <choice value="1"  enum="Enabled"   name="COP is enabled" />
      </binaryOption>

      <binaryOption key="sim_copc_copw"
         enabledBy="sim_copc_copt&gt;3"
         typeName="SimCopMode"
         description="COP Windowed Mode"
         toolTip="Windowed mode is only supported when COP is using longer periods\n
                  The COP window is opened three quarters through the timeout period\n
                  This is a write-once field" >
         <choice value="0"  enum="Normal"     name="Normal Mode" isDefault="true" />
         <choice value="1"  enum="WindowMode" name="Windowed Mode" />
      </binaryOption>

   </category>

   <!-- ************* USB Clock ****************** -->

   <intOption key="system_usb_clkin_clock"
      hidden="true"
      locked="true"
      origin="USB Clock In pin"
      units="Hz"
      description="Frequency of External USB Clock"
      toolTip="Externally provided clock for USB on USB_CLKIN"
      value="0" />

   <!-- ************* SOPT1 ****************** -->

   <category name="SOPT1" description="RTC clocks" >

      <aliasOption key="rtc_clkin_clock" optional="true" locked="false" />

      <aliasOption key="sim_sopt1_osc32ksel" locked="false" optional="true" />
      <aliasOption key="system_erclk32k_clock" />

      <choiceOption key="sim_sopt1_usbpower" condition="sim_sopt1_usbregen_present &amp;&amp; sim_sopt1_usbsstby_present &amp;&amp; sim_sopt1_usbvstby_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="SIM_SOPT1_USBREGEN(%s),SIM_SOPT1_USBSSTBY(%s),SIM_SOPT1_USBVSTBY(%s)"
         typeName="SimUsbPower"
         description="USB voltage regulator power control"
         toolTip="Controls when the USB voltage regulator is enabled in\n
                  (RUN), (STOP, VLPS, LLS and VLLS) or (VLPR and VLPW) modes" >
         <choice value="0,0,0"  name="Disabled in all modes"         enum="Disabled"               />
         <choice value="1,0,0"  name="Enabled in all modes"          enum="EnabledInAll"           isDefault="true" />
         <choice value="1,1,0"  name="Enabled in run and low power"  enum="EnabledInRun_LowPower"  />
         <choice value="1,0,1"  name="Enabled in run and stop"       enum="EnabledInRun_Stop"      />
         <choice value="1,1,1"  name="Enabled in run only"           enum="EnabledInRun"           />
      </choiceOption>

      <choiceOption key="sim_sopt1_osc32kout" condition="sim_sopt1_osc32kout_present"
         typeName="SimErc32kClkoutPinSelect"
         description="ERCLK32K Clock Output"
         toolTip="Outputs the ERCLK32K on the selected pin in all modes of operation" >
         <choice value="0"  name="ERCLK32K is not output"      enum="None"  isDefault="true" />
         <choice value="1"  name="ERCLK32K is output on PTE0"  enum="PTE0" />
         <choice value="2"  name="ERCLK32K is output on PTE26" enum="PTE26" />
      </choiceOption>
   </category>

   <!-- ************* SOPT2 ****************** -->

   <category name="SOPT2" description="Clock Gating" >

      <template><![CDATA[
         \t/**
         \t * Get Peripheral clock frequency
         \t *
         \t * @return Frequency as a uint32_t in Hz
         \t *
         \t * @note If there is a peripheral clock divider then this is the
         \t *       frequency of the undivided peripheral clock
         \t */
         \tstatic uint32_t getPeripheralClock() {
         \t
         \t   return McgInfo::getMcgPClk();
         \t}\n\n
      ]]></template>

      <aliasOption key="sim_sopt2_rtcclkoutsel"  optional="true" locked="false"/>
      <aliasOption key="rtc_clkout"              optional="true" />

      <aliasOption key="/MCG/system_mcgpclk_clock[]"  optional="true" />
      <aliasOption key="system_peripheral_clock[]"    optional="true" />

      <aliasOption key="sim_sopt2_usbsrc[]" locked="false" />
      <aliasOption key="system_usbfs_clock[]" />

      <aliasOption key="/OSC0/oscer_clock"               optional="true" />
      <aliasOption key="/MCG/system_mcgirclk_clock[]"    optional="true" />
   </category>

   <!-- ************* SOPT4 ****************** -->

   <category name="SOPT4" description="TPM signals" >

      <for keys="n" values="0;1" >
         <intOption key="TpmClkin%(n)"
            description="TPM External clock input #%(n)"
            toolTip="This input is available as a TPM external clock source"
            value="0"
            units="Hz"
         />
         <for keys="p" dim="4" >
            <if condition="sim_sopt4_tpm%(p)clksel_present" >
               <equation key="Tpm%(f)ExternalItems" value="" condition="!Tpm%(f)ExternalItems" />
               <equation key="Tpm%(p)ExternalItems" value="=Tpm%(p)ExternalItems+&quot;TpmClkin%(n);&quot;"/>
            </if>
         </for>
         <variableTemplate variables="TpmClkin%(n)"
            initExpressionOnSameLine="true"
         ><![CDATA[
            \t/// %tooltip
            \tstatic constexpr uint32_t TpmClkin%(n) =  %initExpression;
            \t\n
         ]]></variableTemplate>
      </for>

      <for keys="f" dim="4" >

         <if condition="sim_sopt4_tpm%(p)clksel_present" >
            <binaryOption key="sim_sopt4_tpm%(p)clksel"
               addToVar="Tpm%(p)ExternalItems"
               enabledBy="enablePeripheralSupport"
               target="Tpm%(p)ExternalClkin"
               typeName="SimTpm%(p)ClkSel"
               description="TPM %(p) External Clock Pin "
               toolTip="External pin used to drive the external clock to TPM%(p) module" >
               <choice value="0"  name="TPM_CLKIN0 pin" enum="0" ref="TpmClkin0" code="TpmClkin0" isDefault="true" />
               <choice value="1"  name="TPM_CLKIN1 pin" enum="1" ref="TpmClkin1" code="TpmClkin1"  />
            </binaryOption>

            <intOption key="Tpm%(p)ExternalClkin"
               addToVar="Tpm%(p)ExternalItems"
               description="TMP%(p) External clock"
               toolTip="This clock is available as the TPM%(p) external clock source"
               locked="true"
               derived="true"
               units="Hz"
            />

            <clockCodeTemplate variable="sim_sopt4_tpm%(p)clksel"
               returnFormat="%s" >
            ><![CDATA[
               \t/**
               \t * Select %description
               \t *
               \t * @param %paramName %tooltip
               \t */
               \tstatic void setTpm%(p)ClockIn(%paramType %paramName) {
               \t   %fieldAssignment
               \t}
               \t
               \t/**
               \t * Get %description
               \t *
               \t * @return Clock frequency in Hz
               \t */
               \tstatic uint32_t getTpm%(p)ClockInFrequency() {
               \t
               \t   switch(%maskingExpression) {
               %body
               \t      default: return 0;
               \t   }
               \t}\n\n
            ]]></clockCodeTemplate>
         </if>
      </for>

      <for keys="p" values="0;1;2" >
         <choiceOption key="sim_sopt4_tpm%(p)ch0src" condition="sim_sopt4_tpm%(p)ch0src_present"
            addToVar="Tpm%(p)ExternalItems"
            enabledBy="enablePeripheralSupport"
            typeName="SimTpm%(p)Ch0Src"
            description="TPM %(p) channel 0 input capture source"
            toolTip="Source for TPM channel input capture\n
               NOTE: When the TPM is not in input capture mode, clear this field" >
            <choice value="0" name="TPM CH0 signal"            enum="IcPin"  isDefault="true" />
            <choice value="1" name="CMP0 output"               enum="Cmp0"   />
            <choice value="3" name="USB start of frame pulse"  enum="UsbSof" condition="%(p)==1" />
         </choiceOption>
      </for>
   </category>
   <!--
   <printVar key="Tpm0ExternalItems"/>
   <printVar key="Tpm1ExternalItems"/>
   <printVar key="Tpm2ExternalItems"/>
   -->

   <!-- ************* SOPT5 ****************** -->

   <category name="SOPT5" description="UART signals" >

      <for keys="n" values="0;1;2" >
         <for keys   = "name:Name:NAME"
              values = "uart%(n)   : Uart%(n)   : UART%(n);
                        lpuart%(n) : Lpuart%(n) : LPUART%(n)" >
            <binaryOption key="sim_sopt5_%(name)ode" condition="sim_sopt5_%(name)ode_present"
               addToVar="%(Name)ExternalItems"
               enabledBy="enablePeripheralSupport"
               typeName="Sim%(Name)Drive"
               description="%(NAME) Open Drain"
               toolTip="Enables Open Drain output" >
               <choice value="0" name="Push-pull"  enum="PushPull"  />
               <choice value="1" name="Open-drain" enum="OpenDrain" />
            </binaryOption>

            <choiceOption key="sim_sopt5_%(name)rxsrc" condition="sim_sopt5_%(name)rxsrc_present"
               addToVar="%(Name)ExternalItems"
               enabledBy="enablePeripheralSupport"
               typeName="Sim%(Name)RxSrc"
               description="%(NAME) receive data source"
               toolTip="Source for the %(NAME) receive data" >
               <choice value="0" name="Rx pin"        enum="RxPin"  isDefault="true" />
               <choice value="1" name="CMP0 output"   enum="Cmp0"   />
            </choiceOption>

            <choiceOption key="sim_sopt5_%(name)txsrc" condition="sim_sopt5_%(name)txsrc_present"
               addToVar="%(Name)ExternalItems"
               enabledBy="enablePeripheralSupport"
               typeName="Sim%(Name)TxSrc"
               description="%(NAME) transmit data source"
               toolTip="Source for the %(NAME) transmit data" >
               <choice value="0" name="Tx pin" isDefault="true"             enum="Direct" />
               <choice value="1" name="Tx pin modulated by TPM1 channel 0"  enum="ModulatedByTpm1Ch0" />
               <choice value="2" name="Tx pin modulated by TPM2 channel 0"  enum="ModulatedByTpm2Ch0" condition="/TPM2/_present" />
            </choiceOption>
         </for>
      </for>
   </category>

   <!-- ************* SOPT7 ****************** -->

   <category name="SOPT7" description="ADC signals" >
      <for keys="adc" values="0;1" >
         <choiceOption key="sim_sopt7_adc%(adc)trigger" condition="sim_sopt7_adc%(adc)alttrgen_present"
            addToVar="Adc%(adc)ExternalItems"
            enabledBy="enablePeripheralSupport"
            typeName="SimAdc%(adc)TriggerMode"
            valueFormat="SIM_SOPT7_ADC%(adc)ALTTRGEN(%s),SIM_SOPT7_ADC%(adc)PRETRGSEL(%s)"
            description="ADC%(adc) trigger mode"
            toolTip="Alternative conversion triggers for ADC\n
               _Tpm              - ADC is triggered by TPM. Pre-triggers are TPM channel 0 (A) and channel 1 (B)\n
               _Alt_PreTrigger_0 - ADC is triggered by SimAdc%(adc)Trigger selection and uses pretrigger 0 = A (SC1[0]/R[0])\n
               _Alt_PreTrigger_1 - ADC is triggered by SimAdc%(adc)Trigger selection and uses pretrigger 1 = B (SC1[1]/R[1])" >
            <choice value="0,0"   name="Triggered by TPM Ch0 and Ch1" enum="Tpm"  isDefault="true" />
            <choice value="1,0"   name="Pre-trigger 0 = A (SC1[0])"   enum="Alt_PreTrigger_0" />
            <choice value="1,1"   name="Pre-trigger 1 = B (SC1[1])"   enum="Alt_PreTrigger_1" />
         </choiceOption>

         <choiceOption key="sim_sopt7_adc%(adc)trgsel" condition="sim_sopt7_adc%(adc)pretrgsel_present"
            addToVar="Adc%(adc)ExternalItems"
            enabledBy="enablePeripheralSupport"
            typeName="SimAdc%(adc)TriggerSrc"
            description="ADC%(adc) trigger source"
            toolTip="ADC Trigger source in STOP and VLPS modes, or when ADC Alternative Trigger is active" >
            <choice value="0"  name="External trigger pin input (EXTRG_IN)"   enum="External"     isDefault="true" />
            <choice value="1"  name="CMP 0 output"                            enum="Cmp0"         condition="/CMP0/_present"   />
            <choice value="2"  name="CMP 1 output"                            enum="Cmp1"         condition="/CMP1/_present"   />
            <choice value="3"  name="CMP 2 output"                            enum="Cmp2"         condition="/CMP1/_present"   />
            <choice value="4"  name="PIT trigger 0"                           enum="PitCh0"       condition="/PIT/_present"    />
            <choice value="5"  name="PIT trigger 1"                           enum="PitCh1"       condition="/PIT/_present"    />
            <choice value="8"  name="TPM0 trigger"                            enum="Tpm0"         condition="/TPM0/_present"   />
            <choice value="9"  name="TPM1 trigger"                            enum="Tpm1"         condition="/TPM1/_present"   />
            <choice value="10" name="TPM2 trigger"                            enum="Tpm2"         condition="/TPM2/_present"   />
            <choice value="12" name="RTC alarm"                               enum="RtcAlarm"     condition="/RTC/_present"    />
            <choice value="13" name="RTC seconds"                             enum="RtcSeconds"   condition="/RTC/_present"    />
            <choice value="14" name="LPTMR trigger"                           enum="Lptmr"        condition="/LPTMR0/_present" />
         </choiceOption>
      </for>
   </category>

   <!-- ************* FCFG1 ****************** -->

   <category name="Flash" description="Flash control" >
      <binaryOption key="sim_fcfg1_flashdoze" condition="sim_fcfg1_flashdoze_present"
         enabledBy="enablePeripheralSupport"
         typeName="SimFlashDoze"
         description="Flash Doze"
         toolTip="Allows flash memory to be disabled in Doze mode. \n
                  This bit should be clear during VLP modes. \n
                  The Flash will be automatically enabled again at the end of Doze mode" >
         <choice name="Flash remains enabled during Wait mode"           value="0" enum="EnabledInDoze"/>
         <choice name="Flash is disabled for the duration of Wait mode"  value="1" enum="DisabledInDoze"/>
      </binaryOption >

      <binaryOption key="sim_fcfg1_flashdis" condition="sim_fcfg1_flashdis_present"
         enabledBy="enablePeripheralSupport"
         typeName="SimFlashEn"
         description="Flash Disable"
         toolTip="Flash accesses are disabled (and generate a bus error).\n
                  Flash memory is placed in a low power state.\n
                  This bit should not be changed during VLP modes"
         >
         <choice name="Flash is enabled"   value="0" enum="Enabled"/>
         <choice name="Flash is disabled"  value="1" enum="Disabled"/>
      </binaryOption >
   </category>

   <for keys="n" dim="=numberOfClockSettings" >
      <aliasCategoryOption key="/MCG/ClockConfig[%(n)]" derived="true" locked="true" >

         <aliasOption key="/MCG/enableClockConfiguration[%(n)]" locked="false" />
         <aliasOption key="/SMC/smc_pmctrl_runm[%(n)]"          locked="false" />

         <category name="Peripheral Clocks" description="Peripheral Clock Selection" >
            <intOption key="system_irc48m_clock[%(n)]"
               enabledBy="/SMC/smc_pmctrl_runm[%(n)]!=1##IRC48M Disabled in VLPR"
               locked="true"
               units="Hz"
               description="Frequency of Internal 48MHz Clock [IRC48MCLK]"
               toolTip="48 MHz Internal Oscillator [May be trimmed against USB bus]"
               origin="48MHz clock from IRC48MCLK"
               value="48000000"
               disabledValue="0" />

            <choiceOption key="sim_sopt2_clkoutsel[%(n)]" condition="sim_sopt2_clkoutsel_present"
               enabledBy="enablePeripheralSupport"
               target="clockOut[%(n)]"
               typeName="SimClkoutSel"
               description="CLKOUT pin clock"
               toolTip="Clock to output on the CLKOUT pin" >
               <choice value="0"  name="Disabled0"           ref="disabled"                         enum="Unused0"     />
               <choice value="1"  name="Disabled1"           ref="disabled"                         enum="Unused1"      />
               <choice value="2"  name="Bus clock"           ref="system_bus_clock[%(n)]"           enum="BusClk"       isDefault="true" />
               <choice value="3"  name="LPO clock (1 kHz)"   ref="/PMC/system_low_power_clock"      enum="LpoClk"       />
               <choice value="4"  name="MCGIRCLK"            ref="/MCG/system_mcgirclk_clock[%(n)]" enum="McgIrClk"     condition="!/MCG/mcg_mc_lirc_div2_present" />
               <choice value="4"  name="LIRC_CLK (8/2 MHz)"  ref="/MCG/system_lirc_clock[%(n)]"     enum="McgLirClk"    condition="/MCG/mcg_mc_lirc_div2_present"    />
               <choice value="5"  name="Disabled5"           ref="disabled"                         enum="Unused5"      />
               <choice value="6"  name="OSCERCLK0"           ref="/OSC0/oscer_clock"                enum="OscerClk0"    />
               <choice value="7"  name="IRC 48 MHz clock"    ref="system_irc48m_clock[%(n)]"        enum="Irc48MClk"   condition="system_irc48m_clock[%(n)]"  />
               <choice value="7"  name="Disabled7"           ref="disabled"                         enum="Unused7"     condition="!system_irc48m_clock[%(n)]" />
            </choiceOption>

            <intOption key="clockOut[%(n)]" condition="sim_sopt2_clkoutsel_present"
               enabledBy="enablePeripheralSupport"
               derived="true"
               locked="true"
               units="Hz"
               description="Clock out"
               toolTip="Clock available on CLKOUT pin" />

            <intOption key="system_peripheral_clock[%(n)]"
               enabledBy="(%(n)==0)||/MCG/enableClockConfiguration[%(n)]"
               ref="/MCG/system_mcgpclk_clock[%(n)]"
               derived="true"
               locked="true"
               units="Hz"
               description="Peripheral Clock frequency"
               toolTip="Frequency of Peripheral Clock available to various peripherals"  />

            <choiceOption key="sim_sopt2_usbsrc[%(n)]" condition="sim_sopt2_usbsrc_present"
               enabledBy="enablePeripheralSupport"
               target="system_usbfs_clock[%(n)]"
               typeName="SimUsbFullSpeedClockSource"
               description="USB Clock"
               toolTip="Source for the USB clock" >
               <choice value="0"  name="External bypass clock (USB_CLKIN)" enum="External"      ref="system_usb_clkin_clock"           />
               <choice value="1"  name="Peripheral Clock (MCGPCLK)"        enum="PeripheralClk" ref="system_peripheral_clock[%(n)]"    isDefault="true" />
            </choiceOption>

            <aliasOption key="system_usb_clkin_clock" locked="false" optional="true" />

            <intOption key="system_usbfs_clock[%(n)]"  condition="sim_sopt2_usbsrc_present"
               enabledBy="enablePeripheralSupport"
               errorPropagate="error"
               derived="true"
               locked="true"
               units="Hz"
               description="USB Full Speed Clock"
               toolTip="Frequency of clock to USB full speed controller"
               value="48_MHz" min="48_MHz" max="48_MHz" disabledValue="0" />

            <for keys="u : name              : code            : ref"
               values="2 : System bus clock : SystemBusClock : system_bus_clock[%(n)]" >

               <choiceOption key="system_uart%(u)_fixedclocksource[%(n)]"
                  target="system_uart%(u)_clock[%(n)]"
                  locked="true"
                  derived="true"
                  description="UART%(u) Clock source"
                  toolTip="Fixed clock source for UART (%(code))" >
                  <choice value="0"  name="%(name)" ref="%(ref)" code="%(code)" />
               </choiceOption>

               <intOption key="system_uart%(u)_clock[%(n)]"
                  locked="true"
                  derived="true"
                  units="Hz"
                  description="UART%(u) Clock frequency"
                  toolTip="Frequency of clock to UART%(u)"
                  value="0" />
            </for>

            <for keys="p" values=";0;1" >
               <for keys   = "name       : Name       : NAME       : bNAME"
                    values = "uart%(p)   : Uart%(p)   : UART%(p)   : UART   ;
                              lpuart%(p) : Lpuart%(p) : LPUART%(p) : LPUART ;
                              flexio%(p) : Flexio%(p) : FLEXIO%(p) : FLEXIO ;
                              tpm%(p)    : Tpm%(p)    : TPM%(p)    : TPM    " >

                  <choiceOption key="sim_sopt2_%(name)src[%(n)]" condition="sim_sopt2_%(name)src_present"
                     enabledBy="enablePeripheralSupport"
                     typeName="Sim%(Name)ClockSource"
                     target="system_%(name)_clock[%(n)]"
                     description="%(NAME) Clock"
                     toolTip="Clock source for the peripheral" >
                     <choice value="0"  name="Clock Disabled"                ref="disabled"                          enum="Disabled"        code="0"                         />
                     <choice value="1"  name="Peripheral Clock (MCGPCLK)"    ref="system_peripheral_clock[%(n)]"     enum="PeripheralClk"   code="getPeripheralClock()"       isDefault="true"/>
                     <choice value="2"  name="OSCERCLK clock"                ref="/OSC0/oscer_clock"                 enum="OscerClk"        code="Osc0Info::getOscerClock()" />
                     <choice value="3"  name="MCGIRCLK clock"                ref="/MCG/system_mcgirclk_clock[%(n)]"  enum="McgIrClk"        code="McgInfo::getMcgIrClock()"  />
                  </choiceOption>

                  <intOption key="system_%(name)_clock[%(n)]" condition="sim_sopt2_%(name)src_present"
                     max="%(bNAME)_max[/SMC/smc_pmctrl_runm[%(n)]]"
                     derived="true"
                     locked="true"
                     units="Hz"
                     description="%(NAME) Clock frequency"
                     toolTip="Frequency of clock to %(NAME)"
                     value="0" />
               </for>
            </for>
         </category>

         <aliasOption key="/MCG/system_mcgoutclk_clock[%(n)]" />

         <intOption key="system_core_clock[%(n)]" condition="sim_clkdiv1_outdiv1_present"
            ref="(/MCG/system_mcgoutclk_clock[%(n)])/((sim_clkdiv1_outdiv1[%(n)])+1)"
            enabledBy="(%(n)==0)||/MCG/enableClockConfiguration[%(n)]"
            derived="true"
            isNamedClock="true"
            units="Hz"
            description="System Core Clock"
            toolTip="Clocks the ARM Cortex-M4 core and bus masters"
            value="48_MHz"
            disabledValue="0" />

         <intOption key="system_bus_clock[%(n)]" condition="sim_clkdiv1_outdiv4_present"
            enabledBy="(%(n)==0)||/MCG/enableClockConfiguration[%(n)]"
            ref="(system_core_clock[%(n)])/(sim_clkdiv1_outdiv4[%(n)]+1)"
            derived="true"
            isNamedClock="true"
            units="Hz"
            description="System Bus Clock"
            toolTip="Clocks the bus slaves and peripherals\n
                     Must be &lt;= Core Clock frequency"
            value="24_MHz"
            disabledValue="0" />

   <!-- ************* CLKDIV1 ****************** -->

         <category name="CLKDIV1" description="System Clock Dividers" >
            <choiceOption key="sim_clkdiv1_outdiv1[%(n)]"  condition="sim_clkdiv1_outdiv1_present"
               enabledBy="(%(n)==0)||/MCG/enableClockConfiguration[%(n)]"
               typeName="SimCoreClkDivider"
               locked="true"
               description="Core &amp; System Clock Divider (OUTDIV1) - Divide by [1-16]"
               toolTip="Clocks the ARM Cortex-M4 core and bus masters\n
                        Divides MCGOUTCLK Clock to generate system_core_clock." >
               <choice value="0"   name="/1"  enum="Direct" />
               <choice value="1"   name="/2"  enum="DivBy2" isDefault="true" />
               <choice value="2"   name="/3"  enum="DivBy3"/>
               <choice value="3"   name="/4"  enum="DivBy4"/>
               <choice value="4"   name="/5"  enum="DivBy5"/>
               <choice value="5"   name="/6"  enum="DivBy6"/>
               <choice value="6"   name="/7"  enum="DivBy7"/>
               <choice value="7"   name="/8"  enum="DivBy8"/>
               <choice value="8"   name="/9"  enum="DivBy9"/>
               <choice value="9"   name="/10" enum="DivBy10"/>
               <choice value="10"  name="/11" enum="DivBy11"/>
               <choice value="11"  name="/12" enum="DivBy12"/>
               <choice value="12"  name="/13" enum="DivBy13"/>
               <choice value="13"  name="/14" enum="DivBy14"/>
               <choice value="14"  name="/15" enum="DivBy15"/>
               <choice value="15"  name="/16" enum="DivBy16"/>
            </choiceOption>

            <choiceOption key="sim_clkdiv1_outdiv4[%(n)]"  condition="sim_clkdiv1_outdiv4_present"
               enabledBy="(%(n)==0)||/MCG/enableClockConfiguration[%(n)]"
               locked="true"
               derivedFrom="sim_clkdiv1_outdiv1[%(n)]"
               typeName="SimFlashClkDivider"
               description="Flash Clock Divider (OUTDIV4) - Divide by [1-16]"
               toolTip="Clocks the flash memory\n
                        Divides Core Clock to generate system_flash_clock." />
         </category>
      </aliasCategoryOption>
   </for>

<!-- Graphic here -->

   <xi:include href="sim_commonTemplates.xml" />

   <!-- ************* Clock Variables ****************** -->

   <template namespace="usbdm" codeGenCondition="/MCG/enablePeripheralSupport" ><![CDATA[
      \t/*
      \t * Global clocks
      \t */
      \t\n
   ]]></template>
   <template namespace="usbdm" codeGenCondition="!/MCG/enablePeripheralSupport" ><![CDATA[
      \t/*
      \t * Global clocks constants
      \t * These are provided when minimal clock generator code is used.
      \t * They assume no clock changes are made after startup.
      \t * Values provided are from USBDM configuration.
      \t */
      \t\n
   ]]></template>

   <for keys=" clock                  : name "
      values=" system_core_clock[0]   : SystemCoreClock;
               system_bus_clock[0]    : SystemBusClock;
               system_timer_clock[0]  : SystemTimerClock
         " >
      <variableTemplate namespace="usbdm" variables="%(clock)" codeGenCondition="/MCG/enablePeripheralSupport" ><![CDATA[
         \t/**
         \t *  %description
         \t *  %tooltip
         \t */
         \textern "C" uint32_t %(name);
         \t\n
      ]]></variableTemplate>
      <variableTemplate key="/SYSTEM/Clocks" variables="%(clock)" codeGenCondition="/MCG/enablePeripheralSupport" ><![CDATA[
         \t/**
         \t *  %description
         \t *  %tooltip
         \t */
         \tuint32_t %(name);
         \t\n
      ]]></variableTemplate>
      <variableTemplate namespace="usbdm" variables="%(clock)" codeGenCondition="!/MCG/enablePeripheralSupport" ><![CDATA[
         \t/**
         \t *  %description
         \t *  %tooltip
         \t */
         \tconstexpr uint32_t %(name) = %valueExpression;
         \t\n
      ]]></variableTemplate>
   </for>

   <template codeGenCondition="/MCG/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Update system clock values
      \t *
      \t * @param systemClock Frequency of clock provided to system clock dividers
      \t */
      \tstatic void updateSystemClocks(unsigned systemClock) {
      \t
      \t   SystemCoreClock    = systemClock/(((SIM->CLKDIV1&SIM_CLKDIV1_OUTDIV1_MASK)>>SIM_CLKDIV1_OUTDIV1_SHIFT)+1);
      \t   SystemBusClock     = SystemCoreClock/(((SIM->CLKDIV1&SIM_CLKDIV1_OUTDIV4_MASK)>>SIM_CLKDIV1_OUTDIV4_SHIFT)+1);
      \t}\n\n
   ]]></template>

   <variableTemplate variables="sim_clkdiv1_outdiv1[0],sim_clkdiv1_outdiv2[0],sim_clkdiv1_outdiv3[0],sim_clkdiv1_outdiv4[0]" ><![CDATA[
      \t/** Reset clock divider value if clock not fully configured */
      \tstatic constexpr uint32_t sim_clkdiv1 = %initExpression;
      \t\n
   ]]></variableTemplate>

   <!-- ************* Common ****************** -->

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.SimValidateMKL" dim="=numberOfClockSettings" >
      <param type="long" value="48MHz"  />     <!-- RUN Core          -->
      <param type="long" value="24MHz"  />     <!-- RUN Bus           -->

      <param type="long" value="4MHz"   />     <!-- VLPR Core         -->
      <param type="long" value="1MHz"   />     <!-- VLPR Bus          -->
   </validate>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <xi:include href="simFiles-MKL.xml"/>

</peripheralPage>
