<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- rcm_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="RCM" description="Reset Control Module" >

   <constant key="suppressInstance"         type="Boolean" value="false"         />
   <constant key="peripheralUsesInterrupts" type="Boolean" value="false"          />
   <constant key="irq_parameters"           type="String"  value="&quot;&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;&quot;"  />
   <constant key="isGeneratedByDefault"     type="Boolean" value="false"         />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="_enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicValueExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %enumClass[index]               As for %paramType
    * %enumParam[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicValueExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %defaultClockExpression         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %defaultMaskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Baseclass)BasicInfo&quot;" />

   <!-- ************* RPFC ****************** -->

   <binaryOption key="rcm_rpfc_rstfltss" condition="rcm_rpfc_rstfltss_present"
      enabledBy="enablePeripheralSupport"
      enumStem="RcmResetPinStopFilter"
      description="Reset pin filter select in low power modes
               On exit from VLLS mode, this bit should be reconfigured before clearing PMC_REGSC[ACKISO]"
      toolTip="Controls the reset reset pin filter in STOP and VLPS modes">
      <choice value="0" enum="Disabled"           name="No filter"    isDefault="true" />
      <choice value="1" enum="LowPowerOscillator" name="LPO clock based filter" />
   </binaryOption>

   <choiceOption key="rcm_rpfc_rstfltsrw" condition="rcm_rpfc_rstfltsrw_present"
      enabledBy="enablePeripheralSupport"
      enumStem="RcmResetPinRunWaitFilter"
      description="Reset pin filter select in run and wait modes"
      toolTip="Controls the reset reset pin filter in RUN and WAIT modes">
      <choice value="0" enum="Disabled"           name="No filter" />
      <choice value="1" enum="BusClock"           name="Bus clock based filter" />
      <choice value="2" enum="LowPowerOscillator" name="LPO clock based filter" />
   </choiceOption>

   <!-- ************* RPFW ****************** -->

   <choiceOption key="rcm_rpfw_rstfltsel" condition="rcm_rpfw_rstfltsel_present"
      enabledBy="enablePeripheralSupport"
      enumStem="RcmResetFilterBusClockCount"
      description="Reset pin filter bus clock select"
      toolTip="Selects the reset pin filter width" >
      <choice value="0"  enum="1Cycle"   name="1 clock cycle"   />
      <choice value="1"  enum="2Cycles"  name="2 clock cycles"  />
      <choice value="2"  enum="3Cycles"  name="3 clock cycles"  />
      <choice value="3"  enum="4Cycles"  name="4 clock cycles"  />
      <choice value="4"  enum="5Cycles"  name="5 clock cycles"  />
      <choice value="5"  enum="6Cycles"  name="6 clock cycles"  />
      <choice value="6"  enum="7Cycles"  name="7 clock cycles"  />
      <choice value="7"  enum="8Cycles"  name="8 clock cycles"  />
      <choice value="8"  enum="9Cycles"  name="9 clock cycles"  />
      <choice value="9"  enum="10Cycles" name="10 clock cycles" />
      <choice value="10" enum="11Cycles" name="11 clock cycles" />
      <choice value="11" enum="12Cycles" name="12 clock cycles" />
      <choice value="12" enum="13Cycles" name="13 clock cycles" />
      <choice value="13" enum="14Cycles" name="14 clock cycles" />
      <choice value="14" enum="15Cycles" name="15 clock cycles" />
      <choice value="15" enum="16Cycles" name="16 clock cycles" />
      <choice value="16" enum="17Cycles" name="17 clock cycles" />
      <choice value="17" enum="18Cycles" name="18 clock cycles" />
      <choice value="18" enum="19Cycles" name="19 clock cycles" />
      <choice value="19" enum="20Cycles" name="20 clock cycles" />
      <choice value="20" enum="21Cycles" name="21 clock cycles" />
      <choice value="21" enum="22Cycles" name="22 clock cycles" />
      <choice value="22" enum="23Cycles" name="23 clock cycles" />
      <choice value="23" enum="24Cycles" name="24 clock cycles" />
      <choice value="24" enum="25Cycles" name="25 clock cycles" />
      <choice value="25" enum="26Cycles" name="26 clock cycles" />
      <choice value="26" enum="27Cycles" name="27 clock cycles" />
      <choice value="27" enum="28Cycles" name="28 clock cycles" />
      <choice value="28" enum="29Cycles" name="29 clock cycles" />
      <choice value="29" enum="30Cycles" name="30 clock cycles" />
      <choice value="30" enum="31Cycles" name="31 clock cycles" />
      <choice value="31" enum="32Cycles" name="32 clock cycles" />
   </choiceOption>

<!-- Graphic here -->

   <for keys="field:name"
        values="
      rcm_rpfc_rstfltss:ResetFilterInStopModes;
      rcm_rpfc_rstfltsrw:ResetFilterInRunModes;
      rcm_rpfw_rstfltsel:ResetFilterBusCycles" >
      <setTemplate variables="%(field)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %defaultFieldExpression
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></setTemplate>
   </for>

<!--   ========== RCM Init class =============================== -->

   <template key="init_description" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t status) {
      \t *    (void) status;
      \t * }
      \t *
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   RcmResetPinStopFilter_LowPowerOscillator ,    // Reset pin filter select in low power modes - LPO clock based filter
      \t *   RcmResetPinRunWaitFilter_LowPowerOscillator , // Reset pin filter select in run and wait modes - LPO clock based filter
      \t *   RcmResetFilterBusClockCount_16Cycles,         // Reset pin filter bus clock select - 16 clock cycles
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" >
   <![CDATA[
      class $(_Class)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="rcm_rpfc_rstfltss,rcm_rpfc_rstfltsrw"
   ><![CDATA[
      \t   /// Reset Pin Filter Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="rcm_rpfw_rstfltsel"
   ><![CDATA[
      \t   /// Reset Pin Filter Width Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   rcm->RPFC    = init.rpfc;
      \t   rcm->RPFW    = init.rpfw;
      \t}
      \t\n
   ]]></template>

<!--   Constructors -->

   <for keys="r"
      values="
            rcm_rpfc_rstfltss;
            rcm_rpfc_rstfltsrw;
            rcm_rpfw_rstfltsel
            " >
      <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

<!--   Default Initialisation value -->

   <initialValueTemplate codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            rcm_rpfc_rstfltss,
            rcm_rpfc_rstfltsrw,
            rcm_rpfw_rstfltsel
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
      <![CDATA[
      \t}; // $(_Class)BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm" >
      <![CDATA[
      }; // $(_Class)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" namespace="all" codeGenCondition="enablePeripheralSupport" ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base_T {};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id = "rcm_files" >
      <copy source="Project_Headers/rcm.h"     target="Project_Headers/rcm.h"     overwrite="true"  derived="true" />
      <copy source="Snippets/rcm-example.cpp"  target="Snippets/rcm-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <signals enabledBy="enablePeripheralSupport" />

</peripheralPage>
