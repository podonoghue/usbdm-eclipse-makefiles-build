<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- rcm_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="RCM" description="Reset Control Module" >

   <equation key="generateDefault"           type="Boolean" value="false"         />
   <equation key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Structname)BasicInfo&quot;" />

   <!-- ************* RPFC ****************** -->

   <binaryOption key="rcm_rpfc_rstfltss" condition="rcm_rpfc_rstfltss_present"
      enabledBy="enablePeripheralSupport"
      typeName="RcmResetPinStopFilter"
      toolTip="Controls the reset reset pin filter in STOP and VLPS modes\n
               On exit from VLLS mode, this bit should be reconfigured before clearing PMC_REGSC[ACKISO]"
      description="Reset pin filter select in low power modes" >
      <choice value="0" enum="Disabled"           name="No filter"    isDefault="true" />
      <choice value="1" enum="LowPowerOscillator" name="LPO clock based filter" />
   </binaryOption>

   <choiceOption key="rcm_rpfc_rstfltsrw" condition="rcm_rpfc_rstfltsrw_present"
      enabledBy="enablePeripheralSupport"
      typeName="RcmResetPinRunWaitFilter"
      toolTip="Controls the reset reset pin filter in RUN and WAIT modes"
      description="Reset pin filter select in run and wait modes" >
      <choice value="0" enum="Disabled"           name="No filter" />
      <choice value="1" enum="BusClock"           name="Bus clock based filter" />
      <choice value="2" enum="LowPowerOscillator" name="LPO clock based filter" />
   </choiceOption>

   <!-- ************* RPFW ****************** -->

   <choiceOption key="rcm_rpfw_rstfltsel" condition="rcm_rpfw_rstfltsel_present"
      enabledBy="rcm_rpfc_rstfltsrw==1"
      typeName="RcmResetFilter"
      toolTip="Selects the reset pin filter width"
      description="Reset pin filter bus clock select" >
      <choiceExpansion keys="n" dim="1,32" value="=ToString(%(n)-1)" name="%(n) Cycles" enum="%(n)Cycles" />
   </choiceOption>

   <floatOption key="rcm_rpfw_rstfltsel_period"
      locked="true"
      derived="true"
      enabledBy="rcm_rpfc_rstfltsrw==1"
      ref="(rcm_rpfw_rstfltsel+1.0)/(/SIM/system_bus_clock[0])"
      units="s"
      toolTip="Reset pin filter width"
      description="Reset pin filter "
   />

   <!-- ************* MR ****************** -->

   <binaryOption key="rcm_mr_ezp_ms" condition="rcm_mr_ezp_ms_present"
      enabledBy="enablePeripheralSupport"
      hidden="true"
      typeName="RcmModePinEZP"
      toolTip="Reflects the state of the EZP_MS pin during the last Chip Reset"
      description="EZP_MS_B pin state" >
      <choice name="Negated (logic 1)"   value="0" enum="Negated"  />
      <choice name="Asserted (logic 0)"  value="1" enum="Asserted" />
   </binaryOption >


<!-- Setters and getters -->

   <for keys="field           : get   : set   : clear : genCode                 : name"
        values="
      rcm_rpfc_rstfltss       : true  : true  : false : enableGettersAndSetters : ResetFilterInStopModes;
      rcm_rpfc_rstfltsrw      : true  : true  : false : enableGettersAndSetters : ResetFilterInRunModes;
      rcm_rpfw_rstfltsel      : true  : true  : false : enableGettersAndSetters : ResetFilterBusCycles" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!--   ========== Interrupt handling =============================== -->

   <!--   ========== RCM Init class =============================== -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t status) {
      \t *    (void) status;
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   RcmResetPinStopFilter_LowPowerOscillator ,    // Reset pin filter select in low power modes - LPO clock based filter
      \t *   RcmResetPinRunWaitFilter_LowPowerOscillator , // Reset pin filter select in run and wait modes - LPO clock based filter
      \t *   RcmResetFilterBusClockCount_16Cycles,         // Reset pin filter bus clock select - 16 clock cycles
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!--   Member variables -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="rcm_rpfc_rstfltss,rcm_rpfc_rstfltsrw"
   ><![CDATA[
      \t   /// Reset Pin Filter Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="rcm_rpfw_rstfltsel"
   ><![CDATA[
      \t   /// Reset Pin Filter Width Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <!--   Constructors -->

   <for keys="r"
      values="
            rcm_rpfc_rstfltss;
            rcm_rpfc_rstfltsrw;
            rcm_rpfw_rstfltsel
            " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            rcm_rpfc_rstfltss,
            rcm_rpfc_rstfltsrw,
            rcm_rpfw_rstfltsel
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   rcm->RPFC    = init.rpfc;
      \t   rcm->RPFW    = init.rpfw;
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="rcm_files" >
      <copy source="Project_Headers/rcm.h"     target="Project_Headers/rcm.h"     overwrite="true"  derived="true" />
      <copy source="Snippets/rcm-example.cpp"  target="Snippets/rcm-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
