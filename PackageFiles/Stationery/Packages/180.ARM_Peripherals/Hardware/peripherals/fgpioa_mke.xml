<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- fgpioa_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="General Purpose Input/Output" >

   <constant key="suppressInstance"          type="Boolean"  value="true"         />
   <equation key="generateDefault"           type="Boolean" value="false"         />
   <equation key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml" />
   <title />

   <intOption key="/PORT/pin_index"
      description="Port pin index"
      toolTip="Global index for port pins"
      hidden="true"
      valueFormat="%s"
      derived="true"
      typeName="PinIndex" />

   <if condition="!/SYSTEM/$pcrPattern">
      <!-- PCRs not used -->
      <constant key="/SYSTEM/$pcrPattern"          type="String"  value='""'                                          />
      <!-- Standard Gpio format
          * %i = port instance e.g."A"
          * %n = bit number
          * %p = polarity
          * e.g. Gpio%i<%b,%p>
      -->
      <constant key="/SYSTEM/$gpioPattern"         type="String"  value="&quot;USBDM::Gpio%i&lt;%n,%p&gt;&quot;"                />
      <!-- Specialised GpioField
             * %i = port instance e.g."A"
             * %l = left bit number
             * %r = right bit number
             * %p = polarity
             * e.g. Gpio%iField<%l,%r,%p>
      -->
      <constant key="/SYSTEM/$gpioFieldPattern"    type="String"  value="&quot;USBDM::WideGpioField%i&lt;%l,%r,%p&gt;&quot;"    />
   </if>

   <template key="/GPIO/getGpioAddress" >
   <![CDATA[
      \t/**
      \t * Get GPIO base register address from bit index
      \t *
      \t * @param pinInd Index of GPIO bit
      \t *
      \t * @return Base address of GPIO_Type hardware structure
      \t */
      \tstatic constexpr uint32_t getGpioAddress(PinIndex pinInd) {
      \t   constexpr uint32_t gpioAddresses[] = {\n
   ]]></template>
   <for keys=   " p : P : size"
        values= " a : A :  32;
                  b : B :  64;
                  c : C :  72"
      >
      <template key="/GPIO/getGpioAddress" condition="/GPIO%(P)/_present" >
      <![CDATA[
         \t         GPIO%(P)_BasePtr,\n
      ]]></template>
      <constant key="/GPIO/MaxPinIndex" type="Long" value="%(size)" replace="true"  condition="/GPIO%(P)/_present" />
   </for>
   <template key="/GPIO/getGpioAddress" >
   <![CDATA[
      \t   };
      \t   return gpioAddresses[unsigned(pinInd) / 32];
      \t}\n
   ]]></template>

<!--   ========== static/member functions =============================== -->

   <for keys="static : const : bitMask : location"
      values="static :       : BITMASK : /GPIO/staticFunctions ;
                     : const : bitMask : /GPIO/memberFunctions" >
      <template key="%(location)" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
      <![CDATA[
         \t/**
         \t * Set pin as digital I/O.
         \t * Pin is initially set as an input.
         \t *
         \t * @note Resets the pin output value to the inactive state
         \t * @note Modifies the Port Input Disable Register value (PIDR value).
         \t * @note Use SetIn() and SetOut() for a lightweight change of direction without affecting other pin settings.
         \t */
         \t%(static) void setInOut() %(const) {
         \t   // Enable pin input function
         \t   gpio->PIDR = gpio->PIDR & ~%(bitMask);
         \t   // Make input initially
         \t   setIn();
         \t   // Set inactive pin state (if later made output)
         \t   setInactive();
         \t}
         \t/**
         \t * Enable pin as digital output with initial inactive level.\n
         \t *
         \t * @note Modifies the Port Input Disable Register value (PIDR value).
         \t * @note Resets the pin value to the inactive state
         \t * @note Use SetIn() and SetOut() for a lightweight change of direction without affecting other pin settings.
         \t */
         \t%(static) void setOutput() %(const) {
         \t   // Disable pin input function
         \t   gpio->PIDR = gpio->PIDR | %(bitMask);
         \t   // Set initial level before enabling pin drive
         \t   setInactive();
         \t   // Make pin an output
         \t   setOut();
         \t}
         \t/**
         \t * @brief
         \t * Enable pin as digital input.\n
         \t *
         \t * @note Modifies the Port Input Disable Register value (PIDR value).
         \t * @note Use SetIn() and SetOut() for a lightweight change of direction without affecting other pin settings.
         \t */
         \t%(static) void setInput() %(const) {
         \t   // Enable pin as input
         \t   gpio->PIDR = gpio->PIDR & ~%(bitMask);
         \t   // Make pin an input
         \t   setIn();
         \t}
         \t/**
         \t * Set pin as digital input
         \t *
         \t * @note Does not affect other pin settings
         \t */
         \t%(static) void setIn() %(const) {
         \t   // Make pin an input
         \t   gpio->PDDR = gpio->PDDR & ~%(bitMask);
         \t}
         \t/**
         \t * Set pin as digital output
         \t *
         \t * @note Does not affect other pin settings
         \t */
         \t%(static) void setOut() %(const) {
         \t   // Make pin an output
         \t   gpio->PDDR = gpio->PDDR | %(bitMask);
         \t}
         \t/**
         \t * Set pin. Pin will be high if configured as an output.
         \t *
         \t * @note Polarity _is_ _not_ significant
         \t * @note Do not use this method unless dealing with very low-level I/O
         \t */
         \t%(static) void high() %(const) {
         \t   gpio->PSOR = %(bitMask);
         \t}
         \t/**
         \t * Clear pin. Pin will be low if configured as an output.
         \t *
         \t * @note Polarity _is_ _not_ significant
         \t * @note Do not use this method unless dealing with very low-level I/O
         \t */
         \t%(static) void low() %(const) {
         \t   gpio->PCOR = %(bitMask);
         \t}
         \t/**
         \t * Set pin. Pin will be high if configured as an output.
         \t *
         \t * @note Polarity _is_ _not_ significant
         \t * @note Do not use this method unless dealing with very low-level I/O
         \t */
         \t%(static) void set() %(const) {
         \t   gpio->PSOR = %(bitMask);
         \t}
         \t/**
         \t * Clear pin. Pin will be low if configured as an output.
         \t *
         \t * @note Polarity _is_ _not_ significant
         \t * @note Do not use this method unless dealing with very low-level I/O
         \t */
         \t%(static) void clear() %(const) {
         \t   gpio->PCOR = %(bitMask);
         \t}
         \t/**
         \t * Toggle pin (if output)
         \t */
         \t%(static) void toggle() %(const) {
         \t   gpio->PTOR = %(bitMask);
         \t}
         \t/**
         \t * Read pin value
         \t *
         \t * @return true/false reflecting pin value.
         \t *
         \t * @note This reads the PDIR
         \t * @note Polarity _is_ _not_ significant
         \t * @note Do not use this method unless dealing with very low-level I/O
         \t */
         \t%(static) bool readBit() %(const) {
         \t   return isHigh();
         \t}
         \t/**
         \t * Write boolean value to pin (if configured as output)
         \t *
         \t * @param[in] value true/false value
         \t *
         \t * @note Polarity _is_ _not_ significant
         \t * @note Do not use this method unless dealing with very low-level I/O
         \t */
         \t%(static) void  __attribute__((always_inline)) writeBit(bool value) %(const) {
         \t   if (value) {
         \t      set();
         \t   }
         \t   else {
         \t      clear();
         \t   }
         \t}
         \t/**
         \t * Set pin to active level (if configured as output).
         \t * Convenience method for setActive()
         \t *
         \t * @note Polarity _is_ significant
         \t */
         \t%(static) void __attribute__((always_inline)) on() %(const) {
         \t   setActive();
         \t}
         \t/**
         \t * Set pin to inactive level (if configured as output).
         \t * Convenience method for setInactive()
         \t *
         \t * @note Polarity _is_ significant
         \t */
         \t%(static) void __attribute__((always_inline)) off() %(const) {
         \t   setInactive();
         \t}
         \t/**
         \t * Write boolean value to pin (if configured as output)
         \t *
         \t * @param[in] value true/false value
         \t *
         \t * @note Polarity _is_ significant
         \t */
         \t%(static) void write(bool value) %(const) {
         \t   if (value) {
         \t      setActive();
         \t   }
         \t   else {
         \t      setInactive();
         \t   }
         \t}
         \t/**
         \t * Checks if pin is high
         \t *
         \t * @return true/false reflecting value on pin
         \t *
         \t * @note This reads the PDIR
         \t * @note Polarity _is_ _not_ significant
         \t */
         \t%(static) bool isHigh() %(const) {
         \t   return (gpio->PDIR & %(bitMask)) != 0;
         \t}
         \t/**
         \t * Checks if pin is low
         \t *
         \t * @return true/false reflecting value on pin
         \t *
         \t * @note This reads the PDIR
         \t * @note Polarity _is_ _not_ significant
         \t */
         \t%(static) bool isLow() %(const) {
         \t   return (gpio->PDIR & %(bitMask)) == 0;
         \t}
         \t/**
         \t * Read pin value and return true if active level.
         \t * Equivalent to read()
         \t *
         \t * @return true/false reflecting if pin is active.
         \t *
         \t * @note This reads the PDIR
         \t * @note Polarity _is_ significant
         \t */
         \t%(static) bool __attribute__((always_inline)) isActive() %(const) {
         \t   return read();
         \t}
         \t/**
         \t * Read pin value and return true if inactive level
         \t * Equivalent to !read()
         \t *
         \t * @return true/false reflecting if pin is inactive.
         \t *
         \t * @note This reads the PDIR
         \t * @note Polarity _is_ significant
         \t */
         \t%(static) bool __attribute__((always_inline)) isInactive() %(const) {
         \t   return !read();
         \t}
         \t/**
         \t * Read pin value and return true if active level.\n
         \t * Convenience method equivalent to isActive()
         \t *
         \t * @return true/false reflecting if pin is active.
         \t *
         \t * @note This reads the PDIR
         \t * @note Polarity _is_ significant
         \t */
         \t%(static) bool __attribute__((always_inline)) isPressed() %(const) {
         \t   return isActive();
         \t}
         \t/**
         \t * Read pin value and return true if inactive level.\n
         \t * Convenience method equivalent to isInactive()
         \t *
         \t * @return true/false reflecting if pin is inactive.
         \t *
         \t * @note This reads the PDIR
         \t * @note Polarity _is_ significant
         \t */
         \t%(static) bool __attribute__((always_inline)) isReleased() %(const) {
         \t   return isInactive();
         \t}
      ]]></template>
   </for>

   <!-- ************* Common ****************** -->

   <for keys=   "    field             : Name : pinIndex"
        values= "
                 /PORT/port_puel_ptape :  A  :   0;
                 /PORT/port_pue0_ptape :  A  :   0;
                 /PORT/port_pue1_ptepe :  B  :  32;
                 /PORT/port_pue2_ptipe :  C  :  64" >
      <template key="/GPIO/declarations" condition="%(field)_present" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      ><![CDATA[
      \t/**
      \t * Class representing a field within Port %(Name)
      \t *
      \t * @tparam leftPinNum  Indicates left pin (inclusive) within the GPIO e.g. GPIO%(Name)[5..3] => %(Name)<5,...>
      \t * @tparam rightPinNum Indicates right pin (inclusive) within the GPIO e.g. GPIO%(Name)[5..3] => %(Name)<...,3>
      \t * @tparam polarity    Polarity of field. Either ActiveHigh or ActiveLow
      \t */
      \ttemplate <unsigned leftPinNum, unsigned rightPinNum, Polarity polarity=ActiveHigh>
      \tclass WideGpioField%(Name) : public GpioField_T<PinIndex(leftPinNum+%(pinIndex)), PinIndex(rightPinNum+%(pinIndex)), polarity> {};\n\n
      ]]></template>
   </for>

   <for keys=   "    field             : Name : pinIndex"
        values= "
                 /PORT/port_puel_ptape :  A   :   0;
                 /PORT/port_puel_ptbpe :  B   :   8;
                 /PORT/port_puel_ptcpe :  C   :  16;
                 /PORT/port_puel_ptdpe :  D   :  24;
                 /PORT/port_pue0_ptape :  A   :   0;
                 /PORT/port_pue0_ptbpe :  B   :   8;
                 /PORT/port_pue0_ptcpe :  C   :  16;
                 /PORT/port_pue0_ptdpe :  D   :  24;
                 /PORT/port_pue1_ptepe :  E   :  32;
                 /PORT/port_pue1_ptfpe :  F   :  40;
                 /PORT/port_pue1_ptgpe :  G   :  48;
                 /PORT/port_pue1_pthpe :  H   :  56;
                 /PORT/port_pue2_ptipe :  I   :  64" >
      <template key="/GPIO/declarations" condition="%(field)_present" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      ><![CDATA[
      \t/**
      \t * Class representing individual pins in Port %(Name)
      \t *
      \t * @tparam pinNum Indicates pin within the port e.g. %(Name)3 = > %(Name)<3>
      \t * @tparam polarity Polarity of the pin. Either ActiveHigh or ActiveLow
      \t */
      \ttemplate <PinNum pinNum, Polarity polarity=ActiveHigh>
      \t   class Gpio%(Name) : public Gpio_T<PinIndex(pinNum+%(pinIndex)), polarity> {};
      \t
      \t/**
      \t * Class representing a field within Port %(Name)
      \t *
      \t * @tparam leftPinNum  Indicates left pin (inclusive) within the port e.g. PT%(Name)[5..3] => %(Name)<5,...>
      \t * @tparam rightPinNum Indicates right pin (inclusive) within the port e.g. PT%(Name)[5..3] => %(Name)<...,3>
      \t * @tparam polarity    Polarity of field. Either ActiveHigh or ActiveLow
      \t */
      \ttemplate <PinNum leftPinNum, PinNum rightPinNum, Polarity polarity=ActiveHigh>
      \t    class Gpio%(Name)Field : public GpioField_T<PinIndex(leftPinNum+%(pinIndex)), PinIndex(rightPinNum+%(pinIndex)), polarity> {};\n\n
      ]]></template>
   </for>


   <projectActionList id = "fgpio_files" >
      <copy source="Project_Headers/gpio-MKE.h"  target="Project_Headers/gpio.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <signals enabledBy="enablePeripheralSupport" />

</peripheralPage>
