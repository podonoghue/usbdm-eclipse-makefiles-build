<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- _mapPinsOption.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A

   Template Rules based on attributes  info|usbdm|class|all)  "info"

   - namespace="info" (default if blank)
     Placed in Info class in pin_mapping.h

   - namespace="usbdm"
     Placed before Info class in pin_mapping.h i.e. in USBDM namespace

   - namespace="all" key="keyValue"
     Substituted anywhere for $(keyValue)
 -->

   <title description="------- General Settings -------" toolTip="" />

   <!-- Enable for class of peripheral -->
   <binaryOption key="/$(_BASENAME)/enablePeripheralSupport"
      modify="true"
      description="Enable peripheral Support"
      toolTip="Even if disabled, some code may still be generated but will \n
               be removed by linker if not used">
      <choice value="false" name="Minimal code generated"        isDefault="!@isGeneratedByDefault" />
      <choice value="true"  name="Generate code for peripheral"  isDefault="@isGeneratedByDefault" />
   </binaryOption>

   <!-- Configure peripheral instance in startup -->
   <binaryOption key="configurePeripheralInStartUp" condition="@isSupportedinStartup"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      description="Configure this peripheral"
      toolTip="Configure this peripheral in startup code before main() is entered\n
               Even if disabled, some minimal code may still be executed" >
      <choice value="false" name="Not Configured"              isDefault="true"/>
      <choice value="true"  name="Configured in startup code"  />
   </binaryOption>

   <!-- Template is added to class within pin_mapping.h -->
   <template ><![CDATA[
      \t/* Template _enablePeripheral  */
      \t
      \t//! Configure peripheral in start-up
      \tstatic constexpr bool configurePeripheralInStartUp = $(configurePeripheralInStartUp:false);\n\n
   ]]></template >

   <if condition="@peripheralUsesInterrupts" >

      <title description="------- Interrupts -------" />

      <!--
      Patterns for pattern and classHandler
        -  %i replaced with peripheral instance e.g. FTM1 => 1, PTA => A
        -  %b replaced with peripheral base name e.g. FTM1 => FTM
        -  %c replaced with peripheral C++ base class name e.g. FTM1 => Ftm
        -  _IRQHandler is appended to the pattern (only)
      Multiple patterns and classsHandlers may be used separated by ';'
      -->

      <!-- If not explicitly controlled, IRQ options are always enabled -->
      <if condition="!irqEnable">
         <constant key="irqEnable"        type="Boolean" value="true"  />
      </if>

      <if condition="irq_common">
         <!-- Default IRQ vector patterns if none specified -->
         <if condition="!irq_pattern">
            <constant key="irq_pattern"      type="String"  value="&quot;^$(_BASENAME)(\d)$&quot;"           />
         </if>
         <if condition="!irq_ClassHandler">
            <constant key="irq_ClassHandler" type="String"  value="&quot;$(_Baseclass)$1::irqHandler&quot;" />
         </if>

         <irqOption key="/$(_BASENAME)/irqHandlingMethod" condition="!/$(_BASENAME)/irqHandlingMethod"
            hidden="true"
            valueFormat="%s"
            modify="true"
            enabledBy="/$(_BASENAME)/enablePeripheralSupport&amp;&amp;irqEnable"
            typeName="CallbackFunction"
            description="Peripheral interrupt handling"
            toolTip="If enabled, the handler may be set using the setCallback() function or\n
                     by overriding the interrupt handler method in the peripheral class\n
                     If not enabled, then interrupt handlers may be installed by naming them \n
                     (see weak names used in vector table)."
            pattern="=irq_pattern"
            classHandler="=irq_ClassHandler" />

         <choiceOption key="/$(_BASENAME)/irqLevel" condition="!/$(_BASENAME)/irqLevel"
            hidden="true"
            modify="true"
            enabledBy="/$(_BASENAME)/irqHandlingMethod"
            description="IRQ level for this peripheral"
            toolTip="Priority level used to configure the NVIC"
            valueFormat="%s"
            disabledValue="Not Installed"
            derivedFrom="/PCR/nvic_irqLevel" >
         </choiceOption>

         <aliasOption key="/$(_BASENAME)/irqHandlingMethod" constant="false" />
         <aliasOption key="/$(_BASENAME)/irqLevel"          constant="false" />

         <initialValueTemplate variables="/$(_BASENAME)/irqHandlingMethod,/$(_BASENAME)/irqLevel" ><![CDATA[
            \t/* Template _enablePeripheral.xml */

            \t//! IRQ numbers for hardware
            \tstatic constexpr IRQn_Type irqNums[]  = $(_NAME)_IRQS;

            \t//! Number of IRQs for hardware
            \tstatic constexpr uint32_t irqCount  = sizeofArray(irqNums);

             \t//! Default IRQ level
             \tstatic constexpr NvicPriority irqLevel =  %symbolicValueExpression1;\n\n
         ]]></initialValueTemplate>
      <else/>
         <!-- Default IRQ vector patterns if none specified -->
         <if condition="!irq_pattern">
            <constant key="irq_pattern"      type="String"  value="&quot;^$(_NAME)$&quot;"           />
         </if>
         <if condition="!irq_ClassHandler">
            <constant key="irq_ClassHandler" type="String"  value="&quot;$(_Class)::irqHandler&quot;" />
         </if>

         <irqOption key="irqHandlingMethod" condition="!irqHandlingMethod"
            hidden="true"
            valueFormat="%s"
            enabledBy="/$(_BASENAME)/enablePeripheralSupport&amp;&amp;irqEnable"
            typeName="CallbackFunction"
            description="Peripheral interrupt handling"
            toolTip="If enabled, the handler may be set using the setCallback() function or\n
                     by overriding the interrupt handler method in the peripheral class\n
                     If not enabled, then interrupt handlers may be installed by naming them \n
                     (see weak names used in vector table)."
            pattern="=irq_pattern"
            classHandler="=irq_ClassHandler" />

         <choiceOption key="irqLevel" condition="!irqLevel"
            hidden="true"
            enabledBy="irqHandlingMethod"
            description="IRQ level for this peripheral"
            toolTip="Priority level used to configure the NVIC"
            valueFormat="%s"
            disabledValue="Not Installed"
            derivedFrom="/PCR/nvic_irqLevel" >
         </choiceOption>

         <aliasOption key="irqHandlingMethod" constant="false" />
         <aliasOption key="irqLevel"          constant="false" />

         <initialValueTemplate variables="irqHandlingMethod,irqLevel" ><![CDATA[
            \t/* Template_irqOption.xml */

            \t//! IRQ numbers for hardware
            \tstatic constexpr IRQn_Type irqNums[]  = $(_NAME)_IRQS;

            \t//! Number of IRQs for hardware
            \tstatic constexpr uint32_t irqCount  = sizeofArray(irqNums);

             \t//! Class based callback handler has been installed in vector table
             \tstatic constexpr bool irqHandlerInstalled = %symbolicValueExpression0;

             \t//! Default IRQ level
             \tstatic constexpr NvicPriority irqLevel =  %symbolicValueExpression1;\n\n
         ]]></initialValueTemplate>
      </if>

      <constant key="enable_interrupts_code"  value="&quot;enableNvicInterrupts();&quot;"   type="String"   />
      <constant key="disable_interrupts_code" value="&quot;disableNvicInterrupts();&quot;"  type="String"   />

   </if>

   <template condition="clockEnable"  codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/* Template _enablePeripheral  */
      \t
      \t/**
      \t *  Enable clock to $(_Class)
      \t */
      \tstatic void enableClock() {
      \t   $(clockEnable)
      \t}

      \t/**
      \t *  Disable clock to $(_Class)
      \t */
      \tstatic void disableClock() {
      \t   $(clockDisable)
      \t}\n\n
   ]]></template>

   <!-- template key="/$(_BASENAME)/publicMethods" namespace="all" condition="irqHandlingMethod" codeGenCondition="irqHandlingMethod" discardRepeats="true" >
   <![CDATA[
      \t/* Template _enablePeripheral  */
      \t
      \t/**
      \t * Wrapper to allow the use of a class member as a callback function
      \t * @note Only usable with static objects.
      \t *
      \t * @tparam T         Type of the object containing the callback member function
      \t * @tparam callback  Member function pointer
      \t * @tparam object    Object containing the member function
      \t *
      \t * @return  Pointer to a function suitable for the use as a callback
      \t *
      \t * @code
      \t * class $(_Baseclass)CallbackClass {
      \t * public:
      \t *    int y;
      \t *
      \t *    // Member function used as callback
      \t *    // This function must match $(_Baseclass)::CallbackFunction
      \t *    void callback($(irq_parameters)) {
      \t *       ...;
      \t *    }
      \t * };
      \t * ...
      \t * // Instance of class containing callback member function
      \t * static $(_Baseclass)CallbackClass $(_Baseclass)CallbackClassInstance;
      \t * ...
      \t * // Wrap member function
      \t * auto $(_Baseclass)cbfn = $(_Baseclass)::wrapCallback<$(_Baseclass)CallbackClass, &$(_Baseclass)CallbackClass::callback, $(_Baseclass)CallbackClassInstance>();
      \t *
      \t * // Use as callback
      \t * $(_Baseclass)::Channel<0>::setCallback($(_Baseclass)cbfn);
      \t * @endcode
      \t */
      \ttemplate<class T, void(T::*callback)($(irq_parameters)), T &object>
      \tstatic CallbackFunction wrapCallback() {
      \t   static CallbackFunction fn = []($(irq_parameters)) {
      \t      (object.*callback)($(irq_call));
      \t   };
      \t   return fn;
      \t}
      \t
      \t/**
      \t * Wrapper to allow the use of a class member as a callback function
      \t * @note There is a considerable space and time overhead to using this method
      \t *
      \t * @tparam T         Type of the object containing the callback member function
      \t * @tparam callback  Member function pointer
      \t * @tparam object    Object containing the member function
      \t *
      \t * @return  Pointer to a function suitable for the use as a callback
      \t *
      \t * @code
      \t * class $(_Baseclass)CallbackClass {
      \t * public:
      \t *    int y;
      \t *
      \t *    // Member function used as callback
      \t *    // This function must match $(_Baseclass)::CallbackFunction
      \t *    void callback($(irq_parameters)) {
      \t *       ...;
      \t *    }
      \t * };
      \t * ...
      \t * // Instance of class containing callback member function
      \t * $(_Baseclass)CallbackClass $(_Baseclass)CallbackClassInstance;
      \t * ...
      \t * // Wrap member function
      \t * auto $(_Baseclass)cbfn = $(_Baseclass)::wrapCallback<$(_Baseclass)CallbackClass, &$(_Baseclass)CallbackClass::callback>($(_Baseclass)CallbackClassInstance);
      \t *
      \t * // Use as callback
      \t * $(_Baseclass)::Channel<0>::setCallback($(_Baseclass)cbfn);
      \t * @endcode
      \t */
      \ttemplate<class T, void(T::*callback)($(irq_parameters))>
      \tstatic CallbackFunction wrapCallback(T &object) {
      \t   static T &obj = object;
      \t   static CallbackFunction fn = []($(irq_parameters)) {
      \t      (obj.*callback)($(irq_call));
      \t   };
      \t   return fn;
      \t}
      \t\n
   ]]>
   </template -->

   <template><![CDATA[
         \t//! Hardware base address as uint32_t
         \tstatic constexpr uint32_t baseAddress = $(_NAME)_BasePtr;
         \t
         \t//! Hardware base pointer
         \tstatic constexpr HardwarePtr<$(_Baseclass::toupper)_Type> $(_Baseclass::tolower) = baseAddress;
         \t\n
   ]]></template>

   <template condition="(&quot;$(_instance)&quot; != &quot;&quot;)&amp;&amp;!suppressInstance" ><![CDATA[
         \t//! Peripheral instance number
         \tstatic constexpr unsigned instance = $(_instance);
         \t\n
   ]]></template>

   <constant key="class_present" type="Boolean"  value = "true"   />


</fragment>
