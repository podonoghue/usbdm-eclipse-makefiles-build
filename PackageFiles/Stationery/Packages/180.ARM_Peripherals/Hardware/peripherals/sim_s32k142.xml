<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- sim_s32k142.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="SIM">
   
   <xi:include href="_default_instance.xml"/>

   <xi:include href="_simFiles-MK.xml"/>

   <binaryOption key="chipctl_sraml_reten"
      description="SRAML retention enable"
      toolTip="Enables SRAML contents retention across resets">
      <choice name="Disabled"  value="1"/>   
      <choice name="Enabled"   value="0" isDefault="true"/>   
   </binaryOption>
   
   <binaryOption key="chipctl_sramu_reten"
      description="SRAMU retention enable"
      toolTip="Enables SRAMU contents retention across resets">
      <choice name="Disabled"  value="1"/>   
      <choice name="Enabled"   value="0" isDefault="true"/>   
   </binaryOption>
   
   <binaryOption key="chipctl_adc_supplyen"
      description="ADC supply monitoring enable"
      toolTip="Enable for internal supply monitored on ADC0 internal channel 0 (ADC0_SC1n[ADCH] = 010101b)">
      <choice name="Disabled" value="0"/>   
      <choice name="Enabled"  value="1"/>   
   </binaryOption>
   
   <choiceOption key="chipctl_adc_supply"
      description="ADC supply monitoring selection"
      toolTip="Selects the internal supply monitored on ADC0 internal channel 0 (ADC0_SC1n[ADCH] = 010101b)">
      <choice value="0" name="5 V input VDD supply (VDD)"/>
      <choice value="1" name="5 V input analog supply (VDDA)"/>
      <choice value="2" name="ADC Reference Supply (VREFH)"/>
      <choice value="3" name="3.3 V Oscillator Regulator Output (VDD_3V)"/>
      <choice value="4" name="3.3 V flash regulator output (VDD_flash_3V)"/>
      <choice value="5" name="1.2 V core regulator output (VDD_LV)"/>
      <choice value="6" name="Reserved"/>
      <choice value="7" name="Reserved"/>
   </choiceOption>
   
   <binaryOption key="chipctl_pdb_bb_sel"
      description="PDB back-to-back select"
      toolTip="Determines whether PDB0, PDB1 in conjunction with ADC0.COCO[7..0] and ADC1.COCO[7..0]\n
               operate as independent back-to-back rings or as a single larger ring ">
      <choice name="Independent rings" value="0"/>
      <choice name="Single ring" value="1"/>
   </binaryOption>
   
   <binaryOption key="chipctl_traceclk_sel" 
      description="Debug trace clock select"
      toolTip="Selects the the trace clock source" 
      constant="true">
      <choice value="0"  name="Core clock" isDefault="true" />
      <choice value="1"  name="Reserved" />
   </binaryOption>   
   
   <binaryOption key="chipctl_clkouten"
      description="CLKOUT enable"
      toolTip="Used to enable the clock on the clockout pin">
      <choice name="Disabled" value="0"/>   
      <choice name="Enabled"  value="1"/>   
   </binaryOption>
   
   <intOption key="chipctl_clkoutdiv"
      description="CLKOUT Divide Ratio"
      toolTip="Used to select the divisor for the clock on the clockout pin"
      min="1" max="8" offset="-1" value="1" />

   <choiceOption key="chipctl_clkoutsel" 
      description="CLKOUT select"
      toolTip="Selects the clock to output on the CLKOUT pin" >
      <choice value="0"   name="SCG CLKOUT" />
      <choice value="1"   name="Reserved" />
      <choice value="2"   name="SOSC DIV2 CLK" />
      <choice value="3"   name="Reserved" />
      <choice value="4"   name="SIRC DIV2 CLK" />
      <choice value="5"   name="QSPI_SFIF_CLK_HYP_PREMUX (if present)" />
      <choice value="6"   name="FIRC DIV2 CLK" />
      <choice value="7"   name="HCLK" />
      <choice value="8"   name="SPLL DIV2 CLK" />
      <choice value="9"   name="BUS_CLK" />
      <choice value="10"  name="LPO128K_CLK" />
      <choice value="11"  name="QSPI_Module clock (if present)" />
      <choice value="12"  name="LPO_CLK from SIM_LPOCLKS[LPOCLKSEL]" />
      <choice value="13"  name="QSPI_SFIF_CLK (if present)" />
      <choice value="14"  name="RTC_CLK from SIM_LPOCLKS[RTCCLKSEL]" />
      <choice value="15"  name="QSPI_2xSFIF_CLK (if present)" />
   </choiceOption>
   
   <binaryOption key="chipctl_adc_interleave_en_0"
      description="ADC interleave channel enable">
      <choice name="PTB15&lt;-ADC1_SE14, PTB0&lt;-ADC0_SE4"  value="0b0000"/>
      <choice name="PTB0&lt;-(ADC0_SE4/ADC1_SE14)"           value="0b0001"/>
   </binaryOption>

   <binaryOption key="chipctl_adc_interleave_en_1"
      description="ADC interleave channel enable">
      <choice name="PTB1&lt;-ADC0_SE5, PTB16&lt;-ADC1_SE15" value="0b0000"/>
      <choice name="PTB1&lt;-(ADC0_SE5/ADC1_SE15)"          value="0b0010"/>
   </binaryOption>

   <binaryOption key="chipctl_adc_interleave_en_2"
      description="ADC interleave channel enable">
      <choice name="PTC0&lt;-ADC0_SE8, PTB13&lt;-ADC1_SE8" value="0b0000"/>
      <choice name="PTB13&lt;-(ADC0_SE8/ADC1_SE8)"         value="0b0100"/>
   </binaryOption>

   <binaryOption key="chipctl_adc_interleave_en_3"
      description="ADC interleave channel enable">
      <choice name="PTC1&lt;-ADC0_SE9, PTB14&lt;-ADC1_SE9" value="0b0000"/>
      <choice name="PTB14&lt;-(ADC0_SE9/ADC1_SE9)"         value="0b1000"/>
   </binaryOption>

   <binaryOption key="lpoclks_lpo32kclken"
      description="32 kHz LPO_CLK (LPO32K_CLK) enable"
      toolTip="derived from 128 kHz LPO clock (LPO128_CLK)">
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled"  />
   </binaryOption>

   <binaryOption key="lpoclks_lpo1kclken"
      description="1 kHz LPO_CLK (LPO1K_CLK) enable"
      toolTip="Derived from 128 kHz LPO clock (LPO128K_CLK)">
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled"  />
   </binaryOption>

   <choiceOption key="lpoclks_rtcclksel" 
      description="RTC clock (RTC_CLK) source select"
      toolTip="Selects RTC clock source for peripherals">
      <choice value="0" name="System Oscillator/DIV1 (SOSCDIV1_CLK)" />
      <choice value="1" name="32 kHz LPO_CLK (LPO32K_CLK)" />
      <choice value="2" name="RTC Clock in pin (RTC_CLKIN)" />
      <choice value="3" name="Fast IRC/DIV1 (FIRCDIV1_CLK)" />
   </choiceOption>
   
   <choiceOption key="lpoclks_lpoclksel" 
      description="LPO clock (LPO_CLK) source select"
      toolTip="Selects LPO clock source for peripherals">
      <choice value="0" name="128 kHz LPO clock (LPO12K_CLK)" />
      <choice value="1" name="Disabled" />
      <choice value="2" name="32 kHz LPO clock (LPO32K_CLK)" />
      <choice value="3" name="1 kHz LPO clock (LPO1K_CLK)" />
   </choiceOption>

   <template>
         <![CDATA[
         /** LPO Clock Select Register (LPOCLKS) */
         \tuint32_t lpoclks = 
         \t   SIM_LPOCLKS_RTCCLKSEL($(lpoclks_rtcclksel))|   // RTC clock (RTC_CLK) source select
         \t   SIM_LPOCLKS_LPOCLKSEL($(lpoclks_lpoclksel))|   // LPO clock source select
         \t   SIM_LPOCLKS_LPO32KCLKEN($(lpoclks_lpo32kclken))| // 32 kHz LPO_CLK enable
         \t   SIM_LPOCLKS_LPO1KCLKEN($(lpoclks_lpo1kclken));  // 1 kHz LPO_CLK enable \n\n
         ]]>
   </template>

   <for keys="instance" values="0;1" >
   <template namespace="usbdm">
         <![CDATA[
         \t/**
         \t * ADC%instance trigger source selection
         \t *
         \t * This selects the trigger source for ADC%instance.
         \t */
         \tenum SimAdc%instanceTriggerSelect {
         \t   SimAdc%instanceTriggerSelect_Pdb    = SIM_ADCOPT_ADC%instanceTRGSEL(0b0), //!< PDB output
         \t   SimAdc%instanceTriggerSelect_Trgmux = SIM_ADCOPT_ADC%instanceTRGSEL(0b1), //!< TRGMUX output
         \t};
         
         \t/**
         \t * ADC%instance pre-trigger source selection
         \t *
         \t * This selects the pre-trigger source for ADC%instance.
         \t */
         \tenum SimAdc%instancePretriggerSelect {
         \t   SimAdc%instancePretriggerSelect_Pdb       = SIM_ADCOPT_ADC%instancePRETRGSEL(0b00), //!< PDB pre-trigger
         \t   SimAdc%instancePretriggerSelect_Trgmux    = SIM_ADCOPT_ADC%instancePRETRGSEL(0b01), //!< TRGMUX pre-trigger
         \t   SimAdc%instancePretriggerSelect_Disabled  = SIM_ADCOPT_ADC%instancePRETRGSEL(0b10)|SIM_ADCOPT_ADC%instanceSWPRETRG(0b000), //!< Disabled Software pre-trigger
         \t   SimAdc%instancePretriggerSelect_Software0 = SIM_ADCOPT_ADC%instancePRETRGSEL(0b10)|SIM_ADCOPT_ADC%instanceSWPRETRG(0b100), //!< Software pre-trigger 0
         \t   SimAdc%instancePretriggerSelect_Software1 = SIM_ADCOPT_ADC%instancePRETRGSEL(0b10)|SIM_ADCOPT_ADC%instanceSWPRETRG(0b101), //!< Software pre-trigger 1
         \t   SimAdc%instancePretriggerSelect_Software2 = SIM_ADCOPT_ADC%instancePRETRGSEL(0b10)|SIM_ADCOPT_ADC%instanceSWPRETRG(0b110), //!< Software pre-trigger 2
         \t   SimAdc%instancePretriggerSelect_Software3 = SIM_ADCOPT_ADC%instancePRETRGSEL(0b10)|SIM_ADCOPT_ADC%instanceSWPRETRG(0b111), //!< Software pre-trigger 3
         \t};\n\n
         ]]>
      </template>
   </for>

   <for keys="instance" values="0;1"  >
      <template>
         <![CDATA[
         \t/**
         \t * Selects ADC%instance trigger source
         \t *
         \t * @param simAdc%instanceTriggerSelect
         \t */
         \tstatic void setAdc%instanceTrigger(SimAdc%instanceTriggerSelect simAdc%instanceTriggerSelect) {
         \t   sim->ADCOPT = (sim->ADCOPT & SIM_ADCOPT_ADC%instanceTRGSEL_MASK) | simAdc%instanceTriggerSelect;
         \t}
         
         \t/**
         \t * Selects ADC%instance pre-trigger source
         \t *
         \t * @param simAdc%instancePretriggerSelect
         \t */
         \tstatic void setAdc%instancePreTrigger(SimAdc%instancePretriggerSelect simAdc%instancePretriggerSelect) {
         \t   sim->ADCOPT = (sim->ADCOPT & (SIM_ADCOPT_ADC%instancePRETRGSEL_MASK|SIM_ADCOPT_ADC%instanceSWPRETRG_MASK)) | simAdc%instancePretriggerSelect;
         \t}\n\n
         ]]>
      </template>
   </for>

   <template namespace="usbdm"><![CDATA[
      \t/**
      \t * Enables interleaving between ADC channels
      \t */
      \tenum SimAdcChannelInterleave {
      \t   SimAdcChannelInterleave_ADC0_SE4_ADC1_SE14 = SIM_CHIPCTL_ADC_INTERLEAVE_EN(0b0001),
      \t   SimAdcChannelInterleave_ADC0_SE5_ADC1_SE15 = SIM_CHIPCTL_ADC_INTERLEAVE_EN(0b0010),
      \t   SimAdcChannelInterleave_ADC0_SE8_ADC1_SE8  = SIM_CHIPCTL_ADC_INTERLEAVE_EN(0b0100),
      \t   SimAdcChannelInterleave_ADC0_SE9_ADC1_SE9  = SIM_CHIPCTL_ADC_INTERLEAVE_EN(0b1000),
      \t};
      
      \t/**
      \t * Selects supply voltage to monitor 
      \t */
      \tenum SimAdcSupplyMonitor {
      \t   SimAdcSupplyMonitor_Disabled     = SIM_CHIPCTL_ADC_SUPPLYEN(0)|SIM_CHIPCTL_ADC_SUPPLY(0),
      \t   SimAdcSupplyMonitor_Vdd          = SIM_CHIPCTL_ADC_SUPPLYEN(1)|SIM_CHIPCTL_ADC_SUPPLY(0),
      \t   SimAdcSupplyMonitor_Vdda         = SIM_CHIPCTL_ADC_SUPPLYEN(1)|SIM_CHIPCTL_ADC_SUPPLY(1),
      \t   SimAdcSupplyMonitor_Vrefh        = SIM_CHIPCTL_ADC_SUPPLYEN(1)|SIM_CHIPCTL_ADC_SUPPLY(2),
      \t   SimAdcSupplyMonitor_Vdd_3V       = SIM_CHIPCTL_ADC_SUPPLYEN(1)|SIM_CHIPCTL_ADC_SUPPLY(3),
      \t   SimAdcSupplyMonitor_Vdd_flash_3V = SIM_CHIPCTL_ADC_SUPPLYEN(1)|SIM_CHIPCTL_ADC_SUPPLY(4),
      \t   SimAdcSupplyMonitor_Vdd_lv       = SIM_CHIPCTL_ADC_SUPPLYEN(1)|SIM_CHIPCTL_ADC_SUPPLY(5),
      \t   SimAdcSupplyMonitor_Reserved6    = SIM_CHIPCTL_ADC_SUPPLYEN(1)|SIM_CHIPCTL_ADC_SUPPLY(6),
      \t   SimAdcSupplyMonitor_Reserved7    = SIM_CHIPCTL_ADC_SUPPLYEN(1)|SIM_CHIPCTL_ADC_SUPPLY(7),
      \t};
      
      \t/**
      \t * Select Clock to output on CLKOUT pin
      \t */
      \tenum SimClkOutSelect {
      \t   SimClkOutSelect_Disabled          = SIM_CHIPCTL_CLKOUTEN(0)|SIM_CHIPCTL_CLKOUTSEL(0),  //!< Disabled
      \t   SimClkOutSelect_SCG_CLKOUT        = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(0),  //!< SCG Clock output 
      \t   SimClkOutSelect_Reserved1         = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(1),  //!< Reserved
      \t   SimClkOutSelect_SOSCDIV2_CLK      = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(2),  //!< SOSCDIV2 clock 
      \t   SimClkOutSelect_Reserved3         = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(3),  //!< Reserved
      \t   SimClkOutSelect_SIRCDIV2_CLK      = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(4),  //!< SIRCDIV2 clock 
      \t   SimClkOutSelect_Reserved5         = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(5),  //!< Reserved  
      \t   SimClkOutSelect_FIRCDIV2_CLK      = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(6),  //!< FIRCDIV2 clock 
      \t   SimClkOutSelect_CORE_CLK          = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(7),  //!< CORE_CLK 
      \t   SimClkOutSelect_SPLLDIV2_CLK      = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(8),  //!< SPLLDIV2 clock 
      \t   SimClkOutSelect_BUS_CLK           = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(9),  //!< BUS_CLK
      \t   SimClkOutSelect_LPO12K_CLK        = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(10), //!< LPO12K_CLK 
      \t   SimClkOutSelect_QSPI_Module_CLK   = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(11), //!< QSPI Module clock
      \t   SimClkOutSelect_LPO_CLK           = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(12), //!< LPOCLK 
      \t   SimClkOutSelect_QSPI_SFIF_CLK     = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(13), //!< QSPI
      \t   SimClkOutSelect_RTC_CLK           = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(14), //!< RTC_CLK 
      \t   SimClkOutSelect_QSPI_2xSFIF_CLK   = SIM_CHIPCTL_CLKOUTEN(1)|SIM_CHIPCTL_CLKOUTSEL(15), //!< QSPI
      \t};
      
      \t/**
      \t *  Selects division for external clock
      \t */
      \tenum SimClkOutDiv {
      \t   SimClkOutDiv_Div1     = SIM_CHIPCTL_CLKOUTDIV(0), //!< Divide by 1
      \t   SimClkOutDiv_Div2     = SIM_CHIPCTL_CLKOUTDIV(1), //!< Divide by 2
      \t   SimClkOutDiv_Div3     = SIM_CHIPCTL_CLKOUTDIV(2), //!< Divide by 3
      \t   SimClkOutDiv_Div4     = SIM_CHIPCTL_CLKOUTDIV(3), //!< Divide by 4
      \t   SimClkOutDiv_Div5     = SIM_CHIPCTL_CLKOUTDIV(4), //!< Divide by 5
      \t   SimClkOutDiv_Div6     = SIM_CHIPCTL_CLKOUTDIV(5), //!< Divide by 6
      \t   SimClkOutDiv_Div7     = SIM_CHIPCTL_CLKOUTDIV(6), //!< Divide by 7
      \t   SimClkOutDiv_Div8     = SIM_CHIPCTL_CLKOUTDIV(7), //!< Divide by 8
      \t};
      
      \t/**
      \t *  Controls PDB back-to-back operation
      \t *
      \t *  Determines whether PDB0.CH0, PDB1.CH1 in conjunction with ADC0.COCO[7..0] and ADC1.COCO[7..0]\n
      \t *  operate as independent back-to-back rings or as a single larger ring 
      \t */
      \tenum SimPdbBackToBack {
      \t   SimPdbBackToBack_Independent = SIM_CHIPCTL_PDB_BB_SEL(0), //!< PDB0 & PDB1 2 independent rings
      \t   SimPdbBackToBack_Linked      = SIM_CHIPCTL_PDB_BB_SEL(1), //!< PDB0 & PDB1 1 linked ring
      \t};

      \t/**
      \t *  Selects which RAM regions are retained
      \t */
      \tenum SimRamRetention {
      \t   SimRamRetention_None   = SIM_CHIPCTL_SRAMU_RETEN(0)|SIM_CHIPCTL_SRAML_RETEN(0), //!< No RAM retention
      \t   SimRamRetention_Upper  = SIM_CHIPCTL_SRAMU_RETEN(1)|SIM_CHIPCTL_SRAML_RETEN(0), //!< RAMU retention
      \t   SimRamRetention_Lower  = SIM_CHIPCTL_SRAMU_RETEN(0)|SIM_CHIPCTL_SRAML_RETEN(1), //!< RAML retention
      \t   SimRamRetention_Both   = SIM_CHIPCTL_SRAMU_RETEN(1)|SIM_CHIPCTL_SRAML_RETEN(1), //!< RAMU+L retention
      \t};\n\n

   ]]></template>
   
   <template><![CDATA[
      \t/**
      \t *  Controls PDB back-to-back operation
      \t *
      \t *  Determines whether PDB0.CH0, PDB1.CH1 in conjunction with ADC0.COCO[7..0] and ADC1.COCO[7..0]\n
      \t *  operate as independent back-to-back rings or as a single larger ring 
      \t *
      \t * @param simPdbBackToBack Selects independent or linked operation
      \t */
      \tstatic void setPdbBackToBack(SimPdbBackToBack simPdbBackToBack) {
      \t   sim->CHIPCTL =
      \t         (sim->CHIPCTL&~SIM_CHIPCTL_PDB_BB_SEL_MASK) |
      \t         simPdbBackToBack;
      \t}

      \t/**
      \t * Control which SRAM contents are retained across resets
      \t *
      \t * @param simRamRetention Selects which RAM regions to preserve
      \t */
      \tstatic void setRamRetention(SimRamRetention simRamRetention) {
      \t   sim->CHIPCTL =
      \t         (sim->CHIPCTL&~(SIM_CHIPCTL_SRAMU_RETEN_MASK|SIM_CHIPCTL_SRAML_RETEN_MASK)) |
      \t         simRamRetention;
      \t}

      \t// Chip Control register (CHIPCTL)
      \tstatic constexpr uint32_t chipctl = 
      \t   SIM_CHIPCTL_SRAML_RETEN($(chipctl_sraml_reten))|     // SRAML retention enable
      \t   SIM_CHIPCTL_SRAMU_RETEN($(chipctl_sramu_reten))|     // SRAMU retention enable
      \t   SIM_CHIPCTL_ADC_SUPPLYEN($(chipctl_adc_supplyen))|    // ADC Internal supply monitoring enable
      \t   SIM_CHIPCTL_ADC_SUPPLY($(chipctl_adc_supply))|      // ADC Internal supply monitoring selection
      \t   SIM_CHIPCTL_PDB_BB_SEL($(chipctl_pdb_bb_sel))|      // PDB back-to-back select
      \t   SIM_CHIPCTL_TRACECLK_SEL($(chipctl_traceclk_sel))|    // Debug trace clock select
      \t   SIM_CHIPCTL_CLKOUTEN($(chipctl_clkouten))|        // CLKOUT pin enable
      \t   SIM_CHIPCTL_CLKOUTDIV($(chipctl_clkoutdiv))|       // CLKOUT pin divider
      \t   SIM_CHIPCTL_CLKOUTSEL($(chipctl_clkoutsel))|       // CLKOUT pin clock source select
      \t   SIM_CHIPCTL_ADC_INTERLEAVE_EN($(chipctl_adc_interleave_en_3)|$(chipctl_adc_interleave_en_2)|$(chipctl_adc_interleave_en_1)|$(chipctl_adc_interleave_en_0)); // ADC interleave channel enable
      
      \t/**
      \t * Selects the clock and divider for output on the CLKOUT pin
      \t * 
      \t * @param simClkOutSelect  Clock to output
      \t * @param simClkOutDiv     Divider for clock output
      \t */
      \tstatic void setClkout(SimClkOutSelect simClkOutSelect, SimClkOutDiv simClkOutDiv=SimClkOutDiv_Div1) {
      \t   // Disable first
      \t   sim->CHIPCTL &= ~(SIM_CHIPCTL_CLKOUTEN_MASK|SIM_CHIPCTL_CLKOUTDIV_MASK|SIM_CHIPCTL_CLKOUTSEL_MASK);
      \t   // Set divider
      \t   sim->CHIPCTL |= simClkOutDiv;
      \t   // Enable clock 
      \t   sim->CHIPCTL |= simClkOutSelect;
      \t}

      \t/**
      \t * Selects the internal supply monitored on ADC0 internal channel 0.
      \t * (ADC0_SC1n[ADCH] = 010101b)
      \t * 
      \t * @param simAdcSupplyMonitor
      \t */
      \tstatic void setAdcSupplyMonitoring(SimAdcSupplyMonitor simAdcSupplyMonitor) {
      \t   sim->CHIPCTL = (sim->CHIPCTL&~(SIM_CHIPCTL_ADC_SUPPLYEN_MASK|SIM_CHIPCTL_ADC_SUPPLY_MASK)) |
      \t                    simAdcSupplyMonitor;
      \t}
      
      \t/**
      \t * Clear all ADC channel interleaving
      \t */
      \tstatic void clearAdcChannelInterleave() {
      \t   sim->CHIPCTL &= ~SIM_CHIPCTL_ADC_INTERLEAVE_EN_MASK;
      \t}
         
      \t/**
      \t * Enable ADC channel interleave
      \t *
      \t * @param simAdcChannelInterleave Channel pair to interleave
      \t */
      \tstatic void enableAdcChannelInterleave(SimAdcChannelInterleave simAdcChannelInterleave) {
      \t   sim->CHIPCTL |= simAdcChannelInterleave;
      \t}
         
      \t/**
      \t * Disable ADC channel interleave
      \t *
      \t * @param simAdcChannelInterleave Channel pair to not interleave
      \t */
      \tstatic void disableAdcChannelInterleave(SimAdcChannelInterleave simAdcChannelInterleave) {
      \t   sim->CHIPCTL &= ~simAdcChannelInterleave;
      \t}   

      \t/**
      \t * Software trigger to TRGMUX.
      \t *
      \t * This function generates software trigger to peripherals through the TRGMUX
      \t */
      \tstatic void softwareTrigger() {
      \t   sim->MISCTRL1 = SIM_MISCTRL1_SW_TRG_MASK;
      \t}\n\n
   ]]></template>
   
   <template><![CDATA[
      \t/**
      \t * Get Internal LPO Frequency LPO128K_CLK
      \t *
      \t * @return Clock as uint32_t
      \t */
      \tstatic constexpr uint32_t getLpo128Frequency() {
      \t   return $(system_lpo_frequency);
      \t}
      
      \t/**
      \t * Get External RTC clock input Frequency RTC_CLKIN
      \t *
      \t * @return Clock as uint32_t
      \t */
      \tstatic constexpr uint32_t getRtcClkinFrequency() {
      \t   return $(system_rtcclkin_frequency);
      \t}\n\n
   ]]></template>
   
   <template namespace="usbdm"><![CDATA[
      \t/**
      \t * RTC Clock sources
      \t */
      \tenum SimRtcClockSource {
      \t   SimRtcClockSource_SoscDiv1 = SIM_LPOCLKS_RTCCLKSEL(0),//!< SoscDiv1
      \t   SimRtcClockSource_Lpo128   = SIM_LPOCLKS_RTCCLKSEL(1),//!< Lpo128
      \t   SimRtcClockSource_RtcClkin = SIM_LPOCLKS_RTCCLKSEL(2),//!< RtcClkin
      \t   SimRtcClockSource_FircDiv1 = SIM_LPOCLKS_RTCCLKSEL(3),//!< FircDiv1
      \t};\n\n
   ]]></template>

   <template><![CDATA[
      \t/**
      \t * Set Source for RTC clock
      \t *
      \t * @param simRtcClockSource
      \t */
      \tstatic void setRtcClockSource(SimRtcClockSource simRtcClockSource) {
      \t   sim->LPOCLKS = (sim->LPOCLKS&~SIM_LPOCLKS_RTCCLKSEL_MASK)|simRtcClockSource;
      \t}
   
      \t/**
      \t * Get RTC_CLK Clock
      \t *
      \t * @return Clock as uint32_t
      \t */
      \tstatic uint32_t getRtcFrequency() {
      \t   switch(sim->LPOCLKS&SIM_LPOCLKS_RTCCLKSEL_MASK) {
      \t      default:
      \t      case SimRtcClockSource_SoscDiv1:
      \t         return ScgInfo::getSoscDiv1Frequency();
      \t      case SimRtcClockSource_Lpo128:
      \t         return SimInfo::getLpo128Frequency();
      \t      case SimRtcClockSource_RtcClkin:
      \t         return SimInfo::getRtcClkinFrequency();
      \t      case SimRtcClockSource_FircDiv1:
      \t         return ScgInfo::getFircDiv1Frequency();
      \t   }
      \t}\n\n
   ]]></template>

   <for keys="instance" values="Lpo32k, Lpo1k" >
      <template>
         <![CDATA[
         \t/**
         \t * Enable $(instance::toupper)_CLK clock
         \t */
         \tstatic void enable%instanceClock() {
         \t   sim->LPOCLKS |= SIM_LPOCLKS_$(instance::toupper)CLKEN_MASK;
         \t}
      
         \t/**
         \t * Disable $(instance::toupper)_CLK clock
         \t */
         \tstatic void disable%instanceClock() {
         \t   sim->LPOCLKS &= SIM_LPOCLKS_$(instance::toupper)CLKEN_MASK;
         \t}\n\n
         ]]>
      </template>
   </for>
   
   <template namespace="usbdm"><![CDATA[
      \t/**
      \t * LPO Clock sources
      \t */
      \tenum SimLpoClockSource {
      \t   SimLpoClockSource_Lpo128kHz = SIM_LPOCLKS_LPOCLKSEL(0), //!< Lpo128 ~ 128 kHz
      \t   SimLpoClockSource_Disabled  = SIM_LPOCLKS_LPOCLKSEL(1), //!< Disabled
      \t   SimLpoClockSource_Lpo32kHz  = SIM_LPOCLKS_LPOCLKSEL(2), //!< Lpo32 ~ 32 kHz
      \t   SimLpoClockSource_Lpo1kHz   = SIM_LPOCLKS_LPOCLKSEL(3), //!< Lpo1 ~ 1 kHz
      \t};\n\n
   ]]></template>

   <template><![CDATA[
      \t/**
      \t * Get LPO32K_CLK Clock
      \t *
      \t * @return Clock as uint32_t
      \t */
      \tstatic uint32_t getLpo32kFrequency() {
      \t   return (sim->LPOCLKS && SIM_LPOCLKS_LPO32KCLKEN_MASK)?(getLpo128Frequency()/4):0;
      \t}
      
      \t/**
      \t * Get LPO1K_CLK Clock
      \t *
      \t * @return Clock as uint32_t
      \t */
      \tstatic uint32_t getLpo1kFrequency() {
      \t   return (sim->LPOCLKS && SIM_LPOCLKS_LPO1KCLKEN_MASK)?(getLpo32kFrequency()/32):0;
      \t}
   
      \t/**
      \t * Set Source for LPO clock
      \t *
      \t * @param simLpoClockSource
      \t */
      \tstatic void setLpoClockSource(SimLpoClockSource simLpoClockSource) {
      \t   sim->LPOCLKS = (sim->LPOCLKS&~SIM_LPOCLKS_LPOCLKSEL_MASK)|simLpoClockSource;
      \t}
   
      \t/**
      \t * Get LPO_CLK Clock
      \t *
      \t * @return Clock as uint32_t
      \t */
      \tstatic uint32_t getLpoFrequency() {
      \t   switch(sim->LPOCLKS&SIM_LPOCLKS_LPOCLKSEL_MASK) {
      \t      case SimLpoClockSource_Lpo128kHz:
      \t         return getLpo128Frequency();
      \t      default:
      \t      case SimLpoClockSource_Disabled:
      \t         return 0;
      \t      case SimLpoClockSource_Lpo32kHz:
      \t         return getLpo32kFrequency();
      \t      case SimLpoClockSource_Lpo1kHz:
      \t         return getLpo1kFrequency();
      \t   }
      \t}\n\n
   ]]></template>
   
   <for keys="instance" values="0, 1, 2, 3" >
      <template namespace="usbdm">
         <![CDATA[
         \t/**
         \t * FTM external clock pin selection
         \t */
         \tenum SimFtm%instanceExternalClockSource {
         \t   SimFtm%instanceExternalClockSource_Tclk0 = SIM_FTMOPT0_FTM%instanceCLKSEL(0), //!< TCLK0 pin
         \t   SimFtm%instanceExternalClockSource_Tclk1 = SIM_FTMOPT0_FTM%instanceCLKSEL(1), //!< TCLK1 pin
         \t   SimFtm%instanceExternalClockSource_Tclk2 = SIM_FTMOPT0_FTM%instanceCLKSEL(2), //!< TCLK2 pin
         \t};\n\n
         ]]>
      </template>
   </for>
     
   <for keys="instance" values="0, 1, 2, 3" >
      <template>
         <![CDATA[
         \t/**
         \t * Select FTM%instance external clock pin
         \t *
         \t * @param simFtm%instanceExternalClockSource Selects the external clock source for PccInfo::setFtm%instanceSource(PccDiv1Clock_FtmExternal)
         \t */
         \tstatic void setFtm%instanceExternalClockSource(SimFtm%instanceExternalClockSource simFtm%instanceExternalClockSource) {
         \t   sim->FTMOPT0 = (sim->FTMOPT0&~SIM_FTMOPT0_FTM%instanceCLKSEL_MASK)|simFtm%instanceExternalClockSource;
         \t}\n\n
         ]]>
      </template>
   </for>
   
   <for keys="instance" values="0;1;2;3" >
      <template namespace="usbdm">
         <![CDATA[
         \t/**
         \t * FTM%instance Fault 0 input selection
         \t *
         \t * This selects between a Fault pin or the output of the trigger multiplexor
         \t */
         \tenum SimFtm%instanceFault0Select {
         \t   SimFtm%instanceFault0Select_Flt0   = SIM_FTMOPT0_FTM%instanceFLTxSEL(0b000), //!< FTM%instance_FLT0 pin
         \t   SimFtm%instanceFault0Select_TrgMux = SIM_FTMOPT0_FTM%instanceFLTxSEL(0b001), //!< FTM%instance Trigger Multiplexor
         \t};
         
         \t/**
         \t * FTM%instance Fault 1 input selection
         \t *
         \t * This selects between a Fault pin or the output of the trigger multiplexor
         \t */
         \tenum SimFtm%instanceFault1Select {
         \t   SimFtm%instanceFault1Select_Flt1   = SIM_FTMOPT0_FTM%instanceFLTxSEL(0b000), //!< FTM%instance_FLT1 pin
         \t   SimFtm%instanceFault1Select_TrgMux = SIM_FTMOPT0_FTM%instanceFLTxSEL(0b010), //!< FTM%instance Trigger Multiplexor
         \t};
         
         \t/**
         \t * FTM%instance Fault 2 input selection
         \t *
         \t * This selects between a Fault pin or the output of the trigger multiplexor
         \t */
         \tenum SimFtm%instanceFault2Select {
         \t   SimFtm%instanceFault2Select_Flt2   = SIM_FTMOPT0_FTM%instanceFLTxSEL(0b000), //!< FTM%instance_FLT2 pin
         \t   SimFtm%instanceFault2Select_TrgMux = SIM_FTMOPT0_FTM%instanceFLTxSEL(0b100), //!< FTM%instance Trigger Multiplexor
         \t};\n\n
         ]]>
      </template>
   </for>
  
   <for keys="instance" values="0;1;2;3" >
      <template>
         <![CDATA[
         \t/**
         \t * Select FTM%instance fault source
         \t *
         \t * This selects between a FTM%instance Fault pin or the output of the FTM%instance trigger multiplexor
         \t * for each fault input. 
         \t *
         \t * @param simFtm%instanceFault0Select Fault input 0 select
         \t * @param simFtm%instanceFault1Select Fault input 1 select
         \t * @param simFtm%instanceFault2Select Fault input 2 select
         \t */
         \tstatic void setFtm%instanceFaultSource(
         \t      SimFtm%instanceFault0Select simFtm%instanceFault0Select,
         \t      SimFtm%instanceFault1Select simFtm%instanceFault1Select,
         \t      SimFtm%instanceFault2Select simFtm%instanceFault2Select) {
         \t   sim->FTMOPT0 = (sim->FTMOPT0&~SIM_FTMOPT0_FTM%instanceFLTxSEL_MASK)|
         \t         (simFtm%instanceFault0Select|simFtm%instanceFault1Select|simFtm%instanceFault2Select);
         \t}\n\n
         ]]>
      </template>
   </for>
   
   <category name="Device Parameters" description="" toolTip="Parameters controlling device">
   
      <intOption key="system_lpo_frequency"
         description="Frequency of internal 128kHz LPO Clock [LPO12K_CLK]"
         toolTip="Dependent on clock trim. [Typically ~128kHz]" 
         constant="true" 
         origin="LPO128K_CLK frequency"
         units="Hz"
         value="128000"/>
   
      <intOption key="system_rtcclkin_frequency"
         description="Frequency of External RTC_CLKIN Clock"
         toolTip="Externally supplied [Typically ~32kHz]" 
         constant="false" 
         origin="RTC_CLKIN frequency"
         units="Hz"
         value="32000"/>
            
      <stringOption key="pdb_input_clock"   constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm0_input1_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm0_input2_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm0_input3_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm1_input1_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm1_input2_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm1_input3_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm2_input1_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm2_input2_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm2_input3_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm3_input1_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm3_input2_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <stringOption key="ftm3_input3_clock" constant="true" value="/SCG/run_mode_core_clock" />
      <floatOption  key="vlpr_mode_max_core_frequency"   constant="true" value="4MHz"    units="Hz" />
      <floatOption  key="vlpr_mode_max_bus_frequency"    constant="true" value="4MHz"    units="Hz" />
      <floatOption  key="vlpr_mode_max_flash_frequency"  constant="true" value="1MHz"    units="Hz" />
      <floatOption  key="run_mode_max_core_frequency"    constant="true" value="80MHz"   units="Hz" />
      <floatOption  key="run_mode_max_bus_frequency"     constant="true" value="48MHz"   units="Hz" />
      <floatOption  key="run_mode_max_flash_frequency"   constant="true" value="18.7MHz" units="Hz" />
      <floatOption  key="hsrun_mode_max_core_frequency"  constant="true" value="112MHz"  units="Hz" />
      <floatOption  key="hsrun_mode_max_bus_frequency"   constant="true" value="56MHz"   units="Hz" />
      <floatOption  key="hsrun_mode_max_flash_frequency" constant="true" value="28MHz"   units="Hz" />
   </category>

   <signals name="CONTROL" />

</peripheralPage>
