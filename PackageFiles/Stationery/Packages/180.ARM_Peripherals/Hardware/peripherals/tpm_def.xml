<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- tpm_def.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

   <constant key="suppressInstance"         type="Boolean" value="false"         />
   <constant key="peripheralUsesInterrupts" type="Boolean" value="true"          />
   <constant key="irq_parameters"           type="String"  value="&quot;uint8_t&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;0&quot;"  />
   <constant key="isGeneratedByDefault"     type="Boolean" value="false"         />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="_enablePeripheral.xml"  />

<!--
    * General substitutions
    *  $(_NAME)         => e.g TPM2 => TPM2
    *  $(_name)         => e.g TPM2 => tpm2
    *  $(_BASENAME)     => e.g TPM0 => TPM, PTA => PT
    *  $(_basename)     => e.g TPM0 => tpm, PTA => pt
    *  $(_Class)        => e.g TPM2 => Tpm2
    *  $(_Baseclass)    => e.g TPM0 => Tpm
    *  $(_instance)     => e.g TPM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%variable[index]            Variable name
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- ====================== constants ====================== -->
   <constant key = "disable_peripheral"      value = "&quot;tpm->SC = TPM_SC_CMOD(0);&quot;" type="String"  />

   <intOption key="NumChannels"
      hidden="true"
      locked="true"
      derived="true"
      description="Number of Channels"
      toolTip="The number of timer channels available"
      value="=_channelCount" />

   <intOption key="NumChannelVectors"
      hidden="true"
      locked="true"
      derived="true"
      description="Number of Channel interrupt vectors"
      toolTip="Number of channel event interrupt vectors - \n
               Multiple Channels may be mapped to the same vector"
      value="=_irqCount" />

   <template><![CDATA[
      \t//! Number of channels implemented
      \tstatic constexpr unsigned NumChannels = $(NumChannels);

      \t//! Number of channel event vectors implemented
      \tstatic constexpr unsigned NumChannelVectors = $(NumChannelVectors);\n\n
   ]]></template>

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Class)BasicInfo&quot;" />

   <title description="Clocking" />

   <choiceOption key="tpmClockConfig"
      target="system_tpm_clock"
      description="Clock configuration"
      toolTip="Selects the clock configuration used for calculations if System TPM Clock is chosen as clock source" >
      <choice value="0" name="@/MCG/ClockConfig[0]" ref="/SIM/system_tpm_clock[0]"  isDefault="true" />
      <choice value="1" name="@/MCG/ClockConfig[1]" ref="/SIM/system_tpm_clock[1]"  />
      <choice value="2" name="@/MCG/ClockConfig[2]" ref="/SIM/system_tpm_clock[2]"  />
      <choice value="3" name="@/MCG/ClockConfig[3]" ref="/SIM/system_tpm_clock[3]"  />
   </choiceOption>

   <intOption key="system_tpm_clock"
      locked="true"
      derived="true"
      description="System TPM Clock"
      toolTip="Based on current clock configuration"
      units="Hz"
      />

   <choiceOption key="tpm_sc_cmod"
      enabledBy="enablePeripheralSupport"
      description="Clock Source"
      typeName="TpmClockSource"
      target="inputClockFrequency"
      toolTip="Selects the clock source for the module" >
      <choice value="0" name="Disabled"         ref="disabled"          code="0"                      enum="Disabled"        />
      <choice value="1" name="System TPM Clock" ref="system_tpm_clock"  code="SimInfo::getTpmClock()" enum="SystemTpmClock"  isDefault="true"  />
      <choice value="2" name="External clock"   ref="/SIM/Tpm$(_instance)ExternalClkin"
         code="SimInfo::getTpm$(_instance)ExternalClockFrequency()"       enum="ExternalClock"   />
   </choiceOption>

   <intOption key="inputClockFrequency"
      enabledBy="enablePeripheralSupport"
      locked="true"
      description="Frequency of input clock to timer"
      derived="true"
      units="Hz"/>

<!-- ================ Main Configuration ====================== -->

   <title description="Main configuration"/>

   <choiceOption key="mode"
      enabledBy="enablePeripheralSupport"
      target="tpm_sc_cpwms"
      description="Main operating mode for TPM"
      toolTip="Main Mode"
      disabledValue="0"
   >
      <choice value="1" name="Left aligned" ref="0"
         toolTip="Left aligned (counter runs [0...mod]),  supports:\n
                 - Input capture\n
                 - Dual-edge capture\n
                 - Output compare\n
                 - Edge-aligned PWM\n
                 - Combined PWM"       />
      <choice value="2" name="Centre aligned" ref="1"
         toolTip="Centre aligned (counter runs [(0...mod...0)]), supports:\n
          - Centre-aligned PWM"
      />
      <choice value="3" name="Quadrature decoder" ref="0"
         toolTip="Quadrature Decode (counter clocked by decoder), supports:\n
          - Quadrature decode using two channels"
      />
      <choice value="0" name="Disabled" ref="0" enabledBy="false" />
   </choiceOption>
   <constant key="Left"    value="0"   type="Long" />
   <constant key="Centre"  value="1"   type="Long" />
   <constant key="Quad"    value="2"   type="Long" />
   <constant key="None"    value="3"   type="Long" />

   <binaryOption key="tpm_sc_cpwms"
      hidden="true"
      locked="true"
      enabledBy="enablePeripheralSupport"
      typeName="TpmCountMode"
      description="Alignment (Count mode)"
      toolTip="Left-aligned   (0...mod) or\n
               Centre-aligned (0...mod...0)" >
      <choice value="0" name="Left-aligned (count up)"         enum="LeftAligned"    />
      <choice value="1" name="Centre-aligned (count up-down)"  enum="CentreAligned"  />
   </binaryOption>

   <categoryOption description="Run-time checks" key="runtimeChecks"
      hiddenBy="mode!=(Left,Centre)"
   >

      <binaryOption key="check_minimums"
         enabledBy="enablePeripheralSupport"
         description="Check minimum interval and minimum resolution"
         toolTip="Enables boundary checks of minimum interval and minimum resolution when setting values" >
         <choice value="0" name="No checks done" />
         <choice value="1" name="Do checks"  isDefault="true" />
      </binaryOption>

      <intOption key="minimumInterval"
         enabledBy="check_minimums"
         description="Minimum usable interval in ticks"
         toolTip="This value is used as a minimum acceptable value for the timer interval in ticks\n
                  when using convertMicrosecondsToTicks() or convertSecondsToTicks()"
         value="20" min="0" max="65535"/>

      <intOption key="minimumResolution"
         enabledBy="check_minimums"
         description="Minimum resolution for PWM interval"
         toolTip="This value is used as a minimum value for the timer period in ticks \n
            so that a reasonable resolution is available for PWM duty-cycle"
         value="100" min="0" max="65535" />
   </categoryOption>

   <choiceOption key="tpm_sc_ps"
      hiddenBy="mode==(None)"
      enabledBy="enablePeripheralSupport"
      description="Clock prescaler"
      typeName="TpmPrescale"
      target="clock"
      toolTip="Selects the prescaler for the module" >
      <choice value="0" name="Divide by 1"   ref="inputClockFrequency"        enum="DivBy1"  isDefault="true" />
      <choice value="1" name="Divide by 2"   ref="(inputClockFrequency)/2."   enum="DivBy2" />
      <choice value="2" name="Divide by 4"   ref="(inputClockFrequency)/4."   enum="DivBy4" />
      <choice value="3" name="Divide by 8"   ref="(inputClockFrequency)/8."   enum="DivBy8" />
      <choice value="4" name="Divide by 16"  ref="(inputClockFrequency)/16."  enum="DivBy16" />
      <choice value="5" name="Divide by 32"  ref="(inputClockFrequency)/32."  enum="DivBy32" />
      <choice value="6" name="Divide by 64"  ref="(inputClockFrequency)/64."  enum="DivBy64" />
      <choice value="7" name="Divide by 128" ref="(inputClockFrequency)/128." enum="DivBy128" />
   </choiceOption>

   <floatOption key="clock"
      hiddenBy="mode==(None,Quad)"
      description="Counter tick rate"
      toolTip="The tick rate of the main counter"
      derived="true"
      locked="true"
      units="Hz"
    />

   <floatOption key="clockPeriod"
      hidden="true"
      ref="(1.0/clock)"
      locked="true"
      derived="true"
   />

   <binaryOption key="freeRunningCounter"
      hiddenBy="mode!=(Left,Quad)"
      description="Counter free-running"
      toolTip="Forces the full range for counter [0..65535]\n
               This is usually convenient for input-capture operations\n
               making use of modulo-16 calculations will counter roll-overs"
      name="freeRunning"
   >
      <choice value="0" name="Period mode"       />
      <choice value="1" name="Free-running mode" />
   </binaryOption>

   <intOption key="tpm_mod"
      hiddenBy="mode==(None)"
      enabledBy="!freeRunningCounter"
      description="End value for counter"
      toolTip="The timer counts from 0 to this value"
      typeName="Ticks &amp;"
      units="ticks"
      value="65535" min="0" max="65535" />

   <floatOption key="tpm_modPeriod"
      enabledBy="inputClockFrequency!=0"
      hiddenBy="mode==(None,Quad)"
      ref="clockPeriod*(tpm_sc_cpwms?(2*(tpm_mod)):(tpm_mod+1))"
      typeName="Seconds &amp;"
      unlockedBy="!freeRunningCounter"
      valueFormat="%s_s"
      description="Period or minimum interval of timer"
      toolTip="In left-aligned or centre-aligned this is the period of the timer\n
               In free-running mode it is the minimum interval"
      derived="true"
      units="s" />

   <choiceOption key="tpm_sc_action" condition="tpm_sc_toie_present&amp;&amp;tpm_sc_dma_present"
      hiddenBy="mode==(None)"
      enabledBy="irqHandlingMethod"
      valueFormat="TPM_SC_TOIE(%s),TPM_SC_DMA(%s)"
      enumType="uint16_t"
      typeName="TpmOverflowAction"
      description="Action on Counter overflow"
      toolTip="Enable interrupt and/or DMA on counter overflow" >
       <choice value="0,0" name="No action"                    enum="None"             />
       <choice value="0,1" name="DMA request"                  enum="Dma"              />
       <choice value="1,0" name="Interrupt request"            enum="Interrupt"        />
       <choice value="1,1" name="Interrupt and DMA request"    enum="InterruptAndDma"  />
   </choiceOption>

   <binaryOption key="tpm_sc_action" condition="tpm_sc_toie_present&amp;&amp;!tpm_sc_dma_present"
      hiddenBy="mode==(None)"
      enabledBy="irqHandlingMethod"
      valueFormat="TPM_SC_TOIE(%s)"
      enumType="uint8_t"
      typeName="TpmOverflowAction"
      description="Action on Counter overflow"
      toolTip="Enable interrupt on counter overflow" >
      <choice value="0" name="No action"          enum="None"       />
      <choice value="1" name="Overflow Interrupt" enum="Interrupt"  />
   </binaryOption>

   <choiceOption key="tpm_channel_number"
      hidden="true"
      derived="true"
      enumType="uint8_t"
      valueFormat="%s"
      typeName="TpmChannelNum"
      description="Channel Number"
      toolTip="Select a channel" >
      <choice value="0"             name="Channel 0"      enum="0" />
      <choice value="1"             name="Channel 1"      enum="1" />
      <choice value="2"             name="Channel 2"      enum="2" />
      <choice value="3"             name="Channel 3"      enum="3" />
      <choice value="4"             name="Channel 4"      enum="4" />
      <choice value="5"             name="Channel 5"      enum="5" />
      <choice value="6"             name="Channel 6"      enum="6" />
      <choice value="7"             name="Channel 7"      enum="7" />
      <choice value="(uint8_t(-1))" name="No Channel"     enum="None" />
   </choiceOption>


<!--  **************** Channels **************** -->

   <categoryOption key="Channels" description="Channel Configuration"
      hiddenBy="mode==(None,Quad)"
   >
   <for keys="ch" dim="NumChannels" >

      <equation key="channelPair%(ch)" value="=&quot;%(ch) &amp; &quot;+ToString(%(ch)+1)" />

      <binaryOption key="channelPairing%(ch)"
         hiddenBy="!Exists(tpm_combine_decap0_present)||((%(ch)&amp;1)==1)"
         description="=&quot;Channel &quot;+channelPair%(ch)+&quot; Pairing&quot;"
         toolTip="This allows the paired channels for operate in Combine or Dueal edge modes"
      >
         <choice value="0" name="=&quot;Channels &quot;+channelPair%(ch)+&quot; operate independently&quot;"
            toolTip="Operation in \n
               - Input capture\n
               - Output compare\n
               - Edge or Centre aligned PWM"
         />
         <choice value="1" name="=&quot;Channels &quot;+channelPair%(ch)+&quot; are paired&quot;"
            toolTip="Operation in \n
               - Dual-edge Input capture\n
               - Output compare\n
               - Combined PWM"
         />
      </binaryOption>
   </for>

   <for keys="ch" dim="NumChannels" >

      <if condition="((%(ch)&amp;1)==0)" >
         <!-- Even channel -->
         <!-- Indicates basic operation of channel individually controlled I/C, O/C. PWM -->
         <binaryOption key="combineMode%(ch)"
            ref="Exists(tpm_combine_decap0_present)&amp;&amp;channelPairing%(ch)"
            hidden="true"
            locked="true"
            derived="true" >
            <choice value="Simple mode"   name="Simple mode" />
            <choice value="Combined mode" name="Combined mode" />
         </binaryOption>
         <title description="Channel %(ch)"                           hiddenBy="combineMode%(ch)" />
         <title description="=&quot;Channels &quot;+channelPair%(ch)" hiddenBy="!combineMode%(ch)" />
      <else />
         <!-- Odd channel -->
         <!-- Indicate basic operation of channel individually controlled I/C, O/C. PWM -->
         <binaryOption key="combineMode%(ch)"
            ref="=&quot;combineMode&quot;+ToString(%(ch)-1)"
            hidden="true"
            locked="true"
            derived="true" >
            <choice value="Simple mode"   name="Simple mode" />
            <choice value="Combined mode" name="Combined mode" />
         </binaryOption>
         <title description="Channel %(ch)"                           hiddenBy="combineMode%(ch)" />
      </if>

      <!-- All channels when not paired -->
      <choiceOption name="tpm_cnsc_mode[%(ch)]" key="tpm_cnsc_mode_independent[%(ch)]"
         hiddenBy="!enablePeripheralSupport||combineMode%(ch)"
         valueFormat="TPM_CnSC_MS(%s),TPM_CnSC_ELS(%s)"
         enumType="uint16_t"
         typeName="TpmChannelMode"
         description="Channel Mode"
         toolTip="Determines channel operation (PWM/Input capture/Output compare)" >
         <!--              +......... MS(B:A)  -->
         <!--              |    +.... ELS(B:A) -->
         <!--              |    |              -->
         <!--              v    v              -->
          <choice value="0b00,0b00"  name="Channel Disabled"                    enum="Disabled"                 />
          <choice value="0b00,0b01"  name="Input Capture Rising-edge"           enum="InputCaptureRisingEdge"   />
          <choice value="0b00,0b10"  name="Input Capture Falling-edge"          enum="InputCaptureFallingEdge"  />
          <choice value="0b00,0b11"  name="Input Capture Either-edge"           enum="InputCaptureEitherEdge"   />
          <choice value="0b01,0b00"  name="Output Compare No action"            enum="OutputCompare"            />
          <choice value="0b01,0b01"  name="Output Compare Toggle"               enum="OutputCompareToggle"      />
          <choice value="0b01,0b10"  name="Output Compare Clear"                enum="OutputCompareClear"       />
          <choice value="0b01,0b11"  name="Output Compare Set"                  enum="OutputCompareSet"         />
          <choice value="0b10,0b10"  name="Pwm High-true Pulses (Edge/Centre)"  enum="PwmHighTruePulses"        />
          <choice value="0b10,0b01"  name="Pwm Low-true Pulses (Edge/Centre)"   enum="PwmLowTruePulses"         />
      </choiceOption>

      <!-- Even channels when paired -->
      <choiceOption name="tpm_cnsc_mode[%(ch)]" key="tpm_cnsc_mode_combined[%(ch)]" condition="((%(ch)&amp;1)==0)"
         target="decap[%(ch)];combine[%(ch)]"
         hiddenBy="!enablePeripheralSupport||!combineMode%(ch)"
         valueFormat="(TPM_COMBINE_DECAPEN0(%s)&lt;&lt;8),(TPM_COMBINE_COMBINE0(%s)&lt;&lt;8),TPM_CnSC_MS(%s),TPM_CnSC_ELS(%s)"
         enumType="uint16_t"
         enumGuard="defined(TPM_COMBINE_DECAPEN0)&amp;&amp;defined(TPM_COMBINE_COMBINE0)"
         typeName="TpmCombinedChannelMode"
         description="Channel Mode"
         toolTip="Determines channel operation (Combined PWM or Dual-edge capture)"
         >
         <!--            +................................... DECAPEN      -->
         <!--            | +................................. COMBINE      -->
         <!--            | |   +............................. MS(B:A)      -->
         <!--            | |   |    +........................ ELS(B:A)     -->
         <!--            | |   |    |          +............. decap        -->
         <!--            | |   |    |          |       +....  combine      -->
         <!--            | |   |    |          |       |                   -->
         <!--            v v   v    v          v       v                   -->
          <choice value="0,0,0b00,0b00"  ref="false ; false "  name="Channel Pair Disabled"                      enum="Disabled"                                />
          <!-- 1-2 ................ -->
          <choice value="0,1,0b00,0b10"  ref="false ; true  "  name="Combined PWM Positive-pulse"                enum="CombinePositivePulse"                    />
          <choice value="0,1,0b00,0b01"  ref="false ; true  "  name="Combine PWM Negative-pulse"                 enum="CombineNegativePulse"                    />
          <!-- 3-8 ................ -->
          <choice value="1,0,0b00,0b01"  ref="true  ; false "  name="Dual-edge Capture One-Shot Rising-edge"     enum="DualEdgeCaptureOneShotRisingEdge"        />
          <choice value="1,0,0b01,0b01"  ref="true  ; false "  name="Dual-edge Capture Continuous Rising-edge"   enum="DualEdgeCaptureContinuousRisingEdge"     />
          <choice value="1,0,0b00,0b10"  ref="true  ; false "  name="Dual-edge Capture One-Shot Falling-edge"    enum="DualEdgeCaptureOneShotFallingEdge"       />
          <choice value="1,0,0b01,0b10"  ref="true  ; false "  name="Dual-edge Capture Continuous Falling-edge"  enum="DualEdgeCaptureContinuousFallingEdge"    />
          <choice value="1,0,0b00,0b11"  ref="true  ; false "  name="Dual-edge Capture One-Shot Either-edge"     enum="DualEdgeCaptureOneShotEitherEdge"        />
          <choice value="1,0,0b01,0b11"  ref="true  ; false "  name="Dual-edge Capture Continuous Either-edge"   enum="DualEdgeCaptureContinuousEitherEdge"     />
      </choiceOption>

      <!-- Odd channels when paired -->
      <choiceOption key="tpm_cnsc_secondEdge[%(ch)]" condition="((%(ch)&amp;1)!=0)"
         hiddenBy="tpm_cnsc_mode_combined[%(ch)-1]&lt;3"
         valueFormat="TPM_CnSC_ELS(%s)"
         description="Seconds channel Capture Polarity"
         typeName="TpmSecondEdge"
         disabledValue="0b00"
         toolTip="Polarity for capturing the second edge in Dual-edge capture mode (2nd event/channel)"
         >
         <!--              +...... ELS(B:A)   -->
         <!--              |                  -->
         <!--              v                  -->
          <choice value="0b00" name="Not used"             enum="Disabled"    />
          <choice value="0b01" name="Capture Rising-edge"  enum="RisingEdge"  />
          <choice value="0b10" name="Capture Falling-edge" enum="FallingEdge" />
          <choice value="0b11" name="Capture Either-edge"  enum="EitherEdge"  />
      </choiceOption>

      <!-- Odd channels when paired -->
      <choiceOption key="tpm_cnsc_secondOutput[%(ch)]" condition="((%(ch)&amp;1)!=0)"
         hiddenBy="tpm_cnsc_mode_combined[%(ch)-1]!=(1,2)"
         valueFormat="TPM_CnSC_ELS(%s)"
         description="Second channel Output Control"
         typeName="TpmSecondEdge"
         disabledValue="0b00"
         toolTip="Controls the functioning of the output of the second channel in a pair"
         >
         <!--              +...... ELS(B:A)   -->
         <!--              |                  -->
         <!--              v                  -->
         <choice value="0b00" name="Single output"         enum="Single"
            toolTip="The pin associated with the second channel is not controlled by the TPM"
          />
         <choice value="0b01" name="Dual outputs"          enum="Dual"
            toolTip="The output of the second channel is the same as the first channel"
         />
         <choice value="0b01" name="Complementary outputs" enum="Complementary"
            toolTip="The output of the second channel is the complement of the first channel"
         />
      </choiceOption>

      <!-- Even channel -->
      <binaryOption key="inputMode[%(ch)]" condition="((%(ch)&amp;1)==0)"
         ref="(tpm_cnsc_mode_independent[%(ch)]==(1,2,3))||(tpm_cnsc_mode_combined[%(ch)]>=3)"
         hidden="true"
         description="Input mode"
         toolTip="One of the input modes (I/C)"
         locked="true"
         derived="true"
      >
         <choice  value="false" name="-"       />
         <choice  value="true"  name="Input"   />
      </binaryOption>

      <!-- Odd channel -->
      <binaryOption key="inputMode[%(ch)]" condition="((%(ch)&amp;1)!=0)"
         ref="(tpm_cnsc_mode_independent[%(ch)]==(1,2,3))||(tpm_cnsc_mode_combined[%(ch)-1]>=3)"
         hidden="true"
         description="Input mode"
         toolTip="One of the input modes (I/C)"
         locked="true"
         derived="true"
      >
         <choice  value="false" name="-"       />
         <choice  value="true"  name="Input"   />
      </binaryOption>

      <!-- Even channel -->
      <binaryOption key="outputMode[%(ch)]" condition="((%(ch)&amp;1)==0)"
         ref="(tpm_cnsc_mode_independent[%(ch)]>=5)||(tpm_cnsc_mode_combined[%(ch)]==(1,2))"
         hidden="true"
         description="Output mode"
         toolTip="One of the output modes (O/C, PWM)"
         locked="true"
         derived="true"
      >
         <choice value="false" name="-"      />
         <choice value="true"  name="Output" />
      </binaryOption>

      <!-- Odd channel -->
      <binaryOption key="outputMode[%(ch)]" condition="((%(ch)&amp;1)!=0)"
         ref="(tpm_cnsc_mode_independent[%(ch)]>=5)||(tpm_cnsc_secondOutput[%(ch)]==(1,2))"
         hidden="true"
         description="Output mode"
         toolTip="One of the output modes (O/C, PWM)"
         locked="true"
         derived="true"
      >
         <choice  value="false" name="-"       />
         <choice  value="true"  name="Output"   />
      </binaryOption>

      <binaryOption key="combine[%(ch)]" condition="((%(ch)&amp;1)==0)"
         description="Combined PWM output mode"
         hidden="true"
         toolTip="Combines a pair of channels to generate a PWM signal "
         locked="true"
         derived="true"
      >
         <choice value="false" name="-" />
         <choice value="true"  name="Combined PWM"  />
      </binaryOption>

      <binaryOption key="decap[%(ch)]" condition="((%(ch)&amp;1)==0)"
         description="Dual capture mode"
         hidden="true"
         toolTip="Combines a pair of channels to allow capturing of a pair of consecutive events"
         locked="true"
         derived="true"
      >
         <choice value="false" name="-" />
         <choice value="true"  name="Dual Capture"  />
      </binaryOption>

      <binaryOption key="Ch%(ch)PinInUse"
         ref="outputMode[%(ch)]||inputMode[%(ch)]"
         hidden="true"
         description="Pin used by TPM"
         toolTip="This controls the pin use as output or input"
         locked="true"
         derived="true"
      >
         <choice value="false" name="-" />
         <choice value="true"  name="Pin in use"  />
      </binaryOption>

      <if condition="((%(ch)&amp;1)==0)" >
         <!-- Even channels -->

         <choiceOption key="tpm_cnsc_action[%(ch)]"
            condition="tpm_cnsc_chie_present&amp;&amp;tpm_cnsc_dma_present"
            hiddenBy="((tpm_cnsc_mode_independent[%(ch)]==0)&amp;&amp;(tpm_cnsc_mode_combined[%(ch)]==0))"
            valueFormat="TPM_CnSC_CHIE(%s),TPM_CnSC_DMA(%s)"
            enumType="uint8_t"
            typeName="TpmChannelAction"
            description="Action on Channel %(ch) Event"
            toolTip="Enable interrupt or DMA on channel event" >
             <choice value="0,0" name="No action"          enum="None"  />
             <choice value="1,0" name="Interrupt Request"  enum="Interrupt"   />
             <choice value="1,1" name="DMA request"        enum="Dma"   />
         </choiceOption>

         <binaryOption key="tpm_cnsc_action[%(ch)]"
            condition="tpm_cnsc_chie_present&amp;&amp;!tpm_cnsc_dma_present"
            hiddenBy="!irqHandlingMethod||((tpm_cnsc_mode_independent[%(ch)]==0)&amp;&amp;(tpm_cnsc_mode_combined[%(ch)]==0))"
            valueFormat="TPM_CnSC_CHIE(%s)"
            enumType="uint8_t"
            typeName="TpmChannelAction"
            description="Action on Channel %(ch) Event"
            toolTip="Enable interrupt on channel event" >
             <choice value="0" name="No action"              enum="None"             />
             <choice value="1" name="Interrupt request"      enum="Interrupt"        />
         </binaryOption>

      <else />
         <!-- Odd channel -->
         <choiceOption key="tpm_cnsc_action[%(ch)]"
            condition="tpm_cnsc_chie_present&amp;&amp;tpm_cnsc_dma_present"
            hiddenBy="((tpm_cnsc_mode_independent[%(ch)]==0) &amp;&amp;(tpm_cnsc_mode_combined[%(ch)-1]==0))"
            valueFormat="TPM_CnSC_CHIE(%s),TPM_CnSC_DMA(%s)"
            enumType="uint8_t"
            typeName="TpmChannelAction"
            description="Action on Channel %(ch) Event"
            toolTip="Enable interrupt or DMA on channel event" >
             <choice value="0,0" name="No action"          enum="None"  />
             <choice value="1,0" name="Interrupt Request"  enum="Interrupt"   />
             <choice value="1,1" name="DMA request"        enum="Dma"   />
         </choiceOption>

         <binaryOption key="tpm_cnsc_action[%(ch)]"
            condition="tpm_cnsc_chie_present&amp;&amp;!tpm_cnsc_dma_present"
            hiddenBy="!irqHandlingMethod||((tpm_cnsc_mode_independent[%(ch)]==0)&amp;&amp;(tpm_cnsc_mode_combined[%(ch)-1]==0))"
            valueFormat="TPM_CnSC_CHIE(%s)"
            enumType="uint8_t"
            typeName="TpmChannelAction"
            description="Action on Channel %(ch) Event"
            toolTip="Enable interrupt on channel event" >
             <choice value="0" name="No action"              enum="None"             />
             <choice value="1" name="Interrupt request"      enum="Interrupt"        />
         </binaryOption>

      </if>

      <choiceOption key="tpm_filter_ch%(ch)fval" condition="tpm_filter_ch%(ch)fval_present"
         derivedFrom="tpm_filter_chnfval"
         hiddenBy="!inputMode[%(ch)]" >
      </choiceOption>

      <floatOption key="tpm_filter_ch%(ch)_delay" condition="tpm_filter_ch%(ch)fval_present"
         description="Channel Input Filter Delay"
         toolTip="Calculated delay"
         hiddenBy="!inputMode[%(ch)]"
         ref="(4.0*tpm_filter_ch%(ch)fval)/inputClockFrequency"
         derived="true"
         locked="true"
         units="s"
         min="0.0"
      />

      <binaryOption key="tpm_cnsc_icrst[%(ch)]" condition="tpm_cnsc_icrst_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="TPM_CnSC_ICRST(%s)"
         typeName="TpmChannelReset"
         enumType="uint8_t"
         description="Reset counter on channel IC event"
         toolTip="Enables the channel IC event to reset the shared counter" >
         <choice value="0" name="Disabled" enum="Disabled" />
         <choice value="1" name="Enabled"  enum="Enabled"  />
      </binaryOption>

      <!-- Even channel -->
      <intOption key="tpm_cnv[%(ch)]" condition="((%(ch)&amp;1)==0)"
         hiddenBy="(tpm_cnsc_mode_independent[%(ch)]&lt;4)&amp;&amp;(tpm_cnsc_mode_combined[%(ch)]!=(1,2))"
         valueFormat="%s_ticks"
         typeName="Ticks &amp;"
         units="ticks"
         description="Output Compare Event time in ticks"
         toolTip="This value is compared against the main counter"
         value="0" min="0" max="tpm_mod" />

      <!-- Even channel -->
      <floatOption key="tpm_cnvEventTime[%(ch)]" condition="((%(ch)&amp;1)==0)"
         hiddenBy="(tpm_cnsc_mode_independent[%(ch)]&lt;4)&amp;&amp;(tpm_cnsc_mode_combined[%(ch)]!=(1,2))"
         ref="tpm_cnv[%(ch)]*clockPeriod"
         valueFormat="%s_s"
         derived="true"
         units="s"
         description="Output Compare Event time in seconds"
         toolTip="This value, converted to ticks, is compared against the main counter"
         value="0" min="0" max="tpm_mod*clockPeriod" />

      <!-- Odd channel -->
      <intOption key="tpm_cnv[%(ch)]" condition="((%(ch)&amp;1)!=0)"
         hiddenBy="(tpm_cnsc_mode_independent[%(ch)]&lt;4)&amp;&amp;(tpm_cnsc_mode_combined[%(ch)-1]!=(1,2))"
         valueFormat="%s_ticks"
         typeName="Ticks &amp;"
         units="ticks"
         description="Output Compare Event time in ticks"
         toolTip="This value is compared against the main counter"
         value="0" min="0" max="tpm_mod" />

      <!-- Odd channel -->
      <floatOption key="tpm_cnvEventTime[%(ch)]" condition="((%(ch)&amp;1)!=0)"
         hiddenBy="(tpm_cnsc_mode_independent[%(ch)]&lt;4)&amp;&amp;(tpm_cnsc_mode_combined[%(ch)-1]!=(1,2))"
         ref="tpm_cnv[%(ch)]*clockPeriod"
         valueFormat="%s_s"
         derived="true"
         units="s"
         description="Output Compare Event time in seconds"
         toolTip="This value, converted to ticks, is compared against the main counter"
         value="0" min="0" max="tpm_mod*clockPeriod" />

      <floatOption key="tpm_cnvHighTime[%(ch)]"
         hiddenBy="tpm_cnsc_mode_independent[%(ch)]!=(8,9)"
         locked="true"
         derived="true"
         ref="(tpm_sc_cpwms?2.0:1.0)*(tpm_cnv[%(ch)])*clockPeriod"
         valueFormat="%s_s"
         units="s"
         description="Output high-time in seconds"
         toolTip="Calculated high-time" />

      <floatOption key="tpm_cnvDutyCycle[%(ch)]"
         hiddenBy="tpm_cnsc_mode_independent[%(ch)]!=(8,9)"
         locked="true"
         derived="true"
         ref="tpm_cnvHighTime[%(ch)]/tpm_modPeriod"
         valueFormat="%s_s"
         units="percent"
         description="Output duty cycle as pecentage"
         toolTip="Calculated duty cycle" />

      <floatOption key="tpm_pwmHighTime[%(ch)]" condition="((%(ch)&amp;1)!=0)"
         hiddenBy="tpm_cnsc_mode_combined[%(ch)-1]!=(1,2)"
         locked="true"
         derived="true"
         ref="(tpm_cnv[%(ch)]-tpm_cnv[%(ch)-1])*clockPeriod"
         valueFormat="%s_s"
         units="s"
         description="Output high-time in seconds"
         toolTip="Calculated high-time" />

      <floatOption key="tpm_pwmDutyCycle[%(ch)]" condition="((%(ch)&amp;1)!=0)"
         hiddenBy="tpm_cnsc_mode_combined[%(ch)-1]!=(1,2)"
         locked="true"
         derived="true"
         ref="tpm_pwmHighTime[%(ch)]/tpm_modPeriod"
         valueFormat="%s_s"
         units="percent"
         description="Output duty cycle as pecentage"
         toolTip="Calculated duty cycle" />







   </for>
   </categoryOption>

<!-- Info class members-->

   <initialValueTemplate variables="minimumResolution"
   ><![CDATA[
      \t// %description
      \tstatic constexpr uint32_t minimumResolution  = $(?check_minimums:$(minimumResolution):0);\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate variables="minimumInterval"
   ><![CDATA[
      \t// %description
      \tstatic constexpr uint32_t minimumInterval  = $(?check_minimums:$(minimumInterval):0);\n\n
   ]]></initialValueTemplate>

   <setTemplate key="/$(_BASENAME)/static_functions" namespace="all"
      discardRepeats="true"
      variables="tpm_sc_cpwms,tpm_sc_cmod,tpm_sc_ps"
      nonDefaultParams="2"
   ><![CDATA[
      \t/**
      \t * Enables clock to peripheral and configures all pins.
      \t * Configures main operating settings for timer.
      \t *
      %paramDescription
      \t */
      \tstatic void configure(
      %params) {
      \t
      \t   // Enable clock to peripheral
      \t   enable();
      \t
      \t   // Disable timer to change settings
      \t   %register=0;
      \t
      \t   // Make sure write has completed (disabled)
      \t   (void)(%register);
      \t
      \t   // Write new value
      \t   tpm->SC = %paramExpression;
      \t}\n\n
   ]]></setTemplate>

<!--  ========== Static/Non-Static Methods =============================== -->
   <for  keys  ="  k                   : static    : const    : getInputClockFrequency         : channel : Tpm       : isStatic : namespace"
         values=" non_static_functions : ''        : ' const' : getInputClockFrequencyVirtual  : CHANNEL : TpmBase   : false    : all;
                  static_functions     : 'static ' : ''       : 'Info::getInputClockFrequency' : channel : OwningTpm : true     : forceInfo
   " >
      <setTemplate key="/$(_BASENAME)/%(k)" namespace="all"
         discardRepeats="true"
         variables="tpm_sc_cmod,tpm_sc_ps"
         nonDefaultParams="2"
      ><![CDATA[
         \t/**
         \t * Stop timer counter.
         \t * This simply disables the counter clock source. \n
         \t * To restart use setClockSource() or configure();
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note A illegal access trap will occur if the timer has not been enabled
         \t */
         \t%(static)void stopCounter()%(const) {
         \t  %register = (%register&~%mask0);
         \t}
         \t
         \t/**
         \t * Set %description0 and %description1
         \t *
         %paramDescription
         \t */
         \t%(static)void selectClock(
         %params)%(const) {
         \t
         \t   // Calculate new SC value
         \t   uint32_t %registerName = (%register&~%mask)|(%paramExpression);
         \t
         \t   // Disable timer to change clock (unable to switch directly between clock sources)
         \t   %register=0;
         \t
         \t   // Make sure write has completed (disabled)
         \t   (void)(%register);
         \t
         \t   // Write new value
         \t   %register = %registerName;
         \t}\n\n
      ]]></setTemplate>

      <for keys="  f            :  n"
         values=" tpm_sc_cpwms  : CountMode;
                  tpm_sc_cmod   : ClockSource;
                  tpm_sc_ps     : Prescaler" >
         <setTemplate key="/$(_BASENAME)/%(k)" namespace="all"
            discardRepeats="true"
            variables="%(f)"
            nonDefaultParams="2"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            %paramDescription
            \t *
            \t * @note This function will affect all channels of the timer.
            \t * @note The timer will be disabled while making changes.
            \t */
            \t%(static)void set%(n)(%params)%(const) {
            \t
            \t   // Calculate new SC value
            \t   uint32_t %registerName = (%register&~%mask)|(%paramExpression);

            \t   // Disable timer to change clock (unable to switch directly between clock sources)
            \t   %register=0;

            \t   // Make sure write has completed (disabled)
            \t   (void)(%register);

            \t   // Write new value
            \t   %register = %registerName;
            \t}
            \t
            \t/**
            \t * Get %description
            \t *
            %paramDescription
            \t */
            \t%(static)%paramType get%(n)()%(const) {
            \t
            \t   return (%paramType)(%register&~%mask);
            \t}\n\n
         ]]></setTemplate>
      </for>

      <for keys="  f           :  n"
         values=" tpm_mod      : CounterMaximumValue" >
         <setTemplate key="/$(_BASENAME)/%(k)" namespace="all"
            discardRepeats="true"
            variables="%(f)"
            nonDefaultParams="2"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t * This value is write-buffered and updated by MOD synchronisation
            \t *
            %paramDescription
            \t *
            \t * @note This function will affect all channels of the timer.
            \t */
            \t%(static)void set%(n)(%params)%(const) {
            \t
            \t   // Write new value
            \t   %register = %paramExpression;
            \t}
            \t
            \t/**
            \t * Get %description
            \t *
            %paramDescription
            \t */
            \t%(static)%paramType get%(n)()%(const) {
            \t
            \t   return (%paramType)%register;
            \t}\n\n
         ]]></setTemplate>
      </for>

      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Calculate TPM timing parameters to achieve a given period
         \t *
         \t * @param[in]    period  Period in seconds
         \t * @param[inout] sc      Proposed TPM.SC value (must include CLKS, CPWMS fields)
         \t *                       PS field is updated
         \t * @param[out]   mod     Calculated TPM.MOD values
         \t *
         \t * @return E_NO_ERROR   Success!!
         \t * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled)
         \t * @return E_TOO_LARGE  Requested period is too large
         \t */
         \t%(static)ErrorCode calculateTimingParameters(Seconds period, uint8_t &sc, uint16_t &mod)%(const) {
         \t
         \t   float inputClock = %(getInputClockFrequency)((TpmClockSource)(sc&TPM_SC_CMOD_MASK));
         \t   unsigned prescaleFactor=1;
         \t   unsigned prescalerValue=0;
         \t
         \t   // Check if CPWMS is set (affects period calculation)
         \t   bool centreAligned = (sc&TPM_SC_CPWMS_MASK);
         \t
         \t   constexpr uint32_t maxModValue = TPM_MOD_MOD_MASK;
         \t
         \t   while (prescalerValue<=7) {
         \t      float clock    = inputClock/prescaleFactor;
         \t      float modValueF = period*clock;
         \t      if (centreAligned) {
         \t         // PeriodInTicks = 2*MOD
         \t         modValueF = modValueF/2;
         \t      }
         \t      else {
         \t         // PeriodInTicks = MOD+1
         \t         modValueF = modValueF - 1;
         \t      }
         \t      unsigned modValue = round(modValueF);\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" codeGenCondition="%(isStatic)" ><![CDATA[
         \t      if constexpr (Info::minimumResolution>0) {
         \t         if (modValue < Info::minimumResolution) {
         \t            usbdm_assert(false, "Interval is too short");
         \t            // Too short a period for minimum resolution
         \t            return setErrorCode(E_TOO_SMALL);
         \t         }
         \t      }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t      if (modValue <= maxModValue) {
         \t         sc   = (sc&~TPM_SC_PS_MASK)|TPM_SC_PS(prescalerValue);
         \t         mod  = modValue;
         \t         return E_NO_ERROR;
         \t      }
         \t      prescalerValue++;
         \t      prescaleFactor <<= 1;
         \t   }
         \t   // Too long a period
         \t   usbdm_assert(false, "Interval is too long");
         \t   return setErrorCode(E_TOO_LARGE);
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Set period
         \t *
         \t * @param[in] period   Period in seconds as a float
         \t *
         \t * @return E_NO_ERROR  => success
         \t * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
         \t * @return E_TOO_LARGE  Requested period is too large.
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note Adjusts Timer pre-scaler to appropriate value.
         \t * @note The counter load value (CNTIN) is cleared
         \t * @note The counter modulo value (MOD) is modified to obtain the requested period
         \t * @note The Timer is stopped while being modified.
         \t * @note The Timer counter is restarted from zero
         \t */
         \t%(static)ErrorCode setPeriod(Seconds period)%(const) {
         \t
         \t   uint16_t modValue = 0;
         \t
         \t   uint8_t sc = tpm->SC;
         \t
         \t   ErrorCode rc = calculateTimingParameters(period, sc, modValue);
         \t
         \t   if (rc != E_NO_ERROR) {
         \t      return rc;
         \t   }
         \t   // Disable timer to change prescaler and period
         \t   tpm->SC = 0;
         \t
         \t   // Configure for modulo operation
         \t   tpm->MOD   = modValue;
         \t
         \t   // Clear counter
         \t   tpm->CNT   = 0;
         \t
         \t   // Set prescale and enable timer
         \t   tpm->SC  = sc;
         \t
         \t   return E_NO_ERROR;
         \t}
         \t
         \t/**
         \t * Set maximum interval for input-capture or output compare.
         \t * Input Capture and Output Compare will be able to operate over
         \t * at least this period without overflow.
         \t *
         \t * @param[in] interval Interval in seconds as a float
         \t *
         \t * @return E_NO_ERROR  => success
         \t * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
         \t * @return E_TOO_LARGE  Requested period is too large.
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note Adjusts Timer pre-scaler to appropriate value.
         \t * @note TPM counter is configured for free-running mode i.e. 0-65535
         \t * @note The Timer is stopped while being modified.
         \t * @note The Timer counter is restarted from zero
         \t */
         \t%(static)ErrorCode setMaximumInterval(Seconds interval)%(const) {
         \t
         \t   uint16_t       modValue;
         \t
         \t   uint8_t sc = tpm->SC;
         \t
         \t   ErrorCode rc = calculateTimingParameters(interval, sc, modValue);
         \t   if (rc != E_NO_ERROR) {
         \t      return rc;
         \t   }
         \t
         \t   // Disable timer to change prescaler and period
         \t   tpm->SC = 0;
         \t
         \t   // Configure for free-running mode
         \t   // This is the usual value for IC or OC set-up
         \t   tpm->MOD   = 0_ticks;
         \t
         \t   // Clear counter
         \t   tpm->CNT   = 0;
         \t
         \t   // Set prescale and enable timer
         \t   tpm->SC  = sc;
         \t
         \t   return E_NO_ERROR;
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Get frequency of timer tick
         \t *
         \t * @return Timer frequency in Hz
         \t */
         \t%(static)float getTickFrequencyAsFloat()%(const) {
         \t
         \t   // Calculate timer prescale factor
         \t   float prescaleFactor = 1<<((tpm->SC&TPM_SC_PS_MASK)>>TPM_SC_PS_SHIFT);
         \t
         \t   return %(getInputClockFrequency)((TpmClockSource)(tpm->SC&TPM_SC_CMOD_MASK))/prescaleFactor;
         \t}
         \t
         \t/**
         \t * Get clock frequency
         \t *
         \t * @return Frequency as a uint32_t in Hz (may underflow)
         \t */
         \t%(static)uint32_t getTickFrequencyAsInt()%(const) {
         \t
         \t   // Calculate timer prescale factor
         \t   int prescaleFactor = 1<<((tpm->SC&TPM_SC_PS_MASK)>>TPM_SC_PS_SHIFT);
         \t
         \t   return %(getInputClockFrequency)((TpmClockSource)(tpm->SC&TPM_SC_CMOD_MASK))/prescaleFactor;
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Convert time in microseconds to time in ticks
         \t *
         \t * @param[in] time Time in microseconds
         \t *
         \t * @return Time in ticks
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
         \t * @note Will set error code if calculated value is less the Timer minimum resolution
         \t */
         \t%(static)Ticks convertMicrosecondsToTicks(int time)%(const) {
         \t
         \t   // Calculate period
         \t   uint32_t tickRate = getTickFrequencyAsInt();
         \t   uint64_t rv       = (static_cast<uint64_t>(time)*tickRate)/1000000;
         \t   usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" codeGenCondition="%(isStatic)" ><![CDATA[
         \t   if constexpr (Info::minimumInterval>0) {
         \t      if (rv < Info::minimumInterval) {
         \t         // Attempt to set too short a period
         \t         setErrorCode(E_TOO_SMALL);
         \t      }
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t   return Ticks(uint32_t(rv));
         \t}
         \t
         \t/**
         \t * Converts time in seconds to time in ticks
         \t *
         \t * @param[in] seconds Time interval in seconds
         \t *
         \t * @return Time in ticks
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value (see setMaximumInterval()). \n
         \t * @note Will set error code if calculated value is less the minimum resolution
         \t */
         \t%(static)Ticks convertSecondsToTicks(Seconds seconds)%(const) {
         \t
         \t   // Calculate period
         \t   float    tickRate = getTickFrequencyAsFloat();
         \t   uint64_t rv       = rintf((float)seconds*tickRate);
         \t   usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" codeGenCondition="%(isStatic)" ><![CDATA[
         \t   if (rv < Info::minimumInterval) {
         \t      // Attempt to set too short a period
         \t      setErrorCode(E_TOO_SMALL);
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t   return Ticks(uint32_t(rv));
         \t}
         \t
         \t/**
         \t * Convert time in ticks to time in microseconds
         \t *
         \t * @param[in] timeInTicks Time in ticks
         \t *
         \t * @return Time in microseconds
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
         \t */
         \t%(static)uint32_t convertTicksToMicroseconds(Ticks timeInTicks)%(const) {
         \t
         \t   // Calculate period
         \t   uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000000)/getTickFrequencyAsInt();
         #ifdef DEBUG_BUILD
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }
         \t   if (rv == 0) {
         \t      // Attempt to set too short a period
         \t      setErrorCode(E_TOO_SMALL);
         \t   }
         #endif
         \t   return rv;
         \t}
         \t
         \t/**
         \t * Convert time in ticks to time in milliseconds
         \t *
         \t * @param[in] timeInTicks Time in ticks
         \t *
         \t * @return Time in milliseconds
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
         \t */
         \t%(static)uint32_t convertTicksToMilliseconds(Ticks timeInTicks)%(const) {
         \t
         \t   // Calculate period
         \t   uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000)/getTickFrequencyAsInt();
         #ifdef DEBUG_BUILD
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }
         \t   if (rv == 0) {
         \t      // Attempt to set too short a period
         \t      setErrorCode(E_TOO_SMALL);
         \t   }
         #endif
         \t   return rv;
         \t}
         \t
         \t/**
         \t * Convert time in ticks to time in seconds
         \t *
         \t * @param[in] timeInTicks Time in ticks
         \t *
         \t * @return Time in seconds
         \t */
         \t%(static)Seconds convertTicksToSeconds(Ticks timeInTicks)%(const) {
         \t   return static_cast<float>((unsigned)timeInTicks)/getTickFrequencyAsFloat();
         \t}
         \t/**
         \t * Get Timer count
         \t *
         \t * @return Timer count value
         \t */
         \t%(static)uint16_t getTime()%(const) {
         \t   return tpm->CNT;
         \t}
         \t\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Reset counter to initial value
         \t */
         \t%(static)void resetTime()%(const) {
         \t   // Note: writing ANY value loads CNT from CNTIN
         \t   tpm->CNT = 0;
         \t}
         \t
         \t/**
         \t * Get timer event flags
         \t *
         \t * @return Flags indicating if an event has occurred on a channel
         \t *         There is one bit for each channel
         \t */
         \t%(static)unsigned getInterruptFlags()%(const) {
         \t   return tpm->STATUS;
         \t}
         \t
         \t/**
         \t * Clear selected timer event flags
         \t *
         \t * @param channelMask Mask indicating which channel flags to clear
         \t *                    There is one bit for each channel
         \t *
         \t * @note Flags will not be cleared if the channel is configured for DMA
         \t */
         \t%(static)void clearSelectedInterruptFlags(uint32_t channelMask)%(const) {
         \t   // Clear flags (w1c)
         \t   tpm->STATUS = channelMask;
         \t}
         \t
         \t/**
         \t * Clear timer overflow event flag
         \t */
         \t%(static)void clearOverflowInterruptFlag() {
         \t   // Clear TOI flag (w1c)
         \t   tpm->STATUS = TPM_STATUS_TOF_MASK;
         \t}
         \t
         \t/**
         \t * Get and clear timer event flags
         \t *
         \t * @return Flags indicating if an event has occurred on a channel
         \t *         There is one bit for each channel
         \t *
         \t * @note Only flags captured in the return value are cleared
         \t * @note Flags will not be cleared if the channel is configured for DMA
         \t */
         \t%(static)unsigned getAndClearInterruptFlags()%(const) {
         \t   // Note - w1c flags
         \t   // so only flags captured in status are cleared
         \t   unsigned status = tpm->STATUS;
         \t   tpm->STATUS = status;
         \t   return status;
         \t}
         \t
         \t/**
         \t * Enable/disable Timer Overflow interrupts
         \t */
         \t%(static)void enableTimerOverflowInterrupts()%(const) {
         \t   tpm->SC = tpm->SC | TPM_SC_TOIE_MASK;
         \t}
         \t
         \t/**
         \t * Disable Timer Overflow interrupts
         \t */
         \t%(static)void disableTimerOverflowInterrupts()%(const) {
         \t   tpm->SC = tpm->SC & ~TPM_SC_TOIE_MASK;
         \t}
         \t\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="%(namespace)" discardRepeats="true"
         variables="tpm_pol_pol" ><![CDATA[
         \t/**
         \t * Set polarity of all channels
         \t *
         \t * @param channelMask   Bit mask 0 => active-high, 1 => active-low
         \t */
         \t%(static) void setPolarity(uint32_t channelMask)%(const) {
         \t   tpm->POL = channelMask;
         \t}
         \t
         \t/**
         \t * Set polarity of selected channel
         \t *
         \t * @param tpmPolarity  Channel polarity to set
         \t */
         \t%(static)void setPolarity(TpmPolarity tpmPolarity)%(const) {
         \t      uint8_t temp = tpm->POL;
         \t      temp |= tpmPolarity;
         \t      temp &= tpmPolarity>>8;
         \t      tpm->POL = temp;
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t/*
         \t * *****************************************************************
         \t *          Channel functions
         \t * *****************************************************************
         \t */
         \t/**
         \t * Set PWM duty cycle.
         \t * Higher precision float version
         \t *
         \t * @param[in] dutyCycle  Duty-cycle as percentage (float)
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note The actual CnV register update may be delayed by the register synchronisation mechanism
         \t */
         \t%(static)void setDutyCycle(float dutyCycle, int channel)%(const) {
         \t   if (tpm->SC&TPM_SC_CPWMS_MASK) {
         \t      tpm->CONTROLS[channel].CnV  = round((dutyCycle*tpm->MOD)/100.0f);
         \t   }
         \t   else {
         \t      tpm->CONTROLS[channel].CnV  = round((dutyCycle*(tpm->MOD+1))/100.0f);
         \t   }
         \t}
         \t
         \t/**
         \t * Set PWM duty cycle
         \t *
         \t * @param[in] dutyCycle  Duty-cycle as percentage
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note The actual CnV register update may be delayed by the register synchronisation mechanism
         \t */
         \t%(static)void setDutyCycle(int dutyCycle, int channel)%(const) {
         \t   if (tpm->SC&TPM_SC_CPWMS_MASK) {
         \t      tpm->CONTROLS[channel].CnV  = (dutyCycle*tpm->MOD)/100;
         \t   }
         \t   else {
         \t      tpm->CONTROLS[channel].CnV  = (dutyCycle*(tpm->MOD+1))/100;
         \t   }
         \t}
         \t
         \t/**
         \t * Set PWM high time in ticks
         \t * Assumes value is less than period
         \t *
         \t * @param[in] highTime   PWM high time in ticks
         \t * @param[in] channel    Timer channel
         \t *
         \t * @return E_NO_ERROR on success
         \t * @return E_TOO_LARGE on success
         \t *
         \t * @note The actual CnV register update may be delayed by the register synchronisation mechanism
         \t */
         \t%(static)ErrorCode setHighTime(Ticks highTime, int channel)%(const) {
         \t
         \t   if (tpm->SC&TPM_SC_CPWMS_MASK) {
         \t      // In CPWM the pulse width is doubled
         \t      highTime = Ticks((highTime+1_ticks)/2U);
         \t   }
         #ifdef DEBUG_BUILD
         \t   if ((unsigned)highTime > tpm->MOD) {
         \t      return setErrorCode(E_TOO_LARGE);
         \t   }
         #endif
         \t   tpm->CONTROLS[channel].CnV  = (unsigned)highTime;
         \t   return E_NO_ERROR;
         \t}
         \t
         \t/**
         \t * Get Timer event time
         \t *
         \t * @param[in] channel    Timer channel
         \t *
         \t * @return Absolute time of last event in ticks i.e. value from timer event register
         \t */
         \t%(static)Ticks getEventTime(int channel)%(const) {
         \t   return Ticks(tpm->CONTROLS[channel].CnV);
         \t}
         \t
         \t/**
         \t * Set Timer event time
         \t *
         \t * This value is write-buffered and updated by Cnv synchronisation.
         \t *
         \t * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
         \t * @param[in] channel    Timer channel
         \t */
         \t%(static)void setEventTime(Ticks eventTime, int channel)%(const) {
         \t   tpm->CONTROLS[channel].CnV = (unsigned)eventTime;
         \t}
         \t
         \t/**
         \t * Set Timer event time relative to current event time
         \t *
         \t * @param[in] offset     Event time in ticks relative to current event time (i.e. Timer channel CnV value)
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note This value is write-buffered and updated by CnV synchronisation.
         \t */
         \t%(static)void setDeltaEventTime(Ticks offset, int channel)%(const) {
         \t   tpm->CONTROLS[channel].CnV = tpm->CONTROLS[channel].CnV + (unsigned)offset;
         \t}
         \t
         \t/**
         \t * Set Timer event time relative to current timer count value
         \t *
         \t * @param[in] offset     Event time in ticks relative to current time (i.e. Timer CNT value)
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note This value is write-buffered and updated by CnV synchronisation.
         \t */
         \t%(static)void setRelativeEventTime(Ticks offset, int channel)%(const) {
         \t   tpm->CONTROLS[channel].CnV = tpm->CNT + (unsigned)offset;
         \t}
         \t
         \t/**
         \t * Set PWM high time in seconds
         \t *
         \t * @param[in] highTime   PWM high time in seconds
         \t * @param[in] channel    Timer channel
         \t *
         \t * @return E_NO_ERROR on success
         \t *
         \t * @note The actual CnV register update may be delayed by the TPM register synchronisation mechanism
         \t */
         \t%(static)ErrorCode setHighTime(Seconds highTime, int channel)%(const) {
         \t   return setHighTime(convertSecondsToTicks(highTime), channel);
         \t}
         \t
      ]]></template>

<!-- ================== Channel Functions ================== -->

   <template key="/$(_BASENAME)_CHANNEL/%(k)" namespace="all" discardRepeats="true"
      variables="tpm_cnsc_action[]"
      linePadding="xxx"
   ><![CDATA[
      \t
      \t   /**
      \t    * Set %description
      \t    *
      %paramDescription
      \t    *
      \t    * @note This method has the side-effect of clearing the register update synchronisation i.e.
      \t    *       pending CnV register updates are discarded.
      \t    */
      \t   %(static) void setAction(%params)%(const) {
      \t      tpm->CONTROLS[%(channel)].CnSC =
      \t           (tpm->CONTROLS[%(channel)].CnSC & ~%mask) | %paramExpression;
      \t   }\n\n
   ]]></template>

   <template key="/$(_BASENAME)_CHANNEL/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
      \t   /**
      \t    * Configure channel.
      \t    * No affect on shared settings of owning Timer
      \t    *
      \t    * @param[in] tpmChannelMode    Mode of operation for channel
      \t    * @param[in] tpmChannelAction  Whether to enable the interrupt or DMA function on this channel
      \t    *
      \t    * @note This method has the side-effect of clearing the register update synchronisation i.e.
      \t    *       pending CnV register updates are discarded.
      \t    */
      \t   %(static) void configure(
      \t         TpmChannelMode    tpmChannelMode,
      \t         TpmChannelAction  tpmChannelAction = TpmChannelAction_None)%(const) {
      \t
      \t      tpm->CONTROLS[%(channel)].CnSC = tpmChannelMode|tpmChannelAction;
      \t   }
      \t
      \t   /**
      \t    * Disables timer channel (sets mode to TpmChannelMode_Disabled)
      \t    */
      \t   %(static) void disable()%(const) {
      \t      setMode(TpmChannelMode_Disabled);
      \t   }
      \t
      \t   /**
      \t    * Get channel mode.
      \t    *
      \t    * @return Current mode of operation for the channel
      \t    */
      \t   %(static) TpmChannelMode getMode()%(const) {
      \t      return static_cast<TpmChannelMode>(tpm->CONTROLS[%(channel)].CnSC &
      \t            (TPM_CnSC_MS_MASK|TPM_CnSC_ELS_MASK));
      \t   }
      \t
      \t   /**
      \t    * Set channel mode
      \t    *
      \t    * @param[in] tpmChannelMode      Mode of operation for channel
      \t    *
      \t    * @note This method has the side-effect of clearing the register update synchronisation i.e.
      \t    *       pending CnV register updates are discarded.
      \t    */
      \t   %(static) void setMode(TpmChannelMode tpmChannelMode)%(const) {
      \t      tpm->CONTROLS[%(channel)].CnSC =
      \t            (tpm->CONTROLS[%(channel)].CnSC & ~(TPM_CnSC_MS_MASK|TPM_CnSC_ELS_MASK))|tpmChannelMode;
      \t   }
      \t
      \t   /**
      \t    * Set PWM high time in ticks.
      \t    * Assumes value is less than period
      \t    *
      \t    * @param[in] highTime   PWM high time in ticks
      \t    *
      \t    * @return E_NO_ERROR on success
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) ErrorCode setHighTime(Ticks highTime)%(const) {
      \t      return %(Tpm)::setHighTime(highTime, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set PWM high time in seconds.
      \t    * Higher precision float version
      \t    *
      \t    * @param[in] highTime   PWM high time in seconds
      \t    *
      \t    * @return E_NO_ERROR on success
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) ErrorCode setHighTime(Seconds highTime)%(const) {
      \t      return %(Tpm)::setHighTime(highTime, %(channel));
      \t   }
      \t   /**
      \t    * Set PWM duty cycle.
      \t    *
      \t    * @param[in] dutyCycle  Duty-cycle as percentage
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) void setDutyCycle(int dutyCycle)%(const) {
      \t      %(Tpm)::setDutyCycle(dutyCycle, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set PWM duty cycle
      \t    *
      \t    * @param[in] dutyCycle  Duty-cycle as percentage
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) void setDutyCycle(float dutyCycle)%(const) {
      \t      %(Tpm)::setDutyCycle(dutyCycle, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set Timer event time.
      \t    *
      \t    * @param[in] offset  Event time in ticks relative to current event time (i.e. Timer channel CnV value)
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) void setDeltaEventTime(Ticks offset)%(const) {
      \t      %(Tpm)::setDeltaEventTime(offset, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set Timer event time relative to current timer count value.
      \t    *
      \t    * @param[in] offset  Event time in ticks relative to current time (i.e. Timer CNT value)
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) void setRelativeEventTime(Ticks offset)%(const) {
      \t      %(Tpm)::setRelativeEventTime(offset, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set Absolute Timer event time.
      \t    *
      \t    * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) void setEventTime(Ticks eventTime)%(const) {
      \t      %(Tpm)::setEventTime(eventTime, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Get Absolute Timer event time.
      \t    *
      \t    * @return Absolute time of last event in ticks i.e. value from timer event register
      \t    */
      \t   %(static) Ticks getEventTime()%(const) {
      \t      return %(Tpm)::getEventTime(%(channel));
      \t   }
      \t
      \t   /**
      \t    * Get Timer interrupt/event flag.
      \t    *
      \t    * @return true  Indicates an event has occurred on a channel
      \t    * @return false Indicates no event has occurred on a channel since last polled
      \t    */
      \t   %(static) bool getInterruptFlag()%(const) {
      \t      return (tpm->STATUS&CHANNEL_MASK) != 0;
      \t   }
      \t
      \t   /**
      \t    * Get and Clear Timer channel interrupt flag.
      \t    *
      \t    * @return true  Indicates an event has occurred on a channel
      \t    * @return false Indicates no event has occurred on a channel since last polled
      \t    *
      \t    * @note Only flags captured in the return value are cleared
      \t    */
      \t   %(static) bool getAndClearInterruptFlag()%(const) {
      \t      // Note - w1c flags
      \t      // so only flags captured in status are cleared
      \t      bool status = (tpm->STATUS&CHANNEL_MASK) != 0;
      \t      tpm->STATUS = CHANNEL_MASK;
      \t      return status;
      \t   }
      \t
      \t   /**
      \t    * Clear interrupt flag on channel.
      \t    */
      \t   %(static) void clearInterruptFlag()%(const) {
      \t      // Note - w1c flags
      \t      tpm->CONTROLS[CHANNEL].CnSC = TPM_CnSC_CHF_MASK;
      \t   }\n\n
   ]]></template>
   <template key="/$(_BASENAME)_CHANNEL/%(k)" namespace="all" discardRepeats="true"
      variables="tpm_pol_pol0" ><![CDATA[
      \t   /**
      \t    * Set polarity of channels.
      \t    *
      \t    * @param polarity Polarity to set
      \t    */
      \t   %(static) void setPolarity(Polarity polarity)%(const) {
      \t      if (polarity == ActiveHigh) {
      \t         tpm->POL = tpm->POL & ~CHANNEL_MASK;
      \t      }
      \t      else {
      \t         tpm->POL = tpm->POL | CHANNEL_MASK;
      \t      }
      \t   }\n\n
      ]]></template>
   </for>

   <clockCodeTemplate variable="tpm_sc_cmod"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Get %description
      \t *
      %paramDescription
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getInputClockFrequency(%params) {
      \t
      \t   switch(%paramExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>

<!-- ========== CommonInfo class =============================== -->

   <template namespace="usbdm" condition="$(_instance)==0" ><![CDATA[
      class $(_Baseclass)CommonInfo {
      \t
      public:
      \t\n
   ]]></template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod" condition="$(_instance)==0" >
   ><![CDATA[
      \t/**
      \t * Type definition for overflow and fault call-back.
      \t */
      \ttypedef void (*CallbackFunction)();
      \t
      \t/**
      \t * Callback to catch unhandled overflow and fault call-back.
      \t */
      \tstatic void unhandledCallback() {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t
      \t/**
      \t * Type definition for channel event call-back
      \t *
      \t * @param mask Mask identifying channel
      \t */
      \ttypedef void (*ChannelCallbackFunction)($(irq_parameters));
      \t
      \t/**
      \t * Callback to catch unhandled channel event call-back
      \t *
      \t * @param mask Mask identifying channel
      \t */
      \tstatic void unhandledChannelCallback(uint8_t mask) {
      \t   (void)mask;
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}\n\n
   ]]></template>

   <template namespace="usbdm" condition="$(_instance)==0" ><![CDATA[
      }; // TpmCommonInfo
      \t\n
   ]]></template>

<!-- ========== BasicInfo class =============================== -->
   <template namespace="usbdm" ><![CDATA[
      class $(_Class)BasicInfo : public TpmCommonInfo {
      \t
      public:
      \t\n
   ]]></template>

   <initialValueTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="irqHandlingMethod"
   ><![CDATA[
       \t//! Common class based callback code has been generated for this class of peripheral
       \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
       \t\n
   ]]></initialValueTemplate>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for Channel Fault and timer overflow */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Overflow IRQ handler (if individually available)
      \t */
      \tstatic void overflowIrqHandler() {
      \t   // Clear TOI flag
      \t   tpm->SC = tpm->SC & ~TPM_SC_TOF_MASK;
      \t   sCallback();
      \t}
      \t\n
   ]]></template>

   <template codeGenCondition="irqHandlingMethod" condition="tpm_fms_faultf_present" >
   <![CDATA[
      \t/**
      \t * Fault IRQ handler (if individually available)
      \t */
      \tstatic void faultIrqHandler() {
      \t   tpm->FMS = tpm->FMS & ~TPM_FMS_FAULTF_MASK;
      \t   sCallback();
      \t}
      \t\n
   ]]></template>

   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for Channel Fault and timer overflow */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Class)Info::unhandledCallback;
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/**
      \t * Callback table for programmatically set channel call-backs
      \t */
      \tstatic ChannelCallbackFunction channelCallbacks[irqCount];
      \t
      \t/**
      \t * Common IRQ handler
      \t */
      \tstatic void irqHandler() {
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" condition="tpm_fms_faultf_present" >
   <![CDATA[
      \t   if ((tpm->MODE&TPM_MODE_FAULTIE_MASK) && (tpm->FMS&TPM_FMS_FAULTF_MASK)) {
      \t      tpm->FMS = tpm->FMS & ~TPM_FMS_FAULTF_MASK;
      \t      sCallback();
      \t      return;
      \t   }\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" condition="!tpm_status_ch0f_present" >
   <![CDATA[
      \t   if ((tpm->SC&(TPM_SC_TOF_MASK|TPM_SC_TOIE_MASK)) == (TPM_SC_TOF_MASK|TPM_SC_TOIE_MASK)) {
      \t      // Clear TOI flag
      \t      tpm->SC = tpm->SC & ~TPM_SC_TOF_MASK;
      \t      sCallback();
      \t      return;
      \t   }
      \t   // Call shared handler (0 param indicates polling required as no shared status register)
      \t   channelCallbacks[0](0);
      \t
      \t   // Get status from channels
      \t   //uint32_t status = 0;
      \t   //uint32_t mask   = 0b01;
      \t   //for (unsigned channel=0; channel<NumChannels; channel++) {
      \t   //   if ((tpm->CONTROLS[channel].CnSC&TPM_CnSC_CHF_MASK)!=0) {
      \t   //      status |= mask;
      \t   //      // Clear channel flag (w0c register if read first)
      \t   //      tpm->CONTROLS[channel].CnSC = tpm->CONTROLS[channel].CnSC & ~TPM_CnSC_CHF_MASK;
      \t   //   }
      \t   //   mask <<= 1;
      \t   //}
      \t   //if (status) {
      \t   //   // Call shared handler
      \t   //   channelCallbacks[0](0);
      \t   //}
      \t}
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" condition="tpm_status_ch0f_present" >
   <![CDATA[
      \t   if ((tpm->SC&(TPM_SC_TOF_MASK|TPM_SC_TOIE_MASK)) == (TPM_SC_TOF_MASK|TPM_SC_TOIE_MASK)) {
      \t      // Clear TOI flag
      \t      tpm->SC = tpm->SC & ~TPM_SC_TOF_MASK;
      \t      sCallback();
      \t      return;
      \t   }
      \t   // Get status for channels
      \t   uint32_t status = tpm->STATUS;
      \t   if (status) {
      \t      // Call shared handler
      \t      channelCallbacks[0](status);
      \t      // Clear flags for channel events being handled (w0c register if read first)
      \t      tpm->STATUS = ~status;
      \t   }
      \t}
      \t\n
   ]]></template>

   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" ><![CDATA[
      \t/**
      \t * Callback table for programmatically set handlers for $(_Class)
      \t */
      \t$(_Class)Info::ChannelCallbackFunction $(_Class)Info::channelCallbacks[] = {\n\n
   ]]></template>
   <for keys="ch" dim="NumChannelVectors" >
      <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" ><![CDATA[
         \t   $(_Class)Info::unhandledChannelCallback,\n
      ]]></template>
   </for>
   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" ><![CDATA[
      \t};\n\n
   ]]></template>

<!--  ========== Init class =============================== -->

   <template namespace="usbdm" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * //
      \t * // $(_NAME) call-back
      \t * //
      \t * // @param status  Status reflecting active inputs
      \t * //
      \t * void $(_name)Callback() {
      \t *    ...
      \t * }
      \t *
      \t * @code
      \t * static const $(_Class)::Init $(_Class)Init {
      \t *
      \t *    // Omitted parameters are taken to be zero unless a base value is given
      \t *    TpmMode_Freerunning,           // Alignment and whether interval or free-running mode
      \t *    TpmOverflowInterrupt_Disabled, // Overflow Interrupt
      \t *    NvicPriority_Normal,           // IRQ level for this peripheral
      \t *    TpmClockSource_SystemClock,    // Clock Source
      \t *
      \t *    // Either
      \t *    TpmPrescale_DivBy16,           // Clock prescaler
      \t *    3000_ticks,                    // Counter modulo (mod) value
      \t *    // OR
      \t *    100_ms,                        // Timer period or minimum interval in seconds
      \t *
      \t *    $(_name)Callback,              // Call-back to execute on event - call-back function name
      \t *    NvicPriority_Low,              // Priority for interrupt - Low
      \t *
      \t *    // Optional base value to start with (must be last parameter)
      \t *    $(_Class)::DefaultValue
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_Class)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]></template>

<!--   Init class Member variables -->

   <initialValueTemplate namespace="usbdm" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   // Shared overflow or fault interrupt call-back
      \t   %params = nullptr;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   // Shared channel interrupt call-back
      \t   ChannelCallbackFunction channelCallbackFunction = nullptr;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="tpm_sc_action,tpm_sc_cpwms,tpm_sc_cmod,tpm_sc_ps"
   ><![CDATA[
      \t   // Status And Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
   ><![CDATA[
      \t   // %description
      \t   %paramType %registerName = %paramType_Normal;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="tpm_mod"
   ><![CDATA[
      \t   // %description
      \t   uint16_t %registerName = 0_ticks;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables= "tpm_modPeriod"
    ><![CDATA[
      \t   // %description
      \t   %paramType %registerName = 0_s;\n\n
   ]]></initialValueTemplate >


<!--  Init class Constructors -->

   <constructorTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for shared channel interrupt call-back
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param callback Shared channel interrupt call-back to set
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(ChannelCallbackFunction %paramExpression, Types... rest) : Init(rest...) {
      \t
      \t      this->channelCallbackFunction = %paramExpression;
      \t   }\n\n
   ]]></constructorTemplate>

   <constructorTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for overflow and fault interrupt call-back
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param callback Overflow and fault interrupt call-back to set
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(CallbackFunction %paramExpression, Types... rest) : Init(rest...) {
      \t
      \t      this->callbackFunction = %paramExpression;
      \t   }\n\n
   ]]></constructorTemplate>

   <constructorTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t   %registerName = %paramExpression;
      \t   }\n\n
   ]]></constructorTemplate>

   <for keys="r" values="tpm_sc_action;tpm_sc_cpwms;tpm_sc_cmod;tpm_sc_ps" >
      <constructorTemplate  namespace="usbdm" codeGenCondition="enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]></constructorTemplate>
   </for>

   <constructorTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="tpm_sc_ps, tpm_mod"
      params=",mod_ticks"
      linePadding="xxx"
      nonDefaultParams="2"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description0 and %description1
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      %params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName0    = (%registerName0&~%mask0) | %paramName0;
      \t      %registerName1   = %paramName1;
      \t   }
      \t\n
   ]]></constructorTemplate>

   <constructorTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      nonDefaultParams="2"
      variables="tpm_modPeriod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      mod   = 0;
      \t      %registerName = %paramExpression;
      \t   }
      \t\n
   ]]></constructorTemplate>

   <template namespace="usbdm" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t}; // class $(_Class)BasicInfo::Init\n\n
   ]]></template>

<!--  Init class Configure method -->

   <template key="/$(_BASENAME)/InitMethod" namespace="all" codeGenCondition="enablePeripheralSupport"  discardRepeats="true" ><![CDATA[
      \t/**
      \t * Configure TPM from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const typename Info::Init &init) {
      \t
      \t   return Info::template configure<TpmBase_T<Info>>(init);
      \t}\n\n
   ]]></template>

   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure TPM from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \ttemplate <class TPM>
      \tstatic ErrorCode configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enableClock();\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" ><![CDATA[
      \t
      \t   setCallbacks(init);\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t
      \t   uint8_t  sc    = init.sc;
      \t   uint16_t mod   = init.mod;
      \t
      \t   if (init.modperiod != 0) {
      \t
      \t      // Calculate sc.ps, mod (assumes cntin=0 or non-existent)
      \t      ErrorCode rc = TPM::calculateTimingParameters(init.modperiod, sc, mod);
      \t      if (rc != E_NO_ERROR) {
      \t         return rc;
      \t      }\n
      \t   }
      \t   // Disable timer to change clock (unable to switch directly between clock sources)
      \t   tpm->SC  = 0;
      \t
      \t   // End value for counter
      \t   tpm->MOD = mod;
      \t
      \t   // Restart counter
      \t   tpm->CNT = 0;
      \t
      \t   // Configure timer
      \t   tpm->SC  = sc;
      \t
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></template>

<!--  Default Initialisation value -->

   <initialValueTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
         tpm_sc_cpwms,
         tpm_sc_action,
         tpm_sc_cmod,
         tpm_sc_ps,
         tpm_mod"
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression\n
      \t};
      \t\n
   ]]>
   </initialValueTemplate>

<!--   ========== ChannelInit class =============================== -->

   <template namespace="usbdm" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of $(_Class)Channel
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::ChannelInit channelInit {
      \t *
      \t *    // Omitted parameters are taken to be zero unless a base value is given
      \t *    TpmChannelNum_3,            // Channel to initialise (may be unused if specifically provided as parameter)
      \t *    TpmChannelMode_Disabled ,   // Channel Mode - Disabled
      \t *    TpmChannelAction_None ,     // Action on Channel Event - No action
      \t *    TpmChannelReset_Disabled ,  // Reset counter on channel IC event - Disabled
      \t *    0_ticks,                    // Output Compare Event time
      \t *
      \t *    // Optional base value to start with (must be last parameter)
      \t *    $(_Class)::DefaultChannelInitValues[TpmChannelNum_3]
      \t * };
      \t *
      \t * // Initialise $(_NAME) from values specified above
      \t * $(_Class)::configureChannel(channelInit)
      \t * @endcode
      \t */
      \tclass ChannelInit {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr ChannelInit(const ChannelInit &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr ChannelInit() = default;
      \t\n
   ]]></template>

<!-- ChannelInit Class Member variables -->

   <initialValueTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="tpm_cnv[]"
   ><![CDATA[
      \t   // %description
      \t   uint16_t %registerName = 0_ticks;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="tpm_cnsc_mode_independent[]"
   ><![CDATA[
      \t   // Channel Status And Control Register
      \t   uint8_t cnsc = 0;
      \t\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="tpm_channel_number"
   ><![CDATA[
      \t   // %description
      \t   %paramType %registerName = %paramType_None;\n\n
   ]]></initialValueTemplate>

<!-- ChannelInit Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" namespace="all" codeGenCondition="enablePeripheralSupport"  discardRepeats="true" ><![CDATA[
      \t/**
      \t * Configure TPM channel from values specified in channelInit
      \t *
      \t * @param channelInit Class containing initialisation values for channel
      \t */
      \tstatic ErrorCode configure(const typename Info::ChannelInit &channelInit) {
      \t
      \t   return Info::configure(channelInit);
      \t}
      \t
      \t/**
      \t * Configure TPM channel from values specified in channelInit
      \t *
      \t * @param channelNum  Select channel to initialise.
      \t *                    This allows applying channelInit to arbitrary channel
      \t * @param channelInit Class containing initialisation values for channel
      \t */
      \tstatic ErrorCode configure(TpmChannelNum tpmChannelNum, const typename Info::ChannelInit &channelInit) {
      \t
      \t   return Info::configure(tpmChannelNum, channelInit);
      \t}\n\n
   ]]></template>

    <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure Channel from values specified in channelInit
      \t *
      \t * @param channelNum  Select channel to initialise.
      \t *                    This allows applying channelInit to arbitrary channel
      \t * @param channelInit Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(TpmChannelNum channelNum, const ChannelInit &channelInit) {
      \t\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" condition="tpm_combine_combine0_present" ><![CDATA[
      \t   // Configure timer combine mode
      \t   if ((channelNum&0b1) == 0) {
      \t      // Even channel value controls paired channels n,n+1
      \t      const unsigned offset = 4*channelNum;
      \t      const uint32_t mask = 0xFF<<offset;
      \t      tpm->COMBINE = (tpm->COMBINE & ~mask) | (uint32_t(channelInit.combine)<<offset);
      \t   }\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t   // Configure timer channel
      \t   tpm->CONTROLS[channelNum].CnSC = channelInit.cnsc;
      \t   tpm->CONTROLS[channelNum].CnV  = channelInit.cnv;\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" condition="tpm_filter_ch0fval" ><![CDATA[
      \t   tpm->FILTER = (tpm->FILTER & (TPM_FILTER_CH0FVAL_MASK<<(channelNum*4)))|(channelInit.filter<<(channelNum*4));\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></template>

   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure Channel from values specified in channelInit
      \t *
      \t * @param channelInit Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const ChannelInit &channelInit) {
      \t   return configure(channelInit.channel, channelInit);
      \t}
      \t\n
   ]]></template>

<!-- ChannelInit Constructors -->

   <for keys="   r                    :  c    "
      values=" tpm_cnsc_action[]      : true  ;
               tpm_cnsc_icrst[]       : true  " >
      <constructorTemplate  namespace="usbdm" codeGenCondition="enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx"
         condition="%(c)"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr ChannelInit(%params, Types... rest) : ChannelInit(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]></constructorTemplate>
   </for>

   <constructorTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="tpm_cnsc_mode_independent[]"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr ChannelInit(%params, Types... rest) : ChannelInit(rest...) {
      \t
      \t      cnsc    = %paramExpression;
      \t   }
      \t\n
   ]]></constructorTemplate>

   <for keys="r" values="
      tpm_filter_ch0fval;
      tpm_channel_number;
      tpm_cnv[]" >
      <constructorTemplate  namespace="usbdm" codeGenCondition="enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr ChannelInit(%params, Types... rest) : ChannelInit(rest...) {
         \t
         \t      %registerName = %paramExpression;
         \t   }
         \t\n
      ]]></constructorTemplate>
   </for>

<!--  ChannelInit Default Initialisation value -->

  <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)ChannelInit
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr ChannelInit DefaultChannelInitValues[] = {\n
  ]]></template>
   <for keys="ch" dim="NumChannels" >
      <initialValueTemplate  codeGenCondition="enablePeripheralSupport"
         separator=","
         terminator=","
         variables="
            tpm_cnsc_mode_independent[%(ch)],
            tpm_cnsc_action[%(ch)],
            tpm_cnsc_icrst[%(ch)],
            tpm_cnv[%(ch)],
            tpm_filter_ch%(ch)fval"
      ><![CDATA[
         \t{
         \t   TpmChannelNum_%(ch),
         %initExpression\n\t},\n
      ]]></initialValueTemplate>
   </for>
  <template  codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \n\t};\n\n
  ]]></template>

   <template namespace="usbdm" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t}; // class  $(_Baseclass)BasicInfo::ChannelInit\n\n
   ]]></template>
   <template namespace="usbdm" ><![CDATA[
      }; // class  $(_Class)BasicInfo\n\n
   ]]></template>

<!-- =========================== Set interrupt handlers =========================== -->

   <template  codeGenCondition="irqHandlingMethod" ><![CDATA[
      \t/**
      \t * Set overflow and fault interrupt call-back
      \t *
      \t * @param[in] newCallback Callback function to execute on interrupt.
      \t *                        Use nullptr to remove callback.
      \t *
      \t * @return E_NO_ERROR            No error
      \t * @return E_HANDLER_ALREADY_SET Handler already set
      \t */
      \tstatic ErrorCode setCallback(CallbackFunction newCallback) {
      \t
      \t   if (newCallback == nullptr) {
      \t      newCallback = unhandledCallback;
      \t   }
      \t   sCallback = newCallback;
      \t   return E_NO_ERROR;
      \t}
      \t\n
   ]]></template>

   <template  codeGenCondition="!irqHandlingMethod&amp;&amp;enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Set callbacks and IRQ priority from Init structure
      \t *
      \t * @note Dummy routine
      \t */
      \tstatic void setCallbacks(const Init &) {
      \t}
      \t
      \t/**
      \t * Set channel callbacks from ChannelInit structure
      \t *
      \t * @note Dummy routine
      \t */
      \tstatic void setChannelCallback(const ChannelInit &) {
      \t}
      \t\n
   ]]></template>

   <template  codeGenCondition="irqHandlingMethod&amp;&amp;(NumChannelVectors==1)" ><![CDATA[
      \t/**
      \t * Set channel call-back function
      \t * Configured for shared channel call-backs i.e. all channels use same call-back
      \t *
      \t * @param[in] callback Callback function to execute on channel interrupt.
      \t *                     Use nullptr to remove callback.
      \t *
      \t * @return E_NO_ERROR            No error
      \t * @return E_HANDLER_ALREADY_SET Handler already set
      \t *
      \t * @note The channel callback is shared by all channels of the timer.
      \t *       It is necessary to identify the originating channel in the callback
      \t */
      \tstatic ErrorCode setChannelCallback(ChannelCallbackFunction callback) {
      \t   if (callback == nullptr) {
      \t      channelCallbacks[0] = unhandledChannelCallback;
      \t      return E_NO_ERROR;
      \t   }
      #ifdef DEBUG_BUILD
      \t   // Callback is shared across all channels. Check if callback already assigned
      \t   if ((channelCallbacks[0] != unhandledChannelCallback) &&
      \t       (channelCallbacks[0] != callback)) {
      \t      return setErrorCode(ErrorCode::E_HANDLER_ALREADY_SET);
      \t   }
      #endif
      \t   channelCallbacks[0] = callback;
      \t   return E_NO_ERROR;
      \t}
      \t
      \t/**
      \t * Set callbacks and IRQ priority from Init structure
      \t *
      \t * @param init Class containing initialisation values
      \t *
      \t * @note Channel callback is shared by all channels of the timer.
      \t *       It is necessary to identify the originating channel in the callback
      \t */
      \tstatic void setCallbacks(const Init &init) {
      \t
      \t   setCallback(init.callbackFunction);
      \t   setChannelCallback(init.channelCallbackFunction);
      \t   enableNvicInterrupt(irqNums[0], init.irqlevel);
      \t}
      \t\n
   ]]></template>

   <template  codeGenCondition="irqHandlingMethod&amp;&amp;(NumChannelVectors>1)" ><![CDATA[
      \t/**
      \t * Set channel call-back function
      \t * Configured for individual channel call-backs
      \t *
      \t * @param[in] irqNum     Index of handler to set call-back for
      \t * @param[in] callback   Callback function to execute on channel interrupt.
      \t *                       Use nullptr to remove callback.
      \t *
      \t * @return E_NO_ERROR            No error
      \t * @return E_HANDLER_ALREADY_SET Handler already set
      \t *
      \t * @note Sevral channel call-backs are provided
      \t */
      \tstatic ErrorCode setChannelCallback(unsigned irqNum, ChannelCallbackFunction callback) {
      \t
      \t   if (irqNum>=irqCount) {
      \t      return setErrorCode(ErrorCode::E_ILLEGAL_PARAM);
      \t   }
      \t   if (callback == nullptr) {
      \t      channelCallbacks[irqNum] = unhandledChannelCallback;
      \t      return ErrorCode::E_NO_ERROR;
      \t   }
      \t   channelCallbacks[irqNum] = callback;
      \t   return ErrorCode::E_NO_ERROR;
      \t}
      \t
      \t/**
      \t * Set callbacks and IRQ priority from Init structure
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \t static void setCallbacks(const Init &init) {
      \t
      \t   setCallback(init.callbackFunction);
      \t   enableNvicInterrupt(irqNums[0], init.irqlevel);
      \t}
      \t\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.TpmValidate" >
   </validate>

   <projectActionList id = "tpm_files" >
      <copy source="Project_Headers/tpm.h"            target="Project_Headers/tpm.h"            overwrite="true" derived="true" />
      <copy source="Snippets/tpm-pwm-example.cpp"     target="Snippets/tpm-pwm-example.cpp"     overwrite="true" derived="true"/>
      <copy source="Snippets/tpm-ic-example.cpp"      target="Snippets/tpm-ic-example.cpp"      overwrite="true" derived="true"/>
      <copy source="Snippets/tpm-oc-example.cpp"      target="Snippets/tpm-oc-example.cpp"      overwrite="true" derived="true"/>
      <copy source="Snippets/tpm-oc-init-example.cpp" target="Snippets/tpm-oc-init-example.cpp" overwrite="true" derived="true"/>
   </projectActionList>

   <template key="/$(_BASENAME)/declarations" namespace="all" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
   /**
    * Class representing $(_NAME)
    */
   class $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n\n
   ]]></template>

   <template key="/$(_BASENAME)/quadDeclarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_Class) as Quadrature decoder
   \t */
   \ttypedef $(_Baseclass)QuadDecoder_T<$(_Class)Info> $(_Baseclass)QuadDecoder$(_instance);\n
   ]]></template>

   <!-- ************* Signal mapping ****************** -->

   <category name="Advanced" description="Advanced options" >
      <for keys="p" values="0;1" >
         <aliasOption key="/SIM/TpmClkin%(p)" locked="false"  optional="true" />
      </for>
      <aliasOption key="/SIM/sim_sopt4_tpm$(_instance)clksel" locked="false" optional="true" />
      <aliasOption key="/SIM/Tpm$(_instance)ExternalClkin"    locked="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt4_tpm$(_instance)ch0src" locked="false" optional="true" />
   </category>

   <signals enabledBy="enablePeripheralSupport" />
   <signals name="TPM" optional="true" />

</fragment>
