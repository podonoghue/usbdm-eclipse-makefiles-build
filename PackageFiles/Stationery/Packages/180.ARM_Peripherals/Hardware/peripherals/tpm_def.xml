<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- tpm_quad.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Class)BasicInfo&quot;" />

   <binaryOption key="individual_channel_call_backs" condition="@NumChannels>@NumChannelVectors"
      enabledBy="irqHandlingMethod"
      description="Use individual channel call-backs"
      toolTip="The different FTM channels use a common hardware interrupt handler. \n
               If this option is enabled, then the hardware handler examines the interrupt source \n
               and dispatches to individual channel call-backs. \n
               This is more convenient but will increase the interrupt latency. \n
               If disabled, then a common call-back is used for all channels which leads to lower latency. \n
               The common call-back will then have to determine the interrupt source if needed." >
      <choice value="false"  name="Shared call-back"      isDefault="true" />
      <choice value="true"   name="Individual call-backs" />
   </binaryOption>

   <binaryOption key="check_minimums"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      description="Check minimum interval and minimum resolution"
      toolTip="Enables boundary checks of minimum interval and minimum resolution when setting values" >
      <choice value="0" name="No checks done" />
      <choice value="1" name="Do checks"  isDefault="true" />
   </binaryOption>

   <intOption key="minimumInterval"
      enabledBy="check_minimums"
      description="Minimum usable interval in ticks"
      toolTip="This value is used as a minimum acceptable value for the timer interval in ticks\n
               when using convertMicrosecondsToTicks() or convertSecondsToTicks()"
      value="20" min="0" max="65535"/>

   <intOption key="minimumResolution"
      enabledBy="check_minimums"
      description="Minimum resolution for PWM interval"
      toolTip="This value is used as a minimum value for the timer period in ticks \n
         so that a reasonable resolution is available for PWM duty-cycle"
      value="100" min="0" max="65535" />

   <title description="Clocking" />

  <category name="Advanced" description="SIM controlled options">
      <for keys="p" values="0;1">
         <aliasOption key="/SIM/TpmClkin%(p)" locked="false"  optional="true" />
      </for>
      <aliasOption key="/SIM/sim_sopt4_tpm$(_instance)clksel" locked="false" optional="true" />
      <aliasOption key="/SIM/Tpm$(_instance)ExternalClkin"    locked="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt4_tpm$(_instance)ch0src" locked="false" optional="true" />
   </category>


   <choiceOption key="tpmClockConfig"
      target="system_tpm_clock"
      description="Clock configuration"
      toolTip="Selects the clock configuration used for calculations if System TPM Clock is chosen as clock source" >
      <choice value="0" name="@/MCG/ClockConfig[0]" ref="/SIM/system_tpm_clock[0]"  isDefault="true" />
      <choice value="1" name="@/MCG/ClockConfig[1]" ref="/SIM/system_tpm_clock[1]"  />
      <choice value="2" name="@/MCG/ClockConfig[2]" ref="/SIM/system_tpm_clock[2]"  />
      <choice value="3" name="@/MCG/ClockConfig[3]" ref="/SIM/system_tpm_clock[3]"  />
   </choiceOption>

   <intOption key="system_tpm_clock"
      locked="true"
      derived="true"
      description="System TPM Clock"
      toolTip="Based on current clock configuration"
      units="Hz"
      />

   <choiceOption key="tpm_sc_cmod"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      description="Clock Source"
      enumStem="TpmClockSource"
      target="inputClockFrequency"
      toolTip="Selects the clock source for the module">
      <choice value="0" name="Disabled"         ref="disabled"          code="0"                      enum="Disabled"        />
      <choice value="1" name="System TPM Clock" ref="system_tpm_clock"  code="SimInfo::getTpmClock()" enum="SystemTpmClock"  isDefault="true"  />
      <choice value="2" name="External clock"   ref="/SIM/Tpm$(_instance)ExternalClkin"  
         code="SimInfo::getTpm$(_instance)ExternalClockFrequency()"       enum="ExternalClock"   />
   </choiceOption>

   <intOption key="inputClockFrequency"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      locked="true"
      description="Frequency of input clock to timer"
      derived="true"
      units="Hz"/>

   <choiceOption key="tpm_sc_ps"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      description="Clock prescaler"
      enumStem="TpmPrescale"
      target="clockFrequency"
      toolTip="Selects the prescaler for the module">
      <choice value="0" name="Divide by 1"   ref="inputClockFrequency"        enum="DivBy1"  isDefault="true" />
      <choice value="1" name="Divide by 2"   ref="(inputClockFrequency)/2."   enum="DivBy2" />
      <choice value="2" name="Divide by 4"   ref="(inputClockFrequency)/4."   enum="DivBy4" />
      <choice value="3" name="Divide by 8"   ref="(inputClockFrequency)/8."   enum="DivBy8" />
      <choice value="4" name="Divide by 16"  ref="(inputClockFrequency)/16."  enum="DivBy16" />
      <choice value="5" name="Divide by 32"  ref="(inputClockFrequency)/32."  enum="DivBy32" />
      <choice value="6" name="Divide by 64"  ref="(inputClockFrequency)/64."  enum="DivBy64" />
      <choice value="7" name="Divide by 128" ref="(inputClockFrequency)/128." enum="DivBy128" />
   </choiceOption>

   <intOption key="clockFrequency"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      locked="true"
      description="Frequency of timer clock"
      toolTip="Determined from timer clock source and prescaler"
      derived="true"
      units="Hz"/>

   <floatOption key="clockPeriod"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      ref="(1.0/clockFrequency)"
      locked="true"
      description="Period of timer clock"
      toolTip="Determined from timer clock source and prescaler"
      derived="true"
      units="s"/>

   <choiceOption key="tpm_sc_mode"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      valueFormat="TPM_SC_TOF(%s),TPM_SC_CPWMS(%s)"
      enumStem="TpmMode"
      description="Alignment and whether interval or free-running mode"
      toolTip="Left-aligned   (0...mod) or\n
               Centre-aligned (0...mod...0) or\n
               Free-running   (0...maximum_value)">
      <choice value="0,0" name="Left-aligned (count up)"         enum="LeftAligned"    />
      <choice value="0,1" name="Centre-aligned (count up-down)"  enum="CentreAligned"  />
      <choice value="1,0" name="Free-running (count up)"         enum="FreeRunning"  isDefault="true" />
   </choiceOption>

   <intOption key="tpm_mod"
      description="End value for counter"
      enabledBy="tpm_sc_mode!=2"
      toolTip="The timer counts from 0 to this value"
      typeName="Ticks &amp;"
      units="ticks"
      value="65535" min="0" max="65535" />

   <floatOption key="tpm_modPeriod"
      ref="clockPeriod*((tpm_sc_mode==2)?(65536):((tpm_sc_mode==1)?(2*(tpm_mod)):(tpm_mod+1)))"
      typeName="Seconds &amp;"
      valueFormat="%s_s"
      description="Period or minimum interval of timer"
      toolTip="In left-aligned or centre-aligned this is the period of the timer\n
               In free-running mode it is the minimum interval"
      derived="true"
      min="0" units="s"/>

   <choiceOption key="tpm_sc_action" condition="tpm_sc_toie_present&amp;&amp;tpm_sc_dma_present"
      enabledBy="irqHandlingMethod"
      valueFormat="TPM_SC_TOIE(%s),TPM_SC_DMA(%s)"
      enumType="uint16_t"
      enumStem="TpmOverflowAction"
      description="Action on Counter overflow"
      toolTip="Enable interrupt and/or DMA on counter overflow">
       <choice value="0,0" name="No action"                    enum="None"             />
       <choice value="0,1" name="DMA request"                  enum="Dma"              />
       <choice value="1,0" name="Interrupt request"            enum="Interrupt"        />
       <choice value="1,1" name="Interrupt and DMA request"    enum="InterruptAndDma"  />
   </choiceOption>

   <binaryOption key="tpm_sc_action" condition="tpm_sc_toie_present&amp;&amp;!tpm_sc_dma_present"
      enabledBy="irqHandlingMethod"
      valueFormat="TPM_SC_TOIE(%s)"
      enumType="uint8_t"
      enumStem="TpmOverflowAction"
      description="Action on Counter overflow"
      toolTip="Enable interrupt on counter overflow">
      <choice value="0" name="No action"          enum="None"       />
      <choice value="1" name="Overflow Interrupt" enum="Interrupt"  />
   </binaryOption>

   <choiceOption key="tpm_channel_number"
      hidden="true"
      derived="true"
      enumType="uint8_t"
      valueFormat="%s"
      enumStem="TpmChannelNum"
      description="Channel Number"
      toolTip="Select a channel">
      <choice value="0"             name="Channel 0"      enum="0" />
      <choice value="1"             name="Channel 1"      enum="1" />
      <choice value="2"             name="Channel 2"      enum="2" />
      <choice value="3"             name="Channel 3"      enum="3" />
      <choice value="4"             name="Channel 4"      enum="4" />
      <choice value="5"             name="Channel 5"      enum="5" />
      <choice value="6"             name="Channel 6"      enum="6" />
      <choice value="7"             name="Channel 7"      enum="7" />
      <choice value="(uint8_t(-1))" name="No Channel"     enum="None" />
   </choiceOption>

   <!--  **************** Channels **************** -->

   <for keys="ch" dim="NumChannels">
      <title description="TPM Channel %(ch)" />

      <choiceOption key="tpm_cnsc_mode[%(ch)]" condition="tpm_combine_decap0_present&amp;&amp;tpm_cnsc_ms_present&amp;&amp;tpm_cnsc_els_present"
         enabledBy="/$(_BASENAME)/enablePeripheralSupport"
         valueFormat="(TPM_COMBINE_DECAPEN0(%s)&lt;&lt;8),(TPM_COMBINE_COMBINE0(%s)&lt;&lt;8),TPM_CnSC_MS(%s),TPM_CnSC_ELS(%s)"
         enumType="uint16_t"
         enumStem="TpmChannelMode"
         description="Channel Mode"
         toolTip="Determines channel operation (PWM/Input capture/Output compare)">
          <choice value="0,0,0,0" name="Disabled"                                   enum="Disabled"                               />
          <choice value="0,0,0,1" name="Input Capture Rising-edge"                  enum="InputCaptureRisingEdge"                 />
          <choice value="0,0,0,2" name="Input Capture Falling-edge"                 enum="InputCaptureFallingEdge"                />
          <choice value="0,0,0,3" name="Input Capture Either-edge"                  enum="InputCaptureEitherEdge"                 />
          <choice value="0,0,1,0" name="Output Compare No action"                   enum="OutputCompare"                          />
          <choice value="0,0,1,1" name="Output Compare Toggle"                      enum="OutputCompareToggle"                    />
          <choice value="0,0,1,2" name="Output Compare Clear"                       enum="OutputCompareClear"                     />
          <choice value="0,0,1,3" name="Output Compare Set"                         enum="OutputCompareSet"                       />
          <choice value="0,0,2,2" name="Pwm High-true Pulses"                       enum="PwmHighTruePulses"                      />
          <choice value="0,0,2,1" name="Pwm Low-true Pulses"                        enum="PwmLowTruePulses"                       />
          <choice value="1,0,0,1" name="Dual-edge Capture One-Shot Rising-edge"     enum="DualEdgeCaptureOneShotRisingEdge"       condition="(%(ch)&amp;1)==0" />
          <choice value="1,0,1,1" name="Dual-edge Capture Continuous Rising-edge"   enum="DualEdgeCaptureContinuousRisingEdge"    condition="(%(ch)&amp;1)==0" />
          <choice value="1,0,0,2" name="Dual-edge Capture One-Shot Falling-edge"    enum="DualEdgeCaptureOneShotFallingEdge"      condition="(%(ch)&amp;1)==0" />
          <choice value="1,0,1,2" name="Dual-edge Capture Continuous Falling-edge"  enum="DualEdgeCaptureContinuousFallingEdge"   condition="(%(ch)&amp;1)==0" />
          <choice value="0,1,0,2" name="Combined Positive-pulse"                    enum="CombinePositivePulse"                   condition="(%(ch)&amp;1)==0" />
          <choice value="0,1,0,1" name="Combine Negative-pulse"                     enum="CombineNegativePulse"                   condition="(%(ch)&amp;1)==0" />
      </choiceOption>

      <choiceOption key="tpm_cnsc_mode[%(ch)]" condition="!tpm_combine_decap0_present&amp;&amp;tpm_cnsc_ms_present&amp;&amp;tpm_cnsc_els_present"
         enabledBy="/$(_BASENAME)/enablePeripheralSupport"
         valueFormat="TPM_CnSC_MS(%s),TPM_CnSC_ELS(%s)"
         enumType="uint16_t"
         enumStem="TpmChannelMode"
         description="Channel Mode"
         toolTip="Determines channel operation (PWM/Input capture/Output compare)">
          <choice value="0,0" name="Disabled"                                   enum="Disabled"                               />
          <choice value="0,1" name="Input Capture Rising-edge"                  enum="InputCaptureRisingEdge"                 />
          <choice value="0,2" name="Input Capture Falling-edge"                 enum="InputCaptureFallingEdge"                />
          <choice value="0,3" name="Input Capture Either-edge"                  enum="InputCaptureEitherEdge"                 />
          <choice value="1,0" name="Output Compare No action"                   enum="OutputCompare"                          />
          <choice value="1,1" name="Output Compare Toggle"                      enum="OutputCompareToggle"                    />
          <choice value="1,2" name="Output Compare Clear"                       enum="OutputCompareClear"                     />
          <choice value="1,3" name="Output Compare Set"                         enum="OutputCompareSet"                       />
          <choice value="2,2" name="Pwm High-true Pulses"                       enum="PwmHighTruePulses"                      />
          <choice value="2,1" name="Pwm Low-true Pulses"                        enum="PwmLowTruePulses"                       />
      </choiceOption>

      <choiceOption key="tpm_cnsc_action[%(ch)]" condition="tpm_cnsc_chie_present&amp;&amp;tpm_cnsc_dma_present"
         enabledBy="irqHandlingMethod&amp;&amp;(tpm_cnsc_mode[%(ch)]!=0)"
         valueFormat="TPM_CnSC_CHIE(%s),TPM_CnSC_DMA(%s)"
         enumType="uint8_t"
         enumStem="TpmChannelAction"
         description="Action on Channel Event"
         toolTip="Enable interrupt and/or DMA on channel event">
          <choice value="0,0" name="No action"                    enum="None"             />
          <choice value="0,1" name="DMA request"                  enum="Dma"              />
          <choice value="1,0" name="Interrupt request"            enum="Interrupt"        />
          <choice value="1,1" name="Interrupt and DMA request"    enum="InterruptAndDma"  />
      </choiceOption>

      <binaryOption key="tpm_cnsc_action[%(ch)]" condition="tpm_cnsc_chie_present&amp;&amp;!tpm_cnsc_dma_present"
         enabledBy="irqHandlingMethod&amp;&amp;(tpm_cnsc_mode[%(ch)]!=0)"
         valueFormat="TPM_CnSC_CHIE(%s)"
         enumType="uint8_t"
         enumStem="TpmChannelAction"
         description="Action on Channel Event"
         toolTip="Enable interrupt on channel event">
          <choice value="0" name="No action"              enum="None"             />
          <choice value="1" name="Interrupt request"      enum="Interrupt"        />
      </binaryOption>

      <binaryOption key="tpm_cnsc_icrst[%(ch)]" condition="tpm_cnsc_icrst_present"
         enabledBy="/$(_BASENAME)/enablePeripheralSupport"
         valueFormat="TPM_CnSC_ICRST(%s)"
         enumStem="TpmChannelReset"
         enumType="uint8_t"
         description="Reset counter on channel IC event"
         toolTip="Enables the channel IC event to reset the shared counter">
         <choice value="0" name="Disabled" enum="Disabled" />
         <choice value="1" name="Enabled"  enum="Enabled"  />
      </binaryOption>

      <intOption key="tpm_cnv[%(ch)]"
         enabledBy="(tpm_cnsc_mode[%(ch)]&gt;=4)"
         valueFormat="%s_ticks"
         typeName="Ticks &amp;"
         units="ticks"
         description="Output Compare Event time in ticks"
         toolTip="This value is compared against the main counter"
         value="0" min="0" max="@tpm_mod" />

      <floatOption key="tpm_cnvEventTime[%(ch)]"
         enabledBy="(tpm_cnsc_mode[%(ch)]&gt;=4)"
         ref="tpm_cnv[%(ch)]*clockPeriod"
         valueFormat="%s_s"
         typeName="Seconds &amp;"
         derived="true"
         units="s"
         description="Output Compare Event time in seconds"
         toolTip="This value, converted to ticks, is compared against the main counter"
         value="0" min="0" max="65535" />

   </for>

   <initialValueTemplate variables="minimumResolution"
   ><![CDATA[
      \t/// %description
      \tstatic constexpr uint32_t minimumResolution  = $(?check_minimums:$(minimumResolution):0);\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate variables="minimumInterval"
   ><![CDATA[
      \t/// %description
      \tstatic constexpr uint32_t minimumInterval  = $(?check_minimums:$(minimumInterval):0);\n\n
   ]]></initialValueTemplate>

   <setTemplate key="/$(_BASENAME)/static_functions" namespace="all"
      discardRepeats="true"
      variables="tpm_sc_mode,tpm_sc_cmod,tpm_sc_ps"
      nonDefaultParams="2"
   ><![CDATA[
      \t/**
      \t * Enables clock to peripheral and configures all pins.
      \t * Configures main operating settings for timer.
      \t *
      %comments
      \t */
      \tstatic void configure(
      %params) {
      \t
      \t   // Enable clock to peripheral
      \t   enable();
      \t
      \t   // Disable timer to change settings
      \t   %register=0;
      \t
      \t   // Make sure write has completed (disabled)
      \t   (void)(%register);
      \t
      \t   // Write new value
      \t   tpm->SC = %paramExpression;
      \t}\n\n
   ]]></setTemplate>

<!--  ========== Static/Non-Static Methods =============================== -->
   <for  keys  =" k                    : static    : const    : getInputClockFrequency         : channel : Tpm       : isStatic"
         values=" non_static_functions : ''        : ' const' : getInputClockFrequencyVirtual  : CHANNEL : TpmBase   : false ;
                  static_functions     : 'static ' : ''       : 'Info::getInputClockFrequency' : channel : OwningTpm : true
   ">
      <setTemplate key="/$(_BASENAME)/%(k)" namespace="all"
         discardRepeats="true"
         variables="tpm_sc_cmod,tpm_sc_ps"
         nonDefaultParams="2"
      ><![CDATA[
         \t/**
         \t * Stop timer counter.
         \t * This simply disables the counter clock source. \n
         \t * To restart use setClockSource() or configure();
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note A illegal access trap will occur if the timer has not been enabled
         \t */
         \t%(static)void stopCounter()%(const) {
         \t  %register = (%register&~%mask1);
         \t}
         \t
         \t/**
         \t * Set %description0 and %description1
         \t *
         %comments
         \t */
         \t%(static)void selectClock(
         %params)%(const) {
         \t
         \t   // Calculate new SC value
         \t   uint32_t %registerName = (%register&~%mask)|(%paramExpression);
         \t
         \t   // Disable timer to change clock (unable to switch directly between clock sources)
         \t   %register=0;
         \t
         \t   // Make sure write has completed (disabled)
         \t   (void)(%register);
         \t
         \t   // Write new value
         \t   %register = %registerName;
         \t}\n\n
      ]]></setTemplate>

      <for keys="  f           :  n"
         values=" tpm_sc_mode  : Mode;
                  tpm_sc_cmod  : ClockSource;
                  tpm_sc_ps    : Prescaler">
         <setTemplate key="/$(_BASENAME)/%(k)" namespace="all"
            discardRepeats="true"
            variables="%(f)"
            nonDefaultParams="2"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            %comments
            \t *
            \t * @note This function will affect all channels of the timer.
            \t * @note The timer will be disabled while making changes.
            \t */
            \t%(static)void set%(n)(%params)%(const) {
            \t
            \t   // Calculate new SC value
            \t   uint32_t %registerName = (%register&~%mask)|(%paramExpression);

            \t   // Disable timer to change clock (unable to switch directly between clock sources)
            \t   %register=0;

            \t   // Make sure write has completed (disabled)
            \t   (void)(%register);

            \t   // Write new value
            \t   %register = %registerName;
            \t}
            \t
            \t/**
            \t * Get %description
            \t *
            %comments
            \t */
            \t%(static)%enumClass get%(n)()%(const) {
            \t
            \t   return (%enumClass)(%register&~%mask);
            \t}\n\n
         ]]></setTemplate>
      </for>

      <for keys="  f           :  n"
         values=" tpm_mod      : CounterMaximumValue">
         <setTemplate key="/$(_BASENAME)/%(k)" namespace="all"
            discardRepeats="true"
            variables="%(f)"
            nonDefaultParams="2"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t * This value is write-buffered and updated by MOD synchronisation
            \t *
            %comments
            \t *
            \t * @note This function will affect all channels of the timer.
            \t */
            \t%(static)void set%(n)(%params)%(const) {
            \t
            \t   // Write new value
            \t   %register = %paramExpression;
            \t}
            \t
            \t/**
            \t * Get %description
            \t *
            %comments
            \t */
            \t%(static)%enumClass get%(n)()%(const) {
            \t
            \t   return (%enumClass)%register;
            \t}\n\n
         ]]></setTemplate>
      </for>

      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true"><![CDATA[
         \t/**
         \t * Calculate TPM timing parameters to achieve a given period
         \t *
         \t * @param[in]    period  Period in seconds
         \t * @param[inout] sc      Proposed TPM.SC value (must include CLKS, CPWMS fields)
         \t *                       PS field is updated
         \t * @param[out]   mod     Calculated TPM.MOD values
         \t *
         \t * @return E_NO_ERROR   Success!!
         \t * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled)
         \t * @return E_TOO_LARGE  Requested period is too large
         \t */
         \t%(static)ErrorCode calculateTimingParameters(Seconds period, uint8_t &sc, uint16_t &mod)%(const) {
         \t
         \t   float inputClock = %(getInputClockFrequency)((TpmClockSource)(sc&TPM_SC_CMOD_MASK));
         \t   unsigned prescaleFactor=1;
         \t   unsigned prescalerValue=0;
         \t
         \t   // Check if CPWMS is set (affects period calculation)
         \t   bool centreAligned = (sc&TPM_SC_CPWMS_MASK);
         \t
         \t   constexpr uint32_t maxModValue = TPM_MOD_MOD_MASK;
         \t
         \t   while (prescalerValue<=7) {
         \t      float clock    = inputClock/prescaleFactor;
         \t      float modValueF = period*clock;
         \t      if (centreAligned) {
         \t         // PeriodInTicks = 2*MOD
         \t         modValueF = modValueF/2;
         \t      }
         \t      else {
         \t         // PeriodInTicks = MOD+1
         \t         modValueF = modValueF - 1;
         \t      }
         \t      unsigned modValue = round(modValueF);\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" codeGenCondition="%(isStatic)" ><![CDATA[
         \t      if (modValue < Info::minimumResolution) {
         \t         usbdm_assert(false, "Interval is too short");
         \t         // Too short a period for minimum resolution
         \t         return setErrorCode(E_TOO_SMALL);
         \t      }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true"><![CDATA[
         \t      if (modValue <= maxModValue) {
         \t         sc   = (sc&~TPM_SC_PS_MASK)|TPM_SC_PS(prescalerValue);
         \t         mod  = modValue;
         \t         return E_NO_ERROR;
         \t      }
         \t      prescalerValue++;
         \t      prescaleFactor <<= 1;
         \t   }
         \t   // Too long a period
         \t   usbdm_assert(false, "Interval is too long");
         \t   return setErrorCode(E_TOO_LARGE);
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true"><![CDATA[
         \t/**
         \t * Set period
         \t *
         \t * @param[in] period   Period in seconds as a float
         \t *
         \t * @return E_NO_ERROR  => success
         \t * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
         \t * @return E_TOO_LARGE  Requested period is too large.
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note Adjusts Timer pre-scaler to appropriate value.
         \t * @note The counter load value (CNTIN) is cleared
         \t * @note The counter modulo value (MOD) is modified to obtain the requested period
         \t * @note The Timer is stopped while being modified.
         \t * @note The Timer counter is restarted from zero
         \t */
         \t%(static)ErrorCode setPeriod(Seconds period)%(const) {
         \t
         \t   uint16_t modValue = 0;
         \t
         \t   uint8_t sc = tpm->SC;
         \t
         \t   ErrorCode rc = calculateTimingParameters(period, sc, modValue);
         \t
         \t   if (rc != E_NO_ERROR) {
         \t      return rc;
         \t   }
         \t   // Disable timer to change prescaler and period
         \t   tpm->SC = 0;
         \t
         \t   // Configure for modulo operation
         \t   tpm->MOD   = modValue;
         \t
         \t   // Clear counter
         \t   tpm->CNT   = 0;
         \t
         \t   // Set prescale and enable timer
         \t   tpm->SC  = sc;
         \t
         \t   return E_NO_ERROR;
         \t}
         \t
         \t/**
         \t * Set maximum interval for input-capture or output compare.
         \t * Input Capture and Output Compare will be able to operate over
         \t * at least this period without overflow.
         \t *
         \t * @param[in] interval Interval in seconds as a float
         \t *
         \t * @return E_NO_ERROR  => success
         \t * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
         \t * @return E_TOO_LARGE  Requested period is too large.
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note Adjusts Timer pre-scaler to appropriate value.
         \t * @note TPM counter is configured for free-running mode i.e. 0-65535
         \t * @note The Timer is stopped while being modified.
         \t * @note The Timer counter is restarted from zero
         \t */
         \t%(static)ErrorCode setMaximumInterval(Seconds interval)%(const) {
         \t
         \t   uint16_t       modValue;
         \t
         \t   uint8_t sc = tpm->SC;
         \t
         \t   ErrorCode rc = calculateTimingParameters(interval, sc, modValue);
         \t   if (rc != E_NO_ERROR) {
         \t      return rc;
         \t   }
         \t
         \t   // Disable timer to change prescaler and period
         \t   tpm->SC = 0;
         \t
         \t   // Configure for free-running mode
         \t   // This is the usual value for IC or OC set-up
         \t   tpm->MOD   = 0_ticks;
         \t
         \t   // Clear counter
         \t   tpm->CNT   = 0;
         \t
         \t   // Set prescale and enable timer
         \t   tpm->SC  = sc;
         \t
         \t   return E_NO_ERROR;
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true"><![CDATA[
         \t/**
         \t * Get frequency of timer tick
         \t *
         \t * @return Timer frequency in Hz
         \t */
         \t%(static)float getTickFrequencyAsFloat()%(const) {
         \t
         \t   // Calculate timer prescale factor
         \t   float prescaleFactor = 1<<((tpm->SC&TPM_SC_PS_MASK)>>TPM_SC_PS_SHIFT);
         \t
         \t   return %(getInputClockFrequency)((TpmClockSource)(tpm->SC&TPM_SC_CMOD_MASK))/prescaleFactor;
         \t}
         \t
         \t/**
         \t * Get clock frequency
         \t *
         \t * @return Frequency as a uint32_t in Hz (may underflow)
         \t */
         \t%(static)uint32_t getTickFrequencyAsInt()%(const) {
         \t
         \t   // Calculate timer prescale factor
         \t   int prescaleFactor = 1<<((tpm->SC&TPM_SC_PS_MASK)>>TPM_SC_PS_SHIFT);
         \t
         \t   return %(getInputClockFrequency)((TpmClockSource)(tpm->SC&TPM_SC_CMOD_MASK))/prescaleFactor;
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true"><![CDATA[
         \t/**
         \t * Convert time in microseconds to time in ticks
         \t *
         \t * @param[in] time Time in microseconds
         \t *
         \t * @return Time in ticks
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
         \t * @note Will set error code if calculated value is less the Timer minimum resolution
         \t */
         \t%(static)Ticks convertMicrosecondsToTicks(int time)%(const) {
         \t
         \t   // Calculate period
         \t   uint32_t tickRate = getTickFrequencyAsInt();
         \t   uint64_t rv       = (static_cast<uint64_t>(time)*tickRate)/1000000;
         \t   usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" codeGenCondition="%(isStatic)" ><![CDATA[
         \t   if (rv < Info::minimumInterval) {
         \t      // Attempt to set too short a period
         \t      setErrorCode(E_TOO_SMALL);
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t   return Ticks(uint32_t(rv));
         \t}
         \t
         \t/**
         \t * Converts time in seconds to time in ticks
         \t *
         \t * @param[in] seconds Time interval in seconds
         \t *
         \t * @return Time in ticks
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value (see setMaximumInterval()). \n
         \t * @note Will set error code if calculated value is less the minimum resolution
         \t */
         \t%(static)Ticks convertSecondsToTicks(Seconds seconds)%(const) {
         \t
         \t   // Calculate period
         \t   float    tickRate = getTickFrequencyAsFloat();
         \t   uint64_t rv       = rintf((float)seconds*tickRate);
         \t   usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" codeGenCondition="%(isStatic)" ><![CDATA[
         \t   if (rv < Info::minimumInterval) {
         \t      // Attempt to set too short a period
         \t      setErrorCode(E_TOO_SMALL);
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
         \t   return Ticks(uint32_t(rv));
         \t}
         \t
         \t/**
         \t * Convert time in ticks to time in microseconds
         \t *
         \t * @param[in] timeInTicks Time in ticks
         \t *
         \t * @return Time in microseconds
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
         \t */
         \t%(static)uint32_t convertTicksToMicroseconds(Ticks timeInTicks)%(const) {
         \t
         \t   // Calculate period
         \t   uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000000)/getTickFrequencyAsInt();
         #ifdef DEBUG_BUILD
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }
         \t   if (rv == 0) {
         \t      // Attempt to set too short a period
         \t      setErrorCode(E_TOO_SMALL);
         \t   }
         #endif
         \t   return rv;
         \t}
         \t
         \t/**
         \t * Convert time in ticks to time in milliseconds
         \t *
         \t * @param[in] timeInTicks Time in ticks
         \t *
         \t * @return Time in milliseconds
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
         \t */
         \t%(static)uint32_t convertTicksToMilliseconds(Ticks timeInTicks)%(const) {
         \t
         \t   // Calculate period
         \t   uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000)/getTickFrequencyAsInt();
         #ifdef DEBUG_BUILD
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }
         \t   if (rv == 0) {
         \t      // Attempt to set too short a period
         \t      setErrorCode(E_TOO_SMALL);
         \t   }
         #endif
         \t   return rv;
         \t}
         \t
         \t/**
         \t * Convert time in ticks to time in seconds
         \t *
         \t * @param[in] timeInTicks Time in ticks
         \t *
         \t * @return Time in seconds
         \t */
         \t%(static)Seconds convertTicksToSeconds(Ticks timeInTicks)%(const) {
         \t   return static_cast<float>((unsigned)timeInTicks)/getTickFrequencyAsFloat();
         \t}
         \t/**
         \t * Get Timer count
         \t *
         \t * @return Timer count value
         \t */
         \t%(static)uint16_t getTime()%(const) {
         \t   return tpm->CNT;
         \t}
         \t\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true"><![CDATA[
         \t/**
         \t * Reset counter to initial value
         \t */
         \t%(static)void resetTime()%(const) {
         \t   // Note: writing ANY value loads CNT from CNTIN
         \t   tpm->CNT = 0;
         \t}
         \t
         \t/**
         \t * Get timer event flags
         \t *
         \t * @return Flags indicating if an event has occurred on a channel
         \t *         There is one bit for each channel
         \t */
         \t%(static)unsigned getInterruptFlags()%(const) {
         \t   return tpm->STATUS;
         \t}
         \t
         \t/**
         \t * Clear selected timer event flags
         \t *
         \t * @param channelMask Mask indicating which channel flags to clear
         \t *                    There is one bit for each channel
         \t *
         \t * @note Flags will not be cleared if the channel is configured for DMA
         \t */
         \t%(static)void clearSelectedInterruptFlags(uint32_t channelMask)%(const) {
         \t   // Clear flags (w1c)
         \t   tpm->STATUS = channelMask;
         \t}
         \t
         \t/**
         \t * Clear timer overflow event flag
         \t */
         \t%(static)void clearOverflowInterruptFlag() {
         \t   // Clear TOI flag (w1c)
         \t   tpm->STATUS = TPM_STATUS_TOF_MASK;
         \t}
         \t
         \t/**
         \t * Get and clear timer event flags
         \t *
         \t * @return Flags indicating if an event has occurred on a channel
         \t *         There is one bit for each channel
         \t *
         \t * @note Only flags captured in the return value are cleared
         \t * @note Flags will not be cleared if the channel is configured for DMA
         \t */
         \t%(static)unsigned getAndClearInterruptFlags()%(const) {
         \t   // Note - w1c flags
         \t   // so only flags captured in status are cleared
         \t   unsigned status = tpm->STATUS;
         \t   tpm->STATUS = status;
         \t   return status;
         \t}
         \t
         \t/**
         \t * Enable/disable Timer Overflow interrupts
         \t */
         \t%(static)void enableTimerOverflowInterrupts()%(const) {
         \t   tpm->SC = tpm->SC | TPM_SC_TOIE_MASK;
         \t}
         \t
         \t/**
         \t * Disable Timer Overflow interrupts
         \t */
         \t%(static)void disableTimerOverflowInterrupts()%(const) {
         \t   tpm->SC = tpm->SC & ~TPM_SC_TOIE_MASK;
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true"
         variables="tpm_pol_pol0_present" ><![CDATA[
         \t/**
         \t * Set polarity of all channels
         \t *
         \t * @param channelMask   Bit mask 0 => active-high, 1 => active-low
         \t */
         \t%(static) void setPolarity(uint32_t channelMask)%(const) {
         \t   tpm->POL = channelMask;
         \t}
         \t
         \t/**
         \t * Set polarity of selected channels
         \t *
         \t * @param polarity      Polarity to set
         \t * @param channelMask   Bit mask indicating channels to affect
         \t */
         \t%(static)void setPolarity(Polarity polarity, uint32_t channelMask)%(const) {
         \t   if (polarity) {
         \t      tpm->POL = tpm->POL & ~channelMask;
         \t   }
         \t   else {
         \t      tpm->POL = tpm->POL | channelMask;
         \t   }
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="all" discardRepeats="true"><![CDATA[
         \t/*
         \t * *****************************************************************
         \t *          Channel functions
         \t * *****************************************************************
         \t */
         \t/**
         \t * Set PWM duty cycle.
         \t * Higher precision float version
         \t *
         \t * @param[in] dutyCycle  Duty-cycle as percentage (float)
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note The actual CnV register update may be delayed by the register synchronisation mechanism
         \t */
         \t%(static)void setDutyCycle(float dutyCycle, int channel)%(const) {
         \t   if (tpm->SC&TPM_SC_CPWMS_MASK) {
         \t      tpm->CONTROLS[channel].CnV  = round((dutyCycle*tpm->MOD)/100.0f);
         \t   }
         \t   else {
         \t      tpm->CONTROLS[channel].CnV  = round((dutyCycle*(tpm->MOD+1))/100.0f);
         \t   }
         \t}
         \t
         \t/**
         \t * Set PWM duty cycle
         \t *
         \t * @param[in] dutyCycle  Duty-cycle as percentage
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note The actual CnV register update may be delayed by the register synchronisation mechanism
         \t */
         \t%(static)void setDutyCycle(int dutyCycle, int channel)%(const) {
         \t   if (tpm->SC&TPM_SC_CPWMS_MASK) {
         \t      tpm->CONTROLS[channel].CnV  = (dutyCycle*tpm->MOD)/100;
         \t   }
         \t   else {
         \t      tpm->CONTROLS[channel].CnV  = (dutyCycle*(tpm->MOD+1))/100;
         \t   }
         \t}
         \t
         \t/**
         \t * Set PWM high time in ticks
         \t * Assumes value is less than period
         \t *
         \t * @param[in] highTime   PWM high time in ticks
         \t * @param[in] channel    Timer channel
         \t *
         \t * @return E_NO_ERROR on success
         \t * @return E_TOO_LARGE on success
         \t *
         \t * @note The actual CnV register update may be delayed by the register synchronisation mechanism
         \t */
         \t%(static)ErrorCode setHighTime(Ticks highTime, int channel)%(const) {
         \t
         \t   if (tpm->SC&TPM_SC_CPWMS_MASK) {
         \t      // In CPWM the pulse width is doubled
         \t      highTime = (highTime+1_ticks)/2U;
         \t   }
         #ifdef DEBUG_BUILD
         \t   if ((unsigned)highTime > tpm->MOD) {
         \t      return setErrorCode(E_TOO_LARGE);
         \t   }
         #endif
         \t   tpm->CONTROLS[channel].CnV  = (unsigned)highTime;
         \t   return E_NO_ERROR;
         \t}
         \t
         \t/**
         \t * Get Timer event time
         \t *
         \t * @param[in] channel    Timer channel
         \t *
         \t * @return Absolute time of last event in ticks i.e. value from timer event register
         \t */
         \t%(static)Ticks getEventTime(int channel)%(const) {
         \t   return (unsigned)(tpm->CONTROLS[channel].CnV);
         \t}
         \t
         \t/**
         \t * Set Timer event time
         \t *
         \t * This value is write-buffered and updated by Cnv synchronisation.
         \t *
         \t * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
         \t * @param[in] channel    Timer channel
         \t */
         \t%(static)void setEventTime(Ticks eventTime, int channel)%(const) {
         \t   tpm->CONTROLS[channel].CnV = (unsigned)eventTime;
         \t}
         \t
         \t/**
         \t * Set Timer event time relative to current event time
         \t *
         \t * @param[in] offset     Event time in ticks relative to current event time (i.e. Timer channel CnV value)
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note This value is write-buffered and updated by CnV synchronisation.
         \t */
         \t%(static)void setDeltaEventTime(Ticks offset, int channel)%(const) {
         \t   tpm->CONTROLS[channel].CnV = tpm->CONTROLS[channel].CnV + (unsigned)offset;
         \t}
         \t
         \t/**
         \t * Set Timer event time relative to current timer count value
         \t *
         \t * @param[in] offset     Event time in ticks relative to current time (i.e. Timer CNT value)
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note This value is write-buffered and updated by CnV synchronisation.
         \t */
         \t%(static)void setRelativeEventTime(Ticks offset, int channel)%(const) {
         \t   tpm->CONTROLS[channel].CnV = tpm->CNT + (unsigned)offset;
         \t}
         \t
         \t/**
         \t * Set PWM high time in seconds
         \t *
         \t * @param[in] highTime   PWM high time in seconds
         \t * @param[in] channel    Timer channel
         \t *
         \t * @return E_NO_ERROR on success
         \t *
         \t * @note The actual CnV register update may be delayed by the TPM register synchronisation mechanism
         \t */
         \t%(static)ErrorCode setHighTime(Seconds highTime, int channel)%(const) {
         \t   return setHighTime(convertSecondsToTicks(highTime), channel);
         \t}
         \t
      ]]></template>

<!-- Channel Functions -->

   <template key="/$(_BASENAME)_CHANNEL/%(k)" namespace="all" discardRepeats="true"
      variables="tpm_cnsc_action[]"
      linePadding="xxx"
   ><![CDATA[
      \t
      \t   /**
      \t    * Set %description
      \t    *
      %paramDescription
      \t    *
      \t    * @note This method has the side-effect of clearing the register update synchronisation i.e.
      \t    *       pending CnV register updates are discarded.
      \t    */
      \t   %(static) void setAction(%params)%(const) {
      \t      tpm->CONTROLS[%(channel)].CnSC =
      \t           (tpm->CONTROLS[%(channel)].CnSC & ~%mask) | %paramExpression;
      \t   }\n\n
   ]]></template>

   <template key="/$(_BASENAME)_CHANNEL/%(k)" namespace="all" discardRepeats="true" ><![CDATA[
      \t   /**
      \t    * Configure channel.
      \t    * No affect on shared settings of owning Timer
      \t    *
      \t    * @param[in] tpmChannelMode    Mode of operation for channel
      \t    * @param[in] tpmChannelAction  Whether to enable the interrupt or DMA function on this channel
      \t    *
      \t    * @note This method has the side-effect of clearing the register update synchronisation i.e.
      \t    *       pending CnV register updates are discarded.
      \t    */
      \t   %(static) void configure(
      \t         TpmChannelMode    tpmChannelMode,
      \t         TpmChannelAction  tpmChannelAction = TpmChannelAction_None)%(const) {
      \t
      \t      tpm->CONTROLS[%(channel)].CnSC = tpmChannelMode|tpmChannelAction;
      \t   }
      \t
      \t   /**
      \t    * Disables timer channel (sets mode to TpmChannelMode_Disabled)
      \t    */
      \t   %(static) void disable()%(const) {
      \t      setMode(TpmChannelMode_Disabled);
      \t   }
      \t
      \t   /**
      \t    * Get channel mode.
      \t    *
      \t    * @return Current mode of operation for the channel
      \t    */
      \t   %(static) TpmChannelMode getMode()%(const) {
      \t      return static_cast<TpmChannelMode>(tpm->CONTROLS[%(channel)].CnSC &
      \t            (TPM_CnSC_MS_MASK|TPM_CnSC_ELS_MASK));
      \t   }
      \t
      \t   /**
      \t    * Set channel mode
      \t    *
      \t    * @param[in] tpmChannelMode      Mode of operation for channel
      \t    *
      \t    * @note This method has the side-effect of clearing the register update synchronisation i.e.
      \t    *       pending CnV register updates are discarded.
      \t    */
      \t   %(static) void setMode(TpmChannelMode tpmChannelMode)%(const) {
      \t      tpm->CONTROLS[%(channel)].CnSC =
      \t            (tpm->CONTROLS[%(channel)].CnSC & ~(TPM_CnSC_MS_MASK|TPM_CnSC_ELS_MASK))|tpmChannelMode;
      \t   }
      \t
      \t   /**
      \t    * Set PWM high time in ticks.
      \t    * Assumes value is less than period
      \t    *
      \t    * @param[in] highTime   PWM high time in ticks
      \t    *
      \t    * @return E_NO_ERROR on success
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) ErrorCode setHighTime(Ticks highTime)%(const) {
      \t      return %(Tpm)::setHighTime(highTime, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set PWM high time in seconds.
      \t    * Higher precision float version
      \t    *
      \t    * @param[in] highTime   PWM high time in seconds
      \t    *
      \t    * @return E_NO_ERROR on success
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) ErrorCode setHighTime(Seconds highTime)%(const) {
      \t      return %(Tpm)::setHighTime(highTime, %(channel));
      \t   }
      \t   /**
      \t    * Set PWM duty cycle.
      \t    *
      \t    * @param[in] dutyCycle  Duty-cycle as percentage
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) void setDutyCycle(int dutyCycle)%(const) {
      \t      %(Tpm)::setDutyCycle(dutyCycle, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set PWM duty cycle
      \t    *
      \t    * @param[in] dutyCycle  Duty-cycle as percentage
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) void setDutyCycle(float dutyCycle)%(const) {
      \t      %(Tpm)::setDutyCycle(dutyCycle, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set Timer event time.
      \t    *
      \t    * @param[in] offset  Event time in ticks relative to current event time (i.e. Timer channel CnV value)
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) void setDeltaEventTime(Ticks offset)%(const) {
      \t      %(Tpm)::setDeltaEventTime(offset, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set Timer event time relative to current timer count value.
      \t    *
      \t    * @param[in] offset  Event time in ticks relative to current time (i.e. Timer CNT value)
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) void setRelativeEventTime(Ticks offset)%(const) {
      \t      %(Tpm)::setRelativeEventTime(offset, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set Absolute Timer event time.
      \t    *
      \t    * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
      \t    *
      \t    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
      \t    */
      \t   %(static) void setEventTime(Ticks eventTime)%(const) {
      \t      %(Tpm)::setEventTime(eventTime, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Get Absolute Timer event time.
      \t    *
      \t    * @return Absolute time of last event in ticks i.e. value from timer event register
      \t    */
      \t   %(static) Ticks getEventTime()%(const) {
      \t      return %(Tpm)::getEventTime(%(channel));
      \t   }
      \t
      \t   /**
      \t    * Get Timer interrupt/event flag.
      \t    *
      \t    * @return true  Indicates an event has occurred on a channel
      \t    * @return false Indicates no event has occurred on a channel since last polled
      \t    */
      \t   %(static) bool getInterruptFlag()%(const) {
      \t      return (tpm->STATUS&CHANNEL_MASK) != 0;
      \t   }
      \t
      \t   /**
      \t    * Get and Clear Timer channel interrupt flag.
      \t    *
      \t    * @return true  Indicates an event has occurred on a channel
      \t    * @return false Indicates no event has occurred on a channel since last polled
      \t    *
      \t    * @note Only flags captured in the return value are cleared
      \t    */
      \t   %(static) bool getAndClearInterruptFlag()%(const) {
      \t      // Note - w1c flags
      \t      // so only flags captured in status are cleared
      \t      bool status = (tpm->STATUS&CHANNEL_MASK) != 0;
      \t      tpm->STATUS = CHANNEL_MASK;
      \t      return status;
      \t   }
      \t
      \t   /**
      \t    * Clear interrupt flag on channel.
      \t    */
      \t   %(static) void clearInterruptFlag()%(const) {
      \t      // Note - w1c flags
      \t      tpm->CONTROLS[CHANNEL].CnSC = TPM_CnSC_CHF_MASK;
      \t   }\n\n
   ]]></template>
   <template key="/$(_BASENAME)_CHANNEL/%(k)" namespace="all" discardRepeats="true"
      variables="tpm_pol_pol0_present" ><![CDATA[
      \t   /**
      \t    * Set polarity of channels.
      \t    *
      \t    * @param polarity Polarity to set
      \t    */
      \t   %(static) void setPolarity(Polarity polarity)%(const) {
      \t      %(Tpm)::setPolarity(polarity, CHANNEL_MASK);
      \t   }\n\n
      ]]></template>
   </for>

   <clockCodeTemplate variable="tpm_sc_cmod"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Get %description
      \t *
      %paramDescription
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getInputClockFrequency(%params) {
      \t
      \t   switch(%paramExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>

<!--  ========== TPM Init class =============================== -->

   <template key="init_description" namespace="all" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * @code
      \t * static const Tpm$(_instance)::Init tpmInit {
      \t *
      \t *    // Omitted parameters are taken to be zero unless a base value is given
      \t *    TpmMode_Freerunning,           // Alignment and whether interval or free-running mode
      \t *    TpmOverflowInterrupt_Disabled, // Overflow Interrupt
      \t *    NvicPriority_Normal,           // IRQ level for this peripheral
      \t *    TpmClockSource_SystemClock,    // Clock Source
      \t *
      \t *    // Either
      \t *    TpmPrescale_DivBy16,           // Clock prescaler
      \t *    10_ticks, 3000_ticks,          // Counter start (cntin) and end (mod) values
      \t *    // OR
      \t *    100_ms,                        // Timer period or minimum interval in seconds
      \t *
      \t *    // Optional base value to start with (must be last parameter)
      \t *    $(_Class)::DefaultValue
      \t * };
      \t *
      \t * // Initialise TPM from values specified above
      \t * Tpm$(_instance)::configure(tpmInit)
      \t * @endcode
      \t */
   ]]></template>

   <template namespace="usbdm" ><![CDATA[
      class $(_Class)BasicInfo {
      \t
      public:\n\n
   ]]></template>

   <setTemplate namespace="usbdm"
       variables="irqHandlingMethod">
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) channel interrupt call-back
      \t *
      \t * @param[in] status Flags indicating interrupt source channel(s)
      \t */
      \ttypedef void (*ChannelCallbackFunction)(uint8_t status);
      \t
      \t/**
      \t * Type definition for $(_Class) overflow and fault call-back.
      \t */
      \ttypedef void (*CallbackFunction)();\n\n
   ]]></setTemplate>

   <template namespace="usbdm"><![CDATA[
$(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]></template>

<!--  Member variables -->

   <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;!individual_channel_call_backs"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   /// Shared channel interrupt call-back
      \t   ChannelCallbackFunction channelCallbackFunction = nullptr;\n\n
   ]]></setTemplate>

   <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   /// Shared overflow or fault interrupt call-back
      \t   CallbackFunction callbackFunction = nullptr;\n\n
   ]]></setTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="tpm_sc_action,tpm_sc_cpwms,tpm_sc_cmod,tpm_sc_ps,tpm_sc_mode"
   ><![CDATA[
      \t   /// Status And Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName = %enumClass_Normal;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="tpm_mod"
   ><![CDATA[
      \t   /// %description
      \t   uint16_t %registerName = 0_ticks;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables= "tpm_modPeriod"
    ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName = 0_s;\n\n
   ]]></initialValueTemplate >

<!--  Configure method -->

   <setTemplate variables="tpm_sc_cmod" discardRepeats="true" key="/$(_BASENAME)/InitMethod" namespace="all" ><![CDATA[
      \t/**
      \t * Configure TPM from values specified in init
      \t
      \t * @param init Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const typename Info::Init &init) {
      \t
      \t   // Enable peripheral clock and map pins
      \t   enable();
      \t
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      Info::setCallbacks(init);
      \t   }
      \t
      \t   uint8_t  sc    = init.sc;
      \t   uint16_t mod   = init.mod;
      \t
      \t   if (init.modperiod != 0) {
      \t
      \t      // Calculate sc.ps, mod (assumes cntin=0)
      \t      ErrorCode rc = calculateTimingParameters(init.modperiod, sc, mod);
      \t      if (rc != E_NO_ERROR) {
      \t         return rc;
      \t      }
      \t   }
      \t   if (init.sc&TpmMode_FreeRunning) {
      \t      // Make free-running
      \t      mod   = TPM_MOD_MOD_MASK;
      \t   }
      \t   // Disable timer to change clock (unable to switch directly between clock sources)
      \t   tpm->SC  = 0;
      \t
      \t   // End value for counter
      \t   tpm->MOD = mod;
      \t
      \t   // Restart counter
      \t   tpm->CNT = 0;
      \t
      \t   // Configure timer
      \t   tpm->SC  = sc;
      \t
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></setTemplate>

<!--  Constructors -->

   <constructorTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;!individual_channel_call_backs"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for shared channel interrupt call-back
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param callback Shared channel interrupt call-back to set
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(ChannelCallbackFunction %paramExpression, Types... rest) : Init(rest...) {
      \t
      \t      this->channelCallbackFunction = %paramExpression;
      \t   }\n\n
   ]]></constructorTemplate>

   <constructorTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for overflow and fault interrupt call-back
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param callback Overflow and fault interrupt call-back to set
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(CallbackFunction %paramExpression, Types... rest) : Init(rest...) {
      \t
      \t      this->callbackFunction = %paramExpression;
      \t   }\n\n
   ]]></constructorTemplate>

   <constructorTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></constructorTemplate>

   <for keys="r" values="tpm_sc_action;tpm_sc_cpwms;tpm_sc_mode;tpm_sc_cmod">
      <constructorTemplate  namespace="usbdm"
         variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]></constructorTemplate>
   </for>

   <constructorTemplate namespace="usbdm"
      variables="tpm_sc_ps, tpm_mod"
      params=",mod_ticks"
      linePadding="xxx"
      nonDefaultParams="2"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description0 and %description1
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(
         %params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName0    = (%registerName0&~%mask0) | %enumParam0;
         \t      %registerName1   = %enumParam1;
         \t   }
         \t\n
   ]]></constructorTemplate>

   <constructorTemplate namespace="usbdm"
      nonDefaultParams="2"
      variables="tpm_modPeriod"
      linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      mod   = 0;
         \t      %registerName = %paramExpression;
         \t   }
         \t\n
   ]]></constructorTemplate>

   <template namespace="usbdm" ><![CDATA[
      \t};\n\n
   ]]></template>

<!--  Default Initialisation value -->

   <template codeGenCondition="/$(_BASENAME)/irqHandlingMethod"><![CDATA[
   \t/**
   \t * Callback function for Channel Fault and timer overflow
   \t */
   \tstatic CallbackFunction callback;
   \t\n
   ]]></template>

   <template><![CDATA[
   \t/**
   \t * Indicates if individual call-backs can be set for each channel
   \t */
   \tstatic constexpr bool IndividualCallbacks = $(individual_channel_call_backs);
   \t\n
   ]]></template>

   <template codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;!individual_channel_call_backs"><![CDATA[
   \t/**
   \t * Callback table for programmatically set channel call-backs
   \t * One entry for hardware interrupt vector (all hardware interrupt vectors are mapped to a single channel call-back by software)
   \t */
   \tstatic ChannelCallbackFunction channelCallbacks[1];
   \t\n
   ]]></template>

   <template codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;individual_channel_call_backs"><![CDATA[
   \t/**
   \t * Callback table for programmatically set channel call-backs
   \t * One entry for each channel (one hardware interrupt vector is mapped to multiple channel call-backs by software)
   \t */
   \tstatic ChannelCallbackFunction channelCallbacks[NumChannels];
   \t\n
   ]]></template>

   <initialValueTemplate
      separator=","
      terminator=","
      variables="
         tpm_sc_mode,
         tpm_sc_action,
         tpm_sc_cmod,
         tpm_sc_ps,
         tpm_cntin,
         tpm_mod"
   ><![CDATA[
      \t/**
      \t * Default initialisation value for Ftm$(_instance)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></initialValueTemplate>

<!--  ========== TPM CHANNEL Init class =============================== -->

   <template key="channel_init_description" namespace="all"><![CDATA[
      \t/**
      \t * Class used to do initialisation of Tpm$(_instance)Channel
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * @code
      \t * static const Tpm$(_instance)::ChannelInit channelInit {
      \t *
      \t *    // Omitted parameters are taken to be zero unless a base value is given
      \t *    TpmChannelNum_3,            // Channel to initialise
      \t *    TpmChannelMode_Disabled ,   // Channel Mode - Disabled
      \t *    TpmChannelAction_None ,     // Action on Channel Event - No action
      \t *    TpmChannelReset_Disabled ,  // Reset counter on channel IC event - Disabled
      \t *    0_ticks,                    // Output Compare Event time
      \t *
      \t *    // Optional base value to start with (must be last parameter)
      \t *    $(_Class)::DefaultChannelInitValues[TpmChannelNum_3]
      \t * };
      \t *
      \t * // Initialise TPM from values specified above
      \t * Tpm$(_instance)::configureChannel(channelInit)
      \t * @endcode
      \t */
   ]]></template>

   <template namespace="usbdm"><![CDATA[
$(channel_init_description)
      \tclass ChannelInit {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr ChannelInit(const ChannelInit &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr ChannelInit() = default;
      \t\n
   ]]></template>

<!--  Member variables -->

   <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;individual_channel_call_backs"
      variables="/$(_BASENAME)/irqHandlingMethod"
    ><![CDATA[
      \t   /// $(_Class) channel interrupt call-back
      \t   ChannelCallbackFunction callbackFunction = nullptr;\n\n
   ]]></setTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="tpm_cnv[]"
   ><![CDATA[
      \t   /// %description
      \t   uint16_t %registerName = 0_ticks;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="tpm_cnsc_mode[]"
   ><![CDATA[
      \t   /// Channel Status And Control Register
      \t   uint16_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="tpm_channel_number"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName = TpmChannelNum_None;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;(NumChannelVectors>1)"
      variables="/PCR/nvic_irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName = %enumClass_Normal;\n\n
   ]]></initialValueTemplate>

<!-- Configure method -->

   <template discardRepeats="true" key="/$(_BASENAME)/ChannelInitMethod" namespace="all" ><![CDATA[
      \t/**
      \t * Configure Channel from values specified in channelInit
      \t
      \t * @param channelInit Class containing initialisation values
      \t */
      \tstatic ErrorCode configureChannel(const typename Info::ChannelInit &channelInit) {
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t
      \t   if constexpr (Info::irqHandlerInstalled && Info::IndividualCallbacks) {
      \t      Info::setChannelCallback(channelInit);
      \t   }
      \t\n
   ]]></template>
   <template discardRepeats="true" key="/$(_BASENAME)/ChannelInitMethod" namespace="all" condition="tpm_combine_combine0_present" ><![CDATA[
      \t   // Configure timer combine mode
      \t   if ((channelInit.channel&0b1) == 0) {
      \t      // Even channel value controls paired channels n,n+1
      \t      const unsigned offset = 4*channelInit.channel;
      \t      const uint32_t mask = 0xFF<<offset;
      \t      tpm->COMBINE = (tpm->COMBINE & ~mask) | (((channelInit.cnsc>>8)<<offset)&mask);
      \t   }\n
   ]]></template>
   <template discardRepeats="true" key="/$(_BASENAME)/ChannelInitMethod" namespace="all" ><![CDATA[
      \t   // Configure timer channel
      \t   tpm->CONTROLS[channelInit.channel].CnSC = channelInit.cnsc;
      \t   tpm->CONTROLS[channelInit.channel].CnV  = channelInit.cnv;
      \t
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></template>

<!--  Constructors -->

   <constructorTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;individual_channel_call_backs"
      variables="/$(_BASENAME)/irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param    callback Channel interrupt call-back to set
      \t    */
      \t   template <typename... Types>
      \t   constexpr ChannelInit(ChannelCallbackFunction callbackFunction, Types... rest) : ChannelInit(rest...) {
      \t
      \t      this->%enumParam0 = %paramExpression;
      \t   }\n\n
   ]]></constructorTemplate>

   <for keys="r" values="
      tpm_cnsc_mode[];
      tpm_cnsc_action[];
      tpm_cnsc_icrst[]">
      <constructorTemplate  namespace="usbdm"
         variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %comments
         \t    */
         \t   template <typename... Types>
         \t   constexpr ChannelInit(%params, Types... rest) : ChannelInit(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]></constructorTemplate>
   </for>

   <for keys="r" values="
      tpm_channel_number;
      tpm_cnv[]">
      <constructorTemplate  namespace="usbdm"
         variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %comments
         \t    */
         \t   template <typename... Types>
         \t   constexpr ChannelInit(%params, Types... rest) : ChannelInit(rest...) {
         \t
         \t      %registerName = %paramExpression;
         \t   }
         \t\n
      ]]></constructorTemplate>
   </for>
   <template namespace="usbdm"><![CDATA[
      \t};\n\n
   ]]></template>

<!--  Default Initialisation value -->

  <template><![CDATA[
      \t/**
      \t * Default initialisation value for Tpm$(_instance)ChannelInit
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr ChannelInit DefaultChannelInitValues[] = {\n
  ]]></template>
   <for keys="ch" dim="NumChannels">
      <initialValueTemplate
         separator=","
         terminator=","
         variables="
            tpm_cnsc_mode[%(ch)],
            tpm_cnsc_action[%(ch)],
            tpm_cnsc_icrst[%(ch)],
            tpm_cnv[%(ch)]"
      ><![CDATA[
         \t{
         \t   TpmChannelNum_%(ch),
         %initExpression\n\t},\n
      ]]></initialValueTemplate>
   </for>
  <template><![CDATA[
      \n\t};\n\n
  ]]></template>

   <template namespace="usbdm" ><![CDATA[
      };\n\n
   ]]></template>

<!--  ========== Misc =============================== -->

   <template namespace="all" key="/HARDWARE/StaticObjects.timerHandler" discardRepeats="true"
   ><![CDATA[
   \t/**
   \t * Callback to catch unhandled interrupt
   \t */
   \tvoid unhandledCallback() {
   \t   setAndCheckErrorCode(E_NO_HANDLER);
   \t}
   \t
   \t/**
   \t * Callback to catch unhandled channel interrupt
   \t *
   \t * @param mask Mask identifying channel
   \t */
   \tvoid timerUnhandledChannelCallback(uint8_t mask) {
   \t   (void)mask;
   \t   setAndCheckErrorCode(E_NO_HANDLER);
   \t}\n\n
   ]]></template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
   ><![CDATA[
      extern void unhandledCallback();
      extern void timerUnhandledChannelCallback(uint8_t);
      \t\n
   ]]></template>

   <template  codeGenCondition="/$(_BASENAME)/irqHandlingMethod" ><![CDATA[
      \t/**
      \t * Set overflow and fault interrupt call-back
      \t *
      \t * @param[in] newCallback Callback function to execute on interrupt.
      \t *                        Use nullptr to remove callback.
      \t *
      \t * @return E_NO_ERROR            No error
      \t * @return E_HANDLER_ALREADY_SET Handler already set
      \t */
      \tstatic ErrorCode setCallback(CallbackFunction newCallback) {
      \t   if (newCallback == nullptr) {
      \t      newCallback = unhandledCallback;
      \t   }
      \t   callback = newCallback;
      \t   return E_NO_ERROR;
      \t}
      \t\n
   ]]></template>

   <template  codeGenCondition="!/$(_BASENAME)/irqHandlingMethod" ><![CDATA[
      \t/**
      \t * Set callbacks and IRQ priority from Init structure
      \t */
      \tstatic void setCallbacks(const Init &) {
      \t}
      \t
      \t/**
      \t * Set channel callbacks from ChannelInit structure
      \t */
      \tstatic void setChannelCallback(const ChannelInit &) {
      \t}
      \t\n
   ]]></template>

   <template  codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;!individual_channel_call_backs" ><![CDATA[
      \t/**
      \t * Set channel call-back function
      \t * Configured for shared channel call-backs i.e. all channels use same call-back
      \t *
      \t * @param[in] callback Callback function to execute on channel interrupt.
      \t *                     Use nullptr to remove callback.
      \t *
      \t * @return E_NO_ERROR            No error
      \t * @return E_HANDLER_ALREADY_SET Handler already set
      \t *
      \t * @note The channel callback is shared by all channels of the timer.
      \t *       It is necessary to identify the originating channel in the callback
      \t */
      \tstatic ErrorCode setChannelCallback(ChannelCallbackFunction callback) {
      \t   if (callback == nullptr) {
      \t      channelCallbacks[0] = timerUnhandledChannelCallback;
      \t      return E_NO_ERROR;
      \t   }
      #ifdef DEBUG_BUILD
      \t   // Callback is shared across all channels. Check if callback already assigned
      \t   if ((channelCallbacks[0] != timerUnhandledChannelCallback) &&
      \t       (channelCallbacks[0] != callback)) {
      \t      return setErrorCode(ErrorCode::E_HANDLER_ALREADY_SET);
      \t   }
      #endif
      \t   channelCallbacks[0] = callback;
      \t   return E_NO_ERROR;
      \t}
      \t
      \t/**
      \t * Set callbacks and IRQ priority from Init structure
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void setCallbacks(const Init &init) {
      \t   if (init.callbackFunction != nullptr) {
      \t      setCallback(init.callbackFunction);
      \t   }
      \t   if (init.channelCallbackFunction != nullptr) {
      \t      setChannelCallback(init.channelCallbackFunction);
      \t   }
      \t   enableNvicInterrupt(irqNums[0], init.irqlevel);
      \t}
      \t
      \t/**
      \t * Set channel callbacks from ChannelInit structure
      \t */
      \tstatic void setChannelCallback(const ChannelInit &) {
      \t}
      \t\n
   ]]></template>

   <template  codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;individual_channel_call_backs" ><![CDATA[
      \t/**
      \t * Set channel call-back function
      \t * Configured for individual channel call-backs
      \t *
      \t * @param[in] channelNum Channel to set call-back for
      \t * @param[in] callback   Callback function to execute on channel interrupt.
      \t *                       Use nullptr to remove callback.
      \t *
      \t * @return E_NO_ERROR            No error
      \t * @return E_HANDLER_ALREADY_SET Handler already set
      \t *
      \t * @note The channel callback is shared by all channels of the timer.
      \t *       It is necessary to identify the originating channel in the callback
      \t */
      \tstatic ErrorCode setChannelCallback(unsigned channelNum, ChannelCallbackFunction callback) {
      \t
      \t   if (channelNum>=NumChannels) {
      \t      return setErrorCode(ErrorCode::E_ILLEGAL_PARAM);
      \t   }
      \t   if (callback == nullptr) {
      \t      channelCallbacks[channelNum] = timerUnhandledChannelCallback;
      \t      return ErrorCode::E_NO_ERROR;
      \t   }
      \t   channelCallbacks[channelNum] = callback;
      \t   return ErrorCode::E_NO_ERROR;
      \t}
      \t
      \t/**
      \t * Set callbacks and IRQ priority from Init structure
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \t static void setCallbacks(const Init &init) {
      \t    if (init.callbackFunction != nullptr) {
      \t       setCallback(init.callbackFunction);
      \t    }
      \t   enableNvicInterrupt(irqNums[0], init.irqlevel);
      \t}
      \t
      \t/**
      \t * Set channel callbacks from ChannelInit structure
      \t */
      \tstatic void setChannelCallback(const ChannelInit &init) {
      \t   if (init.callbackFunction != nullptr) {
      \t      setChannelCallback(init.channel, init.callbackFunction);
      \t   }
      \t}
      \t\n
   ]]></template>

   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="/$(_BASENAME)/irqHandlingMethod" ><![CDATA[
      \t/**
      \t * Callback function for Channel Fault and timer overflow for $(_Class)
      \t */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::callback = unhandledCallback;
      \t\n
   ]]></template>

   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="/$(_BASENAME)/irqHandlingMethod" ><![CDATA[
      \t/**
      \t * Callback table for programmatically set handlers for $(_Class)
      \t */
      \t$(_Class)Info::ChannelCallbackFunction $(_Class)Info::channelCallbacks[] = {\n\n
   ]]></template>
   <for keys="ch" dim="NumChannels">
      <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;individual_channel_call_backs" ><![CDATA[
         \t   timerUnhandledChannelCallback,\n
      ]]></template>
   </for>
   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="/$(_BASENAME)/irqHandlingMethod&amp;&amp;!individual_channel_call_backs" ><![CDATA[
      \t   timerUnhandledChannelCallback,\n
   ]]></template>
   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="/$(_BASENAME)/irqHandlingMethod" ><![CDATA[
      \t};\n\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.TpmValidate">
   </validate>

   <projectActionList id = "tpm_files" >
      <copy source="Project_Headers/tpm.h"            target="Project_Headers/tpm.h"            overwrite="true" derived="true" />
      <copy source="Snippets/tpm-pwm-example.cpp"     target="Snippets/tpm-pwm-example.cpp"     overwrite="true" derived="true"/>
      <copy source="Snippets/tpm-ic-example.cpp"      target="Snippets/tpm-ic-example.cpp"      overwrite="true" derived="true"/>
      <copy source="Snippets/tpm-oc-example.cpp"      target="Snippets/tpm-oc-example.cpp"      overwrite="true" derived="true"/>
      <copy source="Snippets/tpm-oc-init-example.cpp" target="Snippets/tpm-oc-init-example.cpp" overwrite="true" derived="true"/>
   </projectActionList>

   <template key="/$(_BASENAME)/declarations" namespace="all" codeGenCondition="enablePeripheralSupport" 
   ><![CDATA[
      /**
       * Class representing $(_NAME)
       */
      class $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n\n
   ]]></template>

   <template key="/$(_BASENAME)/quadDeclarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_Class) as Quadrature decoder
   \t */
   \ttypedef $(_Baseclass)QuadDecoder_T<$(_Class)Info> $(_Baseclass)QuadDecoder$(_instance);\n
   ]]></template>

   <!-- ************* Signal mapping ****************** -->

   <signals enabledBy="enablePeripheralSupport" />

</fragment>
