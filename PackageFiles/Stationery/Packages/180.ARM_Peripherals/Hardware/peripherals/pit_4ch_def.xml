<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pit.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <xi:include href="_default_instance.xml"/>

   <aliasOption key="/SIM/system_bus_clock" displayName="PIT input clock" constant="true"/>

   <intOption name="pit_ldval" description="Reload value"
      toolTip="Value loaded in timer register on roll-over"
      value="4799" min="0" max="0xFFFFFFFF" />

   <floatOption name="pit_period" description="Default period of timer"
      toolTip="Used to calculate the timer load value"
      derived="true"
      value="1m" min="0" units="s" />

   <floatOption name="pit_frequency" description="Default frequency of timer"
      toolTip="Used to calculate the timer load value"
      derived="true"
      value="1k" min="0" units="Hz" />

   <binaryOption name="pit_mcr_frz" description="Freeze in debug mode"
      toolTip="Controls whether the timer continues to run in debug mode">
      <choice value="0" name="Timers continue to run in debug mode" />
      <choice value="1" name="Timers are stopped in Debug mode" />
   </binaryOption>

   <binaryOption name="pit_tctrl_ch1" description="Chain timers 1-0"
      toolTip="Controls whether the timer channels are chained to creater a larger counter">
      <choice value="0" name="Timers are not chained" />
      <choice value="1" name="Timers are chained" />
   </binaryOption>

   <binaryOption name="pit_tctrl_ch3" description="Chain timers 3-2"
      toolTip="Controls whether the timer channels are chained to creater a larger counter">
      <choice value="0" name="Timers are not chained" />
      <choice value="1" name="Timers are chained" />
   </binaryOption>
   <template><![CDATA[
      \t//! IRQ numbers for hardware
      \tstatic constexpr IRQn_Type irqNums[]  = $(_name)_IRQS;
   
      \t//! Number of IRQs for hardware
      \tstatic constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);\n\n
   ]]></template>

   <!--
   Patterns for pattern and classHandler 
     -  %i replaced with peripheral instance e.g. FTM1 => 1, PTA => A
     -  %b replaced with peripheral base name e.g. FTM1 => = FTM
     -  %c replaced with peripheral C++ base class name e.g. FTM1 => = Ftm
     -  _IRQHandler is appended to the pattern (only)
   -->
   <irqOption name="irqHandlingMethod"  
      description="Channel interrupt handlers"
      toolTip="This selection allow the interrupt handler for this peripheral to be installed using several different methods"
      pattern="^%b(\d+)$" 
      classHandler="%c%i::Channel&lt;$1&gt;::irqHandler" />
      
   <template><![CDATA[
       \t//! Class based callback handler has been installed in vector table
       \tstatic constexpr bool irqHandlerInstalled = $(irqHandlingMethod);\n\n
   ]]></template>
       
   <choiceOption name="irqLevel"
      description="Default IRQ level for this peripheral"
      toolTip="Sets the default priority level used to configure the NVIC">
      <choice name="VeryHigh"      value="NvicPriority_VeryHigh" />
      <choice name="High"          value="NvicPriority_High" />
      <choice name="MidHigh"       value="NvicPriority_MidHigh" />
      <choice name="Normal"        value="NvicPriority_Normal" isDefault="true"/>
      <choice name="Midlow"        value="NvicPriority_Midlow" />
      <choice name="Low"           value="NvicPriority_Low" />
      <choice name="VeryLow"       value="NvicPriority_VeryLow" />
   </choiceOption>

   <template><![CDATA[
       \t//! Default IRQ level
       \tstatic constexpr NvicPriority irqLevel =  $(?irqHandlingMethod:$(irqLevel):NvicPriority_NotInstalled);\n\n
   ]]></template>
 
   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PitValidate">
   </validate>

   <projectActionList id = "pit_files" >
      <copy source="Snippets/pit-example1.cpp"       target="Snippets/pit-example1.cpp" overwrite="true" derived="true" />
      <copy source="Snippets/pit-example2-MK.cpp"    target="Snippets/pit-example2.cpp" overwrite="true" derived="true" />
      <copy source="Snippets/pit-example3-MK.cpp"    target="Snippets/pit-example3.cpp" overwrite="true" derived="true" />
      <copy source="Project_Headers/pit-MK.h"        target="Project_Headers/pit.h"     overwrite="true" derived="true" />
   </projectActionList>
         
   <template><![CDATA[
   
      \t//! Default value for PIT load value register
      \tstatic constexpr uint32_t pit_ldval  = $(pit_ldval);
      
      \t//! PIT operation in debug mode
      \tstatic constexpr uint32_t mcr = 
      \t   PIT_MCR_FRZ($(pit_mcr_frz)) |  // Freeze in debug mode
      \t   PIT_MCR_MDIS(0);  // Disable
      
      \t/**
      \t * Get clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic __attribute__((always_inline)) uint32_t getClockFrequency() {
      \t   return SystemBusClock;
      \t}\n\n
   ]]></template>
   
   <xi:include href="_clockOption.xml"/>

   <signals/>

</fragment>
