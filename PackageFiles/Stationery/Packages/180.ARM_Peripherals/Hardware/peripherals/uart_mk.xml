<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- lpuart_def.xml -->

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %paramType[index]               As for %paramType
    * %paramName[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %fieldAssignment;         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %maskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="$(_BASENAME)">

   <!-- Enable for this peripheral -->
   <binaryOption key="usedAsConsole"
      description="usedAsConsole"
      toolTip="Indicates if this device is allocated as the Console for I/O"
      ref="/Console/consoleDevice.name==&quot;$(_Baseclass) $(_instance)&quot;"
      locked="true"
      derived="true" >
      <choice value="0" name="Not used as console" />
      <choice value="1" name="Used as console" />
   </binaryOption>

   <binaryOption key="enablePeripheralSupport"
      enabledBy="!usedAsConsole"
      hidden="true"
      description="Enable peripheral support"
      toolTip="Code will also be generated if this UART is used as the console"
      disabledValue="true"
      >
      <choice value="false" name="Minimal code for $(_NAME)"  />
      <choice value="true"  name="Generate code for $(_NAME)"/>
   </binaryOption>

   <constant key="irq_pattern"               type="String"  value="&quot;^$(_BASENAME)%i_?((RxTx|Error|Lon)|.*)?$&quot;"  />
   <constant key="irq_ClassHandler"          type="String"  value="&quot;%c%i::irq$2Handler&quot;"                        />
   <constant key="irq_parameters"            type="String"  value="&quot;&quot;"                      />
   <constant key="irq_dummy_parameters"      type="String"  value="&quot;&quot;"                      />
   <constant key="irq_call"                  type="String"  value="&quot;&quot;"                      />
   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <intOption key="oversampleRatio"  condition="uart_c4_osr_present"
      description="Number of samples per bit"
      toolTip="This value determines the number of times an Rx bit is sampled.\n
               This also affects the clock divider and hence the range of baud rates available"
       value="8" min="4" max="32"
      />

   <template  condition="oversampleRatio" ><![CDATA[
   \t//! Number of samples per bit
   \tstatic constexpr uint32_t oversampleRatio = $(oversampleRatio);\n\n
   ]]></template>

   <choiceOption key="defaultBaudRate"
      valueFormat="%s"
      typeName="UartBaudRate"
      description="$(_BASENAME) default baud rate"
      toolTip="Used by default $(_BASENAME) setup for stdio">
      <choice value="110"     name="110"     enum="110"    />
      <choice value="300"     name="300"     enum="300"    />
      <choice value="600"     name="600"     enum="600"    />
      <choice value="1200"    name="1200"    enum="1200"   />
      <choice value="2400"    name="2400"    enum="2400"   />
      <choice value="4800"    name="4800"    enum="4800"   />
      <choice value="9600"    name="9600"    enum="9600"   />
      <choice value="14400"   name="14400"   enum="14400"  />
      <choice value="19200"   name="19200"   enum="19200"  />
      <choice value="28800"   name="28800"   enum="28800"  />
      <choice value="38400"   name="38400"   enum="38400"  />
      <choice value="56000"   name="56000"   enum="56000"  />
      <choice value="57600"   name="57600"   enum="57600"  />
      <choice value="115200"  name="115200"  enum="115200" isDefault="true" />
   </choiceOption>

   <choiceOption key="uart_c2_tcie" condition="uart_c2_tcie_present"
      hidden="true"
      typeName="UartTxCompleteAction"
      description="Transmit complete action"
      toolTip="Enable interrupt on transmission complete">
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uart_c2_tcie" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setTransmitCompleteAction(%params) const {
      \t   %register = (%register & ~%mask) | %paramExpression;
      \t}\n\n
   ]]></variableTemplate>

   <choiceOption key="uart_c2_ilie" condition="uart_c2_ilie_present"
      hidden="true"
      typeName="UartIdleLineDetectAction"
      description="Idle line detect sction"
      toolTip="Enable interrupt on tidele line detect">
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uart_c2_ilie" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setIdleLineDetectAction(%params) const {
      \t   %register = (%register & ~%mask) | %paramExpression;
      \t}\n\n
   ]]></variableTemplate>

   <choiceOption key="uartTxEmptyAction" condition="!uart_c5_tdmas_present&amp;&amp;uart_c2_tie_present"
      hidden="true"
      valueFormat="UART_C2_TIE(%s)"
      typeName="UartTxEmptyAction"
      description="Transmit empty DMA/Interrupt action"
      toolTip="Enable transmit holding register empty DMA/Interrupt action">
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <choiceOption key="uartTxEmptyAction" condition="uart_c5_tdmas_present&amp;&amp;uart_c2_tie_present"
      hidden="true"
      valueFormat="(UART_C5_TDMAS(%s)&lt;&lt;8),UART_C2_TIE(%s)"
      typeName="UartTxEmptyAction"
      description="Transmit empty DMA/Interrupt action"
      toolTip="Enable transmit holding register empty DMA/Interrupt action">
      <choice value="0,0"   name="None"      enum="None"      />
      <choice value="0,1"   name="Interrupt" enum="Interrupt" />
      <choice value="1,1"   name="DMA"       enum="Dma"       />
   </choiceOption>

   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
       variables="uartTxEmptyAction" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setTransmitEmptyAction(%params) const {
      \t   uart->C2 = (uart->C2 & ~UART_C2_TIE_MASK)   | %paramExpression; \n
   ]]></variableTemplate>
   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uartTxEmptyAction"
      condition="uart_c5_tdmas_present" ><![CDATA[
      \t   uart->C5 = (uart->C5 & ~UART_C5_TDMAS_MASK) | %paramExpression>>8; \n
   ]]></variableTemplate>
   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
       variables="uartTxEmptyAction" ><![CDATA[
      \t}\n\n
   ]]></variableTemplate>

   <choiceOption key="uartRxFullAction" condition="!uart_c5_rdmas_present&amp;&amp;uart_c2_rie_present"
      hidden="true"
      valueFormat="UART_C2_RIE(%s)"
      typeName="UartRxFullAction"
      description="Receive full interrupt action"
      toolTip="Enable receive buffer full interrupt action">
      <choice value="0"   name="None"      enum="None"      />
      <choice value="1"   name="Interrupt" enum="Interrupt" />
   </choiceOption>

   <choiceOption key="uartRxFullAction" condition="uart_c5_rdmas_present&amp;&amp;uart_c2_rie_present"
      hidden="true"
      valueFormat="(UART_C5_RDMAS(%s)&lt;&lt;8),UART_C2_RIE(%s)"
      typeName="UartRxFullAction"
      description="Receive full DMA/interrupt action"
      toolTip="Enable receive buffer full DMA/interrupt action">
      <choice value="0,0"   name="None"      enum="None"      />
      <choice value="0,1"   name="Interrupt" enum="Interrupt" />
      <choice value="1,1"   name="DMA"       enum="Dma"       />
   </choiceOption>

   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uartRxFullAction" ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tvoid setReceiveFullAction(%params) const {
      \t   uart->C2 = (uart->C2 & ~UART_C2_RIE_MASK)   | %paramExpression;\n
   ]]></variableTemplate>
   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uartRxFullAction"
      condition="uart_c5_rdmas_present" ><![CDATA[
      \t   uart->C5 = (uart->C5 & ~UART_C5_RDMAS_MASK) | %paramExpression>>8;\n
   ]]></variableTemplate>
   <variableTemplate key="/$(_BASENAME)/commonMethods" discardRepeats="true"
      variables="uartRxFullAction" ><![CDATA[
      \t}\n\n
   ]]></variableTemplate>

   <if condition="uart_c4_brfa_present">
      <binaryOption key="uartClass"
         description="Input buffering"
         toolTip="This option determines whether an interrupt-driven driver\n
                  incorporating a queue is used to buffer input data" >
         <choice name="Unbuffered" value="Uart_brfa_T" />
         <choice name="Buffered"   value="UartBuffered_brfa_T" />
      </binaryOption>
   <else_if condition="uart_c4_osr_present" />
      <binaryOption key="uartClass"
         description="Input buffering"
         toolTip="This option determines whether an interrupt-driven driver\n
                  incorporating a queue is used to buffer input data" >
         <choice name="Unbuffered" value="Uart_osr_T" />
         <choice name="Buffered"   value="UartBuffered_osr_T" />
      </binaryOption>
   <else />
      <binaryOption key="uartClass"
         description="Input buffering"
         toolTip="This option determines whether an interrupt-driven driver\n
                  incorporating a queue is used to buffer input data" >
         <choice name="Unbuffered" value="Uart_basic_T" />
         <choice name="Buffered"   value="UartBuffered_basic_T" />
      </binaryOption>
   </if>
   <intOption key="receiveBufferSize" description="Size of input buffer"
      toolTip="This value determines the size of the receive buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <intOption key="transmitBufferSize" description="Size of output buffer"
      toolTip="This value determines the size of the transmit buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.UartValidate">
   </validate>

   <projectActionList id="uart_files">
      <copy source="Snippets/uart-example.cpp"     target="Snippets/uart-example.cpp"  overwrite="true"  derived="true" />
      <copy source="Project_Headers/uart.h"        target="Project_Headers/uart.h"     overwrite="true"  derived="true" macroReplace="true" />
      <copy source="Project_Headers/uart_queue.h"  target="Project_Headers/uart_queue.h"    overwrite="true"  derived="true" />
   </projectActionList>

   <template><![CDATA[
      \t//! Indicates whether the $(_BASENAME) needs a write to clear status errors
      \tstatic constexpr bool statusNeedsWrite = true;
      \t
      \t//! Default Baud rate used if not explicitly given
      \tstatic constexpr uint32_t defaultBaudRate = $(defaultBaudRate);
      \t
      \t//! Default buffer size for receive queue when interrupt driven
      \tstatic constexpr unsigned receiveBufferSize = $(receiveBufferSize);
      \t
      \t//! Default buffer size for transmit queue when interrupt driven
      \tstatic constexpr unsigned transmitBufferSize = $(transmitBufferSize);

      \t/**
      \t * Get input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic inline uint32_t getInputClockFrequency() {
      \t   return SimInfo::getUart$(_instance)Clock();
      \t}\n\n
   ]]></template>

   <template key="/$(_BASENAME)/Present"  ><![CDATA[\ ||\ 1]]></template>

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Class representing $(_NAME) interface
      \t *
      \t * <b>Example</b>
      \t * @code
      \t *  // Instantiate interface
      \t *  USBDM::$(_Class) $(_basename);
      \t *
      \t *  for(int i=0; i++;) {
      \t *     $(_basename).writeln("Hello world ", i);
      \t *  }
      \t *  @endcode
      \t */
      \ttypedef  $(/$(_NAME)/$(_basename)Class:$(_Baseclass)_T)<$(_Class)Info> $(_Class);\n\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->
   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title/>
      <aliasOption key="/SIM/sim_sopt2_uart$(_instance)src[]"              optional="true" locked="false" />
      <aliasOption key="/SIM/system_uart$(_instance)_fixedclocksource[]"   optional="true"/>
      <aliasOption key="/SIM/system_uart$(_instance)_clock[]"              optional="true" />
      <aliasOption key="/SIM/sim_sopt5_uart$(_instance)ode"   optional="true" locked="false" />
      <aliasOption key="/SIM/sim_sopt5_uart$(_instance)txsrc" optional="true" locked="false" />
      <aliasOption key="/SIM/sim_sopt5_uart$(_instance)rxsrc" optional="true" locked="false" />
   </category>
   <deleteVariables variables="_scgc_clock"  mustExist="false" />

   <!-- ************* Signal mapping ****************** -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
