<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- rtcntr_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Real-time counter" >

   <equation key="irq_parameters"            value=""  />
   <equation key="irq_dummy_parameters"      value=""  />
   <equation key="irq_call_parameters"       value=""  />
   <equation key="generateDefault"           value="false"         />
   <equation key="configureInStartupDefault" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <!-- ************* SC ****************** -->

   <aliasOption key="/SIM/sim_pinsel0_rtcps" locked="false" optional="true" />

   <binaryOption key="rtc_sc_rtie" condition="rtc_sc_rtie_present"
      enabledBy="irqHandlingMethod"
      typeName="RtcInterrupt"
      toolTip="This bit enables real-time interrupts.\n
               If RTIE is set, then an interrupt is generated when RTIF is set"
      description="Real-Time Interrupt Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="rtc_sc_rtco" condition="rtc_sc_rtco_present &amp;&amp; outputPinMap"
      enabledBy="$(_BasicInfoGuard)"
      typeName="RtcOutput"
      toolTip="Enables the toggling of RTCO pin on overflow"
      description="Real-Time Counter Output" >
      <choice name="Output Disabled"  value="0" enum="OutputDisabled" pinMap="=&quot;RTC_CLKOUT,&quot;"/>
      <choice name="Output Enabled"   value="1" enum="OutputEnabled"  pinMap="=&quot;RTC_CLKOUT,&quot;+outputPinMap"/>
   </binaryOption >

   <binaryOption key="rtc_sc_rtco" condition="rtc_sc_rtco_present &amp;&amp; !outputPinMap"
      enabledBy="$(_BasicInfoGuard)"
      typeName="RtcOutput"
      toolTip="Enables the toggling of RTCO pin on overflow"
      description="Real-Time Counter Output" >
      <choice name="Output Disabled"  value="0" enum="OutputDisabled" />
      <choice name="Output Enabled"   value="1" enum="OutputEnabled"  />
   </binaryOption >

   <choiceOption key="rtc_sc_rtclks" condition="rtc_sc_rtclks_present"
      target="rtc_input_clock"
      enabledBy="$(_BasicInfoGuard)"
      typeName="RtcClockSource"
      toolTip="Selects the clock source for the RTC prescaler.\n
               This also determines the prescaler range. \n
               Changing the clock source clears the prescaler and RTCCNT counters."
      description="Real-Time Clock Source Select" >
      <choice name="External clock"                       value="0" enum="OscerClk" ref="/OSC0/oscer_clock"            code="Osc0Info::getOscClock()"  />
      <choice name="Low Power Oscillator (LPOCLK)"        value="1" enum="Lpoclk"   ref="/PMC/system_low_power_clock"  code="SimInfo::getLpoClock()"   isDefault="true" />
      <choice name="Internal reference clock (ICSIRCLK)"  value="2" enum="Icsirclk" ref="/ICS/icsirclk" code="IcsInfo::getUngatedInternalReferenceClock()"  />
      <choice name="Bus clock"                            value="3" enum="BusClock" ref="/SIM/system_bus_clock[0]"     code="SystemBusClock"  />
   </choiceOption >

   <intOption key="rtc_input_clock"
      derived="true"
      locked="true"
      description="RTCCNTR input clock frequency"
      toolTip="Input clock selected by rtc_sc_rtclks"
      units="Hz"
      />

   <choiceOption key="rtc_sc_rtcps" condition="rtc_sc_rtcps_present"
      target="rtc_clock"
      enabledBy="$(_BasicInfoGuard)"
      typeName="RtcPrescaler"
      toolTip="Selects binary-based or decimal-based divide-by values for the clock source.\n
               Changing the prescaler value clears the prescaler and RTCCNT counters\n
               Division factor depends on clock source chosen by RTCLKS"
      description="Real-Time Clock Prescaler Select" >
      <choice name="Off" value="0" enum="Off" ref="0" />
      <choice name="@&quot;Divide by &quot;+(((rtc_sc_rtclks&amp;0b1)==0)?&quot;1&quot;:&quot;128&quot;)"   value="1" enum="DivideBy1or128"   ref="(rtc_input_clock)/(((rtc_sc_rtclks&amp;0b1)==0)?1:128)"   />
      <choice name="@&quot;Divide by &quot;+(((rtc_sc_rtclks&amp;0b1)==0)?&quot;2&quot;:&quot;256&quot;)"   value="1" enum="DivideBy2or256"   ref="(rtc_input_clock)/(((rtc_sc_rtclks&amp;0b1)==0)?2:256)"   />
      <choice name="@&quot;Divide by &quot;+(((rtc_sc_rtclks&amp;0b1)==0)?&quot;4&quot;:&quot;512&quot;)"   value="1" enum="DivideBy4or512"   ref="(rtc_input_clock)/(((rtc_sc_rtclks&amp;0b1)==0)?4:512)"   />
      <choice name="@&quot;Divide by &quot;+(((rtc_sc_rtclks&amp;0b1)==0)?&quot;8&quot;:&quot;1024&quot;)"  value="1" enum="DivideBy8or1024"  ref="(rtc_input_clock)/(((rtc_sc_rtclks&amp;0b1)==0)?8:1024)"  />
      <choice name="@&quot;Divide by &quot;+(((rtc_sc_rtclks&amp;0b1)==0)?&quot;16&quot;:&quot;2048&quot;)" value="1" enum="DivideBy16or2048" ref="(rtc_input_clock)/(((rtc_sc_rtclks&amp;0b1)==0)?16:2048)" />
      <choice name="@&quot;Divide by &quot;+(((rtc_sc_rtclks&amp;0b1)==0)?&quot;32&quot;:&quot;100&quot;)"  value="1" enum="DivideBy32or100"  ref="(rtc_input_clock)/(((rtc_sc_rtclks&amp;0b1)==0)?32:100)"  isDefault="true" />
      <choice name="@&quot;Divide by &quot;+(((rtc_sc_rtclks&amp;0b1)==0)?&quot;64&quot;:&quot;1000&quot;)" value="1" enum="DivideBy64or1000" ref="(rtc_input_clock)/(((rtc_sc_rtclks&amp;0b1)==0)?64:1000)" />
   </choiceOption >

   <floatOption key="rtc_clock"
      derived="true"
      locked="true"
      description="RTCCNTR input clock frequency"
      toolTip="Input clock selected by rtc_sc_rtclks"
      units="Hz"
      />

   <!-- ************* MOD ****************** -->

   <intOption key="rtc_mod_mod" condition="rtc_mod_mod_present"
      enabledBy="$(_BasicInfoGuard)"
      description="Modulo"
      units="ticks"
      toolTip="16-bit modulo value.\n
               A value of 0x0000 sets SC[RTIF] on each rising-edge of the prescaler output"
               min="0" max="0xFFFF" value="9"
   />

   <floatOption key="rtc_period"
      derived="true"
      locked="true"
      ref="(rtc_mod_mod+1)/rtc_clock#rtc_clock"
      description="RTCCNTR counter period"
      toolTip="Input clock selected by rtc_sc_rtclks"
      units="s"
      />

   <floatOption key="rtc_out"
      enabledBy="rtc_sc_rtco"
      derived="true"
      locked="true"
      ref="1/rtc_period"
      description="RTC Output"
      toolTip="RTC output if enabled"
      units="Hz"
      />

<!-- Graphic here -->

   <for keys="field:name"
        values="
      rtc_sc_rtclks:ClockSource;
      rtc_sc_rtcps:ClockPrescaler;
      rtc_sc_rtie:Interrupts;
      rtc_sc_rtco:Output" >
      <variableTemplate variables="%(field)" codeGenCondition="/$(_BASENAME)/enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

<!--   ========== RTC Init class =============================== -->

   <template key="init_description" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t status) {
      \t *    (void) status;
      \t * }
      \t *
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   RtcScRtclks_ExternalClock                 // Real-Time Clock Source Select,
      \t *   RtcScRtcps_Off                            // Real-Time Clock Prescaler Select,
      \t *   RtcScRtif_NoEvent                         // Real-Time Interrupt Flag,
      \t *   RtcScRtie_Disabled                        // Real-Time Interrupt Enable,
      \t *   RtcScRtco_OutputDisabled                  // Real-Time Counter Output,
      \t *   10_ticks,                                 // Modulo,
      \t *
      \t *    $(_name)Callback,                // Call-back to execute on event - call-back function name
      \t *    NvicPriority_Low,                // Priority for interrupt - Low
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate where="basicInfo" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="rtc_sc_rtclks,rtc_sc_rtcps,rtc_sc_rtie,rtc_sc_rtco"
   ><![CDATA[
      \t   /// Status and Control Register
      \t   uint16_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="rtc_mod_mod"
   ><![CDATA[
      \t   /// Modulo Register
      \t   uint16_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)" ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t   // ..........  Configure ...........
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)"
             condition="irqHandlingMethod" ><![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      Info::setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)" ><![CDATA[
      \t   // ..........  Regs to init .......... ;
      \t   rtc->MOD   = init.mod;
      \t   rtc->SC    = init.sc;
      \t}
      \t\n
   ]]></template>

<!--   Constructors -->

   <variableTemplate where="basicInfo" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            rtc_sc_rtclks;
            rtc_sc_rtcps;
            rtc_sc_rtie;
            rtc_sc_rtco
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <for keys="r"
      values="
            rtc_mod_mod
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%paramType0 value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask0) | %macro0(value);
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>


<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="$(_BasicInfoGuard)"
      separator=","
      terminator=","
      variables="
            rtc_sc_rtclks,
            rtc_sc_rtcps,
            rtc_sc_rtie,
            rtc_sc_rtco,
            rtc_mod_mod
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues
      \t};\n\n
   ]]></variableTemplate>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
      <![CDATA[
      \t}; // $(_Baseclass)BasicInfo::Init\n\n
   ]]>
   </template>

    <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="$(_BasicInfoGuard)" ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Info)> {};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id = "rtc_files" >
      <copy source="Project_Headers/rtc-MKE.h"  target="Project_Headers/rtc.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->
   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title/>
      <aliasOption key="/SIM/sim_pinsel0_$(_name)ps" locked="false" optional="true" />
      <aliasOption key="/SIM/sim_pinsel1_$(_name)ps" locked="false" optional="true" />
   </category>

   <signals enabledBy="enablePeripheralSupport" locked="true" />

</peripheralPage>
