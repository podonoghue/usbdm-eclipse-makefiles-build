<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- ftm_quadrature_decoder.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%variable[index]            Variable name
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

<!--  ____ FTM QUAD Controls ____________________________ -->

   <list key="quadDecoder" condition="ftm_qdctrl_quadmode_present&amp;&amp;_control"
      description="Quadrature decoder"
      hiddenBy="mode!=Quad" >

      <title description="Quadrature Decoder" />

      <binaryOption key="ftm_qdctrl_quadmode" condition="ftm_qdctrl_quadmode_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmQuadratureMode"
         enumType="uint8_t"
         description="Quadrature decoding mode"
         toolTip="Determines how the inputs control the counting sequence" >
         <choice value="0" name="Phase-AB Mode"         enum="Phase_AB_Mode" />
         <choice value="1" name="Count-Direction Mode"  enum="Count_Direction_Mode"  />
      </binaryOption>

      <!-- ____ Channel A ____ -->

      <title name="Channel A" description="Channel A" condition="ftm_qdctrl_phapol_present" />

      <binaryOption key="ftm_qdctrl_phapol" condition="ftm_qdctrl_phapol_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmPhaseAPolarity"
         enumType="uint8_t"
         description="Polarity of Phase A input"
         toolTip="Polarity of Phase A input" >
         <choice value="0" name="Active High" enum="ActiveHigh" />
         <choice value="1" name="Active Low"  enum="ActiveLow"  />
      </binaryOption>

      <choiceOption key="ftm_filter_qd_a" condition="ftm_qdctrl_phafltren_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="(FTM_QDCTRL_PHAFLTREN(%s)&lt;&lt;8),FTM_FILTER_CH0FVAL(%s)"
         enumType="uint16_t"
         typeName="FtmPhaseAFilter"
         description="Filtering on Phase A input"
         toolTip="Filtering on Phase A input" >
         <choice          value="0,0"         name="Filter Disabled"                        enum="Disabled" isDefault="true" />
         <choiceExpansion value="1,%(cycles)" name='=ToString(4*%(cycles))+" clock cycles"' enum='=ToString(4*%(cycles))+"_clocks"' keys="cycles" dim="1,15" />
      </choiceOption>

      <floatOption key="ftm_filter_qd_a_delay" condition="ftm_filter_qd_a"
         description="Channel Filter Delay"
         toolTip="Calculated delay"
         ref="(4.0*ftm_filter_qd_a)/inputClockFrequency"
         derived="true"
         locked="true"
         units="s"
         min="0.0"
      />

      <!-- ____ Channel B ____ -->

      <title name="Channel B" description="Channel B" condition="ftm_qdctrl_phbpol_present" />

      <binaryOption key="ftm_qdctrl_phbpol" condition="ftm_qdctrl_phbpol_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmPhaseBPolarity"
         description="Polarity of Phase B input"
         toolTip="Polarity of Phase B input" >
         <choice value="0" name="Active High" enum="ActiveHigh" />
         <choice value="1" name="Active Low"  enum="ActiveLow"  />
      </binaryOption>

      <choiceOption key="ftm_filter_qd_b" condition="ftm_qdctrl_phbfltren_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="(FTM_QDCTRL_PHBFLTREN(%s)&lt;&lt;8),FTM_FILTER_CH1FVAL(%s)"
         enumType="uint16_t"
         typeName="FtmPhaseBFilter"
         description="Filtering on Phase B input"
         toolTip="Filtering on Phase B input" >
         <choice          value="0,0"         name="Filter Disabled"                        enum="Disabled" isDefault="true" />
         <choiceExpansion value="1,%(cycles)" name='=ToString(4*%(cycles))+" clock cycles"' enum='=ToString(4*%(cycles))+"_clocks"' keys="cycles" dim="1,15" />
      </choiceOption>

      <floatOption key="ftm_filter_qd_b_delay" condition="ftm_filter_qd_b"
         description="Channel B Filter Delay"
         toolTip="Calculated delay"
         ref="(4.0*ftm_filter_qd_b)/inputClockFrequency"
         derived="true"
         locked="true"
         units="s"
         min="0.0"
      />

   </list>

<!-- ___ FTM QUAD Init class _______________ -->

   <if condition="ftm_qdctrl_present&amp;&amp;_code" >

   <template><![CDATA[
      \t/**
      \t * Configures all mapped Quadrature decoder pins associated with $(_NAME)
      \t *
      \t * @note Locked pins will be unaffected
      \t */
      \tstatic void configureQuadPins() {
      \t
      \t   // Configure pins if selected and not already locked
      \t   if constexpr (mapPinsOnEnable) {
      \t      InfoQUAD::initPCRs();
      \t   }
      \t}
      \t
      \t/**
      \t * Disabled all mapped Quadrature decoder pins associated with $(_NAME)
      \t *
      \t * @note Only the lower 16-bits of the PCR registers are modified
      \t *
      \t * @note Locked pins will be unaffected
      \t */
      \tstatic void disableQuadPins() {
      \t
      \t   // Disable pins if selected and not already locked
      \t   if constexpr (mapPinsOnEnable) {
      \t      InfoQUAD::clearPCRs();
      \t   }
      \t}
      \t\n
   ]]></template>

      <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
         \t/**
         \t * Class used to do initialisation of Ftm QuadDecoder
         \t *
         \t * This class has a templated constructor that accepts various values:
         \t *
         \t * @note This constructor may be used to create a const instance in ROM
         \t *
         \t * Example:
         \t * @code
         \t * static const FtmQuadDecoder$(_instance)::QuadInit quadInit {
         \t *
         \t *    // Omitted parameters are taken to be zero unless a base value is given
         \t *    FtmQuadratureMode_Phase_AB_Mode , // Quadrature decoding mode
         \t *    FtmOverflowInterrupt_Enabled ,    // Overflow Interrupt
         \t *    FtmPrescale_DivBy32,              // Clock prescaler
         \t *    30000_ticks,                      // End value for counter
         \t *    FtmPhaseAPolarity_ActiveHigh ,    // Polarity of Phase A input
         \t *    FtmPhaseBPolarity_ActiveHigh ,    // Polarity of Phase B input
         \t *    FtmPhaseAFilter_Disabled ,        // Filtering on Phase A input
         \t *    FtmPhaseBFilter_Disabled ,        // Filtering on Phase B input
         \t *
         \t *    NvicPriority_Normal ,             // IRQ level for this peripheral
         \t *    ftmCallbak,                       // Timer overflow call-back
         \t *
         \t *    // Optional base value to start with (must be last parameter)
         \t *    FtmQuadDecoder$(_instance)::DefaultQuadInitValue
         \t * };
         \t *
         \t * // Initialise FTM from values specified above
         \t * FtmQuadDecoder$(_instance)::configure(quadInit)
         \t * @endcode
         \t */
         \tclass QuadInit {
         \t
         \tpublic:
         \t   /**
         \t    * Copy Constructor
         \t    */
         \t   constexpr QuadInit(const QuadInit &other) = default;
         \t
         \t   /**
         \t    * Default Constructor
         \t    */
         \t   constexpr QuadInit() = default;
         \t\n
      ]]></template>

      <!-- ____ QUAD Init class Member variables ____ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
         variables="irqHandlingMethod"
       ><![CDATA[
         %multilineDescription
         \t   %params = nullptr;\n\n
      ]]></variableTemplate>

      <for keys=" type        : variables                        : init    "
          values="%enumType   : ftm_filter_qd_a,ftm_filter_qd_b  : 0       ;
                  %enumType   : ftm_qdctrl_quadmode              : 0       ;
                  %enumType   : ftm_sc_action,ftm_sc_ps          : 0       ;
                  %enumType   : ftm_mod                          : 0       ">
         <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
            variables="%(variables)"
         ><![CDATA[
            %multilineDescription
            \t   %(type) %registerName = %(init);\n\n
         ]]></variableTemplate>
      </for>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
         variables="/PCR/nvic_irqLevel"
      ><![CDATA[
         %multilineDescription
         \t   %paramType %registerName = %defaultValue;\n\n
      ]]></variableTemplate>

      <!-- ____ QUAD Init class Constructors ____ -->

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
         variables="irqHandlingMethod"
         linePadding="xxx"
       ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
         \t
         \t      this->%paramName0 = %paramExpression;
         \t   }\n\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
         variables="/PCR/nvic_irqLevel"
         linePadding="xxx"
       ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
         \t
         \t      %registerName = %paramExpression;
         \t   }\n\n
      ]]></variableTemplate>

      <for keys="r" values=";
         ftm_qdctrl_quadmode;ftm_qdctrl_phapol;ftm_qdctrl_phbpol;
         ftm_sc_action;ftm_sc_ps;
         ftm_mod" >
         <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
            variables="%(r)"
            linePadding="xxx"
         ><![CDATA[
            \t   /**
            \t    * Constructor for %description
            \t    * (%(r))
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            %paramDescription
            \t    */
            \t   template <typename... Types>
            \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
            \t
            \t      %constructorFieldAssignment;
            \t   }
            \t\n
         ]]></variableTemplate>
      </for>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="ftm_filter_qd_a"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (ftm_filter_qd_a)
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
         \t
         \t      qdctrl = (qdctrl&~FTM_QDCTRL_PHAFLTREN_MASK) | ((%paramExpression>>8) & FTM_QDCTRL_PHAFLTREN_MASK);
         \t      filter = (filter&~FTM_FILTER_CH0FVAL_MASK) | (%paramExpression&FTM_FILTER_CH0FVAL_MASK);
         \t   }
         \t\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="ftm_filter_qd_b"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (ftm_filter_qd_b)
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
         \t
         \t      qdctrl = (qdctrl&~FTM_QDCTRL_PHBFLTREN_MASK) | ((%paramExpression>>8) & FTM_QDCTRL_PHBFLTREN_MASK);
         \t      filter = (filter&~FTM_FILTER_CH1FVAL_MASK) | (%paramExpression&FTM_FILTER_CH1FVAL_MASK);
         \t   }
         \t\n
      ]]></variableTemplate>

      <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
         \t};
         \t\n
      ]]></template>

      <!-- ____ QUAD Init class Configure method ____ -->

      <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
         \t/**
         \t * Configure QuadDecoder from values specified in init
         \t
         \t * @param quadInit Class containing initialisation values
         \t */
         \tstatic ErrorCode configure(const QuadInit &init) {
         \t
         \t   // Configure pins as needed
         \t   configureQuadPins();
         \t
         \t   // Enable peripheral clock
         \t   enableClock();\n\n
      ]]></template>
      <template codeGenCondition="irqHandlingMethod" ><![CDATA[
         \t   // Set call-back
         \t   setCallback(init.callbackFunction);
         \t   enableNvicInterrupt(irqNums[0], init.irqlevel);\n
      ]]></template>
      <for keys=
             " var                                                      : statement               "
      values=" ftm_sc_action,ftm_sc_ps                                  : %register = 0           ;
               ftm_qdctrl_quadmode,ftm_qdctrl_phapol,ftm_qdctrl_phbpol  : %register = 0           ;
               ftm_cntin                                                : %register = 0           ;
               ftm_mod                                                  : %configRegAssignment    ;
               ftm_cnt                                                  : %register = 0           ;
               ftm_sc_action,ftm_sc_ps                                  : %configRegAssignment    ;
               ftm_filter_qd_a,ftm_filter_qd_b                          : %configRegAssignment    ;
               ftm_qdctrl_phapol,ftm_qdctrl_phbpol,ftm_qdctrl_quadmode  : %configRegAssignment|FTM_QDCTRL_QUADEN_MASK    " >
         <variableTemplate variables="%(var)" codeGenCondition="enablePeripheralSupport" ><![CDATA[
            \t
            %multilineDescription
            \t   %(statement);\n
         ]]></variableTemplate>
      </for>
      <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
         \t
         \t   return E_NO_ERROR;
         \t}\n\n
      ]]></template>

      <!--  ____ Default QuadInitValue value ____ -->

      <variableTemplate codeGenCondition="enablePeripheralSupport&amp;&amp;(mode==Quad)"
         separator=","
         terminator=","
         variables="
            ftm_qdctrl_quadmode,
            ftm_sc_action,
            ftm_sc_ps,
            ftm_mod,
            ftm_qdctrl_phapol,
            ftm_qdctrl_phbpol,
            ftm_filter_qd_a,
            ftm_filter_qd_b"
      ><![CDATA[
         \t/**
         \t * Default initialisation value for $(_Class)QuadDecoder
         \t * This value is created from Configure.usbdmProject settings
         \t */
         \tstatic constexpr QuadInit DefaultQuadInitValue = {%initExpression
         \t};\n\n
      ]]></variableTemplate>

   </if> <!-- condition="ftm_qdctrl_quadmode_present" -->

<!--  ____ FTM QUAD Declarations ____________________________ -->

   <template key="/$(_BASENAME)/declarations"  condition="_declaration&amp;&amp;ftm_qdctrl_present"
      codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * Class representing $(_NAME) as Quadrature decoder
      \t */
   \ttypedef $(_Baseclass)QuadDecoder_T<$(_Class)Info> $(_Baseclass)QuadDecoder$(_instance);\n
   ]]></template>

</fragment>
