<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pcc_s32k144.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Port Clock Control" >

<template namespace="usbdm"><![CDATA[
   \t/**
   \t * Clock sources using first dividers\n\n
   \t * - SOSCDIV1_CLK = System oscillator clock divided by SCG_SOSCDIV.SOSCDIV1
   \t * - SIRCDIV1_CLK = Output clock of Slow IRC divided by SCG_SIRCDIV.SIRCDIV1
   \t * - FIRCDIV1_CLK = Output clock of Fast IRC divided by SCG_FIRCDIV.FIRCDIV1
   \t * - SPLLDIV1_CLK = Output of PLL (VCO_CLK / 2) divided by SCG_SPLLDIV.SPLLDIV1
   \t */
   \tenum PccDiv1Clock {
   \t   PccDiv1Clock_Disabled    = PCC_PCCn_PCS(0), //!< Disabled
   \t   PccDiv1Clock_FtmExternal = PCC_PCCn_PCS(0), //!< FTM external clock (FTM only)
   \t   PccDiv1Clock_Sosc        = PCC_PCCn_PCS(1), //!< SOSCDIV1_CLK
   \t   PccDiv1Clock_Sirc        = PCC_PCCn_PCS(2), //!< SIRCDIV1_CLK
   \t   PccDiv1Clock_Firc        = PCC_PCCn_PCS(3), //!< FIRCDIV1_CLK
   \t   PccDiv1Clock_Reserved4   = PCC_PCCn_PCS(4), //!< Disabled
   \t   PccDiv1Clock_Reserved5   = PCC_PCCn_PCS(5), //!< Disabled
   \t   PccDiv1Clock_Spll        = PCC_PCCn_PCS(6), //!< SPLLDIV1_CLK
   \t   PccDiv1Clock_Reserved7   = PCC_PCCn_PCS(7), //!< Disabled
   \t};\n\n

   \t/**
   \t * Clock sources using second dividers\n\n
   \t * - SOSCDIV2_CLK = System oscillator clock divided by SCG_SOSCDIV.SOSCDIV2
   \t * - SIRCDIV2_CLK = Output clock of Slow IRC divided by SCG_SIRCDIV.SIRCDIV2
   \t * - FIRCDIV2_CLK = Output clock of Fast IRC divided by SCG_FIRCDIV.FIRCDIV2
   \t * - SPLLDIV2_CLK = Output of PLL (VCO_CLK / 2) divided by SCG_SPLLDIV.SPLLDIV2
   \t */
   \tenum PccDiv2Clock {
   \t   PccDiv2Clock_Disabled    = PCC_PCCn_PCS(0), //!< Disabled
   \t   PccDiv2Clock_Sosc        = PCC_PCCn_PCS(1), //!< SOSCDIV2_CLK
   \t   PccDiv2Clock_Sirc        = PCC_PCCn_PCS(2), //!< SIRCDIV2_CLK
   \t   PccDiv2Clock_Firc        = PCC_PCCn_PCS(3), //!< FIRCDIV2_CLK
   \t   PccDiv2Clock_Reserved4   = PCC_PCCn_PCS(4), //!< Disabled
   \t   PccDiv2Clock_Reserved5   = PCC_PCCn_PCS(5), //!< Disabled
   \t   PccDiv2Clock_Spll        = PCC_PCCn_PCS(6), //!< SPLLDIV2_CLK
   \t   PccDiv2Clock_Reserved7   = PCC_PCCn_PCS(7), //!< Disabled
   \t};\n\n
   
   \t/**
   \t * PCC division factors
   \t */
   \tenum PccDivider {
   \t   PccDivider_Div1    = PCC_PCCn_FRAC(0)|PCC_PCCn_PCD(0),//!< PccDivider_Div1
   \t //PccDivider_Div1a   = PCC_PCCn_FRAC(1)|PCC_PCCn_PCD(1),//!< PccDivider_Div1a
   \t   PccDivider_Div1_5  = PCC_PCCn_FRAC(1)|PCC_PCCn_PCD(2),//!< PccDivider_Div1_5
   \t   PccDivider_Div2    = PCC_PCCn_FRAC(0)|PCC_PCCn_PCD(1),//!< PccDivider_Div2
   \t //PccDivider_Div2a   = PCC_PCCn_FRAC(1)|PCC_PCCn_PCD(3),//!< PccDivider_Div2a
   \t   PccDivider_Div2_5  = PCC_PCCn_FRAC(1)|PCC_PCCn_PCD(4),//!< PccDivider_Div2_5
   \t   PccDivider_Div3    = PCC_PCCn_FRAC(0)|PCC_PCCn_PCD(2),//!< PccDivider_Div3
   \t //PccDivider_Div3a   = PCC_PCCn_FRAC(1)|PCC_PCCn_PCD(5),//!< PccDivider_Div3a
   \t   PccDivider_Div3_5  = PCC_PCCn_FRAC(1)|PCC_PCCn_PCD(6),//!< PccDivider_Div3_5
   \t   PccDivider_Div4    = PCC_PCCn_FRAC(0)|PCC_PCCn_PCD(3),//!< PccDivider_Div4
   \t //PccDivider_Div4a   = PCC_PCCn_FRAC(1)|PCC_PCCn_PCD(7),//!< PccDivider_Div4a
   \t   PccDivider_Div5    = PCC_PCCn_FRAC(0)|PCC_PCCn_PCD(4),//!< PccDivider_Div5
   \t   PccDivider_Div6    = PCC_PCCn_FRAC(0)|PCC_PCCn_PCD(5),//!< PccDivider_Div6
   \t   PccDivider_Div7    = PCC_PCCn_FRAC(0)|PCC_PCCn_PCD(6),//!< PccDivider_Div7
   \t   PccDivider_Div8    = PCC_PCCn_FRAC(0)|PCC_PCCn_PCD(7),//!< PccDivider_Div8
   \t};\n\n
]]></template>

<for keys = "instance,  INSTANCE"
     values="ftm0,      FTM0;
             ftm1,      FTM1;
             ftm2,      FTM2;
             ftm3,      FTM3;
             enet,      ENET">
   <choiceOption key="pcc_%(instance)" 
      description="Clock to %(INSTANCE)"
      toolTip="Default clock for %(INSTANCE)">
      <choice value="PccDiv1Clock_Disabled"                   name="Disabled" />
      <choice value="PCC_PCCn_CGC_MASK|PccDiv1Clock_Sosc"     name="SOSCDIV1_CLK" />
      <choice value="PCC_PCCn_CGC_MASK|PccDiv1Clock_Sirc"     name="SIRCDIV1_CLK" />
      <choice value="PCC_PCCn_CGC_MASK|PccDiv1Clock_Firc"     name="FIRCDIV1_CLK" isDefault="true" />
      <choice value="PCC_PCCn_CGC_MASK|PccDiv1Clock_Spll"     name="SPLLDIV1_CLK" />
   </choiceOption>
</for>

<for keys = "instance,  INSTANCE"
     values="Adc0,      ADC0;
             Adc1,      ADC1;
             Flexio,    FLEXIO; 
             Lpuart0,   LPUART0;
             Lpuart1,   LPUART1;
             Lpuart2,   LPUART2;
             Lpspi0,    LPSPI0;
             Lpspi1,    LPSPI1;
             Lpspi2,    LPSPI2;
             Lpi2c0,    LPI2C0; 
             Lpi2c1,    LPI2C1; 
             Lpi2c2,    LPI2C2; 
             Lpit0,     LPIT0;  
             Lptmr0,    LPTRM0" >
   <choiceOption key="pcc_%instance" 
      description="Clock to $(INSTANCE)"
      toolTip="Default clock for $(INSTANCE)">
      <choice value="PccDiv2Clock_Disabled"                   name="Disabled" />
      <choice value="PCC_PCCn_CGC_MASK|PccDiv2Clock_Sosc"     name="SOSCDIV2_CLK" />
      <choice value="PCC_PCCn_CGC_MASK|PccDiv2Clock_Sirc"     name="SIRCDIV2_CLK" />
      <choice value="PCC_PCCn_CGC_MASK|PccDiv2Clock_Firc"     name="FIRCDIV2_CLK" isDefault="true" />
      <choice value="PCC_PCCn_CGC_MASK|PccDiv2Clock_Spll"     name="SPLLDIV2_CLK" />
   </choiceOption>
</for>

<for keys = "instance,  INSTANCE"
     values="Ftfc,      FTFC;
             Dmamux0,   DMAMUX0;
             Can0,      CAN0; 
             Can1,      CAN1; 
             Can2,      CAN2; 
             Cmp0,      CMP0;
             Crc0,      CRC0;
             Pdb0,      PDB0;
             Pdb1,      PDB1;
             Rtc,       RTC;
             Porta      PORTA;
             Portb      PORTB;
             Portc      PORTC;
             Portd      PORTD;
             Porte      PORTE;
             Sai0,      SAI0;
             Sai1,      SAI1;
             Ewm,       EWM; " >
   <binaryOption key="pcc_%instance" 
      description="Clock to $(INSTANCE)"
      toolTip="Default clock for $(INSTANCE)">
      <choice value="PCC_PCCn_CGC(0)"  name="Disabled" />
      <choice value="PCC_PCCn_CGC(1)"  name="Enabled" isDefault="true" />
   </binaryOption>
</for>

<template><![CDATA[
   \t/**
   \t * Get clock frequency for peripheral using the Divide-by-1 clock sources
   \t *
   \t * @param pccDiv1Clock Clock source selector as used by PCC->PCCn
   \t *
   \t * @return Frequency as a uint32_t in Hz
   \t */
   \tstatic uint32_t getDivideBy1Frequency(PccDiv1Clock pccDiv1Clock) {
   \t   switch(pccDiv1Clock&(PCC_PCCn_CGC_MASK|PCC_PCCn_PCS_MASK)) {
   \t      default:
   \t      case PccDiv1Clock_Disabled: return 0; // Disabled
   \t      case PCC_PCCn_CGC_MASK|PccDiv1Clock_Spll: return ScgInfo::getSpllDiv1Frequency(); // SPLLDIV1_CLK
   \t      case PCC_PCCn_CGC_MASK|PccDiv1Clock_Firc: return ScgInfo::getFircDiv1Frequency(); // FIRCDIV1_CLK
   \t      case PCC_PCCn_CGC_MASK|PccDiv1Clock_Sirc: return ScgInfo::getSircDiv1Frequency(); // SIRCDIV1_CLK
   \t      case PCC_PCCn_CGC_MASK|PccDiv2Clock_Sosc: return ScgInfo::getSoscDiv1Frequency(); // SOSCDIV2_CLK
   \t   }
   \t}\n\n

   \t/**
   \t * Get clock frequency for peripheral using the Divide-by-2 clock sources
   \t *
   \t * @param pccDiv2Clock Clock source selector as used by PCC->PCCn
   \t *
   \t * @return Frequency as a uint32_t in Hz
   \t */
   \tstatic uint32_t getDivideBy2Frequency(PccDiv2Clock pccDiv2Clock) {
   \t   switch(pccDiv2Clock&(PCC_PCCn_CGC_MASK|PCC_PCCn_PCS_MASK)) {
   \t      default:
   \t      case PccDiv2Clock_Disabled: return 0; // Disabled
   \t      case PCC_PCCn_CGC_MASK|PccDiv2Clock_Spll: return ScgInfo::getSpllDiv2Frequency(); // SPLLDIV2_CLK
   \t      case PCC_PCCn_CGC_MASK|PccDiv2Clock_Firc: return ScgInfo::getFircDiv2Frequency(); // FIRCDIV2_CLK
   \t      case PCC_PCCn_CGC_MASK|PccDiv2Clock_Sirc: return ScgInfo::getSircDiv2Frequency(); // SIRCDIV2_CLK
   \t      case PCC_PCCn_CGC_MASK|PccDiv2Clock_Sosc: return ScgInfo::getSoscDiv2Frequency(); // SOSCDIV2_CLK
   \t   }
   \t}\n\n
]]></template>

<for keys="instance" values="Ftm0;Ftm1;Ftm2;Ftm3;Enet" >
   <template>
      <![CDATA[
      #ifdef PCC_PCC_$(instance::toupper)_CGC_MASK
      \t/**
      \t * Set $(instance::toupper) input clock source
      \t *
      \t * @param pccDiv1Clock Clock source selection
      \t *
      \t * @note These peripherals use the DIV1 peripheral clocks e.g. SOSCDIV1_CLK 
      \t * @note The peripheral bus clock will be disabled before changing the clock source.  It is left disabled. 
      \t */
      \tstatic void set%instanceClockSource(PccDiv1Clock pccDiv1Clock) {
      \t   // Disable bus clock before change 
      \t   pcc().PCC_$(instance::toupper) = 0;
      \t   pcc().PCC_$(instance::toupper) = pccDiv1Clock;
      \t}\n\n
      
      \t/**
      \t * Get $(instance::toupper) input clock frequency
      \t *
      \t * @note These peripherals use the DIV1 peripheral clocks e.g. SOSCDIV1_CLK 
      \t *
      \t * @return Frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t get%instanceFrequency() {
      \t   return getDivideBy1Frequency((PccDiv1Clock)pcc().PCC_$(instance::toupper));
      \t}\n\n
   
      \t/**
      \t *  Enable $(instance::toupper) clock
      \t */
      \tstatic void enable%instanceClock() {
      \t   pcc().PCC_$(instance::toupper) |= PCC_PCCn_CGC_MASK;
      \t}\n\n
   
      \t/**
      \t *  Disable $(instance::toupper) clock
      \t */
      \tstatic void disable%instanceClock() {
      \t   pcc().PCC_$(instance::toupper) &= ~PCC_PCCn_CGC_MASK;
      \t}
      #endif\n\n
      ]]>
   </template>
</for>
      
<for keys="instance" values="
      Adc0; Adc1; 
      Flexio; 
      Lpuart0; Lpuart1; Lpuart2; 
      Lpspi0; Lpspi1; Lpspi2; 
      Lpi2c0; Lpi2c1; Lpi2c2; 
      Lpit0"
   >
   <template>
      <![CDATA[
      #ifdef PCC_PCC_$(instance::toupper)_CGC_MASK
      \t/**
      \t * Set $(instance::toupper) input clock source
      \t *
      \t * @param pccDiv2Clock Clock source selection
      \t *
      \t * @note These peripherals use the DIV2 peripheral clocks e.g. SOSCDIV2_CLK.
      \t * @note The peripheral bus clock will be disabled before changing the clock source.  It is left disabled.
      \t */
      \tstatic void set%instanceClockSource(PccDiv2Clock pccDiv2Clock) {
      \t   // Disable bus clock before change
      \t   pcc().PCC_$(instance::toupper) = 0;
      \t   pcc().PCC_$(instance::toupper) = pccDiv2Clock;
      \t}\n\n
      
      \t/**
      \t * Get $(instance::toupper) input clock frequency
      \t *
      \t * @note These peripherals use the DIV2 peripheral clocks e.g. SOSCDIV2_CLK. 
      \t *
      \t * @return Frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t get%instanceFrequency() {
      \t   return getDivideBy2Frequency((PccDiv2Clock)pcc().PCC_$(instance::toupper));
      \t}\n\n
   
      \t/**
      \t *  Enable $(instance::toupper) default clock
      \t */
      \tstatic void enable%instanceClock() {
      \t   pcc().PCC_$(instance::toupper) |= PCC_PCCn_CGC_MASK;
      \t}\n\n
   
      \t/**
      \t *  Disable $(instance::toupper) clock
      \t */
      \tstatic void disable%instanceClock() {
      \t   pcc().PCC_$(instance::toupper) &= ~PCC_PCCn_CGC_MASK;
      \t}
      #endif\n\n
      ]]>
   </template>
</for>

<for keys="instance" values="Lptmr0" >
   <template>
      <![CDATA[
      #ifdef PCC_PCC_$(instance::toupper)_CGC_MASK
      \t/**
      \t * Set $(instance::toupper) input clock source
      \t *
      \t * @param pccDiv2Clock Clock source selection
      \t * @param pccDivider   Clock divider selection
      \t *
      \t * @note These peripherals use the DIV2 peripheral clocks e.g. SOSCDIV2_CLK.
      \t * @note The peripheral bus clock will be disabled before changing the clock source.  It is left disabled.
      \t */
      \tstatic void set%instanceClockSource(PccDiv2Clock pccDiv2Clock, PccDivider pccDivider=PccDivider_Div1) {
      \t   // Disable bus clock before change
      \t   pcc().PCC_$(instance::toupper) = 0;
      \t   pcc().PCC_$(instance::toupper) = pccDiv2Clock|pccDivider;
      \t}\n\n
      
      \t/**
      \t * Get $(instance::toupper) input clock frequency
      \t *
      \t * @note These peripherals use the DIV2 peripheral clocks e.g. SOSCDIV2_CLK. 
      \t *
      \t * @return Frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t get%instanceFrequency() {
      \t   static const int dividerX2[] = {
      \t      2,4,6,8,10,12,14,16,-2,2,3,4,5,6,7,8,
      \t   };
      \t   int divider = dividerX2[((pcc().PCC_$(instance::toupper))&(PCC_PCCn_FRAC_MASK|PCC_PCCn_PCD_MASK))>>PCC_PCCn_PCD_SHIFT];
      \t   if (divider<0) {
      \t      // FRAC(1)|PCD(0) is illegal
      \t      return 0;
      \t   }
      \t   return 2*getDivideBy2Frequency((PccDiv2Clock)pcc().PCC_$(instance::toupper))/divider;
      \t}\n\n
   
      \t/**
      \t *  Enable $(instance::toupper) clock
      \t */
      \tstatic void enable%instanceClock() {
      \t   pcc().PCC_$(instance::toupper) |= PCC_PCCn_CGC_MASK;
      \t}\n\n
   
      \t/**
      \t *  Disable $(instance::toupper) clock
      \t */
      \tstatic void disable%instanceClock() {
      \t   pcc().PCC_$(instance::toupper) &= ~PCC_PCCn_CGC_MASK;
      \t}
      #endif\n\n
      ]]>
   </template>
</for>

<for keys="instance" values="
   Ftfc; 
   Dmamux0; 
   Can0; Can1; Can2; 
   Cmp0;
   Crc0;
   Pdb0; Pdb1; 
   Rtc; 
   Porta; Portb; Portc; Portd; Porte; 
   Sai0; Sai1; 
   Ewm"
>
   <template>
      <![CDATA[
      #ifdef PCC_PCC_$(instance::toupper)_CGC_MASK
      \t/**
      \t *  Enable $(instance::toupper) default clock
      \t */
      \tstatic void enable%instanceClock() {
      \t   pcc().PCC_$(instance::toupper) |= PCC_PCCn_CGC_MASK;
      \t}\n\n
   
      \t/**
      \t *  Disable $(instance::toupper) clock
      \t */
      \tstatic void disable%instanceClock() {
      \t   pcc().PCC_$(instance::toupper) &= ~PCC_PCCn_CGC_MASK;
      \t}
      #endif
      ]]>
   </template>
</for>

<for keys="instance" values="
   Adc0; Adc1; 
   Flexio; 
   Lpuart0; Lpuart1; Lpuart2; 
   Lpspi0; Lpspi1; Lpspi2; 
   Lpi2c0; Lpi2c1; Lpi2c2; 
   Lpit0;
   Lptmr0;
   Ftm0; Ftm1; Ftm2; Ftm3; 
   Enet;
   Ftfc; 
   Dmamux0; 
   Can0; Can1; Can2; 
   Cmp0;
   Crc0;
   Pdb0; Pdb1; 
   Rtc; 
   Porta; Portb; Portc; Portd; Porte; 
   Sai0; Sai1; 
   Ewm"
>
   <template>
      <![CDATA[
      \t/**
      \t *  Initialise default peripheral clocks
      \t */
      \tstatic void enablePeripheralClocks() {
      ]]>
      <![CDATA[
      #ifdef PCC_PCC_$(instance::toupper)_CGC_MASK
      \t   pcc().PCC_$(instance::toupper) = $(pcc_$(instance::tolower));
      #endif
      ]]>
      <![CDATA[
      \t}
      ]]>
   </template>
</for>
</peripheralPage>
