<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- cmp_base.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <xi:include href="_default_instance.xml"/>

   <template><![CDATA[
      \t//! Pin number in Info table for comparator output if mapped to a pin
      \tstatic constexpr int outputPin  = 8;\n\n
   ]]></template>
   
   <xi:include href="_mapPinsOption.xml"/>
   
   <choiceOption name="cmp_cr0_filter_cnt" 
      description="Filter Sample Count"
      toolTip="Represents the number of consecutive samples that must agree prior\n
      to the comparator ouput filter accepting a new output state">
      <choice value="0" name="Filter is disabled" />
      <choice value="1" name="1 sample must agree" />
      <choice value="2" name="2 sample must agree" />
      <choice value="3" name="3 sample must agree" />
      <choice value="4" name="4 sample must agree" />
      <choice value="5" name="5 sample must agree" />
      <choice value="6" name="6 sample must agree" />
      <choice value="7" name="7 sample must agree" />
   </choiceOption>

   <choiceOption name="cmp_cr0_hystctr" 
      description="Comparator hard block hysteresis control"
      toolTip="Defines the programmable hysteresis level.\n
      The hysteresis values associated with each level are device specific">
      <choice value="0" name="Level 0" />
      <choice value="1" name="Level 1" />
      <choice value="2" name="Level 2" />
      <choice value="3" name="Level 3" />
   </choiceOption>

   <template><![CDATA[
      \t//! CMP Control Register 0
      \tstatic constexpr uint32_t cr0 =
      \t   CMP_CR0_FILTER_CNT($(cmp_cr0_filter_cnt))     | // Filter Sample Count
      \t   CMP_CR0_HYSTCTR($(cmp_cr0_hystctr));         // Comparator hard block hysteresis control\n\n
   ]]></template>

   <binaryOption name="cmp_cr1_se" 
      description="Sample Enable"
      toolTip="Sampling mode enabled">
      <choice value="0" name="Sampling mode is disabled" />
      <choice value="1" name="Sampling mode is enabled" />
   </binaryOption>

   <binaryOption name="cmp_cr1_we" 
      description="Windowing Enable"
      toolTip="Windowing mode enabled">
      <choice value="0" name="Windowing mode is disabled" />
      <choice value="1" name="Windowing mode is enabled" />
   </binaryOption>

   <binaryOption name="cmp_cr1_trigm" 
      description="Trigger Mode Enable"
      toolTip="CMP and DAC are configured to CMP Trigger mode">
      <choice value="0" name="Trigger mode is disabled" />
      <choice value="1" name="Trigger mode is enabled" />
   </binaryOption>

   <binaryOption name="cmp_cr1_pmode" 
      description="Power Mode Select"
      toolTip="Selects trade-off between speed and power consumption">
      <choice value="0" name="Low-Speed (LS) Comparison mode" />
      <choice value="1" name="High-Speed (HS) Comparison mode" />
   </binaryOption>

   <binaryOption name="cmp_cr1_inv" 
      description="Comparator Invert"
      toolTip="Allows selection of the polarity of the analog comparator function">
      <choice value="0" name="Not inverted" />
      <choice value="1" name="Inverted" />
   </binaryOption>

   <binaryOption name="cmp_cr1_cos" 
      description="Comparator Output Select"
      toolTip="">
      <choice value="0" name="Set the filtered comparator output (CMPO) to equal COUT" />
      <choice value="1" name="Set the unfiltered comparator output (CMPO) to equal COUTA" />
   </binaryOption>

   <binaryOption name="cmp_cr1_ope" 
      description="Comparator Output Pin Enable"
      toolTip="">
      <choice value="0" name="CMPO is not available on CMPO pin" />
      <choice value="1" name="CMPO is available on CMPO pin" />
   </binaryOption>

   <template><![CDATA[
      \t#ifndef CMP_CR1_TRIGM
      \t#define CMP_CR1_TRIGM(x) 0
      \t#endif
      
      \t//! CMP Control Register 1
      \tstatic constexpr uint32_t cr1 =
      \t   CMP_CR1_SE($(cmp_cr1_se))    | // Sample Enable
      \t   CMP_CR1_WE($(cmp_cr1_we))    | // Windowing Enable
      \t   CMP_CR1_TRIGM($(cmp_cr1_trigm)) | // Trigger Mode Enable
      \t   CMP_CR1_PMODE($(cmp_cr1_pmode)) | // Power mode Select
      \t   CMP_CR1_INV($(cmp_cr1_inv))   | // Comparator Invert
      \t   CMP_CR1_COS($(cmp_cr1_cos))   | // Comparator Output Select
      \t   CMP_CR1_OPE($(cmp_cr1_ope));    // Comparator Output Pin Enable\n\n
   ]]></template>
      
   <intOption name="cmp_fpr_filt_per"
      description="Filter Sample Period"
      toolTip="Specifies the sampling period, in bus clock cycles, of the comparator output filter"
      value="0" min="0" max="255" />
           
   <template><![CDATA[
      \t//! CMP Filter Period Register
      \tstatic constexpr uint32_t fpr =
      \t   CMP_FPR_FILT_PER($(cmp_fpr_filt_per)); // Filter Sample Period\n\n
   ]]></template>

   <binaryOption name="cmp_scr_dmaen" 
      description="DMA Enable Control"
      toolTip="Enables the DMA transfer triggered from the CMP module\n(If DMA supported by device)\n
         When this field is set, a DMA request is asserted when CFR or CFF is set">
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <binaryOption name="cmp_scr_ier" 
      description="Comparator Interrupt Enable Rising"
      toolTip="Enables the CFR interrupt from the CMP.\n
         When this field is set, an interrupt will be asserted when CFR is set">
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <binaryOption name="cmp_scr_ief" 
      description="Comparator Interrupt Enable Falling"
      toolTip="Enables the CFF interrupt from the CMP\n
         When this field is set, an interrupt will be asserted when CFF is set">
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <template><![CDATA[
      \t//! CMP Status and Control Register
      \tstatic constexpr uint32_t scr =
      \t#ifdef CMP_SCR_DMAEN
      \t   CMP_SCR_DMAEN($(cmp_scr_dmaen:0)) | // DMA Enable Control
      \t#endif
      \t   CMP_SCR_IER($(cmp_scr_ier)) | // Comparator Interrupt Enable Rising
      \t   CMP_SCR_IEF($(cmp_scr_ief));  // Comparator Interrupt Enable Falling\n\n
   ]]></template>

   <binaryOption name="cmp_daccr_vrsel" 
      description="DAC Reference Voltage Select"
      toolTip="Supply Voltage Reference Source Select">
      <choice value="0" name="Vin1 (Vref_OUT)" />
      <choice value="1" name="Vin2 (Vdd)" />
   </binaryOption>

   <template><![CDATA[
      \t//! DAC Control Register
      \tstatic constexpr uint32_t daccr =
      \t   CMP_DACCR_VRSEL($(cmp_daccr_vrsel)); // Supply Voltage Reference Source Select\n\n
   ]]></template>

   <projectActionList id = "cmp_files" >
      <copy source="Project_Headers/cmp.h"     target="Project_Headers/cmp.h"     overwrite="true"  derived="true" />
      <copy source="Snippets/cmp-example.cpp"  target="Snippets/cmp-example.cpp"  overwrite="true"  derived="true" />
   </projectActionList>
   
   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator">
   </validate>

</fragment>
