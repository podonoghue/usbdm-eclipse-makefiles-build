<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- cmp_base.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <constant key="disable_peripheral" value='"cmp->CR1 = CMP_CR1_EN(0);"' type="String" />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <equation key="suppressIrqHandler"         value="" />
   <equation key="irq_parameters"             value="const CmpStatus &amp;status"  />
   <equation key="irq_dummy_parameters"       value="const CmpStatus &amp;"  />
   <equation key="irq_call"                   value="cmpStatus"      />
   <equation key="generateDefault"            value="false"     />
   <equation key="configureInStartupDefault"  value="false"     />
   <xi:include href="enablePeripheral.xml"    />
   <title />

   <template>
      <![CDATA[
         \t//! Pin number in Info table for comparator output if mapped to a pin
         \tstatic constexpr int outputPin  = 8;\n\n
      ]]>
   </template>

   <!-- Interrupts and DMA -->
   <choiceOption key="cmp_scr_interrupt" condition="cmp_scr_ier_present || cmp_scr_ief_present"
      enabledBy="irqHandlingMethod"
      typeName="CmpEvent"
      baseType="uint8_t"
      valueFormat="CMP_SCR_IER(%s),CMP_SCR_IEF(%s)"
      description="Action on transition"
      toolTip="Enables interrupt request on comparator transition">
      <choice value="0,0" name="Disabled"     enum="Disabled"  />
      <choice value="1,1" name="Rising edge"  enum="OnRising"  />
      <choice value="1,0" name="Falling edge" enum="OnFalling" />
      <choice value="1,0" name="Either edge"  enum="OnEither"  />
   </choiceOption>

   <binaryOption key="cmp_scr_dmaen" condition="cmp_scr_dmaen_present"
      typeName="CmpDma"
      baseType="uint8_t"
      description="DMA Enable Control"
      toolTip="Enables the DMA transfer triggered from the CMP module (If DMA supported by device)\n
               When this field is set, a DMA request is asserted when CFR or CFF is set">
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled"  />
   </binaryOption>

   <!--  Clocking -->
   <title description="Clocking" />

   <choiceOption key="cmpClockConfig"
      target="input_clock"
      description="Clock configuration"
      toolTip="Selects the clock configuration used for ticks and time calculations" >
      <choice value="0" name="@/MCG/ClockConfig[0]" ref="/SIM/system_bus_clock[0]"  isDefault="true" />
      <choice value="1" name="@/MCG/ClockConfig[1]" ref="/SIM/system_bus_clock[1]"  />
      <choice value="2" name="@/MCG/ClockConfig[2]" ref="/SIM/system_bus_clock[2]"  />
      <choice value="3" name="@/MCG/ClockConfig[3]" ref="/SIM/system_bus_clock[3]"  />
   </choiceOption>

   <intOption key="input_clock"
      ref="/SIM/system_bus_clock[0]"
      locked="true"
      derived="true"
      units="Hz"
      description="Frequency of CMP input Clock" />

   <!--  Configuration -->
   <title description="Configuration" />

   <choiceOption key="cmp_cr0_hystctr" condition="cmp_cr0_hystctr_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmpHysteresis"
      baseType="uint8_t"
      description="Comparator hard block hysteresis control"
      toolTip="Defines the programmable hysteresis level.\n
               The hysteresis values associated with each level are device specific">
      <choice value="0" name="Level 0" enum="Level_0" />
      <choice value="1" name="Level 1" enum="Level_1" />
      <choice value="2" name="Level 2" enum="Level_2" />
      <choice value="3" name="Level 3" enum="Level_3" />
   </choiceOption>

   <!-- ____ CR1 ________ -->

   <binaryOption key="cmp_cr1_pmode" condition="cmp_cr1_pmode_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmpPower"
      baseType="uint8_t"
      description="Power Mode Select"
      toolTip="Selects trade-off between speed and power consumption">
      <choice value="0" name="Low-Speed Comparison mode"  enum="LowSpeed"  />
      <choice value="1" name="High-Speed Comparison mode" enum="HighSpeed" />
   </binaryOption>

   <binaryOption key="cmp_cr1_inv" condition="cmp_cr1_inv_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmpPolarity"
      baseType="uint8_t"
      description="Comparator Invert"
      toolTip="Allows selection of the polarity of the analog comparator function">
      <choice value="0" name="Not inverted" enum="Normal"   />
      <choice value="1" name="Inverted"     enum="Inverted" />
   </binaryOption>

   <binaryOption key="cmp_cr1_trigm" condition="cmp_cr1_trigm_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmpTrigger"
      baseType="uint8_t"
      description="Trigger Mode Enable"
      toolTip="CMP and DAC are configured to CMP Trigger mode.  \n
              CMP Trigger mode depends on an external timer resource to periodically enable \n
              Upon setting TRIGM, the CMP and DAC are placed in a standby state until an \n
              external timer resource trigger is received.">
      <choice value="0" name="Trigger mode is disabled" enum="Disabled" />
      <choice value="1" name="Trigger mode is enabled"  enum="Enabled"  />
   </binaryOption>

   <choiceOption key="cmp_cr1_output" condition="cmp_cr1_ope_present || cmp_cr1_cos_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmpOutput"
      baseType="uint8_t"
      valueFormat="CMP_CR1_OPE(%s),CMP_CR1_COS(%s)"
      description="Comparator output pin source"
      toolTip="Selects whether the output pin is driven by the filtered or unfiltered comparator output">
      <choice value="0,0" name="Disabled" enum="Disabled"/>
      <choice value="1,1" name="Direct (unfiltered)"  enum="Direct"   />
      <choice value="1,0" name="Filtered"             enum="Filtered" />
   </choiceOption>

   <choiceOption key="cmp_muxcr_psel"
      valueFormat="CMP_MUXCR_PSEL(%s)"
      typeName="CmpInputPlus"
      baseType="uint8_t"
      description="Plus Input Mux Control"
      toolTip="Determines which input is selected for the plus input of the comparator" >
      <choiceExpansion value="%(i)"  enum="%(i)"
                       name='@SignalDescriptionFromIndex(%(i),"^(.*?)\|(.*?)\|(.*?)\|(.*?)\|(.*?)$","$4")'
                       keys="i" dim="8" />
   </choiceOption>

   <choiceOption key="cmp_muxcr_msel"
      valueFormat="CMP_MUXCR_MSEL(%s)"
      typeName="CmpInputMinus"
      baseType="uint8_t"
      description="Minus Input Mux Control"
      toolTip="Determines which input is selected for the minus input of the comparator" >
      <choiceExpansion value="%(i)"  enum="%(i)"
                       name='@SignalDescriptionFromIndex(%(i),"^(.*?)\|(.*?)\|(.*?)\|(.*?)\|(.*?)$","$4")'
                       keys="i" dim="8" />
   </choiceOption>

   <!--  choiceOption key="cmp_muxcr_plus"
      hidden="true"
      valueFormat="CMP_MUXCR_PSEL(%s)"
      typeName="CmpInputPlus"
      baseType="uint8_t"
      description="Plus Input Mux Control"
      toolTip="Determines which input is selected for the plus input of the comparator" >
      <choiceExpansion value="%(i)" name='CMP_IN%(i) as positive input' enum="%(i)" keys="i" dim="8" />
   </choiceOption>

   <choiceOption key="cmp_muxcr_minus"
      hidden="true"
      valueFormat="CMP_MUXCR_MSEL(%s)"
      typeName="CmpInputMinus"
      baseType="uint8_t"
      description="Minus Input Mux Control"
      toolTip="Determines which input is selected for the minus input of the comparator" >
      <choiceExpansion value="%(i)" name='CMP_IN%(i) as negative input' enum="%(i)" keys="i" dim="8" />
   </choiceOption -->

   <!-- DAC Configuration -->
   <title description="Internal DAC Configuration" />

   <binaryOption key="cmp_daccr_dacen" condition="cmp_daccr_dacen_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmpDacEnable"
      baseType="uint8_t"
      description="DAC Enable"
      toolTip="Enables the internal DAC">
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled"  />
   </binaryOption>

   <binaryOption key="cmp_daccr_vrsel" condition="cmp_daccr_vrsel_present"
      enabledBy="cmp_daccr_dacen"
      typeName="CmpDacrefSel"
      baseType="uint8_t"
      description="DAC Reference Voltage Select"
      toolTip="Supply Voltage Reference Source Select">
      <choice value="0" name="Vin1 (Vref_OUT)"  enum="VrefOut" />
      <choice value="1" name="Vin2 (Vdd)"       enum="Vdd"     isDefault="true"/>
   </binaryOption>

   <intOption key="cmp_daccr_vosel" condition="cmp_daccr_vosel_present"
      enabledBy="cmp_daccr_dacen"
      typeName="CmpDacLevel"
      baseType="int8_t"
      description="DAC level"
      toolTip="Specifies the output level of the internal DAC"
      value="31" min="0" max="63"/>

   <!--  Filtering and Sampling -->
   <title description="Filtering and Sampling" />

   <binaryOption key="secondsSupport"
      enabledBy="enablePeripheralSupport"
      description="Enable use of Seconds for time"
      toolTip="Use of floating point is necessary to support specifing CMP filter times in seconds in runtime code.\n
               If not needed, the overhead can be avoided by disabling this option">
      <choice value="false" enum="Disabled" name="Seconds support disabled" isDefault="true" />
      <choice value="true"  enum="Enabled"  name="Seconds support enabled" />
   </binaryOption>

   <choiceOption key="cmp_filter"
      enabledBy="enablePeripheralSupport"
      target="cmp_cr1_en;cmp_cr1_we;cmp_cr1_se;cmp_cr0_filter;cmp_fpr_filt_per"
      valueFormat="%s"
      baseType="uint8_t"
      typeName="CmpFilterMode"
      description="Comparator Filtering Mode"
      toolTip="Disabled\n
               Comparator is non-functional and consumes no power.\n
               CMPO is 0 in this mode.\n
               \n
               Mode 2a/b - Continuous mode\n
               CMPO is not subject to sampling or filtering. \n
               Both window control and filter blocks are completely bypassed.  \n
               SCR[COUT] is updated continuously.  \n
               The path from comparator input pins is operating in combinational unclocked mode. \n
               \n
               Mode 3a/b - Sampled, Non-Filtered mode\n
               CMPO is not subject to sampling or filtering.  \n
               Window control is bypassed. The filter block operates as a simple Sample &amp; Hold \n
               3a/b selects between clock sources for the Sample &amp; Hold \n
               In 3a the external window/sample input is used to clock the Sample &amp; Hold clock \n
               In 3b FILT_PER acts as a prescaler for bus clock driving the Sample &amp; Hold clock \n
               \n
               Mode 4a/b - Sampled, Filtered mode\n
               As for 3a/b but the filter is enabled (FILTER_CNT>1) rather than acting as a simple S&amp;H\n
               \n
               Mode 5a/b - Windowed mode\n
               The comparator output is qualified by an external window signal. \n
               When enabled, the comparator output is clocked by the bus clock and held when not enabled. \n
               This introduces up to 1 clock delay.\n
               \n
               Mode 6 - Windowed/Resampled mode\n
               The comparator output is qualified by an external window signal. \n
               When enabled, the comparator output is clocked by the bus clock and then resampled at a \n
               rate determined by the FILT_PER to generate COUT. \n
               \n
               Mode 7 - Windowed/Filtered mode\n
               The comparator output is qualified by an external window signal. \n
               When enabled, the comparator output is clocked by the bus clock and then filtered at a \n
               sample rate determined by the FILT_PER to generate COUT.\n
               FILTER_CNT determines the filter sample count (width)">
      <!--                                                                                            cr1_en; cr1_we; cr1_se;filter_cnt;fpr_filt_per  -->
      <choice value="0" name="1    Disabled"                         enum="Disabled"             ref="false ; false ; false ;     0    ;     0      "  />
      <choice value="1" name="2a/b Continuous"                       enum="Continuous"           ref="true  ; false ; false ;     0    ;     0      "  />
      <choice value="2" name="3a   Externally sampled, Non-Filtered" enum="External_NonFiltered" ref="true  ; false ; true  ;     1    ;     0      "  />
      <choice value="3" name="3b   Internally sampled, Non-Filtered" enum="Internal_NonFiltered" ref="true  ; false ; false ;     1    ;            "  />
      <choice value="4" name="4a   Externally sampled, Filtered"     enum="External_Filtered"    ref="true  ; false ; true  ;          ;     0      "  />
      <choice value="5" name="4b   Internally sampled, Filtered"     enum="Internal_Filtered"    ref="true  ; false ; false ;          ;            "  />
      <choice value="6" name="5a/b Windowed"                         enum="Windowed"             ref="true  ; true  ; false ;     0    ;     0      "  />
      <choice value="7" name="6    Windowed, Re-sampled"             enum="Windowed_Resampled"   ref="true  ; true  ; false ;     1    ;            "  />
      <choice value="8" name="7    Windowed, Filtered"               enum="Windowed_Filtered"    ref="true  ; true  ; false ;          ;            "  />
   </choiceOption>

   <binaryOption key="cmp_cr1_en"
      enabledBy="cmp_filter>0"
      typeName="CmpEnable"
      baseType="uint8_t"
      description="Comparator Enable"
      toolTip="Enable comparator"
      disabledValue="false"
      locked="true"
      derived="true">
      <choice value="0" name="Comparator is disabled" enum="Disabled"  />
      <choice value="1" name="Comparator is enabled"  enum="Enabled"   isDefault="true" />
   </binaryOption>

   <binaryOption key="cmp_cr1_we"
      enabledBy="cmp_filter>0"
      typeName="CmpWindowEnable"
      baseType="uint8_t"
      description="Windowing Enable"
      toolTip="Enable the use of an external signal to qualify the comparator output (before filtering).\n
               The comparator output is held when the external signal is inactive and\n
               clocked directly by the bus clock when enabled.\n
               Usually a PDB output is available for this purpose."
      disabledValue="false"
      locked="true"
      derived="true">
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled"  isDefault="true" />
   </binaryOption>

   <binaryOption key="cmp_cr1_se"
      enabledBy="cmp_filter>0"
      typeName="CmpSampleEnable"
      baseType="uint8_t"
      description="Sample Enable"
      toolTip="Select between the divided bus clock and an external clock for the filter block"
      disabledValue="false"
      locked="true"
      derived="true">
      <choice value="0" name="Internal clock" enum="Internal"  />
      <choice value="1" name="External clock" enum="External" isDefault="true" />
   </binaryOption>

   <!-- ____ FPR ________ -->

   <intOption key="cmp_fpr_filt_per"
      enabledBy="(cmp_filter==3)||(cmp_filter==5)||(cmp_filter>=7)"
      description="Filter Sample Period in ticks"
      toolTip="Specifies the sampling period, in clock cycles, of the comparator output filter \n
               This has no effect if SE=1. In that case, the external SAMPLE signal is used to \n
               determine the sampling period."
      units="ticks"
      baseType="uint8_t"
      disabledValue="0"
      value="1" min="1" max="255"/>

   <floatOption key="cmp_filterPeriod"
      enabledBy="cmp_filter>0"
      ref="(1.0*cmp_fpr_filt_per)/input_clock#input_clock"
      units="s"
      valueFormat="%s"
      description="Filter Sample Period in seconds"
      toolTip="The calculated sampling period of the comparator output filter \n
               This has no effect if SE=1. In that case, the external SAMPLE signal is used to \n
               determine the sampling period."
      derived="true"
      locked="true"
      value="1k" min="0" />

   <choiceOption key="cmp_cr0_filter"
      hidden="true"
      ref="cmp_cr0_filter_cnt"
      valueFormat="CMP_CR0_FILTER_CNT(%s)"
      typeName="CmpFilterSamples"
      baseType="uint8_t"
      description="Filter Sample Count"
      derived="true"
      locked="true"
      toolTip="Represents the number of consecutive samples that must agree prior \n
               to the comparator output filter accepting a new output state">
      <choice value="0" name="Disabled"             enum="Bypassed"       />
      <choice value="1" name="Simple sampling"      enum="SimpleSampling" />
      <choice value="2" name="2 samples must agree" enum="2"              />
      <choice value="3" name="3 samples must agree" enum="3"              />
      <choice value="4" name="4 samples must agree" enum="4"              />
      <choice value="5" name="5 samples must agree" enum="5"              />
      <choice value="6" name="6 samples must agree" enum="6"              />
      <choice value="7" name="7 samples must agree" enum="7"              />
   </choiceOption>

   <intOption key="cmp_cr0_filter_cnt"
      unlockedBy="(cmp_filter==4)||(cmp_filter==5)||(cmp_filter==8)"
      enabledBy="((cmp_filter>=2)&amp;&amp;(cmp_filter&lt;=5))||(cmp_filter&gt;=7)"
      disabledValue="0"
      description="Filter Sample Count"
      typeName="CmpFilterSamples"
      baseType="uint8_t"
      toolTip="Represents the number of consecutive samples that must agree prior \n
               to the comparator output filter accepting a new output state"
      value="2" min="1" max="7"/>

   <aliasOption key="cmp_cr0_filter"/>

   <floatOption key="cmp_fpr_filt_interval"
      enabledBy="cmp_filter>0"
      ref="cmp_filterPeriod*cmp_cr0_filter_cnt"
      valueFormat="%s_seconds"
      description="Filter Sample Interval in seconds"
      toolTip="The calculated interval of the comparator output filter (sample period*number of samples)."
      derived="true"
      locked="true"
      units="s" />

   <choiceOption key="cmp_cr1_mode"
      hidden="true"
      typeName="CmpMode"
      baseType="uint8_t"
      valueFormat="CMP_CR1_SE(%s),CMP_CR1_WE(%s)"
      description="Operating mode"
      toolTip="Selects operation in sampling or windowed mode">
      <choice value="0,0" name="Direct"         enum="Direct"   />
      <choice value="1,0" name="Sampling mode"  enum="Sampling" />
      <choice value="0,1" name="Windowing mode" enum="Windowed" />
   </choiceOption>

   <choiceOption key="cmp_scr_edge" condition="cmp_scr_cfr_present&amp;&amp;cmp_scr_cff_present"
      valueFormat="CMP_SCR_CFR(%s),CMP_SCR_CFF(%s)"
      hidden="true"
      derived="true"
      typeName="CmpEventId"
      baseType="uint8_t"
      toolTip="Indicates edge detected"
      description="Edge detection flag" >
      <choice value="0,0" name="None"         enum="None" />
      <choice value="1,0" name="Rising Edge"  enum="RisingEdge" />
      <choice value="0,1" name="Falling Edge" enum="FallingEdge" />
      <choice value="1,1" name="Both Edges"   enum="BothEdges" />
   </choiceOption>

   <intOption key="cmp_scr_cout" condition="cmp_scr_cout_present"
      enabledBy="enablePeripheralSupport"
      derived="true"
      hidden="true"
      typeName="uint8_t"
      description="Analog Comparator Output"
      toolTip="Returns the current value of the Analog Comparator output,"
   />

   <!-- ____ Getters and Setters ____________ -->

   <for keys="field           : set   : get   : clear : genCode                 : name"
        values="

         cmp_cr0_filter       : true  : true  : false : enableGettersAndSetters : FilterCount;
         cmp_cr0_hystctr      : true  : true  : false : enableGettersAndSetters : Hysteresis;

         cmp_cr1_se           : true  : true  : false : enableGettersAndSetters : SamppleEnable;
         cmp_cr1_we           : true  : true  : false : enableGettersAndSetters : WindowingEnable;
         cmp_cr1_trigm        : true  : true  : false : enableGettersAndSetters : TriggerMode;
         cmp_cr1_pmode        : true  : true  : false : enableGettersAndSetters : Power;
         cmp_cr1_inv          : true  : true  : false : enableGettersAndSetters : Invert;
         cmp_cr1_cos          : true  : true  : false : enableGettersAndSetters : OutputSelect;
         cmp_cr1_ope          : true  : true  : false : enableGettersAndSetters : OutputEnable;

         cmp_cr1_en           : true  : true  : false : enableGettersAndSetters : Enable;

         cmp_fpr_filt_per     : true  : true  : false : enableGettersAndSetters : FiltPeriod;
         cmp_scr_dmaen        : true  : true  : false : enableGettersAndSetters : DmaEnable;
         cmp_scr_ier          : true  : true  : false : enableGettersAndSetters : InterruptEnable;
         cmp_scr_ief          : true  : true  : false : enableGettersAndSetters : InterruptFlag;
         cmp_scr_edge         : true  : true  : false : enableGettersAndSetters : Edge;
         cmp_scr_cout         : false : true  : false : enableGettersAndSetters : OutputState;

         cmp_daccr_dacen      : true  : true  : false : enableGettersAndSetters : DacEnable;
         cmp_daccr_vrsel      : true  : true  : false : enableGettersAndSetters : DacReferenceSelect;
         cmp_daccr_vosel      : true  : true  : false : enableGettersAndSetters : DacVout;

         cmp_muxcr_psel       : true  : true  : false : enableGettersAndSetters : PlusSelect;
         cmp_muxcr_msel       : true  : true  : false : enableGettersAndSetters : MinusSelect" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t * (%(field))
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t * (%(field))
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %returnType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
         tooltipPadding="x*x"      ><![CDATA[
         \t/**
         \t * Clear %description
         \t * (%(field))
         \t *
         \t * %tooltip
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!--   _____ Misc __________ -->

   <variableTemplate
      variables="/GPIOA/port_pcr_dse,/GPIOA/port_pcr_ode,/GPIOA/port_pcr_sre"
      defaultParamValue="OutputPin::defaultPcrValue"
      key="/$(_BASENAME)/set_output" where="all"
      discardRepeats="true" ><![CDATA[
      \t/**
      \t * @brief
      \t * Enable comparator output pin as output.
      \t * Mux value is set appropriately for the pin function being used.
      \t * The clock to the port will be enabled before changing the PCR.
      \t *
      \t * @param pcrValue PCR value to use
      \t *
      \t */
      \tstatic void setOutput(PcrValue pcrValue) {
      \t   CheckOutputIsMapped<Info::outputPin>::check();
      \t
      \t   // Enable CMP_OUT
      \t   cmp->CR1 = cmp->CR1 | CMP_CR1_OPE_MASK;
      \t
      \t   // Map CMP_OUT to pin
      \t   OutputPin::setPCR(pcrValue);
      \t}
      \t
      \t/**
      \t * @brief
      \t * Enable comparator output pin as output.\n
      \t * The Pin Control Register Attributes are set to the default values determined by Configure.usbdmProject.
      \t * The clock to the port will be enabled before changing the PCR.
      \t */
      \tstatic void setOutput() {
      \t   setOutput(OutputPin::defaultPcrValue.value);
      \t}
      \t
      \t/**
      \t * @brief
      \t * Set subset of Pin Control Register Attributes associated with output direction
      \t *
      \t * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
      \t * The clock to the port will be enabled before changing the PCR.
      \t *
         %paramDescription
      \t */
      \tstatic void setOutput(%params)  {
      \t
      \t   setOutput(%paramExpression);
      \t}\n
   ]]></variableTemplate>

   <template where="definitions" discardRepeats="true" >
   <![CDATA[
      \t/**
      \t * Comparator event identification
      \t */
      \t/**
      \t * Used to represent the comparator status for interrupt handler
      \t */
      \tstruct CmpStatus {
      \t   CmpEventId event:8;   //!< Event triggering handler
      \t   bool       state:8;   //!< State of CMPO at event
      \t
      \t   constexpr CmpStatus(CmpEventId event, uint8_t  state) : event(event), state(state) {}
      \t};
      \t\n
   ]]>
   </template>

   <!-- ____ Interrupt handling _____________ -->

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * $(_Class) interrupt handler
      \t * Passes control to call-back function
      \t */
      \tstatic void irqHandler() {
      \t
      \t   // Get status bits (+ current register value)
      \t   uint8_t status = cmp->SCR;
      \t
      \t   // Clear interrupt flags
      \t   cmp->SCR = status;
      \t
      \t   // Create status from snapshot
      \t   CmpStatus cmpStatus {
      \t      // Extract status bits
      \t      CmpEventId(
      \t         status&(CMP_SCR_CFR_MASK|CMP_SCR_CFF_MASK)),
      \t                 bool(status&CMP_SCR_COUT_MASK)
      \t   };
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t}
      \t\n
   ]]>
   </template>

   <!-- ________ CMP Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t status) {
      \t *    (void) status;
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // General setup
      \t *   CmpEnable_Enabled ,          // Comparator Enable - Comparator is enabled
      \t *   CmpMode_Direct ,             // Operating mode - Direct
      \t *   CmpTrigger_Enabled ,         // Trigger Mode Enable - Trigger mode is enabled
      \t *   CmpPower_HighSpeed ,         // Power Mode Select - High-Speed Comparison mode
      \t *   CmpPolarity_Inverted ,       // Comparator Invert - Inverted
      \t *   CmpOutput_Direct ,           // Comparator output pin source - Direct (unfiltered)
      \t *   CmpHysteresis_Level_2 ,      // Comparator hard block hysteresis control - Level 2
      \t *   CmpDma_Disabled ,            // DMA Enable Control - Disabled
      \t *
      \t *   // Interrupt handling - must be in this order
      \t *   CmpEvent_OnFalling ,         // Action on transition - Falling edge
      \t *   cmpCallback,                 // Call-back to execute on event (if interrupts are enabled)
      \t *
      \t *   // Filter settings - must be in this order
      \t *   CmpFilterSamples_4 ,         // Filter Sample Count - 4 sample must agree
      \t *   100_ticks ,                  // Filter Sample Period in ticks or seconds (if support is enabled)
      \t *
      \t *   // DAC Settings - must be in this order
      \t *   CmpDacEnable_Enabled ,       // DAC Enable - Enabled
      \t *   CmpDacrefSel_Vdd ,           // DAC Reference Voltage Select - Vin2 (Vdd)
      \t *   31 ,                         // DAC level
      \t *
      \t *   // Inputs
      \t *   cmp0Input_D7.plusPin ,       // Plus Input Mux Control - D7
      \t *   Cmp0Input_D21::minusPin,     // Minus Input Mux Control - D21
      \t *
      \t *   $(_name)Callback,                // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tprivate:
      \t   /**
      \t    * Prevent implicit parameter conversions
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(Types...) = delete;
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : cmp_cr0_filter_cnt,cmp_cr0_hystctr                   :   0      ;
               %baseType   : cmp_cr1_se,cmp_cr1_we,cmp_cr1_pmode,cmp_cr1_inv,
                             cmp_cr1_cos,cmp_cr1_ope,cmp_cr1_en                   :   0      ;
               %baseType   : cmp_fpr_filt_per                                     :   0      ;
               %baseType   : cmp_scr_dmaen,cmp_scr_interrupt,cmp_scr_cfr,
                             cmp_scr_cff                                          :   0      ;
               %baseType   : cmp_daccr_dacen,cmp_daccr_vrsel,cmp_daccr_vosel      :   0      ;
               %baseType   : cmp_muxcr_psel,cmp_muxcr_msel                        :   0      ;
               %baseType   : cmp_filterPeriod                                     :   0_s       " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <!-- ____ Init class Constructors ____________ -->

   <for keys="r"
      values="
            cmp_cr1_en;cmp_cr1_mode;cmp_cr1_trigm;
            cmp_cr1_pmode;cmp_cr1_inv;cmp_cr1_output;
            cmp_cr0_hystctr;
            cmp_scr_dmaen;cmp_scr_interrupt;
            cmp_muxcr_psel;cmp_muxcr_msel;
            cmp_cr0_filter;cmp_fpr_filt_per;cmp_filterPeriod;
            cmp_daccr_dacen;cmp_daccr_vrsel;cmp_daccr_vosel
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%variables)
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <!-- Templates -->
   <template><![CDATA[
      \t/**
      \t * Get clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic __attribute__((always_inline)) uint32_t getClockFrequency() {
      \t   return SystemBusClock;
      \t}\n\n
   ]]></template>

   <variableTemplate
      variables="cmp_muxcr_psel,cmp_muxcr_msel"
      nonDefaultParams="2"
   ><![CDATA[
      \t/**
      \t * Configure Comparator input sources
      \t *
      %paramDescription
      \t */
      \tstatic void selectInputs(%params) {
      \t
      \t   //! MUX Control Register
      \t   %register = %paramExpression;
      \t}
      \t
      \t/**
      \t * Class representing a Comparator pin
      \t *
      \t * @tparam cmpInput Number of comparator input (0-7) for associated pin.
      \t */
      \ttemplate<CmpInputMinus cmpInput>
      \tclass Pin {
      \t   using Pcr = PcrTable_T<Cmp$(_instance)Info,cmpInput>;
      \t
      \tpublic:
      \t   static constexpr CmpInputPlus  plusPin  = CmpInputPlus(CMP_MUXCR_PSEL(cmpInput));
      \t   static constexpr CmpInputMinus minusPin = cmpInput;
      \t
      \t   constexpr operator CmpInputPlus()  const { return plusPin;  }
      \t   constexpr operator CmpInputMinus() const { return minusPin; }
      \t
      \t   constexpr Pin() {}
      \t
      \t   static void setInput() {
      \t      Pcr::setPCR();
      \t   }
      \t};
      \t\n
   ]]>
   </variableTemplate>

   <template codeGenCondition="enablePeripheralSupport" >
    <![CDATA[
      \t/**
      \t * Converts time in seconds to time in ticks
      \t *
      \t * @param[in] seconds Time interval in seconds
      \t *
      \t * @return Time in ticks
      \t */
      \tstatic Ticks convertSecondsToTicks(const Seconds &seconds) {
      \t
      \t   uint32_t res = roundf((float)seconds*getClockFrequency());
      \t   if (res >= 256) {
      \t      setErrorCode(E_TOO_LARGE);
      \t   }
      \t   return Ticks(res);
      \t}
      \t\n
   ]]></template>

   <!-- ____ Init class Configure method ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral
      \t   enable();
      \t\n
   ]]>
   </template>
   <template where="info" codeGenCondition="$(_InfoIrqGuard)" condition="=(_hardwareIrqCount==1)" >
   <![CDATA[
      \t   // Configure call-back
      \t   if (init.callbacks[0] != nullptr) {
      \t      setCallback(init.callbacks[0]);
      \t      enableNvicInterrupts(init.priorities[0]);
      \t   }
      \t\n
   ]]>
   </template>
   <variableTemplate where="info" codeGenCondition="$(_InfoIrqGuard)"
      variables="irq_enum"
      immediateVariables="_hardwareIrqCount">
   <![CDATA[
      \t   for(int index=0; index<$(_hardwareIrqCount); index++) {
      \t      if (init.callbacks[index] != nullptr) {
      \t         // Configure call-back
      \t         setCallback(%returnType0(index), init.callbacks[index]);
      \t         enableNvicInterrupts(%returnType0(index), init.priorities[index]);
      \t      }
      \t   }
      \t\n
   ]]>
   </variableTemplate>
   <for keys=
             " var                                                    : statement            "
      values=" cmp_cr1_en                                             : %register = 0 ;
               cmp_fpr_filt_per                                       : uint8_t %registerName = init.%registerName " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <variableTemplate codeGenCondition="secondsSupport"
      variables="cmp_fpr_filt_per, cmp_fpr_filt_per"  >
   <![CDATA[
      \t   if (init.filterperiod != 0) {
      \t      %registerName0 = convertSecondsToTicks(init.filterperiod);
      \t   }
   ]]>
   </variableTemplate>
   <for keys=
             " var                                                    : statement            "
      values=" cmp_fpr_filt_per                                       : %register = %registerName ;
               cmp_daccr_dacen,cmp_daccr_vrsel,cmp_daccr_vosel        : %configRegAssignment ;
               cmp_muxcr_psel,cmp_muxcr_msel                          : %configRegAssignment ;
               cmp_cr0_filter,cmp_cr0_hystctr                         : %configRegAssignment ;
               cmp_scr_dmaen,cmp_scr_interrupt                        : %configRegAssignment ;
               cmp_cr1_en,cmp_cr1_mode,cmp_cr1_pmode,cmp_cr1_inv,
               cmp_cr1_output                                         : %configRegAssignment  " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <template where="info" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr $(_BasicInfo)::Init DefaultInitValue = {\n
   ]]>
   <!-- Interrupt information -->
   </template>
   <for keys="irqName" values="=_hardwareIrqNums">
      <equation key="irqEnum" value='=ReplaceAll("%(irqName)","^(.*?)_(.*)_IRQn$","IrqNum_$2")' />
      <equation key="var"     value='=ReplaceAll("%(irqName)","^(.*?)_(.*)_IRQn$","irqLevel_$2")' />
      <!--
      <print text="(irqName) = %(irqName)"/>
      <printVar key="irqEnum" />
      <printVar key="var" />
      -->
      <variableTemplate where="info" codeGenCondition='$(_InfoIrqGuard)&amp;&amp;!IsZero(@var)'
         variables='=var'
         separator=","
         terminator=","
         padToComments="40"
         immediateVariables="irqEnum" >
      <![CDATA[
         \t   $(irqEnum), %initExpression,
         \t   unhandledCallback,\n
      ]]></variableTemplate>
   </for>

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      padToComments="30"
      variables="
            cmp_cr1_en,cmp_cr1_mode,cmp_cr1_trigm,cmp_cr1_pmode,cmp_cr1_inv,cmp_cr1_output,
            cmp_cr0_hystctr,
            cmp_scr_dmaen,cmp_scr_interrupt,
            cmp_cr0_filter,cmp_fpr_filt_per,
            cmp_daccr_dacen,cmp_daccr_vrsel,cmp_daccr_vosel,
            cmp_muxcr_psel,cmp_muxcr_msel" >
   <![CDATA[
      \t%initNonZeroValues
      \t};
      \t\n
   ]]>
   </variableTemplate>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

<!--
======================================================================================================
     Common
======================================================================================================
 -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Info)> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="cmp_files" >
      <copy source="Project_Headers/cmp.h"    target="Project_Headers/cmp.h"    overwrite="true" derived="true"/>
      <copy source="Snippets/cmp-example.cpp" target="Snippets/cmp-example.cpp" overwrite="true" derived="true"/>
   </projectActionList>

   <!-- ____ Startup ____ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration ____ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="These settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <!--  ____ Signal mapping ____ -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</fragment>
