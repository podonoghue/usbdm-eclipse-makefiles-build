<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- cmp_base.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <xi:include href="_default_instance.xml"/>

   <template><![CDATA[
      \t//! Pin number in Info table for comparator output if mapped to a pin
      \tstatic constexpr int outputPin  = 8;\n\n
   ]]></template>
   
   <constant key="disable_peripheral" value = "cmp->CR1 = CMP_CR1_EN(0);"  />
   <xi:include href="_mapPinsOption.xml"/>
   
   <choiceOption key="cmp_cr0_filter_cnt"
      enumStem="CmpFilterSamples" 
      description="Filter Sample Count"
      toolTip="Represents the number of consecutive samples that must agree prior \n
      to the comparator ouput filter accepting a new output state">
      <choice value="1" name="1 sample must agree" enum="1" />
      <choice value="2" name="2 sample must agree" enum="2" />
      <choice value="3" name="3 sample must agree" enum="3" />
      <choice value="4" name="4 sample must agree" enum="4" />
      <choice value="5" name="5 sample must agree" enum="5" />
      <choice value="6" name="6 sample must agree" enum="6" />
      <choice value="7" name="7 sample must agree" enum="7" />
   </choiceOption>

   <choiceOption key="cmp_cr0_hystctr" 
      enumStem="CmpHysteresis" 
      description="Comparator hard block hysteresis control"
      toolTip="Defines the programmable hysteresis level.\n
      The hysteresis values associated with each level are device specific">
      <choice value="0" name="Level 0" enum="Level_0" />
      <choice value="1" name="Level 1" enum="Level_1" />
      <choice value="2" name="Level 2" enum="Level_2" />
      <choice value="3" name="Level 3" enum="Level_3" />
   </choiceOption>

   <initialValueTemplate
      separator="|"
      terminator=";"     
      variables="cmp_cr0_filter_cnt, cmp_cr0_hystctr"     
   ><![CDATA[
      \t//! CMP Control Register 0
      \tstatic constexpr uint32_t cr0 = %initExpression
      \t\n
   ]]></initialValueTemplate>

<!--  CR1 -->   

   <choiceOption key="cmp_cr1_mode" 
      enumStem="CmpMode" 
      valueFormat="CMP_CR1_SE(%s),CMP_CR1_WE(%s)"
      description="Operating mode"
      toolTip="Selects operation in sampling or windowed mode" >
      <choice value="0,0" name="Disabled"       enum="Disabled" />
      <choice value="1,0" name="Sampling mode"  enum="Sampling" />
      <choice value="0,1" name="Windowing mode" enum="Windowed" />
   </choiceOption>

   <binaryOption key="cmp_cr1_trigm" 
      enumStem="CmpTrigger" 
      description="Trigger Mode Enable"
      toolTip="CMP and DAC are configured to CMP Trigger mode when CMP_CR1[TRIGM] is set to 1.  \n
               In addition, the CMP should be enabled.  \n
               If the DAC is to be used as a reference to the CMP, it should also be enabled. \n
               CMP Trigger mode depends on an external timer resource to periodically enable  \n
               the CMP and 6-bit DAC in order to generate a triggered compare. \n
               Upon setting TRIGM, the CMP and DAC are placed in a standby state until an \n
               external timer resource trigger is received.">
      <choice value="0" name="Trigger mode is disabled" enum="Disabled" />
      <choice value="1" name="Trigger mode is enabled"  enum="Enabled"  />
   </binaryOption>

   <binaryOption key="cmp_cr1_pmode" 
      enumStem="CmpPower" 
      description="Power Mode Select"
      toolTip="Selects trade-off between speed and power consumption">
      <choice value="0" name="Low-Speed (LS) Comparison mode"  enum="LowSpeed" />
      <choice value="1" name="High-Speed (HS) Comparison mode" enum="HighSpeed" />
   </binaryOption>

   <binaryOption key="cmp_cr1_inv" 
      enumStem="CmpPolarity" 
      description="Comparator Invert"
      toolTip="Allows selection of the polarity of the analog comparator function">
      <choice value="0" name="Not inverted" enum="Normal"   />
      <choice value="1" name="Inverted"     enum="Inverted" />
   </binaryOption>

   <choiceOption key="cmp_cr1_output" 
      enumStem="CmpOutput" 
      valueFormat="CMP_CR1_OPE(%s),CMP_CR1_COS(%s)"
      description="Comparator output select"
      toolTip="Selects operation in sampling or windowed mode" >
      <choice value="0,0" name="Disabled"             enum="Disabled" />
      <choice value="1,1" name="Direct (unfiltered)"  enum="Direct"   />
      <choice value="1,0" name="Filtered"             enum="Filtered" />
   </choiceOption>

   <binaryOption key="cmp_cr1_en" 
      enumStem="CmpEnable" 
      description="Comparator Enable"
      toolTip="">
      <choice value="0" name="Comparator is disabled" enum="Disabled" />
      <choice value="1" name="Comparator is enabled"  enum="Enabled"  />
   </binaryOption>

   <initialValueTemplate
      separator="|"
      terminator=";"     
      variables="
         cmp_cr1_en, 
         cmp_cr1_mode,
         cmp_cr1_trigm, 
         cmp_cr1_pmode, 
         cmp_cr1_inv, 
         cmp_cr1_output"     
   ><![CDATA[
      \t//! CMP Control Register 1
      \tstatic constexpr uint32_t cr1 = %initExpression
      \t\n
   ]]></initialValueTemplate>
      
<!--  FPR -->   

   <intOption key="cmp_fpr_filt_per"
      description="Filter Sample Period"
      toolTip="Specifies the sampling period, in bus clock cycles, of the comparator output filter"
      value="0" min="0" max="255" />
           
   <initialValueTemplate
      separator="|"
      terminator=";"     
      variables="cmp_fpr_filt_per"     
   ><![CDATA[
      \t//! CMP Filter Period Register
      \tstatic constexpr uint32_t fpr = %initExpression
      \t\n
   ]]></initialValueTemplate>
      
<!--  SCR -->   

   <binaryOption key="cmp_scr_dmaen" 
      enumStem="CmpDma" 
      description="DMA Enable Control"
      toolTip="Enables the DMA transfer triggered from the CMP module\n(If DMA supported by device)\n
         When this field is set, a DMA request is asserted when CFR or CFF is set">
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled"  />
   </binaryOption>

   <choiceOption key="cmp_scr_interrupt" 
      enumStem="CmpInterrupt" 
      valueFormat="CMP_SCR_IER(%s),CMP_SCR_IEF(%s)"
      description="Action on transition"
      toolTip="Enables interrupt request on comparator transition" >
      <choice value="0,0" name="Disabled"       enum="Disabled" />
      <choice value="1,1" name="Rising edge"    enum="OnRising"   />
      <choice value="1,0" name="Falling edge"   enum="OnFalling" />
      <choice value="1,0" name="Either edge"    enum="OnEither" />
   </choiceOption>

   <initialValueTemplate
      separator="|"
      terminator=";"     
      variables="cmp_scr_dmaen,cmp_scr_interrupt"     
   ><![CDATA[
      \t//! CMP Status and Control Register
      \tstatic constexpr uint32_t scr = %initExpression
      \t\n
   ]]></initialValueTemplate>
      
<!--  DACCR -->   

   <binaryOption key="cmp_daccr_vrsel" 
      enumStem="CmpDacrefSel" 
      description="DAC Reference Voltage Select"
      toolTip="Supply Voltage Reference Source Select">
      <choice value="0" name="Vin1 (Vref_OUT)" enum="VrefOut" />
      <choice value="1" name="Vin2 (Vdd)"      enum="Vdd" />
   </binaryOption>

   <initialValueTemplate
      separator="|"
      terminator=";"     
      variables="CmpDacrefSel"     
   ><![CDATA[
      \t//! DAC Control Register
      \tstatic constexpr uint32_t daccr = %initExpression
      \t\n
   ]]></initialValueTemplate>
      
<!--  MUXCR -->   

   <template key="/CMP/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_name)
   \t */
   \tclass Cmp$(_instance) : public CmpBase_T<Cmp$(_instance)Info> {
   \t
   \tpublic:
   \t   /**
   \t    * Select CMP$(_instance) inputs
   \t    */
   \t   enum Input {
   \t      // Mapped inputs
   \t      Input_0          = 0, //!< CMP$(_instance) input 0
   \t      Input_1          = 1, //!< CMP$(_instance) input 1
   \t      Input_2          = 2, //!< CMP$(_instance) input 2
   \t      Input_3          = 3, //!< CMP$(_instance) input 3
   \t      Input_4          = 4, //!< CMP$(_instance) input 4
   \t      Input_5          = 5, //!< CMP$(_instance) input 5
   \t      Input_6          = 6, //!< CMP$(_instance) input 6
   \t      Input_7          = 7, //!< CMP$(_instance) input 7
   \t   
           $(/CMP$(_instance)/InputMapping:   // None Found)
   \t   };
   \t
   \t   /**
   \t    * Configure Comparator input sources
   \t    *
   \t    * @param[in]  positiveInput (0..7) (7 => DAC)
   \t    * @param[in]  negativeInput (0..7) (7 => DAC)
   \t    */
   \t   static __attribute__((always_inline)) void selectInputs(Input positiveInput, Input negativeInput) {
   \t      CmpBase_T::selectInputs((unsigned)positiveInput, (unsigned)negativeInput);
   \t   }
   \t
   \t   template <class T>
   \t   static __attribute__((always_inline)) void selectInputs(Input input, T &) {
   \t      CmpBase_T::selectInputs((unsigned)input, (unsigned)T::pinNum);
   \t   }
   \t
   \t   template <class T>
   \t   static __attribute__((always_inline)) void selectInputs(T &, Input input) {
   \t      CmpBase_T::selectInputs((unsigned)T::pinNum, (unsigned)input);
   \t   }
   \t
   \t   template <class T1, class T2>
   \t   static __attribute__((always_inline)) void selectInputs(T1 &, T2&) {
   \t      CmpBase_T::selectInputs((unsigned)T1::pinNum, (unsigned)T2::pinNum);
   \t   }
   \t
   \t   /**
   \t    * Class representing a Comparator pin
   \t    *
   \t    * @tparam cmpInput Number of comparator input (0-7) for associated pin.
   \t    */
   \t   template<int cmpInput>
   \t   class Pin {
   \t      using Pcr = PcrTable_T<Cmp$(_instance)Info, (Input)cmpInput>;
   \t   public:
   \t      static constexpr Input pinNum = (Input)cmpInput;
   \t
   \t      constexpr Pin() {}
   \t      static void setInput() {
   \t         Pcr::setPCR();
   \t      }
   \t   };
   \t};
   \t
   ]]></template>

<!--  ================ MISC ================ -->

   <projectActionList id = "cmp_files" >
      <copy source="Project_Headers/cmp.h"     target="Project_Headers/cmp.h"     overwrite="true"  derived="true" />
      <copy source="Snippets/cmp-example.cpp"  target="Snippets/cmp-example.cpp"  overwrite="true"  derived="true" />
   </projectActionList>
   
   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator">
   </validate>

</fragment>
