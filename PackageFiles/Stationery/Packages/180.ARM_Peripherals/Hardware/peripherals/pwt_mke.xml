<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pwt_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Pulse Width Timer" >

   <equation key="irq_parameters"            value=""        />
   <equation key="irq_dummy_parameters"      value=""        />
   <equation key="irq_call"                  value=""        />
   <equation key="generateDefault"           value="false"     />
   <equation key="configureInStartupDefault" value="false"     />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <!-- ____ R1 ____ -->
   <intOption key="pwt_r1_ppw" condition="pwt_r1_ppw_present"
      hidden="true"
      derived="true"
      typeName="PositivePulseWidth"
      baseType="uint16_t"
      description="Positive Pulse Width"
      toolTip="Captured positive pulse width value. It is suggested to use half-word (16-bit) or word (32-bit) to read out this value"
      value="0"
      min="0" max="65535"
   />

   <binaryOption key="pwt_r1_pwten" condition="pwt_r1_pwten_present"
      enabledBy="$(_BasicInfoGuard)"
      typeName="PwtEnable"
      baseType="uint16_t"
      toolTip="Enables/disables the PWT module.\n
               To avoid unexpected behaviour, do not change any PWT configurations while PWTEN is set"
      description="PWT Module Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="pwt_r1_pclks" condition="pwt_r1_pclks_present"
      enabledBy="pwt_r1_pwten"
      typeName="PwtClockSource"
      baseType="uint16_t"
      target="inputClockFrequency"
      toolTip="Controls the selection of clock source for the PWT counter"
      description="PWT Clock Source Selection" >
      <choice name="Timer clock"             value="0" enum="TimerClock"        ref="/SIM/system_timer_clock[0]" code="SystemTimerClock" />
      <choice name="Alternative clock(TCLK)" value="1" enum="AlternativeClock"  ref="/SIM/pwtExternalClock"      code="SimInfo::getPwtExternalClockFrequency()" />
   </binaryOption >

   <binaryOption key="externalClockUsed"
      ref="pwt_r1_pclks"
      derived="true"
      locked="true"
      hidden="true" >
      <choice value="0" name="External clock unused" />
      <choice value="1" name="External clock used"   />
   </binaryOption>

   <intOption key="inputClockFrequency"
      enabledBy="enablePeripheralSupport"
      locked="true"
      description="Frequency of input clock to timer"
      derived="true"
      units="Hz"/>

   <!-- Controlled by sim_mke04z4.xml -->
   <choiceOption key="pwt_r1_pinsel" condition="pwt_r1_pinsel_present &amp;&amp; inputMapping[]"
      enabledBy="pwt_r1_pwten"
      typeName="PwtInput"
      baseType="uint16_t"
      toolTip="Enables the corresponding PWT input port, if this PWT input comes from an external source"
      description="PWT Pulse Input Selection"
      disabledPinMap="PWT_IN0,;PWT_IN1,;PWT_IN2,;PWT_IN3," >
      <choice name="=inputMapping[0]"  value="0" enum="=inputMapping[0]" pinMap='="PWT_IN0,"+inputMapping[0]+";PWT_IN1,;PWT_IN2,;PWT_IN3,"' />
      <choice name="=inputMapping[1]"  value="1" enum="=inputMapping[1]" pinMap='="PWT_IN0,;PWT_IN1,"+inputMapping[1]+";PWT_IN2,;PWT_IN3,"' />
      <choice name="=inputMapping[2]"  value="2" enum="=inputMapping[2]" pinMap='="PWT_IN0,;PWT_IN1,;PWT_IN2,"+inputMapping[2]+";PWT_IN3,"'/>
      <choice name="=inputMapping[3]"  value="3" enum="=inputMapping[3]" pinMap='="PWT_IN0,;PWT_IN1,;PWT_IN2,;PWT_IN3,"+inputMapping[3]'/>
   </choiceOption >

   <choiceOption key="pwt_r1_pinsel" condition="pwt_r1_pinsel_present &amp;&amp; inputNames[]"
      enabledBy="pwt_r1_pwten"
      typeName="PwtInput"
      baseType="uint16_t"
      toolTip="Enables the corresponding PWT input port, if this PWT input comes from an external source"
      description="PWT Pulse Input Selection" >
      <choice name="=inputNames[0]"  value="0" enum="=inputNames[0]" />
      <choice name="=inputNames[1]"  value="1" enum="=inputNames[1]" />
      <choice name="=inputNames[2]"  value="2" enum="=inputNames[2]" />
      <choice name="=inputNames[3]"  value="3" enum="=inputNames[3]" />
   </choiceOption >

   <choiceOption key="pwt_r1_edge" condition="pwt_r1_edge_present"
      enabledBy="pwt_r1_pwten"
      typeName="PwtEdges"
      baseType="uint16_t"
      toolTip="Selects which edge triggers the pulse width measurement and which edges trigger the capture.\n
               If user needs to change the trigger and capture mode by changing the value of EDGE[1:0], \n
               a PWT software reset is required after changing the EDGE[1:0] value.\n
               Clearing PWTEN and then setting it has the same effect"
      description="PWT Input Edge Sensitivity" >
      <choice name="Falling-edge start, falling edges captured"  value="0b00" enum="FallingStart_FallingCaptured"/>
      <choice name="Rising edge start, both edges captured"      value="0b01" enum="RisingStart_BothCaptured"/>
      <choice name="Falling edge start, both edges captured"     value="0b10" enum="FallingStart_BothCaptured"/>
      <choice name="Rising edge start, rising edges captured"    value="0b11" enum="RisingStart_RisingCaptured"/>
   </choiceOption >

   <choiceOption key="pwt_r1_pre" condition="pwt_r1_pre_present"
      enabledBy="pwt_r1_pwten"
      typeName="PwtClockDivider"
      baseType="uint16_t"
      toolTip="Selects the value by which the clock is divided to clock the PWT counter"
      description="PWT Clock Prescaler (CLKPRE) Setting" >
      <choice name="Clock div 1"    value="0" enum="ClockDiv1"/>
      <choice name="Clock div 2"    value="1" enum="ClockDiv2"/>
      <choice name="Clock div 4"    value="2" enum="ClockDiv4"/>
      <choice name="Clock div 8"    value="3" enum="ClockDiv8"/>
      <choice name="Clock div 16"   value="4" enum="ClockDiv16"/>
      <choice name="Clock div 32"   value="5" enum="ClockDiv32"/>
      <choice name="Clock div 64"   value="6" enum="ClockDiv64"/>
      <choice name="Clock div 128"  value="7" enum="ClockDiv128"/>
   </choiceOption >

   <floatOption key="pwt_r1_clockFrequency"
      enabledBy="pwt_r1_pwten"
      locked="true"
      derived="true"
      ref="(inputClockFrequency)/(1&lt;&lt;pwt_r1_pre)"
      description="PWT counter clock"
      units="Hz"
   />

   <floatOption key="pwt_r1_maxPeriod"
      enabledBy="pwt_r1_pwten"
      locked="true"
      derived="true"
      ref="(1&lt;&lt;16)/(pwt_r1_clockFrequency)"
      description="Maximum PWT duration"
      units="s"
   />

   <binaryOption key="pwt_r1_pwtie" condition="pwt_r1_pwtie_present"
      enabledBy="pwt_r1_pwten"
      typeName="PwtInterrupt"
      baseType="uint16_t"
      toolTip="Enables the PWT module to generate an interrupt"
      description="PWT Module Interrupt Enable" >
      <choice name="Disable"     value="0" enum="Disable"/>
      <choice name="Enable"      value="1" enum="Enable"/>
   </binaryOption >

   <binaryOption key="pwt_r1_prdyie" condition="pwt_r1_prdyie_present"
      enabledBy="pwt_r1_pwten"
      typeName="PwtReadyInterrupt"
      baseType="uint16_t"
      toolTip="Enables/disables the PWT to generate an interrupt when PWTRDY is set as long as PWTIE is set"
      description="PWT Pulse Width Data Ready Interrupt Enable" >
      <choice name="Disable"     value="0" enum="Disable"/>
      <choice name="Enable"      value="1" enum="Enable"/>
   </binaryOption >

   <binaryOption key="pwt_r1_povie" condition="pwt_r1_povie_present"
      enabledBy="pwt_r1_pwten"
      typeName="PwtOverflowInterrupt"
      baseType="uint16_t"
      toolTip="Enables/disables the PWT to generate an interrupt when PWTOV is set due to PWT counter overflow"
      description="PWT Counter Overflow Interrupt Enable" >
      <choice name="Disable"     value="0" enum="Disable"/>
      <choice name="Enable"      value="1" enum="Enable"/>
   </binaryOption >

   <binaryOption key="pwt_r1_pwtsr" condition="pwt_r1_pwtsr_present"
      hidden="true"
      derived="true"
      enabledBy="pwt_r1_pwten"
      typeName="PwtSoftReset"
      baseType="uint16_t"
      toolTip="Performs a soft reset to the PWT. This field always reads as 0"
      description="PWT Soft Reset" >
      <choice name="No action"   value="0" enum="NoAction"/>
      <choice name="Soft reset"  value="1" enum="SoftReset"/>
   </binaryOption >

   <binaryOption key="pwt_r1_pwtrdy" condition="pwt_r1_pwtrdy_present"
      hidden="true"
      derived="true"
      enabledBy="pwt_r1_pwten"
      typeName="PwtReady"
      baseType="uint16_t"
      toolTip="Indicates that the PWT Pulse Width register(s) has been updated and is ready to be read.\n
               This field is cleared by reading PWTRDY and then writing 0 to PWTRDY bit when PWTRDY is set.\n
               Writing 1 to this field has no effect. PWTRDY setting is associated with the EDGE[1:0] bits"
      description="PWT Pulse Width Valid" >
      <choice name="Not Updated"  value="0" enum="NotUpdated"/>
      <choice name="Updated"      value="1" enum="Updated"/>
   </binaryOption >

   <binaryOption key="pwt_r1_pwtov" condition="pwt_r1_pwtov_present"
      hidden="true"
      derived="true"
      enabledBy="pwt_r1_pwten"
      typeName="PwtOverflow"
      baseType="uint16_t"
      toolTip="Indicates that the PWT counter has run from 0x0000_0xFFFF to 0x0000_0x0000.\n
               This field is cleared by writing 0 to PWTOV when PWTOV is set.\n
               Writing 1 to this field has no effect.\n
               If another overflow occurs when this field is being cleared, the clearing fails"
      description="PWT Counter Overflow" >
      <choice name="No overflow"  value="0" enum="NoOverflow"/>
      <choice name="Overflow"     value="1" enum="Overflow"/>
   </binaryOption >

   <!-- ____ R2 ____ -->
   <title description="Pulse Width Timer Register 2" />

   <intOption key="pwt_r2_pwtc" condition="pwt_r2_pwtc_present"
      typeName="uint32_t"
      derived="true"
      description="PWT Counter"
      toolTip="Main PWT Counter"
   />

   <intOption key="pwt_r2_npw" condition="pwt_r2_npw_present"
      typeName="uint32_t"
      derived="true"
      description="Negative Pulse Width"
      toolTip="Pulse width"
   />


   <variableTemplate variables="pwt_r1_pwtsr" codeGenCondition="$(_BasicInfoGuard)"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t * %tooltip
      \t */
      \tstatic void softReset() {
      \t   %register = %register | %mask;
      \t}\n\n
   ]]></variableTemplate>

   <for keys="field:name"
        values="
      pwt_r1_pwtrdy:isPulseWidthValid;
      pwt_r1_pwtov:isOverflowed" >
      <variableTemplate variables="%(field)" codeGenCondition="$(_BasicInfoGuard)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t * %tooltip
         \t */
         \tstatic bool %(name)() {
         \t   // Poll register
         \t   bool pwtStatus = %register;
         \t
         \t   // Clear flag if set
         \t   %register = pwtStatus & ~%mask;
         \t
         \t   // Return status
         \t   return pwtStatus & %mask;
         \t}\n\n
      ]]></variableTemplate>
   </for>

   <!-- ____ Setters and Getters ____________ -->

   <for keys="field     : set   : get   : clear : genCode                 : name"
        values="
         pwt_r1_ppw     : false : true  : false : enableGettersAndSetters : PositivePulseWidth  ;
         pwt_r1_pclks   : true  : true  : false : enableGettersAndSetters : ClockSource         ;
         pwt_r1_pinsel  : true  : true  : false : enableGettersAndSetters : InputPin            ;
         pwt_r1_edge    : true  : true  : false : enableGettersAndSetters : EdgeSensitivity     ;
         pwt_r1_pre     : true  : true  : false : enableGettersAndSetters : ClockPrescaler      ;
         pwt_r1_pwten   : true  : true  : false : enableGettersAndSetters : Enable              ;
         pwt_r1_pwtie   : true  : true  : false : enableGettersAndSetters : Interrupt           ;
         pwt_r1_prdyie  : true  : true  : false : enableGettersAndSetters : DataReadyInterrupt  ;
         pwt_r1_povie   : true  : true  : false : enableGettersAndSetters : OverflowInterrupt   ;
         pwt_r1_pwtsr   : true  : false : false : enableGettersAndSetters : SoftReset           ;
         pwt_r1_pwtrdy  : false : true  : true  : enableGettersAndSetters : PulseWidthValid     ;
         pwt_r1_pwtov   : false : true  : true  : enableGettersAndSetters : CounterOverflow     ;

         pwt_r2_pwtc    : false : true  : false : enableGettersAndSetters : Counter             ;
         pwt_r2_npw     : false : true  : false : enableGettersAndSetters : NegativePulseWidth  " >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %returnType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Clear %description
         \t *
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register&~%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!-- ________ PWT Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   PwtClockSource_TimerClock ,          // PWT Clock Source Selection - Timer clock
      \t *   PwtPinSelection_Pwtin0Enabled ,      // PWT Pulse Inputs Selection - PWTIN[0] enabled
      \t *   PwtEdges_FallingStart_BothCaptured , // PWT Input Edge Sensitivity - Falling-edge start, both edges captured
      \t *   PwtClockDivider_ClockDiv1 ,          // PWT Clock Prescaler (CLKPRE) Setting - Clock div 1
      \t *   PwtEnable_Enabled ,                  // PWT Module Enable - Enabled
      \t *   PwtInterrupt_Disable ,               // PWT Module Interrupt Enable - Disable
      \t *   PwtReadyInterrupt_Disable ,          // PWT Pulse Width Data Ready Interrupt Enable - Disable
      \t *   PwtOverflowInterrupt_Disable ,       // PWT Counter Overflow Interrupt Enable - Disable
      \t *   PwtOverflow_NoOverflow,              // PWT Counter Overflow - No overflow
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="irqHandlingMethod"
   ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : pwt_r1_pclks,pwt_r1_pinsel,pwt_r1_edge,
                             pwt_r1_pre,pwt_r1_pwten,pwt_r1_pwtie,pwt_r1_prdyie,
                             pwt_r1_povie,pwt_r1_pwtrdy,pwt_r1_pwtov :   0      " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            pwt_r1_pclks;pwt_r1_pinsel;pwt_r1_edge;
            pwt_r1_pre;pwt_r1_pwten;pwt_r1_pwtie;pwt_r1_prdyie;
            pwt_r1_povie" >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%(r))
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <!-- ____ Init class Configure method ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enable();
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t   // Set call-backs as needed
      \t   setCallback(init.callbackFunction);
      \t\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t   enableNvicInterrupts(init.irqlevel);
      \t\n
   ]]></template>
   <for keys=
             " var                                                    : statement            "
      values=" pwt_r1_ppw,pwt_r1_pclks,pwt_r1_pinsel,pwt_r1_edge,
               pwt_r1_pre,pwt_r1_pwten,pwt_r1_pwtie,pwt_r1_prdyie,
               pwt_r1_povie,pwt_r1_pwtsr,pwt_r1_pwtrdy,pwt_r1_pwtov   : %configRegAssignment " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      padToComments="50"
      variables="
            pwt_r1_pclks,pwt_r1_pinsel,pwt_r1_edge,
            pwt_r1_pre,pwt_r1_pwten,pwt_r1_pwtie,pwt_r1_prdyie,
            pwt_r1_povie" >
   <![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues
      \t};
      \t\n
   ]]></variableTemplate>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Info)> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="pwt_files" >
      <copy source="Project_Headers/pwt-MKE.h"  target="Project_Headers/pwt.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="These settings only have effect if the SIM configuration is enabled" >
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <!--  ____ Signal mapping __________________ -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />
   <signals name="FTM" />

</peripheralPage>
