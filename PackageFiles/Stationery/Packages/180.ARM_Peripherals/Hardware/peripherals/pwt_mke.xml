<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pwt_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Pulse Width Timer" >

   <constant key="suppressInstance"         type="Boolean" value="false"         />
   <constant key="peripheralUsesInterrupts" type="Boolean" value="true"          />
   <constant key="irq_parameters"           type="String"  value="&quot;&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;&quot;"  />
   <constant key="isGeneratedByDefault"     type="Boolean" value="false"         />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="_enablePeripheral.xml"  />
   <title description="------------------------------------------" />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2                    (fProvider.getName())
    *  $(_Baseclass)   => e.g FTM0 => Ftm             (fPeripheral.getClassBaseName())
    *  $(_instance)     => e.g FTM0 => 0, PTA => A     (fPeripheral.getInstance())
    *  $(_Class)        => e.g FTM2 => Ftm2            (fPeripheral.getClassName())
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT  (fPeripheral.getBaseName())
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicValueExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %enumClass[index]               As for %paramType
    * %enumParam[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicValueExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %defaultClockExpression         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %defaultMaskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->
   <!-- ************* R1 ****************** -->

   <intOption key="pwt_r1_ppw" condition="pwt_r1_ppw_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      typeName="uint32_t"
      description="Positive Pulse Width"
      toolTip="Captured positive pulse width value. It is suggested to use half-word (16-bit) or word (32-bit) to read out this value"
   />

   <binaryOption key="pwt_r1_pclks" condition="pwt_r1_pclks_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Pclks"
      toolTip="Controls the selection of clock source for the PWT counter"
      description="PWT Clock Source Selection" >
      <choice name="Timer clock"        value="0" enum="TimerClock"/>
      <choice name="Alternative clock"  value="1" enum="AlternativeClock"/>
   </binaryOption >

   <choiceOption key="pwt_r1_pinsel" condition="pwt_r1_pinsel_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Pinsel"
      toolTip="Enables the corresponding PWT input port, if this PWT input comes from an external source"
      description="PWT Pulse Inputs Selection" >
      <choice name="PWTIN[0] enabled"  value="0" enum="Pwtin0Enabled"/>
      <choice name="PWTIN[1] enabled"  value="1" enum="Pwtin1Enabled"/>
      <choice name="PWTIN[2] enabled"  value="2" enum="Pwtin2Enabled"/>
      <choice name="PWTIN[3] enabled"  value="3" enum="Pwtin3Enabled"/>
   </choiceOption >

   <choiceOption key="pwt_r1_edge" condition="pwt_r1_edge_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Edge"
      toolTip="Selects which edge triggers the pulse width measurement and which edges trigger the capture.\n
               If user needs to change the trigger and capture mode by changing the value of EDGE[1:0], a PWT software reset
is required after changing the EDGE[1:0] value.\n
               Clearing PWTEN and then setting it has the same effect"
      description="PWT Input Edge Sensitivity" >
      <choice name="Falling-edge start, falling edges captured"  value="0" enum="FallingEdgeStart_FallingEdgesCaptured"/>
      <choice name="Rising edge start, both edges captured"      value="1" enum="RisingEdgeStart_BothEdgesCaptured"/>
      <choice name="Falling edge start, both edges captured"     value="2" enum="FallingEdgeStart_BothEdgesCaptured"/>
      <choice name="Rising edge start, rising edges captured"    value="3" enum="RisingEdgeStart_RisingEdgesCaptured"/>
   </choiceOption >

   <choiceOption key="pwt_r1_pre" condition="pwt_r1_pre_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Pre"
      toolTip="Selects the value by which the clock is divided to clock the PWT counter"
      description="PWT Clock Prescaler (CLKPRE) Setting" >
      <choice name="Clock div 1"    value="0" enum="ClockDiv1"/>
      <choice name="Clock div 2"    value="1" enum="ClockDiv2"/>
      <choice name="Clock div 4"    value="2" enum="ClockDiv4"/>
      <choice name="Clock div 8"    value="3" enum="ClockDiv8"/>
      <choice name="Clock div 16"   value="4" enum="ClockDiv16"/>
      <choice name="Clock div 32"   value="5" enum="ClockDiv32"/>
      <choice name="Clock div 64"   value="6" enum="ClockDiv64"/>
      <choice name="Clock div 128"  value="7" enum="ClockDiv128"/>
   </choiceOption >

   <binaryOption key="pwt_r1_pwten" condition="pwt_r1_pwten_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Pwten"
      toolTip="Enables/disables the PWT module.\n
               To avoid unexpected behavior, do not change any PWT configurations as long as PWTEN is set"
      description="PWT Module Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="pwt_r1_pwtie" condition="pwt_r1_pwtie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Pwtie"
      toolTip="Enables the PWT module to generate an interrupt"
      description="PWT Module Interrupt Enable" >
      <choice name="Disable"     value="0" enum="Disable"/>
      <choice name="Enable"      value="1" enum="Enable"/>
   </binaryOption >

   <binaryOption key="pwt_r1_prdyie" condition="pwt_r1_prdyie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Prdyie"
      toolTip="Enables/disables the PWT to generate an interrupt when PWTRDY is set as long as PWTIE is set"
      description="PWT Pulse Width Data Ready Interrupt Enable" >
      <choice name="Disable"     value="0" enum="Disable"/>
      <choice name="Enable"      value="1" enum="Enable"/>
   </binaryOption >

   <binaryOption key="pwt_r1_povie" condition="pwt_r1_povie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Povie"
      toolTip="Enables/disables the PWT to generate an interrupt when PWTOV is set due to PWT counter overflow"
      description="PWT Counter Overflow Interrupt Enable" >
      <choice name="Disable"     value="0" enum="Disable"/>
      <choice name="Enable"      value="1" enum="Enable"/>
   </binaryOption >

   <binaryOption key="pwt_r1_pwtsr" condition="pwt_r1_pwtsr_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Pwtsr"
      toolTip="Performs a soft reset to the PWT. This field always reads as 0"
      description="PWT Soft Reset" >
      <choice name="No action"   value="0" enum="NoAction"/>
      <choice name="Soft reset"  value="1" enum="SoftReset"/>
   </binaryOption >

   <binaryOption key="pwt_r1_pwtrdy" condition="pwt_r1_pwtrdy_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Pwtrdy"
      toolTip="Indicates that the PWT Pulse Width register(s) has been updated and is ready to be read.\n
               This field is cleared by reading PWTRDY and then writing 0 to PWTRDY bit when PWTRDY is set.\n
               Writing 1 to this field has no effect. PWTRDY setting is associated with the EDGE[1:0] bits"
      description="PWT Pulse Width Valid" >
      <choice name="Not Updated"  value="0" enum="NotUpdated"/>
      <choice name="Updated"      value="1" enum="Updated"/>
   </binaryOption >

   <binaryOption key="pwt_r1_pwtov" condition="pwt_r1_pwtov_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PwtR1Pwtov"
      toolTip="Indicates that the PWT counter has run from 0x0000_0xFFFF to 0x0000_0x0000.\n
               This field is cleared by writing 0 to PWTOV when PWTOV is set.\n
               Writing 1 to this field has no effect.\n
               If another overflow occurs when this field is being cleared, the clearing fails"
      description="PWT Counter Overflow" >
      <choice name="No overflow"  value="0" enum="NoOverflow"/>
      <choice name="Overflow"     value="1" enum="Overflow"/>
   </binaryOption >

<!-- Graphic here -->

   <for keys="field:name"
        values="
      pwt_r1_pclks:R1Pclks;
      pwt_r1_pinsel:R1Pinsel;
      pwt_r1_edge:R1Edge;
      pwt_r1_pre:R1Pre;
      pwt_r1_pwten:R1Pwten;
      pwt_r1_pwtie:R1Pwtie;
      pwt_r1_prdyie:R1Prdyie;
      pwt_r1_povie:R1Povie;
      pwt_r1_pwtsr:R1Pwtsr;
      pwt_r1_pwtrdy:R1Pwtrdy;
      pwt_r1_pwtov:R1Pwtov" >
      <setTemplate variables="%(field)" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %defaultFieldExpression
         \t}\n\n
      ]]></setTemplate>
   </for>

<!--   ========== PWT Init class =============================== -->

   <template key="init_description" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init init {
      \t *
      \t *   // Setup values
      \t *   0,                                        // Positive Pulse Width,
      \t *   PwtR1Pclks_TimerClock                     // PWT Clock Source Selection,
      \t *   PwtR1Pinsel_Pwtin0Enabled                 // PWT Pulse Inputs Selection,
      \t *   PwtR1Edge_FallingEdgeStart_FallingEdgesCaptured    // PWT Input Edge Sensitivity,
      \t *   PwtR1Pre_ClockDiv1                        // PWT Clock Prescaler (CLKPRE) Setting,
      \t *   PwtR1Pwten_Disabled                       // PWT Module Enable,
      \t *   PwtR1Pwtie_Disable                        // PWT Module Interrupt Enable,
      \t *   PwtR1Prdyie_Disable                       // PWT Pulse Width Data Ready Interrupt Enable,
      \t *   PwtR1Povie_Disable                        // PWT Counter Overflow Interrupt Enable,
      \t *   PwtR1Pwtsr_NoAction                       // PWT Soft Reset,
      \t *   PwtR1Pwtrdy_NotUpdated                    // PWT Pulse Width Valid,
      \t *   PwtR1Pwtov_NoOverflow                     // PWT Counter Overflow,
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure(init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      class $(_Class)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) interrupt call back.
      \t */
      \ttypedef $(_Class)BasicInfo::CallbackFunction CallbackFunction;
      \t
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  pwtCallback Callback function to execute on interrupt
      \t */
      \tstatic void setCallback(CallbackFunction pwtCallback) {
      \t   if (pwtCallback == nullptr) {
      \t      pwtCallback = unhandledCallback;
      \t   }
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || (sCallback == pwtCallback),
      \t         "Handler already set");
      \t   sCallback = pwtCallback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   //.....IRQ handler code here..........
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t   return;
      \t}
      \t\n
   ]]>
   </template>

   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/** Callback for programmatically set handler */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Class)Info::unhandledCallback;
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <setTemplate namespace="usbdm" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></setTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="pwt_r1_ppw,pwt_r1_pclks,pwt_r1_pinsel,pwt_r1_edge,pwt_r1_pre,pwt_r1_pwten,pwt_r1_pwtie,pwt_r1_prdyie,pwt_r1_povie,pwt_r1_pwtsr,pwt_r1_pwtrdy,pwt_r1_pwtov"
   ><![CDATA[
      \t   /// Pulse Width Timer Register 1
      \t   uint32_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName0 = %symbolicValueExpression1;
      \t\n
   ]]></initialValueTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t   // ..........  Configure ...........
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
             condition="irqHandlingMethod" ><![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      Info::setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t   // ..........  Regs to init .......... ;
      \t   pwt->R1    = init.r1;
      \t}
      \t\n
   ]]></template>

<!--   Constructors -->

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t   %registerName = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <for keys="r"
      values="
            pwt_r1_pclks;
            pwt_r1_pinsel;
            pwt_r1_edge;
            pwt_r1_pre;
            pwt_r1_pwten;
            pwt_r1_pwtie;
            pwt_r1_prdyie;
            pwt_r1_povie;
            pwt_r1_pwtsr;
            pwt_r1_pwtrdy;
            pwt_r1_pwtov
            " >
      <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

   <for keys="r"
      values="
            pwt_r1_ppw
            " >
      <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%paramType0 value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask0) | %macro0(value);
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>


<!--   Default Initialisation value -->

   <initialValueTemplate codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            pwt_r1_pclks,
            pwt_r1_pinsel,
            pwt_r1_edge,
            pwt_r1_pre,
            pwt_r1_pwten,
            pwt_r1_pwtie,
            pwt_r1_prdyie,
            pwt_r1_povie,
            pwt_r1_pwtsr,
            pwt_r1_pwtrdy,
            pwt_r1_pwtov
         "
   ><![CDATA[
      $(init_description)
      \ttypedef $(_Class)BasicInfo::Init Init;
      \t
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
      <![CDATA[
      \t}; // $(_Class)BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
      <![CDATA[
      }; // $(_Class)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <template key="/SYSTEM/Includes" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <projectActionList id = "pwt_files" >
      <copy source="Project_Headers/pwt-MKE.h"  target="Project_Headers/pwt.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Signal mapping ****************** -->
   <category name="SIM" description="Pin mapping">
      <for keys="ch" dim="4" >
         <aliasOption key="/SIM/sim_pinsel_$(_name)in%(ch)ps"  constant="false" optional="true" />
         <aliasOption key="/SIM/sim_pinsel0_$(_name)in%(ch)ps" constant="false" optional="true" />
         <aliasOption key="/SIM/sim_pinsel1_$(_name)in%(ch)ps" constant="false" optional="true" />
      </for>
   </category>

   <signals/>

</peripheralPage>
