<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- rnga_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Random Number Generator Accelerator" >

   <equation key="irq_parameters"            type="String"  value='""'  />
   <equation key="irq_dummy_parameters"      type="String"  value='""'  />
   <equation key="irq_call"                  type="String"  value='""'  />
   <equation key="generateDefault"           type="Boolean" value="false"         />
   <equation key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Structname)BasicInfo&quot;" />

   <!-- ************* CR ****************** -->

   <binaryOption key="rnga_cr_slp" condition="rnga_cr_slp_present"
      enabledBy="enablePeripheralSupport"
      typeName="RngaMode"
      toolTip="Specifies whether RNGA is in Sleep or Normal mode."
      description="Operating Mode" >
      <choice name="RNGA is not in Sleep mode"  value="0" enum="Normal" />
      <choice name="RNGA is in Sleep mode"      value="1" enum="Sleep"  />
   </binaryOption >

   <binaryOption key="rnga_cr_clri" condition="rnga_cr_clri_present"
      enabledBy="enablePeripheralSupport"
      typeName="RngaClearInterrupt"
      toolTip="Clears the interrupt by resetting the error-interrupt indicator (SR[ERRI])."
      description="Clear Interrupt" >
      <choice name="Do not clear the interrupt"      value="0" enum="NoAction" />
      <choice name="Write 1 to clear the interrupt"  value="1" enum="ClearTheInterrupt" />
   </binaryOption >

   <binaryOption key="rnga_cr_intm" condition="rnga_cr_intm_present"
      enabledBy="enablePeripheralSupport"
      typeName="RngaAction"
      toolTip="Masks the triggering of an error interrupt to the interrupt controller when an OR underflow condition occurs.\n
               An OR underflow condition occurs when you read OR[RANDOUT] and SR[OREG_LVL]=0.\n
               See the Output Register (OR) description."
      description="Action on event" >
      <choice name="Interrupt"  value="0" enum="Interrupt" />
      <choice name="No action"  value="1" enum="None" />
   </binaryOption >

   <binaryOption key="rnga_cr_ha" condition="rnga_cr_ha_present"
      enabledBy="enablePeripheralSupport"
      typeName="RngaSecurityViolations"
      toolTip="Enables notification of security violations (via SR[SECV]).\n
               A security violation occurs when you read OR[RANDOUT] and SR[OREG_LVL]=0.\n
               NOTE: This field is sticky. After enabling notification of security violations, \n
               you must reset RNGA to disable them again."
      description="High Assurance" >
      <choice name="Security violations are notified"  value="0" enum="Notified" />
      <choice name="Security violations are masked"    value="1" enum="Ignored" />
   </binaryOption >

   <binaryOption key="rnga_cr_go" condition="rnga_cr_go_present"
      enabledBy="enablePeripheralSupport"
      typeName="RngaGo"
      toolTip="This bit must be set before the RNGA begins loading data into the RNGA Output Register.\n
               Setting this bit does not bring the RNGA out of Sleep Mode. \n
               Furthermore, this bit does not need to be reset after exiting Sleep Mode \n
               NOTE: This field is sticky. You must reset RNGA to stop RNGA from loading OR[RANDOUT] with data."
      description="Generation of random data" >
      <choice name="No generation"        value="0" enum="NoGeneration" />
      <choice name="Generate random data" value="1" enum="GenerateData" />
   </binaryOption >

   <!-- ************* SR ****************** -->

   <intOption key="rnga_sr_oreg_size" condition="rnga_sr_oreg_size_present"
      hidden="true"
      baseType="uint8_t"
      typeName="RngaOutputRegSize"
      toolTip="Indicates the size of the Output (OR) register in terms of the number of 32-bit random-data words it can hold."
      description="Output Register Size" />

   <binaryOption key="rnga_sr_oreg_lvl" condition="rnga_sr_oreg_lvl_present"
      hidden="true"
      typeName="RngaOutputLevel"
      toolTip="Indicates the number of random-data words that are available in OR[RANDOUT]\n
               NOTE: If you read OR[RANDOUT] when SR[OREG_LVL] is not 0, then the contents of a random number\n
               contained in OR[RANDOUT] are returned, and RNGA writes 0 to both OR[RANDOUT] and SR[OREG_LVL]."
      description="Output Register Level" >
      <choice name="No words (empty)"  value="0" enum="NoWordsEmpty" />
      <choice name="One word (valid)"  value="1" enum="OneWordValid" />
   </binaryOption >

   <binaryOption key="rnga_sr_slp" condition="rnga_sr_slp_present"
      hidden="true"
      typeName="RngaStatus"
      toolTip="Specifies whether RNGA is in Sleep or Normal mode.\n
               NOTE: You can also enter Sleep mode by asserting the DOZE signal."
      description="Sleep" >
      <choice name="The RNGA is not in Sleep mode"  value="0" enum="Active"   />
      <choice name="The RNGA is in Sleep mode"      value="1" enum="Sleeping" />
   </binaryOption >

   <binaryOption key="rnga_sr_erri" condition="rnga_sr_erri_present"
      hidden="true"
      typeName="RngaErrorStatus"
      toolTip="Indicates whether an OR underflow condition has occurred since you last cleared the error interrupt\n
               (CR[CLRI]) or RNGA was reset, regardless of whether the error interrupt is masked (CR[INTM]). \n
               An OR underflow condition occurs when you read OR[RANDOUT] and SR[OREG_LVL]=0. \n
               NOTE: After you reset the error-interrupt indicator (via CR[CLRI]), RNGA writes 0 to this field."
      description="Error Interrupt" >
      <choice name="No error"                               value="0" enum="OK" />
      <choice name="Error occurred (data read while empty)" value="1" enum="ReadWhileEmpty"        />
   </binaryOption >

   <binaryOption key="rnga_sr_oru" condition="rnga_sr_oru_present"
      hidden="true"
      typeName="RngaUnderflow"
      toolTip="Indicates whether an OR underflow condition has occurred since you last read this register (SR) or RNGA \n
               was reset, regardless of whether the error interrupt is masked (CR[INTM]). \n
               An OR underflow condition occurs when you read OR[RANDOUT] and SR[OREG_LVL]=0. \n
               NOTE: After you read this register, RNGA writes 0 to this field."
      description="Output Register Underflow" >
      <choice name="Underflow since last read of the RNGA Status Register"     value="0" enum="OK" />
      <choice name="No underflow since last read of the RNGA Status Register"  value="1" enum="Underflowed" />
   </binaryOption >

   <binaryOption key="rnga_sr_lrs" condition="rnga_sr_lrs_present"
      hidden="true"
      typeName="RngaLastReadStatus"
      toolTip="Indicates whether the most recent read of OR[RANDOUT] caused an OR underflow condition, regardless \n
               of whether the error interrupt is masked (CR[INTM]).\n
               An OR underflow condition occurs when you read OR[RANDOUT] and SR[OREG_LVL]=0. \n
               NOTE: After you read this register, RNGA writes 0 to this field."
      description="Last Read Status" >
      <choice name="Last read was successful"                value="0" enum="OK" />
      <choice name="Last read failed (underflow condition)"  value="1" enum="Invalid" />
   </binaryOption >

   <binaryOption key="rnga_sr_secv" condition="rnga_sr_secv_present"
      hidden="true"
      typeName="RngaSecurityStatus"
      toolTip="Used only when high assurance is enabled (CR[HA]). Indicates that a security violation has occurred. \n
               NOTE: This field is sticky. To clear SR[SECV], you must reset RNGA."
      description="Security Violation" >
      <choice name="No security violation"             value="0" enum="OK" />
      <choice name="A security violation has occurred" value="1" enum="Violation" />
   </binaryOption >

   <!-- ************* ER ****************** -->

   <intOption key="rnga_er_ext_ent" condition="rnga_er_ext_ent_present"
      enabledBy="enablePeripheralSupport"
      typeName="uint32_t"
      description="External Entropy"
      toolTip="Specifies an entropy value that RNGA uses in addition to its ring oscillators to seed its pseudorandom algorithm.\n
               NOTE: Specifying a value for this field is optional but recommended. You can write to this field at any \n
               time during operation."
   />

   <!-- ************* OR ****************** -->

   <intOption key="rnga_or_randout" condition="rnga_or_randout_present"
      hidden="true"
      typeName="uint8_t"
      toolTip="Holds a random-data word generated by RNGA.\n
               This is a read-only field. \n
               NOTE: Before reading RANDOUT, be sure it is valid (SR[OREG_LVL]=1). \n
               A 0 value indicates in invalid state and reading may trigger an interrupt. \n
               The value is cleared on read."
      description="Random Output" />

<!-- Setters and getters -->

   <for keys="field           : get   : set   : clear : genCode                 : name"
        values="
         rnga_cr_slp          : true  : true  : false : enableGettersAndSetters : Sleep;
         rnga_cr_clri         : false : false : true  : enableGettersAndSetters : InterruptFlag;
         rnga_cr_intm         : true  : true  : false : enableGettersAndSetters : Action;
         rnga_cr_ha           : true  : true  : false : enableGettersAndSetters : Security;
         rnga_cr_go           : true  : true  : false : enableGettersAndSetters : Go;
         rnga_sr_oreg_size    : true  : false : false : enableGettersAndSetters : OutputRegSize;
         rnga_sr_oreg_lvl     : true  : false : false : enableGettersAndSetters : OutputRegLevel;
         rnga_sr_slp          : true  : false : false : enableGettersAndSetters : Sleeping;
         rnga_sr_erri         : true  : false : false : enableGettersAndSetters : InError;
         rnga_sr_oru          : true  : false : false : enableGettersAndSetters : InUnderflow;
         rnga_sr_lrs          : true  : false : false : enableGettersAndSetters : LastReadStatus;
         rnga_sr_secv         : true  : false : false : enableGettersAndSetters : SecurityState;
         rnga_er_ext_ent      : false : true  : false : enableGettersAndSetters : EntropyValue;
         rnga_or_randout      : true  : false : false : enableGettersAndSetters : RandomValue" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!--   ========== RNGA Init class =============================== -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   RngaMode_Normal ,                 // Operating Mode  - RNGA is not in Sleep mode (operating)
      \t *   RngaAction_Interrupt ,            // Action on event - Interrupt
      \t *   RngaSecurityViolations_Notified , // High Assurance - Security violations are notified
      \t *   RngaGo_GenerateData ,             // Generation of random data - Start generation
      \t *   uint32_t(0x1234),                 // External Entropy value
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue       // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!--   Member variables -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="rnga_cr_slp,rnga_cr_clri,rnga_cr_intm,rnga_cr_ha,rnga_cr_go"
   ><![CDATA[
      \t   /// RNGA Control Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="rnga_er_ext_ent"
   ><![CDATA[
      \t   /// RNGA Entropy Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!--   Constructors -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            rnga_cr_slp;
            rnga_cr_clri;
            rnga_cr_intm;
            rnga_cr_ha;
            rnga_cr_go
            " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <for keys="r"
      values="
            rnga_er_ext_ent
            " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%paramType0 value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask0) | %macro0(value);
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            rnga_cr_slp,
            rnga_cr_intm,
            rnga_cr_ha,
            rnga_cr_go,
            rnga_er_ext_ent
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
             condition="/$(_STRUCTNAME)/generateSharedIrqInfo" >   <![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      // Only set call-backs if feature enabled
      \t      Info::setCallback(init.callbackFunction);
      \t      Info::enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t   rnga->CR    = init.cr|RNGA_CR_CLRI(1);
      \t   rnga->ER    = init.er;
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="rnga_files" >
      <copy source="Project_Headers/rnga.h"         target="Project_Headers/rnga.h"          overwrite="true" derived="true" />
      <copy source="Snippets/rnga-example.cpp"      target="Snippets/rnga-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->
   <category name="Advanced" description="SIM configuration">
      <aliasOption key="/SIM/sim_scgc6_$(_name)"      locked="false" optional="true" />
   </category>

</peripheralPage>
