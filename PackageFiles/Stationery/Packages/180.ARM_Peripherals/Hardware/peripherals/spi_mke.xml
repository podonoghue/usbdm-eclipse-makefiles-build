<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- spi_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Serial Peripheral Interface">

   <constant key="suppressInstance"         type="Boolean" value="false"         />
   <constant key="peripheralUsesInterrupts" type="Boolean" value="true"          />
   <constant key="irq_parameters"           type="String"  value="&quot;&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;&quot;"  />
   <constant key="isGeneratedByDefault"     type="Boolean" value="false"         />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="_enablePeripheral.xml"  />
   <title description="------------------------------------------" />

<!--
    * General substitutions
    *  $(_name)         => e.g FTM2                    (fProvider.getName())
    *  $(_base_class)   => e.g FTM0 => Ftm             (fPeripheral.getClassBaseName())
    *  $(_instance)     => e.g FTM0 => 0, PTA => A     (fPeripheral.getInstance())
    *  $(_class)        => e.g FTM2 => Ftm2            (fPeripheral.getClassName())
    *  $(_basename)     => e.g FTM0 => FTM, PTA => PT  (fPeripheral.getBaseName())
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicValueExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %enumClass[index]               As for %paramType
    * %enumParam[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicValueExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %defaultClockExpression         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %defaultMaskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->
   <template><![CDATA[
      \t//! Pin number in Info table for SCK if mapped to a pin
      \tstatic constexpr int sckPin  = 0;

      \t//! Pin number in Info table for SIN if mapped to a pin
      \tstatic constexpr int sinPin  = 1;

      \t//! Pin number in Info table for SOUT if mapped to a pin
      \tstatic constexpr int soutPin  = 2;\n\n
   ]]></template>

   <intOption key="speed"
      description="Speed of interface"
      toolTip="Speed of transmission"
      value="10000000" units="Hz"
      min="0" max="10000000" />

   <choiceOption key="spi_mode"
      description="Mode"
      toolTip="Communication mode">
      <choice value="0" name="Mode 0: CPOL=0, CPHA=0" isDefault="true" />
      <choice value="1" name="Mode 1: CPOL=0, CPHA=1" />
      <choice value="2" name="Mode 2: CPOL=1, CPHA=0" />
      <choice value="3" name="Mode 3: CPOL=1, CPHA=1" />
   </choiceOption>

   <binaryOption key="spi_lsbfe"
      description="Transmission order"
      toolTip="Transmission order">
      <choice value="0" name="MSB first" />
      <choice value="1" name="LSB first" />
   </binaryOption>

   <projectActionList id = "spi_files" >
      <copy source="Project_Headers/spi-MKE.h"           target="Project_Headers/spi.h"           overwrite="true"      derived="true" />
      <copy source="Sources/spi-MKE.cpp"                 target="Sources/spi.cpp"                 overwrite="true"      derived="true" />
      <copy source="Snippets/spi-example-MKL.cpp"        target="Snippets/spi-example.cpp"        overwrite="true"      derived="true" />
      <copy source="Snippets/spi-example-cmsis-MKL.cpp"  target="Snippets/spi-example-cmsis.cpp"  overwrite="true"      derived="true" />
   </projectActionList>

   <template key="/SPI/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_name) interface
   \t * <b>Example</b>
   \t * @code
   \t * USBDM::Spi *spi = new USBDM::$(_class);
   \t *
   \t * uint8_t txData[] = {1,2,3};
   \t * uint8_t rxData[10];
   \t * spi->txRxBytes(sizeof(txData), txData, rxData);
   \t * @endcode
   \t */
   \tclass $(_class) : public $(_base_class)Base_T<$(_class)Info> {
   \tpublic:
   \t$(/$(_name)/InputMapping:   // No user mappings found)
   \t};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.SpiValidate">
   </validate>

   <template><![CDATA[
      \t//! Default communication mode: order, clock phase and clock polarity
      \tstatic constexpr uint8_t modeValue =
      \t   SPI_C1_LSBFE($(spi_lsbfe))| // LSB or MSB first
      \t   SPI_C1_MODE($(spi_mode));  // Mode (CPOL+CPHA)

      \tstatic uint32_t getClockFrequency() {
      \t   return SystemBusClock;
      \t}

      \t//! Default speed (Hz)
      \tstatic constexpr uint32_t speed =
      \t   $(speed);\n\n
   ]]></template>

   <signals/>
</peripheralPage>
