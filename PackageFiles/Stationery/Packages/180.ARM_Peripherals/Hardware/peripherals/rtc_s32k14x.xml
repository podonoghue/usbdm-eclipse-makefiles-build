<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- rtc_s32k14x.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Real-time Clock">

   <binaryOption key="configure_rtc"
      description="Configure RTC"
      toolTip="Enables configuration of RTC during startup  \n
               If disabled no RTC registers are accessed">
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled"  isDefault="true" />
   </binaryOption>

   <xi:include href="_default_instance.xml"/>

   <template><![CDATA[
      \t//! Base value for PCR (excluding MUX value)
      \tstatic constexpr uint32_t defaultPcrValue  = 0;\n\n
   ]]></template>

   <aliasOption key="/SIM/system_rtcclkin_frequency" locked="false" optional="true"/>
   <aliasOption key="/SIM/lpoclks_rtcclksel"         locked="false" optional="true"/>
   <aliasOption key="/PCC/pcc_rtc"                   locked="false" />

   <intOption key="rtcclk_gated_clock"
      derived="true"
      locked="true"
      units="Hz"
      description="Frequency of RTC Peripheral Clock"
      toolTip="RTC clock available to peripherals"
      value="0" />

   <binaryOption key="rtc_cr_cpe"
      description="Clock Pin Enable"
      toolTip="Controls the RTC_CLKOUT function" >
      <choice value="0" name="RTC_CLKOUT disabled" />
      <choice value="1" name="RTC_CLKOUT enabled"  />
   </binaryOption>

   <binaryOption key="rtc_cr_lpos"
      description="LPO Select"
      toolTip="Selects the input to the RTC prescaler. \n
      - LPO 1 kHz clock.\n
        \tThe LPO increments the prescaler using only TPR[15..5] with TPR[4:0] ignored.\n
        \tThis supports close to 1 second increment of the seconds register.\n
        \tSimilarly, compensation is supported using TCR[7..5] with TCR[4..0] ignored \n
      - RTC_CLK clock (Assumed ~32kHz).  \n
        \tThe entire TPR and TCR registers are used" >
      <choice value="0" name="RTC_CLK clock" />
      <choice value="1" name="1 kHz LPO"     />
   </binaryOption>

   <binaryOption key="rtc_cr_cps"
      description="Clock Pin Select"
      toolTip="Controls the RTC_CLKOUT function" >
      <choice value="0" name="RTC_CLKOUT = Prescaler output clock (see TSIC)" />
      <choice value="1" name="RTC_CLKOUT = RTC_CLK (if available to other peripherals)" />
   </binaryOption>

   <binaryOption key="rtc_cr_um"
      description="Update Mode"
      toolTip="Allows the SR[TCE] to be written even when the Status Register is locked.\n
               When set, the SR[TCE] can always be written if the SR[TIF] or SR[TOF] are set or if the SR[TCE] is clear" >
      <choice value="0" name="SR[TCE] cannot be written when locked" />
      <choice value="1" name="SR[TCE] can be written when locked under limited conditions" />
   </binaryOption>

   <binaryOption key="rtc_cr_sup"
      description="Supervisor access"
      toolTip="Determines if the RTC register access is available in non-supervisor mode \n
               Non supported write accesses generate a bus error" >
      <choice value="0" name="Non-supervisor write accesses not supported" />
      <choice value="1" name="Non-supervisor write accesses supported" />
   </binaryOption>

   <intOption key="rtc_1hz_clock"
      locked="true"
      derived="true"
      description="1Hz output from RTC"
      origin="RTC 1Hz output"
      units="Hz"/>

   <aliasOption key="/SIM/sim_sopt2_rtcclkoutsel" optional="true" locked="false" />
   <aliasOption key="/SIM/rtc_clkout"             optional="true" />

   <template><![CDATA[
      \t//! Whether to configure RTC
      \t//! If disabled then no RTC registers are accessed.
      \t//! This is useful if RTC is not powered as register access will trap.
      \tstatic constexpr bool configure_rtc = $(configure_rtc);
      \t
      \t//! Frequency of RTC External Clock or Crystal
      \tstatic constexpr uint32_t osc_input_freq = $(osc_input_freq)UL;
      \t\n
   ]]></template>

   <initialValueTemplate
      separator="|"
      terminator=";"
      variables="
            rtc_cr_cps,
            rtc_cr_lpos,
            rtc_cr_um,
            rtc_cr_sup,
            rtc_cr_cpe"
   ><![CDATA[
      \t//! Oscillator control register
      \tstatic constexpr uint32_t cr = %initExpression
      \t\n
   ]]></initialValueTemplate>

   <intOption key="rtc_tcr_tcr" min="-128" max="127"
      description="Time Compensation Register"
      toolTip="Adjusts the number of 32.768 kHz clock cycles in each second.\n
               This value+32768 determines the number of clock cycles that makes up a second"
      value="0" />

   <intOption key="rtc_tcr_cir" min="1" max="256" offset="-1"
      enabledBy="rtc_tcr_tcr!=0"
      description="Compensation Interval Register"
      toolTip="Configures the compensation interval that controls how frequently the TCR adjustment value \n
         		is applied to alter the number of 32.768 kHz cycles in each second. \n
               This register is double buffered and writes do not take affect until the end of the current compensation interval"
      value="1"
      units="s" />

   <initialValueTemplate
      separator="|"
      terminator=";"
      variables="
            rtc_tcr_cir,
            rtc_tcr_tcr"
   ><![CDATA[
      \t//! RTC Time Compensation Register
      \tstatic constexpr uint32_t tcr = %initExpression
      \t\n
   ]]></initialValueTemplate>

   <category name="Register Locks" description="Locks RTC Registers">
	   <binaryOption key="rtc_lr_lrl"
	      description="Lock Register Lock"
	      toolTip="Once cleared, this bit can only be set by VBAT POR or software reset" >
	      <choice value="0" name="Locked" />
	      <choice value="1" name="Unlocked"  isDefault="true" />
	   </binaryOption>

	   <binaryOption key="rtc_lr_srl"
	      description="Status Register Lock"
	      toolTip="Once cleared, this bit can only be set by VBAT POR or software reset" >
	      <choice value="0" name="Locked" />
	      <choice value="1" name="Unlocked"  isDefault="true" />
	   </binaryOption>

	   <binaryOption key="rtc_lr_crl"
	      description="Control Register Lock"
	      toolTip="Once cleared, this bit can only be set by VBAT POR or software reset" >
	      <choice value="0" name="Locked" />
	      <choice value="1" name="Unlocked"  isDefault="true" />
	   </binaryOption>

	   <binaryOption key="rtc_lr_tcl"
	      description="Time Compensation Lock"
	      toolTip="Once cleared, this bit can only be set by VBAT POR or software reset" >
	      <choice value="0" name="Locked" />
	      <choice value="1" name="Unlocked"  isDefault="true" />
	   </binaryOption>
   </category>

   <initialValueTemplate
      separator="|"
      terminator=";"
      variables="
            rtc_lr_lrl,
            rtc_lr_srl,
            rtc_lr_crl,
            rtc_lr_tcl"
   ><![CDATA[
      \t//! RTC Lock Register
      \tstatic constexpr uint32_t lr = %initExpression
      \t\n
   ]]></initialValueTemplate>


   <!--
   Patterns for pattern and classHandler
     -  %i replaced with peripheral instance e.g. FTM1 => 1, PTA => A
     -  %b replaced with peripheral base name e.g. FTM1 => = FTM
     -  %c replaced with peripheral C++ base class name e.g. FTM1 => = Ftm
     -  _IRQHandler is appended to the pattern (only)
   -->
   <irqOption key="irqHandlingMethod"
      description="RTC Alarmand Seconds interrupt handlers"
      toolTip="This selection allow the interrupt handler for this peripheral to be installed using several different methods"
      pattern="^RTC_(Alarm|Seconds)$"
      classHandler="%c%i::irq$1Handler" />

   <template><![CDATA[
       \t//! Class based callback handler has been installed in vector table\n
       \tstatic constexpr bool irqHandlerInstalled = $(irqHandlingMethod);\n\n
   ]]></template>

   <choiceOption key="irqLevel"
      description="Default IRQ level for this peripheral"
      toolTip="Sets the default priority level used to configure the NVIC">
      <choice name="VeryHigh"      value="NvicPriority_VeryHigh" />
      <choice name="High"          value="NvicPriority_High" />
      <choice name="MidHigh"       value="NvicPriority_MidHigh" />
      <choice name="Normal"        value="NvicPriority_Normal" isDefault="true"/>
      <choice name="Midlow"        value="NvicPriority_Midlow" />
      <choice name="Low"           value="NvicPriority_Low" />
      <choice name="VeryLow"       value="NvicPriority_VeryLow" />
   </choiceOption>

   <template><![CDATA[
       \t//! Default IRQ level\n
       \tstatic constexpr NvicPriority irqLevel =  $(?irqHandlingMethod:$(irqLevel):NvicPriority_NotInstalled);\n\n
   ]]></template>


   <choiceOption key="rtc_year"
      description="Initial Year"
      toolTip="Used for coldstart" >
      <choice value="2017"  name="2017" />
      <choice value="2018"  name="2018" />
      <choice value="2019"  name="2019" />
      <choice value="2020"  name="2020" />
      <choice value="2021"  name="2021" />
      <choice value="2022"  name="2022" isDefault="true" />
      <choice value="2023"  name="2023" />
      <choice value="2024"  name="2024" />
      <choice value="2025"  name="2025" />
      <choice value="2026"  name="2026" />
      <choice value="2027"  name="2027" />
      <choice value="2028"  name="2028" />
      <choice value="2029"  name="2029" />
      <choice value="2030"  name="2030" />
      <choice value="2031"  name="2031" />
      <choice value="2032"  name="2032" />
      <choice value="2033"  name="2033" />
      <choice value="2034"  name="2034" />
      <choice value="2035"  name="2035" />
      <choice value="2036"  name="2036" />
      <choice value="2037"  name="2037" />
      <choice value="2038"  name="2038" />
      <choice value="2039"  name="2039" />
   </choiceOption>

   <choiceOption key="rtc_month"
      description="Initial Month"
      toolTip="Used for coldstart" >
      <choice value="0"    name="Jan" />
      <choice value="31"   name="Feb" />
      <choice value="59"   name="March" />
      <choice value="90"   name="April" />
      <choice value="120"  name="May" />
      <choice value="151"  name="June" />
      <choice value="181"  name="July" isDefault="true" />
      <choice value="212"  name="August" />
      <choice value="243"  name="September" />
      <choice value="273"  name="October" />
      <choice value="304"  name="November" />
      <choice value="335"  name="December" />
   </choiceOption>

   <intOption key="rtc_day" min="1" max="31" value="1"
      description="Initial Day of Month"
      toolTip="Used for coldstart" />

   <intOption key="rtc_hour" min="0" max="23" value="12"
      description="Initial Hour of Day"
      toolTip="Used for coldstart" />

   <intOption key="rtc_minute" min="0" max="59" value="0"
      description="Initial Minute of Hour"
      toolTip="Used for coldstart" />

   <template><![CDATA[
      \t//! Time for cold start (corrected for 12 leap years since 1970)
      \tstatic constexpr uint32_t coldStartTime =
      \t         (((($(rtc_year)-1970)*365UL +
      \t            ($(rtc_month)) +
      \t            ($(rtc_day)+12-1))*24 +
      \t           ($(rtc_hour)))*60 +
      \t          ($(rtc_minute)))*60;
      \t\n
    ]]></template>

   <category name="Device Registers (view only)" description="RTC Register values">
      <category name="RTC CR" description="RTC Control Register">
         <aliasOption key="rtc_cr_cpe" />
         <aliasOption key="rtc_cr_lpos" />
         <aliasOption key="rtc_cr_cps" />
         <aliasOption key="rtc_cr_um" />
         <aliasOption key="rtc_cr_sup" />
      </category>
      <category name="RTC LR" description="RTC Lock Register">
         <aliasOption key="rtc_lr_lrl" />
         <aliasOption key="rtc_lr_srl" />
         <aliasOption key="rtc_lr_crl" />
         <aliasOption key="rtc_lr_tcl" />
      </category>
      <category name="RTC TCR" description="RTC Time Compensation Register">
         <aliasOption key="rtc_tcr_cir" />
         <aliasOption key="rtc_tcr_tcr" />
      </category>
   </category>

   <template key="/RTC/declarations" namespace="all"  ><![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};
   ]]></template>

   <template key="/MCG/Includes" namespace="all"  ><![CDATA[
      #include "rtc.h"\n
   ]]></template>

   <template key="/MCG/Initialisation" namespace="all"  ><![CDATA[
      \tUSBDM::$(_Class)::initialise();\n
   ]]></template>

   <xi:include href="_clockOption.xml"/>

   <signals/>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.RtcValidate">
   </validate>

   <projectActionList id = "rtc_files" >
      <copy source="Project_Headers/rtc.h"       target="Project_Headers/rtc.h"      overwrite="true"  derived="true" />
      <copy source="Startup_Code/rtc.cpp"        target="Startup_Code/rtc.cpp"       overwrite="true"  derived="true" />
      <copy source="Snippets/rtc-example.cpp"    target="Snippets/rtc-example.cpp"   overwrite="true"  derived="true" />
   </projectActionList>

   <template><![CDATA[
      \t/**
      \t * Get RTC clock frequency (internal, not masked by RTC_CR_CLKO)
      \t *
      \t * @return Clock frequency as uint32_t
      \t */
      \tstatic uint32_t getInternalClock() {
      \t   return (rtc->CR&RTC_CR_OSCE_MASK)?osc_input_freq:0;
      \t}

      \t/**
      \t * Get RTC clock frequency (external, masked by RTC_CR_CLKO)
      \t *
      \t * @return Clock frequency as uint32_t
      \t */
      \tstatic uint32_t getExternalClock() {
      \t   return (rtc->CR&RTC_CR_CLKO_MASK)?0:getInternalClock();
      \t}
      \t\n
   ]]></template>


</peripheralPage>
