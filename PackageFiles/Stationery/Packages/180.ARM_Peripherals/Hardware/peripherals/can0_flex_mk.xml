<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- can0_flex_mk.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Flex Controller Area Network module" >

<!--
   <choiceOption key="irq_enum" condition="=_hardwareIrqCount>1"
      valueFormat="%s"
      hidden="true"
      derived="true"
      typeName="$(_Class)IrqNum"
      description="$(_Class) Interrupt indices"
      toolTip="Used to identify peripheral interrupt" >
      <choice value="0"  enum="MessageBuffer" name="FlexCAN - Message Buffers (Mailboxes and FIFO)" />
      <choice value="1"  enum="BusOff"        name="FlexCAN - Bus off" />
      <choice value="2"  enum="Error"         name="FlexCAN - Error" />
      <choice value="3"  enum="TxWarning"     name="FlexCAN - Transmit Warning" />
      <choice value="4"  enum="RxWarning"     name="FlexCAN - Receive Warning" />
      <choice value="5"  enum="WakeUp"        name="FlexCAN - Wakeup" />
   </choiceOption>
 -->

   <equation key="irq_parameters"            value=""  />
   <equation key="irq_dummy_parameters"      value=""  />
   <equation key="irq_call_parameters"       value=""  />
   <equation key="generateDefault"           value="false"         />
   <equation key="configureInStartupDefault" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <!-- Note: second entry gets the tick irrespective of true/false value -->
   <binaryOption key="EnableFifo"
      enabledBy="enablePeripheralSupport"
      description="Enable Receive FIFO"
      toolTip="This option enables use of the receive FIFO in addition to the individual mailboxes.\n
               The maximum number of individual mailboxes is reduced" >
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled"  isDefault="true" />
   </binaryOption>

   <intOption key="MaxNumberOfMessageBuffers"
      enabledBy="enablePeripheralSupport"
      description="Maximum number of message buffers available"
      toolTip="This is the maximum value determined by the hardware.\n
               The CAN memory is shared between the FIFO filters and message buffers so\n
               the actual number available will be reduced by use of the FIFO and FIFO filters"
      locked="true"
      value="16" />

   <intOption key="MaxNumberOfFifoMessageFilters"
      enabledBy="enablePeripheralSupport"
      description="Maximum number of FIFO message filters available"
      toolTip="This is the maximum value determined by the hardware.\n
               The CAN memory is shared between the FIFO filters and message buffers\n
               so a usable number will be less than this"
      locked="true"
      value="40" />

   <intOption key="NumberOfFifoMessageFilters"
      enabledBy="enablePeripheralSupport"
      description="Number of filters for FIFO"
      toolTip="Used to configure number of FIFO filters"
      value="16" step="8" min="0" max="40" />

   <intOption key="NumberOfIndividualMailboxes"
      enabledBy="enablePeripheralSupport"
      description="Number of individual Rx/Tx mailboxes"
      toolTip="Used to configure number individually allocated mailboxes"
      value="8" min="0" max="16" />

   <template><![CDATA[
       \t//! Whether FIFO is enable
       \tstatic constexpr bool EnableFifo     =  $(EnableFifo);

       \t//! Maximum number of Message Buffers
       \tstatic constexpr unsigned MaxNumberOfMessageBuffers     =  $(MaxNumberOfMessageBuffers);

       \t//! Maximum number of Message Filters
       \tstatic constexpr unsigned MaxNumberOfFifoMessageFilters =  $(EnableFifo)?$(MaxNumberOfFifoMessageFilters):0;

       \t//! Number of Mailbox Buffers
       \tstatic constexpr unsigned NumberOfIndividualMailboxes   =  $(NumberOfIndividualMailboxes);

       \t//! Number of FIFO Message Filters
       \tstatic constexpr unsigned NumberOfFifoMessageFilters    =  $(EnableFifo)?$(NumberOfFifoMessageFilters):0;\n\n
   ]]></template>

<!--
   <irqOption key="miscellaneousIrqHandlingMethod"
      enabledBy="irqHandlingMethod"
      description="Miscellaneous Interrupt handlers"
      toolTip="This selection allow the interrupt handler for this peripheral to be installed using several different methods\n
               Handles: Bus Off, Transmit and Receive Warning"
      pattern="^%b%i_(BusOff|TxWarning|RxWarning)$"
      classHandler="%c%i::irqHandler" />

   <irqOption key="errorIrqHandlingMethod"
      enabledBy="irqHandlingMethod"
      description="Error Interrupt handlers"
      toolTip="This selection allow the interrupt handler for this peripheral to be installed using several different methods\n
               Handles: Bus Error"
      pattern="^%b%i_Error$"
      classHandler="%c%i::errorIrqHandler" />

   <irqOption key="wakeupIrqHandlingMethod"
      enabledBy="irqHandlingMethod"
      description="Wakeup Interrupt handlers"
      toolTip="This selection allow the interrupt handler for this peripheral to be installed using several different methods\n
               Handles: Wakeup"
      pattern="^%b%i_WakeUp$"
      classHandler="%c%i::wakeupIrqHandler" />

   <irqOption key="messagebufferIrqHandlingMethod"
      enabledBy="irqHandlingMethod"
      description="Message Buffer Interrupt handlers"
      toolTip="This selection allow the interrupt handler for this peripheral to be installed using several different methods\n
               Handles: Message buffer events (FIFO and Mailboxes)"
      pattern="^%b%i_MessageBuffer.*$"
      classHandler="%c%i::messageBufferIrqHandler" />
 -->

   <signals/>

   <choiceOption key="can_ctrl1_clksrc"
      typeName="CanClockSource"
      description="FlexCAN Clock"
      toolTip="Selects the clock source for the CAN interface" >
      <choice value="0"  name="OSCERCLK Clock" enum="OscerClk"  code="Osc0Info::getOscerClock()" />
      <choice value="1"  name="Bus clock"      enum="BusClk"    code="SystemBusClock"            />
   </choiceOption>

   <clockCodeTemplate variable="can_ctrl1_clksrc"
   returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setCanClock(%paramType %paramName) {
      \t   %fieldAssignment;
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getCanClock() {
      \t
      \t   switch(%maskingExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>

   <template><![CDATA[
      \t/**
      \t * Get Protocol Engine input clock frequency
      \t *
      \t * @param clksrc value for CAN_CTRL1_CLKSRC
      \t *
      \t * @return CAN input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getPeClockFrequency(CanClockSource clksrc) {
      \t   if (clksrc) {
      \t      return SystemBusClock;
      \t   }
      \t   else {
      \t      return Osc0Info::getOscerClock();
      \t   }
      \t}

      \t/**
      \t * Get Protocol Engine input clock frequency
      \t *
      \t * @return CAN input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getPeClockFrequency() {
      \t    return getPeClockFrequency((CanClockSource)(can->CTRL1 & CAN_CTRL1_CLKSRC_MASK));
      \t}\n\n
   ]]></template>

   <template><![CDATA[
      \t/**
      \t * Get Controller Host Interface input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getChiClockFrequency() {
      \t   return SystemCoreClock;
      \t}\n\n
   ]]></template>

   <template codeGenCondition="irqHandlingMethod" ><![CDATA[
      \t/**
      \t * Enable Miscellaneous interrupts in NVIC
      \t */
      \tstatic void enableMiscellaneousNvicInterrupts() {
      \t   NVIC_EnableIRQ(irqNums[$(_Class)IrqNum_BusOff]);
      \t   NVIC_EnableIRQ(irqNums[$(_Class)IrqNum_TxWarning]);
      \t   NVIC_EnableIRQ(irqNums[$(_Class)IrqNum_RxWarning]);
      \t}
      \t
      \t/**
      \t * Enable and set priority of Miscellaneous interrupts in NVIC
      \t * Any pending NVIC interrupts are first cleared.
      \t *
      \t * @param[in]  nvicPriority  Interrupt priority
      \t */
      \tstatic void enableMiscellaneousNvicInterrupts(NvicPriority nvicPriority) {
      \t   enableNvicInterrupt(irqNums[$(_Class)IrqNum_BusOff], nvicPriority);
      \t   enableNvicInterrupt(irqNums[$(_Class)IrqNum_TxWarning], nvicPriority);
      \t   enableNvicInterrupt(irqNums[$(_Class)IrqNum_RxWarning], nvicPriority);
      \t}
      \t
      \t/**
      \t * Disable Miscellaneous interrupts in NVIC
      \t */
      \tstatic void disableMiscellaneousNvicInterrupts() {
      \t   NVIC_DisableIRQ(irqNums[$(_Class)IrqNum_BusOff]);
      \t   NVIC_DisableIRQ(irqNums[$(_Class)IrqNum_TxWarning]);
      \t   NVIC_DisableIRQ(irqNums[$(_Class)IrqNum_RxWarning]);
      \t}
      \t\n
   ]]></template>

<!--   Default Initialisation value -->

<!--   Configure methods -->

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tusing $(_Class) = $(_Baseclass)Handler_T<$(_Info)>;
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="can_files" >
      <copy source="Project_Headers/can-MK.h"                    target="Project_Headers/can.h"                    overwrite="true"  derived="true" />
      <copy source="Snippets/can-mailbox-example.cpp"         target="Snippets/can-mailbox-example.cpp"         overwrite="true"  derived="true" />
      <copy source="Snippets/can-sw-led-example.cpp"          target="Snippets/can-sw-led-example.cpp"          overwrite="true"  derived="true" />
      <copy source="Snippets/can-fifo-example.cpp"            target="Snippets/can-fifo-example.cpp"            overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->
   <category name="Advanced" description="SIM configuration" >
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <!-- ************* Signal mapping ****************** -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
