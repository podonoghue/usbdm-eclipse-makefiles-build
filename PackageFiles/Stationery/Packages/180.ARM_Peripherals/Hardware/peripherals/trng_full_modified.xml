<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- trng_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="True Random Number Generator">

   <constant key="irq_parameters"            type="String"  value='""'  />
   <constant key="irq_dummy_parameters"      type="String"  value='""'  />
   <constant key="irq_call"                  type="String"  value='""'  />
   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Structname)BasicInfo&quot;" />

   <!-- ************* MCTL ****************** -->

   <binaryOption key="trng_mctl_prgm" condition="trng_mctl_prgm_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngMode"
      toolTip="No Entropy value will be generated while the TRNG is in Program Mode.\n
               Note that different RNG registers are accessible at the same address \n
               depending on whether PRGM is set to 1 or 0."
      description="Programming Mode Select" >
      <choice name="Run mode"      value="0" enum="Run"     isDefault="true" />
      <choice name="Program mode"  value="1" enum="Program" />
   </binaryOption >

   <binaryOption key="trng_mctl_tstop_ok" condition="trng_mctl_tstop_ok_present"
      hidden="true"
      typeName="TrngStopOk"
      toolTip="Software should check that this bit is a 1 before transitioning TRNG0 to low power mode\n
               The TRNG turns on the free-running ring oscillator whenever new entropy is being \n
               generated. If the TRNG clock is stopped while the TRNG ring oscillator is running,\n
               the oscillator will continue running even though the TRNG0 clock is stopped.\n
               TSTOP_OK is asserted when the TRNG ring oscillator is not running and may be stopped."
      description="Indicates the Trng may be stopped" >
      <choice name="Busy and may not be stopped"  value="0" enum="Busy" />
      <choice name="Idle and may be stopped"      value="1" enum="Idle"     />
   </binaryOption >

   <binaryOption key="trng_mctl_err" condition="trng_mctl_err_present"
      hidden="true"
      typeName="TrngStatus"
      toolTip="Write-1 to clear error status"
      description="Error status" >
      <choice name="No error"                           value="0" enum="NoError" />
      <choice name="Error"                              value="1" enum="Error" />
   </binaryOption >

   <binaryOption key="trng_mctl_tst_out" condition="trng_mctl_tst_out_present"
      hidden="true"
      typeName="TrngTestOutput"
      toolTip="Read only: Test point inside ring oscillator"
      description="Test point for oscillator" >
      <choice name="Low value"                           value="0" enum="Low" />
      <choice name="High value"                          value="1" enum="High" />
   </binaryOption >

   <binaryOption key="trng_mctl_ent_val" condition="trng_mctl_ent_val_present"
      hidden="true"
      typeName="TrngEntropy"
      toolTip="Read only: Entropy Valid.\n
               Will assert only if TRNG ACC bit is set, and then after an entropy value is generated.\n
               Will be cleared at most one (1) bus clock cycle after reading the TRNG0_ENT15 register."
      description="Entropy Valid" >
      <choice name="No entropy values available"        value="0" enum="Busy" />
      <choice name="New entropy values available"       value="1" enum="ValuesAvailable" />
   </binaryOption >

   <binaryOption key="trng_mctl_fct_val" condition="trng_mctl_fct_val_present"
      hidden="true"
      typeName="TrngMFrequencyCountStatus"
      toolTip="Read only: Frequency Count Valid.\n
               Indicates that a valid frequency count may be read from TRNG0_FRQCNT."
      description="Frequency Count Valid" >
      <choice name="No count available"            value="0" enum="Busy" />
      <choice name="Count available"               value="1" enum="Available" />
   </binaryOption >

   <binaryOption key="trng_mctl_fct_fail" condition="trng_mctl_fct_fail_present"
      hidden="true"
      typeName="TrngMctlFctFail"
      toolTip="Read Only: Indicates the frequency counter has detected a failure.\n
               This may be due to improper programming of the TRNG0_FRQMAX and/or\n
               TRNG0_FRQMIN registers, or a hardware failure in the ring oscillator.\n
               This error may be cleared by writing a 1 to the ERR bit."
      description="Frequency Count Fail" >
      <choice name="No failure" value="0" enum="OK" />
      <choice name="Failure"    value="1" enum="Failed" />
   </binaryOption >

   <binaryOption key="trng_mctl_rst_def" condition="trng_mctl_rst_def_present"
      hidden="true"
      typeName="TrngReset"
      toolTip="Writing a 1 to this bit clears various TRNG registers, and bits within registers,\n
               to their default state. This bit is writable only if PRGM bit is 1, or PRGM bit\n
               is being written to 1 simultaneously to writing this bit.\n
               Reading this bit always produces a 0."
      description="Reset to Defaults" >
      <choice name="No action"  value="0" enum="NoAction" />
      <choice name="Reset"      value="1" enum="Apply"    />
   </binaryOption >

   <binaryOption key="trng_mctl_trng_acc" condition="trng_mctl_trng_acc_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngAccessMode"
      toolTip="When set to 1, the TRNG will generate an Entropy value that can be read via the\n
               TRNG0_ENT0-TRNG0_ENT15 registers.\n
               The Entropy value may be read once the ENT VAL bit is asserted."
      description="Access Mode" >
      <choice name="Stopped"  value="0" enum="Stopped" />
      <choice name="Generate" value="1" enum="Generate" />
   </binaryOption >

   <category description="Advanced" >

   <choiceOption key="trng_mctl_samp_mode" condition="trng_mctl_samp_mode_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngMctlSampMode"
      toolTip="Determines the method of sampling the ring oscillator while generating the Entropy value.\n
               This field is writable only if PRGM bit is 1, or PRGM bit is being written to 1\n
               simultaneously with writing this field.\n
               This field is cleared to the POR default value by writing the RST_DEF bit to 1."
      description="Sample Mode" >
      <choice name="Von Neumann data -> Entropy shifter and Statistical Checker"          value="0" enum="VonNeumann" />
      <choice name="Raw data -> Entropy shifter and Statistical Checker"                  value="1" enum="RawData"    isDefault="true" />
      <choice name="Von Neumann data -> Entropy shifter. Raw data -> Statistical Checker" value="2" enum="VonNeumannToEntropy_RawDataToChecker" />
   </choiceOption >

   <choiceOption key="trng_mctl_osc_div" condition="trng_mctl_osc_div_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngOscDivide"
      toolTip="Determines the amount of dividing done to the ring oscillator before it is used by the TRNG.\n
               This field is writable only if PRGM bit is 1, or PRGM bit is being written to 1\n
               simultaneously to writing this field.\n
               This field is cleared to the default POR value by writing the RST_DEF bit to 1."
      description="Oscillator Divide" >
      <choice name="Ring oscillator with no divide"  value="0" enum="DivBy1" />
      <choice name="Ring oscillator divided-by-2"    value="1" enum="DivBy2" />
      <choice name="Ring oscillator divided-by-4"    value="2" enum="DivBy4" />
      <choice name="Ring oscillator divided-by-8"    value="3" enum="DivBy8" />
   </choiceOption >

   <binaryOption key="trng_mctl_for_sclk" condition="trng_mctl_for_sclk_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngForceClock"
      toolTip="Forces use of the system clock operate the TRNG, instead of the ring oscillator.\n
               This is for test use only, and indeterminate results may occur.\n
               This bit is writable only if PRGM bit is 1, or PRGM bit is being written to 1\n
               simultaneously to writing this bit. This bit is cleared by writing the RST_DEF bit to 1."
      description="Force System Clock" >
      <choice name="Normal mode - Ring oscillator" value="0" enum="Normal" />
      <choice name="Test mode - System clock"      value="1" enum="Test" />
   </binaryOption>

   <!-- ************* SCMISC ****************** -->

   <intOption key="trng_scmisc_rty_ct" condition="trng_scmisc_rty_ct_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScmiscRtyCt"
      baseType="uint32_t"
      description="Retry Count"
      toolTip="If a statistical check fails during the TRNG Entropy Generation, the RTY_CT value\n
               indicates the number of times a retry should occur before generating an error.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
      value="1"
   />

   <intOption key="trng_scmisc_lrun_max" condition="trng_scmisc_lrun_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScmiscLrunMax"
      baseType="uint32_t"
      description="Long Run Limit"
      toolTip="This value is the largest allowable number of consecutive samples of all 1, or all 0 \n
               that is allowed during the Entropy generation.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to the POR reset value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
      value="0b100010"
   />

   <title description="Poker Test" />

   <!-- ************* PKRRNG ****************** -->

   <intOption key="trng_pkrrng_pkr_rng" condition="trng_pkrrng_pkr_rng_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngPkrrngPkrRng"
      baseType="uint32_t"
      description="Poker Range"
      toolTip="During the TRNG Statistical Checks, a Poker Test is run which requires a maximum and minimum limit.\n
               The maximum is programmed in the PKRMAX[PKR_MAX] register, and the minimum is derived by subtracting\n
               the PKR_RNG value from the programmed maximum value.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1.\n
               Note that the minimum allowable Poker result is PKR_MAX - PKR_RNG + 1."
      value="0b100110100011"
   />

   <!-- ************* PKRMAX ****************** -->

   <intOption key="trng_pkrmax_pkr_max" condition="trng_pkrmax_pkr_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngPkrmaxPkrMax"
      baseType="uint32_t"
      description="Poker Maximum Limit"
      toolTip="During the TRNG Statistical Checks, a Poker Test is run which requires a maximum and minimum limit.\n
               The maximum allowable result is programmed in the TRNG0_PKRMAX[PKR_MAX] register. \n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This register is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1.\n
               Note that the TRNG0_PKRMAX and TRNG0_PKRRNG registers combined are used to define the minimum\n
               allowable Poker result, which is PKR_MAX - PKR_RNG + 1.\n
               Note that if TRNG0_MCTL[PRGM] bit is 0, this register address is used to read the Poker Test Square\n
               Calculation result in register TRNG0_PKRSQ"
      value="0b110100100100000"
   />

   <!-- ************* PKRSQ ****************** -->

   <intOption key="trng_pkrsq_pkr_sq" condition="trng_pkrsq_pkr_sq_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker Square Calculation Result"
      toolTip="During the TRNG Statistical Checks, a Poker Test is run which starts with the value\n
			      TRNG0_PKRMAX[PKR_MAX]. This value decreases according to a sum of squares algorithm, and\n
			      must remain greater than zero, but less than the TRNG0_PKRRNG[PKR_RNG] limit.\n
			      The resulting value may be read through this register, if TRNG0_MCTL[PRGM] bit is 0.\n
			      Note that if TRNG0_MCTL[PRGM] bit is 1, this register address is used to access the Poker\n
			      Test Maximum Limit in register TRNG0_PKRMAX."
   />

   <title/>

   <!-- ************* SDCTL ****************** -->

   <intOption key="trng_sdctl_ent_dly" condition="trng_sdctl_ent_dly_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngSdctlEntDly"
      baseType="uint32_t"
      description="Entropy Delay"
      toolTip="Defines the length (in system clocks) of each Entropy sample taken.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to its reset value at POR."
      value="0b110010000000"
   />

   <intOption key="trng_sdctl_samp_size" condition="trng_sdctl_samp_size_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngSdctlSampSize"
      baseType="uint32_t"
      description="Sample Size"
      toolTip="Defines the total number of Entropy samples that will be taken during Entropy generation.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
      value="0b100111000100"
   />

   <!-- ************* SBLIM ****************** -->

   <intOption key="trng_sblim_sb_lim" condition="trng_sblim_sb_lim_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngSblimSbLim"
      baseType="uint32_t"
      description="Sparse Bit Limit"
      toolTip="During Von Neumann sampling, samples are discarded if two consecutive raw samples\n
               are both 0 or both 1.\n
               If this discarding occurs for a long period of time, it indicates that there is\n
               insufficient Entropy.\n
               The Sparse Bit Limit defines the maximum number of consecutive samples that may\n
               be discarded before an error is generated.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This register is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1.\n
               Note that if TRNG0_MCTL[PRGM] bit is 0, this register address is used to read the Total\n
               Samples count in register TRNG0_TOTSAM"
      value="0b111111"
   />

   <!-- ************* TOTSAM ****************** -->

   <intOption key="trng_totsam_tot_sam" condition="trng_totsam_tot_sam_present"
      hidden="true"
      typeName="uint32_t"
      description="Total Samples"
      toolTip="During Entropy generation, the total number of raw samples is counted.\n
               This count is useful in determining how often a sample is used during Von Neumann sampling. \n
               The count may be read through this register, if TRNG0_MCTL[PRGM] bit is 0.\n
               Note that if TRNG0_MCTL[PRGM] bit is 1, this register address is used to access\n
               the Sparse Bit Limit in register TRNG0_SBLIM"
   />

   <!-- ************* FRQMIN ****************** -->

   <intOption key="trng_frqmin_frq_min" condition="trng_frqmin_frq_min_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngFrqminFrqMin"
      baseType="uint32_t"
      description="Frequency Count Minimum Limit"
      toolTip="Defines the minimum allowable count taken during each entropy sample.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to its reset value at POR."
      value="0b11001000000"
   />

   <!-- ************* FRQCNT ****************** -->

   <intOption key="trng_frqcnt_frq_ct" condition="trng_frqcnt_frq_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Frequency Count"
      toolTip="If TRNG0_MCTL[TRNG_ACC] = 1, reads a sample frequency count taken during entropy generation.\n
               Requires TRNG0_MCTL[PRGM] = 0.\n
               Note that if TRNG0_MCTL[PRGM] bit is 1, this register address is used to access\n
               the Poker Test Maximum Limit in register TRNG0_PKRMAX"
   />

   <!-- ************* FRQMAX ****************** -->

   <intOption key="trng_frqmax_frq_max" condition="trng_frqmax_frq_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngFrqmaxFrqMax"
      baseType="uint32_t"
      description="Frequency Counter Maximum Limit"
      toolTip="Defines the maximum allowable count taken during each entropy sample.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field is cleared to its reset value at POR.\n
               Note that if TRNG0_MCTL[PRGM] bit is 0, this register address is used to \n
               read the Frequency Count result in register TRNG0_FRQCNT"
      value="0b110010000000000"
   />

   <!-- ************* SCMC ****************** -->

   <intOption key="trng_scmc_mono_ct" condition="trng_scmc_mono_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Monobit Count"
      toolTip="Reads the final Monobit count after entropy generation.\n
               Requires TRNG0_MCTL[PRGM] = 0.\n
               Note that if TRNG0_MCTL[PRGM] bit is 1, this register address is used to\n
               access the Statistical Check Monobit Limit in register TRNG0_SCML"
   />

   <!-- ************* SCML ****************** -->

   <intOption key="trng_scml_mono_rng" condition="trng_scml_mono_rng_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScmlMonoRng"
      baseType="uint32_t"
      description="Monobit Range"
      toolTip="The number of ones/zeroes detected during entropy generation must be greater than\n
               MONO_MAX - MONO_RNG, else a retry or error will occur.\n
               This register is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
      value="0b100001100"
   />

   <intOption key="trng_scml_mono_max" condition="trng_scml_mono_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScmlMonoMax"
      baseType="uint32_t"
      description="Monobit Maximum Limit"
      toolTip="Defines the maximum allowable count taken during entropy generation.\n
               The number of ones/zeroes detected during entropy generation must be\n
               less than MONO_MAX, else a retry or error will occur.\n
               This register is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
      value="0b10101101000"
   />

   <!-- ************* SCR1C ****************** -->

   <intOption key="trng_scr1c_r1_1_ct" condition="trng_scr1c_r1_1_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of One, Length 1 Count"
      toolTip=""
   />

   <intOption key="trng_scr1c_r1_0_ct" condition="trng_scr1c_r1_0_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of Zero, Length 1 Count"
      toolTip=""
   />

   <!-- ************* SCR1L ****************** -->

   <intOption key="trng_scr1l_run1_rng" condition="trng_scr1l_run1_rng_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr1lRun1Rng"
      baseType="uint32_t"
      description="Run Length 1 Range"
      toolTip=""
      value="0"
   />

   <intOption key="trng_scr1l_run1_max" condition="trng_scr1l_run1_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr1lRun1Max"
      baseType="uint32_t"
      description="Run Length 1 Maximum Limit"
      toolTip=""
      value="0"
   />

   <!-- ************* SCR2C ****************** -->

   <intOption key="trng_scr2c_r2_1_ct" condition="trng_scr2c_r2_1_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of One, Length 2 Count"
      toolTip=""
   />

   <intOption key="trng_scr2c_r2_0_ct" condition="trng_scr2c_r2_0_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of Zero, Length 2 Count"
      toolTip=""
   />

   <!-- ************* SCR2L ****************** -->

   <intOption key="trng_scr2l_run2_rng" condition="trng_scr2l_run2_rng_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr2lRun2Rng"
      baseType="uint32_t"
      description="Run Length 2 Range"
      toolTip=""
      value="0"
   />

   <intOption key="trng_scr2l_run2_max" condition="trng_scr2l_run2_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr2lRun2Max"
      baseType="uint32_t"
      description="Run Length 2 Maximum Limit"
      toolTip=""
      value="0"
   />

   <!-- ************* SCR3C ****************** -->

   <intOption key="trng_scr3c_r3_1_ct" condition="trng_scr3c_r3_1_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of Ones, Length 3 Count"
      toolTip=""
   />

   <intOption key="trng_scr3c_r3_0_ct" condition="trng_scr3c_r3_0_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of Zeroes, Length 3 Count"
      toolTip=""
   />

   <!-- ************* SCR3L ****************** -->

   <intOption key="trng_scr3l_run3_rng" condition="trng_scr3l_run3_rng_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr3lRun3Rng"
      baseType="uint32_t"
      description="Run Length 3 Range"
      toolTip=""
      value="0"
   />

   <intOption key="trng_scr3l_run3_max" condition="trng_scr3l_run3_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr3lRun3Max"
      baseType="uint32_t"
      description="Run Length 3 Maximum Limit"
      toolTip=""
      value="0"
   />

   <!-- ************* SCR4C ****************** -->

   <intOption key="trng_scr4c_r4_1_ct" condition="trng_scr4c_r4_1_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of One, Length 4 Count"
      toolTip=""
   />

   <intOption key="trng_scr4c_r4_0_ct" condition="trng_scr4c_r4_0_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of Zero, Length 4 Count"
      toolTip=""
   />

   <!-- ************* SCR4L ****************** -->

   <intOption key="trng_scr4l_run4_rng" condition="trng_scr4l_run4_rng_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr4lRun4Rng"
      baseType="uint32_t"
      description="Run Length 4 Range"
      toolTip=""
      value="0"
   />

   <intOption key="trng_scr4l_run4_max" condition="trng_scr4l_run4_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr4lRun4Max"
      baseType="uint32_t"
      description="Run Length 4 Maximum Limit"
      toolTip=""
      value="0"
   />

   <!-- ************* SCR5C ****************** -->

   <intOption key="trng_scr5c_r5_1_ct" condition="trng_scr5c_r5_1_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of One, Length 5 Count"
      toolTip=""
   />

   <intOption key="trng_scr5c_r5_0_ct" condition="trng_scr5c_r5_0_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of Zero, Length 5 Count"
      toolTip=""
   />

   <!-- ************* SCR5L ****************** -->

   <intOption key="trng_scr5l_run5_rng" condition="trng_scr5l_run5_rng_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr5lRun5Rng"
      baseType="uint32_t"
      description="Run Length 5 Range"
      toolTip=""
      value="0"
   />

   <intOption key="trng_scr5l_run5_max" condition="trng_scr5l_run5_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr5lRun5Max"
      baseType="uint32_t"
      description="Run Length 5 Maximum Limit"
      toolTip=""
      value="0"
   />

   <!-- ************* SCR6PC ****************** -->

   <intOption key="trng_scr6pc_r6p_1_ct" condition="trng_scr6pc_r6p_1_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of One, Length 6+ Count"
      toolTip=""
   />

   <intOption key="trng_scr6pc_r6p_0_ct" condition="trng_scr6pc_r6p_0_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Runs of Zero, Length 6+ Count"
      toolTip=""
   />

   <!-- ************* SCR6PL ****************** -->

   <intOption key="trng_scr6pl_run6p_rng" condition="trng_scr6pl_run6p_rng_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr6plRun6pRng"
      baseType="uint32_t"
      description="Run Length 6+ Range"
      toolTip=""
      value="0"
   />

   <intOption key="trng_scr6pl_run6p_max" condition="trng_scr6pl_run6p_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScr6plRun6pMax"
      baseType="uint32_t"
      description="Run Length 6+ Maximum Limit"
      toolTip=""
      value="0"
   />

   <!-- ************* STATUS ****************** -->

   <intOption key="trng_status_retry_ct" condition="trng_status_retry_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="RETRY COUNT"
      toolTip=""
   />

   <binaryOption key="trng_status_tfmb" condition="trng_status_tfmb_present"
      hidden="true"
      typeName="TrngStatusTfmb"
      toolTip=""
      description="Test Fail, Mono Bit. If TFMB=1, the Mono Bit Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tfp" condition="trng_status_tfp_present"
      hidden="true"
      typeName="TrngStatusTfp"
      toolTip=""
      description="Test Fail, Poker. If TFP=1, the Poker Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tflr" condition="trng_status_tflr_present"
      hidden="true"
      typeName="TrngStatusTflr"
      toolTip=""
      description="Test Fail, Long Run. If TFLR=1, the Long Run Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tfsb" condition="trng_status_tfsb_present"
      hidden="true"
      typeName="TrngStatusTfsb"
      toolTip=""
      description="Test Fail, Sparse Bit. If TFSB=1, the Sparse Bit Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf6pbr1" condition="trng_status_tf6pbr1_present"
      hidden="true"
      typeName="TrngStatusTf6pbr1"
      toolTip=""
      description="Test Fail, 6 Plus Bit Run, Sampling 1s" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf6pbr0" condition="trng_status_tf6pbr0_present"
      hidden="true"
      typeName="TrngStatusTf6pbr0"
      toolTip=""
      description="Test Fail, 6 Plus Bit Run, Sampling 0s" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf5br1" condition="trng_status_tf5br1_present"
      hidden="true"
      typeName="TrngStatusTf5br1"
      toolTip=""
      description="Test Fail, 5-Bit Run, Sampling 1s. If TF5BR1=1, the 5-Bit Run, Sampling 1s Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf5br0" condition="trng_status_tf5br0_present"
      hidden="true"
      typeName="TrngStatusTf5br0"
      toolTip=""
      description="Test Fail, 5-Bit Run, Sampling 0s. If TF5BR0=1, the 5-Bit Run, Sampling 0s Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf4br1" condition="trng_status_tf4br1_present"
      hidden="true"
      typeName="TrngStatusTf4br1"
      toolTip=""
      description="Test Fail, 4-Bit Run, Sampling 1s. If TF4BR1=1, the 4-Bit Run, Sampling 1s Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf4br0" condition="trng_status_tf4br0_present"
      hidden="true"
      typeName="TrngStatusTf4br0"
      toolTip=""
      description="Test Fail, 4-Bit Run, Sampling 0s. If TF4BR0=1, the 4-Bit Run, Sampling 0s Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf3br1" condition="trng_status_tf3br1_present"
      hidden="true"
      typeName="TrngStatusTf3br1"
      toolTip=""
      description="Test Fail, 3-Bit Run, Sampling 1s. If TF3BR1=1, the 3-Bit Run, Sampling 1s Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf3br0" condition="trng_status_tf3br0_present"
      hidden="true"
      typeName="TrngStatusTf3br0"
      toolTip=""
      description="Test Fail, 3-Bit Run, Sampling 0s. If TF3BR0=1, the 3-Bit Run, Sampling 0s Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf2br1" condition="trng_status_tf2br1_present"
      hidden="true"
      typeName="TrngStatusTf2br1"
      toolTip=""
      description="Test Fail, 2-Bit Run, Sampling 1s. If TF2BR1=1, the 2-Bit Run, Sampling 1s Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf2br0" condition="trng_status_tf2br0_present"
      hidden="true"
      typeName="TrngStatusTf2br0"
      toolTip=""
      description="Test Fail, 2-Bit Run, Sampling 0s. If TF2BR0=1, the 2-Bit Run, Sampling 0s Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf1br1" condition="trng_status_tf1br1_present"
      hidden="true"
      typeName="TrngStatusTf1br1"
      toolTip=""
      description="Test Fail, 1-Bit Run, Sampling 1s. If TF1BR1=1, the 1-Bit Run, Sampling 1s Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <binaryOption key="trng_status_tf1br0" condition="trng_status_tf1br0_present"
      hidden="true"
      typeName="TrngStatusTf1br0"
      toolTip=""
      description="Test Fail, 1-Bit Run, Sampling 0s. If TF1BR0=1, the 1-Bit Run, Sampling 0s Test has failed" >
      <choice name="Choice 0"  value="0" enum="Choice0"/>
      <choice name="Choice 1"  value="1" enum="Choice1"/>
   </binaryOption >

   <!-- ************* ENT ****************** -->

   <intOption key="trng_ent_ent" condition="trng_ent_ent_present"
      hidden="true"
      typeName="uint32_t"
      description="Entropy Value"
      toolTip="Will be non-zero only if TRNG0_MCTL[PRGM] = 0 Run Mode) and TRNG0_MCTL[ENT_VAL] = 1 (Entropy Valid).\n
               The most significant bits of the entropy are read from the lowest offset, and the least significant\n
               bits are read from the highest offset.\n
               Note that reading the highest offset also clears the entire entropy value, and starts a new entropy generation."
   />

   <!-- ************* PKRCNT10 ****************** -->

   <intOption key="trng_pkrcnt10_pkr_1_ct" condition="trng_pkrcnt10_pkr_1_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker 1h Count"
      toolTip=""
   />

   <intOption key="trng_pkrcnt10_pkr_0_ct" condition="trng_pkrcnt10_pkr_0_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker 0h Count"
      toolTip=""
   />

   <!-- ************* PKRCNT32 ****************** -->

   <intOption key="trng_pkrcnt32_pkr_3_ct" condition="trng_pkrcnt32_pkr_3_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker 3h Count"
      toolTip=""
   />

   <intOption key="trng_pkrcnt32_pkr_2_ct" condition="trng_pkrcnt32_pkr_2_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker 2h Count"
      toolTip=""
   />

   <!-- ************* PKRCNT54 ****************** -->

   <intOption key="trng_pkrcnt54_pkr_5_ct" condition="trng_pkrcnt54_pkr_5_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker 5h Count"
      toolTip=""
   />

   <intOption key="trng_pkrcnt54_pkr_4_ct" condition="trng_pkrcnt54_pkr_4_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker 4h Count"
      toolTip=""
   />

   <!-- ************* PKRCNT76 ****************** -->

   <intOption key="trng_pkrcnt76_pkr_7_ct" condition="trng_pkrcnt76_pkr_7_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker 7h Count"
      toolTip=""
   />

   <intOption key="trng_pkrcnt76_pkr_6_ct" condition="trng_pkrcnt76_pkr_6_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker 6h Count"
      toolTip=""
   />

   <!-- ************* PKRCNT98 ****************** -->

   <intOption key="trng_pkrcnt98_pkr_9_ct" condition="trng_pkrcnt98_pkr_9_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker 9h Count"
      toolTip=""
   />

   <intOption key="trng_pkrcnt98_pkr_8_ct" condition="trng_pkrcnt98_pkr_8_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker 8h Count"
      toolTip=""
   />

   <!-- ************* PKRCNTBA ****************** -->

   <intOption key="trng_pkrcntba_pkr_b_ct" condition="trng_pkrcntba_pkr_b_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker Bh Count"
      toolTip=""
   />

   <intOption key="trng_pkrcntba_pkr_a_ct" condition="trng_pkrcntba_pkr_a_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker Ah Count"
      toolTip=""
   />

   <!-- ************* PKRCNTDC ****************** -->

   <intOption key="trng_pkrcntdc_pkr_d_ct" condition="trng_pkrcntdc_pkr_d_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker Dh Count"
      toolTip=""
   />

   <intOption key="trng_pkrcntdc_pkr_c_ct" condition="trng_pkrcntdc_pkr_c_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker Ch Count"
      toolTip=""
   />

   <!-- ************* PKRCNTFE ****************** -->

   <intOption key="trng_pkrcntfe_pkr_f_ct" condition="trng_pkrcntfe_pkr_f_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker Fh Count"
      toolTip=""
   />

   <intOption key="trng_pkrcntfe_pkr_e_ct" condition="trng_pkrcntfe_pkr_e_ct_present"
      hidden="true"
      typeName="uint32_t"
      description="Poker Eh Count"
      toolTip=""
   />

   <!-- ************* SEC_CFG ****************** -->

   <binaryOption key="trng_sec_cfg_sk_val" condition="trng_sec_cfg_sk_val_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngSecCfgSkVal"
      toolTip=""
      description="Reserved. DRNG-specific, not applicable to this version" >
      <choice name="See DRNG version"  value="0" enum="SeeDrngVersion"/>
      <choice name="See DRNG version"  value="1" enum="SeeDrngVersion"/>
   </binaryOption >

   <binaryOption key="trng_sec_cfg_no_prgm" condition="trng_sec_cfg_no_prgm_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngSecCfgNoPrgm"
      toolTip=""
      description="If set, the TRNG registers cannot be programmed" >
      <choice name="Programability of registers controlled only by the Miscellaneous Control Register&apos;s access mode bit"  value="0" enum="ProgramabilityOfRegistersControlledOnlyByTheMiscellaneousControlRegisterAposSAccessModeBit"/>
      <choice name="Overides Miscellaneous Control Register access mode and prevents TRNG register programming"           value="1" enum="OveridesMiscellaneousControlRegisterAccessModeAndPreventsTrngRegisterProgramming"/>
   </binaryOption >

   <binaryOption key="trng_sec_cfg_sh0" condition="trng_sec_cfg_sh0_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngSecCfgSh0"
      toolTip=""
      description="Reserved. DRNG specific, not applicable to this version" >
      <choice name="See DRNG version"  value="0" enum="SeeDrngVersion"/>
      <choice name="See DRNG version"  value="1" enum="SeeDrngVersion"/>
   </binaryOption >

   <!-- ************* INT_CTRL ****************** -->

   <binaryOption key="trng_int_ctrl_frq_ct_fail" condition="trng_int_ctrl_frq_ct_fail_present"
      hidden="true"
      typeName="TrngCountErrorClear"
      toolTip=""
      description="Same behavior as bit 0 above" >
      <choice name="Inactive" value="0" enum="Clear"/>
      <choice name="Active"   value="1" enum="Active"/>
   </binaryOption >

   <binaryOption key="trng_int_ctrl_ent_val" condition="trng_int_ctrl_ent_val_present"
      hidden="true"
      typeName="TrngEntropyAvailableClear"
      toolTip=""
      description="Same behavior as bit 0 above" >
      <choice name="Inactive" value="0" enum="Clear"/>
      <choice name="Active"   value="1" enum="Active"/>
   </binaryOption >

   <binaryOption key="trng_int_ctrl_hw_err" condition="trng_int_ctrl_hw_err_present"
      hidden="true"
      typeName="TrngIntCtrlHwErr"
      toolTip=""
      description="Bit position that can be cleared if corresponding bit of INT_STATUS has been asserted" >
      <choice name="Inactive" value="0" enum="Clear"/>
      <choice name="Active"   value="1" enum="Active"/>
   </binaryOption >

   <!-- ************* INT_MASK ****************** -->

   <binaryOption key="trng_int_mask_frq_ct_fail" condition="trng_int_mask_frq_ct_fail_present"
      hidden="true"
      typeName="TrngCountErrorAction"
      toolTip="This enables an interrupt when the frequency counter has detected a failure"
      description="Counter error action" >
      <choice name="No Action"  value="0" enum="None"/>
      <choice name="Interrupt"  value="1" enum="Interrupt"/>
   </binaryOption >

   <binaryOption key="trng_int_mask_ent_val" condition="trng_int_mask_ent_val_present"
      hidden="true"
      typeName="TrngEntropyAvailableAction"
      toolTip="This enables an interrupt when TRNG ACC bit is set (Entropy value is available)"
      description="Entropy evailable action" >
      <choice name="No Action"  value="0" enum="None"/>
      <choice name="Interrupt"  value="1" enum="Interrupt"/>
   </binaryOption >

   <binaryOption key="trng_int_mask_hw_err" condition="trng_int_mask_hw_err_present"
      hidden="true"
      typeName="TrngHardwareErrorAction"
      toolTip="This enables an interrupt when a hardware error occurs"
      description="Hardware error action" >
      <choice name="No Action"  value="0" enum="None"/>
      <choice name="Interrupt"  value="1" enum="Interrupt"/>
   </binaryOption >

   <!-- ************* INT_STATUS ****************** -->

   <binaryOption key="trng_int_status_frq_ct_fail" condition="trng_int_status_frq_ct_fail_present"
      hidden="true"
      typeName="TrngCounterStatus"
      toolTip="The frequency counter has detected a failure.\n
               This may be due to improper programming of the TRNG0_FRQMAX and/or \n
               TRNG0_FRQMIN registers, or a hardware failure FRQ_CT_FAIL in the ring oscillator.\n
               Read only"
      description="Frequency Counter Failure" >
      <choice name="No errors"        value="0" enum="NoErrors"/>
      <choice name="Counter failure"  value="1" enum="Failure"/>
   </binaryOption >

   <binaryOption key="trng_int_status_ent_val" condition="trng_int_status_ent_val_present"
      hidden="true"
      typeName="TrngEntropyStatus"
      toolTip="Will assert only if TRNG ACC bit is set, and then after an entropy value is generated.\n
               Will be cleared when TRNG0_ENT15 is read. (TRNG0_ENT0 through TRNG0_ENT14 should \n
               be read before reading TRNG0_ENT15).\n
               Read Only"
      description="Entropy Valid" >
      <choice name="Busy - Entropy value read is invalid"  value="0" enum="Busy"/>
      <choice name="Complete - Entropy is valid if read"   value="1" enum="EntropyAvailable"/>
   </binaryOption >

   <binaryOption key="trng_int_status_hw_err" condition="trng_int_status_hw_err_present"
      hidden="true"
      typeName="TrngErrorStatus"
      toolTip="Any HW error in the TRNG will trigger this interrupt.\n
               Read Only"
      description="Error status" >
      <choice name="No error"        value="0" enum="NoError"/>
      <choice name="Error detected"  value="1" enum="ErrorDetected"/>
   </binaryOption >

   <!-- ************* VID1 ****************** -->

   <choiceOption key="trng_vid1_ip_id" condition="trng_vid1_ip_id_present"
      hidden="true"
      typeName="TrngVid1IpId"
      toolTip=""
      description="Shows the Freescale IP ID" >
      <choice name="ID for TRNG" value="48" enum="IdForTrng"/>
   </choiceOption >

   <choiceOption key="trng_vid1_maj_rev" condition="trng_vid1_maj_rev_present"
      hidden="true"
      typeName="TrngVid1MajRev"
      toolTip=""
      description="Shows the Freescale IP&apos;s Major revision of the TRNG" >
      <choice name="Major revision number for TRNG"  value="1" enum="MajorRevisionNumberForTrng"/>
   </choiceOption >

   <choiceOption key="trng_vid1_min_rev" condition="trng_vid1_min_rev_present"
      hidden="true"
      typeName="TrngVid1MinRev"
      toolTip=""
      description="Shows the Freescale IP&apos;s Minor revision of the TRNG" >
      <choice name="Minor revision number for TRNG"  value="0" enum="MinorRevisionNumberForTrng"/>
   </choiceOption >

   <!-- ************* VID2 ****************** -->

   <choiceOption key="trng_vid2_era" condition="trng_vid2_era_present"
      hidden="true"
      typeName="TrngVid2Era"
      toolTip=""
      description="Shows the Freescale compile options for the TRNG" >
      <choice name="COMPILE_OPT for TRNG"  value="0" enum="Compile_optForTrng"/>
   </choiceOption >

   <choiceOption key="trng_vid2_intg_opt" condition="trng_vid2_intg_opt_present"
      hidden="true"
      typeName="TrngVid2IntgOpt"
      toolTip=""
      description="Shows the Freescale integration options for the TRNG" >
      <choice name="INTG_OPT for TRNG"  value="0" enum="Intg_optForTrng"/>
   </choiceOption >

   <choiceOption key="trng_vid2_eco_rev" condition="trng_vid2_eco_rev_present"
      hidden="true"
      typeName="TrngVid2EcoRev"
      toolTip=""
      description="Shows the Freescale IP&apos;s ECO revision of the TRNG" >
      <choice name="TRNG_ECO_REV for TRNG"  value="0" enum="Trng_eco_revForTrng"/>
   </choiceOption >

   <choiceOption key="trng_vid2_config_opt" condition="trng_vid2_config_opt_present"
      hidden="true"
      typeName="TrngVid2ConfigOpt"
      toolTip=""
      description="Shows the Freescale IP&apos;s Configuaration options for the TRNG" >
      <choice name="TRNG_CONFIG_OPT for TRNG"  value="0" enum="Trng_config_optForTrng"/>
   </choiceOption >

<!-- Setters and getters -->

   <for keys="field                    : set   : get   : clear : genCode                 : name"
        values="
         trng_mctl_prgm                : true  : true  : false : true                    : Mode;
         trng_mctl_tstop_ok            : false : true  : false : true                    : StopOk;
         trng_mctl_err                 : true  : false : true  : true                    : Error;
         trng_mctl_tst_out             : false : true  : false : enableGettersAndSetters : MctlTstOut;
         trng_mctl_ent_val             : false : true  : false : true                    : MctlEntVal;
         trng_mctl_fct_val             : false : true  : false : enableGettersAndSetters : MctlFctVal;
         trng_mctl_fct_fail            : false : true  : false : enableGettersAndSetters : MctlFctFail;
         trng_mctl_for_sclk            : true  : true  : false : enableGettersAndSetters : MctlForSclk;
         trng_mctl_rst_def             : true  : false : false : true                    : MctlRstDef;
         trng_mctl_trng_acc            : true  : true  : false : true                    : MctlTrngAcc;
         trng_mctl_unused              : true  : true  : false : enableGettersAndSetters : MctlUnused;
         trng_mctl_osc_div             : true  : true  : false : enableGettersAndSetters : MctlOscDiv;
         trng_mctl_samp_mode           : true  : true  : false : enableGettersAndSetters : MctlSampMode;
         trng_scmisc_rty_ct            : true  : true  : false : enableGettersAndSetters : ScmiscRtyCt;
         trng_scmisc_lrun_max          : true  : true  : false : enableGettersAndSetters : ScmiscLrunMax;
         trng_pkrrng_pkr_rng           : true  : true  : false : enableGettersAndSetters : PkrrngPkrRng;
         trng_pkrmax_pkr_max           : true  : true  : false : enableGettersAndSetters : PkrmaxPkrMax;
         trng_pkrsq_pkr_sq             : false : true  : false : enableGettersAndSetters : PkrsqPkrSq;
         trng_sdctl_ent_dly            : true  : true  : false : enableGettersAndSetters : SdctlEntDly;
         trng_sdctl_samp_size          : true  : true  : false : enableGettersAndSetters : SdctlSampSize;
         trng_sblim_sb_lim             : true  : true  : false : enableGettersAndSetters : SblimSbLim;
         trng_totsam_tot_sam           : false : true  : false : enableGettersAndSetters : TotsamTotSam;
         trng_frqmin_frq_min           : true  : true  : false : enableGettersAndSetters : FrqminFrqMin;
         trng_frqcnt_frq_ct            : false : true  : false : enableGettersAndSetters : FrqcntFrqCt;
         trng_frqmax_frq_max           : true  : true  : false : enableGettersAndSetters : FrqmaxFrqMax;
         trng_scmc_mono_ct             : false : true  : false : enableGettersAndSetters : ScmcMonoCt;
         trng_scml_mono_rng            : true  : true  : false : enableGettersAndSetters : ScmlMonoRng;
         trng_scml_mono_max            : true  : true  : false : enableGettersAndSetters : ScmlMonoMax;
         trng_scr1c_r1_1_ct            : false : true  : false : enableGettersAndSetters : Scr1cR11Ct;
         trng_scr1c_r1_0_ct            : false : true  : false : enableGettersAndSetters : Scr1cR10Ct;
         trng_scr1l_run1_rng           : true  : true  : false : enableGettersAndSetters : Scr1lRun1Rng;
         trng_scr1l_run1_max           : true  : true  : false : enableGettersAndSetters : Scr1lRun1Max;
         trng_scr2c_r2_1_ct            : false : true  : false : enableGettersAndSetters : Scr2cR21Ct;
         trng_scr2c_r2_0_ct            : false : true  : false : enableGettersAndSetters : Scr2cR20Ct;
         trng_scr2l_run2_rng           : true  : true  : false : enableGettersAndSetters : Scr2lRun2Rng;
         trng_scr2l_run2_max           : true  : true  : false : enableGettersAndSetters : Scr2lRun2Max;
         trng_scr3c_r3_1_ct            : false : true  : false : enableGettersAndSetters : Scr3cR31Ct;
         trng_scr3c_r3_0_ct            : false : true  : false : enableGettersAndSetters : Scr3cR30Ct;
         trng_scr3l_run3_rng           : true  : true  : false : enableGettersAndSetters : Scr3lRun3Rng;
         trng_scr3l_run3_max           : true  : true  : false : enableGettersAndSetters : Scr3lRun3Max;
         trng_scr4c_r4_1_ct            : false : true  : false : enableGettersAndSetters : Scr4cR41Ct;
         trng_scr4c_r4_0_ct            : false : true  : false : enableGettersAndSetters : Scr4cR40Ct;
         trng_scr4l_run4_rng           : true  : true  : false : enableGettersAndSetters : Scr4lRun4Rng;
         trng_scr4l_run4_max           : true  : true  : false : enableGettersAndSetters : Scr4lRun4Max;
         trng_scr5c_r5_1_ct            : false : true  : false : enableGettersAndSetters : Scr5cR51Ct;
         trng_scr5c_r5_0_ct            : false : true  : false : enableGettersAndSetters : Scr5cR50Ct;
         trng_scr5l_run5_rng           : true  : true  : false : enableGettersAndSetters : Scr5lRun5Rng;
         trng_scr5l_run5_max           : true  : true  : false : enableGettersAndSetters : Scr5lRun5Max;
         trng_scr6pc_r6p_1_ct          : false : true  : false : enableGettersAndSetters : Scr6pcR6p1Ct;
         trng_scr6pc_r6p_0_ct          : false : true  : false : enableGettersAndSetters : Scr6pcR6p0Ct;
         trng_scr6pl_run6p_rng         : true  : true  : false : enableGettersAndSetters : Scr6plRun6pRng;
         trng_scr6pl_run6p_max         : true  : true  : false : enableGettersAndSetters : Scr6plRun6pMax;
         trng_status_retry_ct          : false : true  : false : enableGettersAndSetters : StatusRetryCt;
         trng_status_tfmb              : false : true  : false : enableGettersAndSetters : StatusTfmb;
         trng_status_tfp               : false : true  : false : enableGettersAndSetters : StatusTfp;
         trng_status_tflr              : false : true  : false : enableGettersAndSetters : StatusTflr;
         trng_status_tfsb              : false : true  : false : enableGettersAndSetters : StatusTfsb;
         trng_status_tf6pbr1           : false : true  : false : enableGettersAndSetters : StatusTf6pbr1;
         trng_status_tf6pbr0           : false : true  : false : enableGettersAndSetters : StatusTf6pbr0;
         trng_status_tf5br1            : false : true  : false : enableGettersAndSetters : StatusTf5br1;
         trng_status_tf5br0            : false : true  : false : enableGettersAndSetters : StatusTf5br0;
         trng_status_tf4br1            : false : true  : false : enableGettersAndSetters : StatusTf4br1;
         trng_status_tf4br0            : false : true  : false : enableGettersAndSetters : StatusTf4br0;
         trng_status_tf3br1            : false : true  : false : enableGettersAndSetters : StatusTf3br1;
         trng_status_tf3br0            : false : true  : false : enableGettersAndSetters : StatusTf3br0;
         trng_status_tf2br1            : false : true  : false : enableGettersAndSetters : StatusTf2br1;
         trng_status_tf2br0            : false : true  : false : enableGettersAndSetters : StatusTf2br0;
         trng_status_tf1br1            : false : true  : false : enableGettersAndSetters : StatusTf1br1;
         trng_status_tf1br0            : false : true  : false : enableGettersAndSetters : StatusTf1br0;
         trng_pkrcnt10_pkr_1_ct        : false : true  : false : enableGettersAndSetters : Pkrcnt10Pkr1Ct;
         trng_pkrcnt10_pkr_0_ct        : false : true  : false : enableGettersAndSetters : Pkrcnt10Pkr0Ct;
         trng_pkrcnt32_pkr_3_ct        : false : true  : false : enableGettersAndSetters : Pkrcnt32Pkr3Ct;
         trng_pkrcnt32_pkr_2_ct        : false : true  : false : enableGettersAndSetters : Pkrcnt32Pkr2Ct;
         trng_pkrcnt54_pkr_5_ct        : false : true  : false : enableGettersAndSetters : Pkrcnt54Pkr5Ct;
         trng_pkrcnt54_pkr_4_ct        : false : true  : false : enableGettersAndSetters : Pkrcnt54Pkr4Ct;
         trng_pkrcnt76_pkr_7_ct        : false : true  : false : enableGettersAndSetters : Pkrcnt76Pkr7Ct;
         trng_pkrcnt76_pkr_6_ct        : false : true  : false : enableGettersAndSetters : Pkrcnt76Pkr6Ct;
         trng_pkrcnt98_pkr_9_ct        : false : true  : false : enableGettersAndSetters : Pkrcnt98Pkr9Ct;
         trng_pkrcnt98_pkr_8_ct        : false : true  : false : enableGettersAndSetters : Pkrcnt98Pkr8Ct;
         trng_pkrcntba_pkr_b_ct        : false : true  : false : enableGettersAndSetters : PkrcntbaPkrBCt;
         trng_pkrcntba_pkr_a_ct        : false : true  : false : enableGettersAndSetters : PkrcntbaPkrACt;
         trng_pkrcntdc_pkr_d_ct        : false : true  : false : enableGettersAndSetters : PkrcntdcPkrDCt;
         trng_pkrcntdc_pkr_c_ct        : false : true  : false : enableGettersAndSetters : PkrcntdcPkrCCt;
         trng_pkrcntfe_pkr_f_ct        : false : true  : false : enableGettersAndSetters : PkrcntfePkrFCt;
         trng_pkrcntfe_pkr_e_ct        : false : true  : false : enableGettersAndSetters : PkrcntfePkrECt;
         trng_sec_cfg_sk_val           : true  : true  : false : enableGettersAndSetters : SecCfgSkVal;
         trng_sec_cfg_no_prgm          : true  : true  : false : enableGettersAndSetters : SecCfgNoPrgm;
         trng_sec_cfg_sh0              : true  : true  : false : enableGettersAndSetters : SecCfgSh0;
         trng_int_ctrl_unused          : true  : true  : false : enableGettersAndSetters : IntCtrlUnused;
         trng_int_ctrl_frq_ct_fail     : true  : true  : false : enableGettersAndSetters : IntCtrlFrqCtFail;
         trng_int_ctrl_ent_val         : true  : true  : false : enableGettersAndSetters : IntCtrlEntVal;
         trng_int_ctrl_hw_err          : true  : true  : false : enableGettersAndSetters : IntCtrlHwErr;
         trng_int_mask_frq_ct_fail     : true  : true  : false : enableGettersAndSetters : IntMaskFrqCtFail;
         trng_int_mask_ent_val         : true  : true  : false : enableGettersAndSetters : IntMaskEntVal;
         trng_int_mask_hw_err          : true  : true  : false : enableGettersAndSetters : IntMaskHwErr;
         trng_int_status_frq_ct_fail   : true  : true  : false : enableGettersAndSetters : IntStatusFrqCtFail;
         trng_int_status_ent_val       : false : true  : false : enableGettersAndSetters : IntStatusEntVal;
         trng_int_status_hw_err        : false : true  : false : enableGettersAndSetters : IntStatusHwErr;
         trng_vid1_ip_id               : false : true  : false : enableGettersAndSetters : Vid1IpId;
         trng_vid1_maj_rev             : false : true  : false : enableGettersAndSetters : Vid1MajRev;
         trng_vid1_min_rev             : false : true  : false : enableGettersAndSetters : Vid1MinRev;
         trng_vid2_era                 : false : true  : false : enableGettersAndSetters : Vid2Era;
         trng_vid2_intg_opt            : false : true  : false : enableGettersAndSetters : Vid2IntgOpt;
         trng_vid2_eco_rev             : false : true  : false : enableGettersAndSetters : Vid2EcoRev;
         trng_vid2_config_opt          : false : true  : false : enableGettersAndSetters : Vid2ConfigOpt" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Clear %description
         \t *
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate variables="trng_ent_ent" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \tstatic %paramType getEntropy(int index) {
      \t   return %paramType(%register[index]);
      \t}
      \t\n
   ]]></variableTemplate>

   <!--   ========== class $(_Structname)BasicInfo =============================== -->

   <template namespace="baseClass" ><![CDATA[
      class $(_Structname)BasicInfo {

      public:\n
   ]]></template>


   <!--   ========== Interrupt handling =============================== -->

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo" >
   <![CDATA[
      \t/**
      \t * Type for Random Number Generator Accelerator call back function.
      \t */
      \ttypedef void (*CallbackFunction)();
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for Random Number Generator Accelerator */
      \tstatic CallbackFunction callbackFunction;
      \t
      \t/**
      \t * Random Number Generator Accelerator interrupt handler
      \t * Passes control to call-back function
      \t */
      \tstatic void irqHandler() {
      \t
      \t   // Execute call-back
      \t   callbackFunction($(irq_call));
      \t}
      \t
      \t/**
      \t * Set Random Number Generator Accelerator callback function.
      \t *
      \t * @param      $(_basename)Callback Callback function to execute on interrupt
      \t *                             Use nullptr to remove callback.
      \t */
      \tstatic void setCallback(CallbackFunction $(_basename)Callback) {
      \t   if ($(_basename)Callback == nullptr) {
      \t      $(_basename)Callback = (CallbackFunction)unhandledCallback;
      \t   }
      \t   // Allow either no handler set yet or removing handler
      \t   usbdm_assert(
      \t         ((void*)callbackFunction == (void*)unhandledCallback) ||
      \t         ((void*)$(_basename)Callback == (void*)unhandledCallback),
      \t         "Handler already set");
      \t   callbackFunction = $(_basename)Callback;
      \t}
      \t
      \t\n
   ]]>
   </template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Callback function for Random Number Generator Accelerator
      \t */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::callbackFunction = (CallbackFunction)$(_Class)Info::unhandledCallback;
      \t
      \t\n
   ]]>
   </template>

   <!--   ========== TRNG Init class =============================== -->

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
XXXXXXXXXXXXXXXXXXXXXX
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!--   Member variables -->

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo" >
   <![CDATA[
      \t   /// Random Number Generator Accelerator
      \t   CallbackFunction callbackFunction = nullptr;\n\n
   ]]></template>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_mctl_prgm,trng_mctl_err,trng_mctl_for_sclk,trng_mctl_rst_def,trng_mctl_trng_acc,trng_mctl_unused,trng_mctl_osc_div,trng_mctl_samp_mode"
   ><![CDATA[
      \t   /// Miscellaneous Control Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_scmisc_rty_ct,trng_scmisc_lrun_max"
   ><![CDATA[
      \t   /// Statistical Check Miscellaneous Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

<!--
   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_pkrrng_pkr_rng"
   ><![CDATA[
      \t   /// Poker Range Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_pkrmax_pkr_max"
   ><![CDATA[
      \t   /// Poker Maximum Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_sdctl_ent_dly,trng_sdctl_samp_size"
   ><![CDATA[
      \t   /// Seed Control Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_sblim_sb_lim"
   ><![CDATA[
      \t   /// Sparse Bit Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_frqmin_frq_min"
   ><![CDATA[
      \t   /// Frequency Count Minimum Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_frqmax_frq_max"
   ><![CDATA[
      \t   /// Frequency Count Maximum Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_scml_mono_rng,trng_scml_mono_max"
   ><![CDATA[
      \t   /// Statistical Check Monobit Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_scr1l_run1_rng,trng_scr1l_run1_max"
   ><![CDATA[
      \t   /// Statistical Check Run Length 1 Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_scr2l_run2_rng,trng_scr2l_run2_max"
   ><![CDATA[
      \t   /// Statistical Check Run Length 2 Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_scr3l_run3_rng,trng_scr3l_run3_max"
   ><![CDATA[
      \t   /// Statistical Check Run Length 3 Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_scr4l_run4_rng,trng_scr4l_run4_max"
   ><![CDATA[
      \t   /// Statistical Check Run Length 4 Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_scr5l_run5_rng,trng_scr5l_run5_max"
   ><![CDATA[
      \t   /// Statistical Check Run Length 5 Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_scr6pl_run6p_rng,trng_scr6pl_run6p_max"
   ><![CDATA[
      \t   /// Statistical Check Run Length 6+ Limit Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_sec_cfg_sk_val,trng_sec_cfg_no_prgm,trng_sec_cfg_sh0"
   ><![CDATA[
      \t   /// Security Configuration Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_int_ctrl_unused,trng_int_ctrl_frq_ct_fail,trng_int_ctrl_ent_val,trng_int_ctrl_hw_err"
   ><![CDATA[
      \t   /// Interrupt Control Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_int_mask_frq_ct_fail,trng_int_mask_ent_val,trng_int_mask_hw_err"
   ><![CDATA[
      \t   /// Mask Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="trng_int_status_frq_ct_fail"
   ><![CDATA[
      \t   /// Interrupt Status Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>
-->

   <!-- Init Constructors -->

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for Random Number Generator Accelerator
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param callbackFunction   Random Number Generator Accelerator call-back
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(CallbackFunction callbackFunction, Types... rest) : Init(rest...) {
      \t
      \t      this->callbackFunction = callbackFunction;
      \t   }\n\n
   ]]></template>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            trng_mctl_osc_div;
            trng_mctl_samp_mode;
            trng_sec_cfg_sk_val;
            trng_sec_cfg_no_prgm;
            trng_sec_cfg_sh0;
            trng_int_ctrl_frq_ct_fail;
            trng_int_ctrl_ent_val;
            trng_int_ctrl_hw_err;
            trng_int_mask_frq_ct_fail;
            trng_int_mask_ent_val;
            trng_int_mask_hw_err;
            trng_int_status_frq_ct_fail
            " >
      <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>


   <for keys="r"
      values="
            trng_mctl_prgm;
            trng_mctl_err;
            trng_mctl_for_sclk;
            trng_mctl_rst_def;
            trng_mctl_trng_acc;
            trng_mctl_unused;
            trng_scmisc_rty_ct;
            trng_scmisc_lrun_max;
            trng_pkrrng_pkr_rng;
            trng_pkrmax_pkr_max;
            trng_sdctl_ent_dly;
            trng_sdctl_samp_size;
            trng_sblim_sb_lim;
            trng_frqmin_frq_min;
            trng_frqmax_frq_max;
            trng_scml_mono_rng;
            trng_scml_mono_max;
            trng_scr1l_run1_rng;
            trng_scr1l_run1_max;
            trng_scr2l_run2_rng;
            trng_scr2l_run2_max;
            trng_scr3l_run3_rng;
            trng_scr3l_run3_max;
            trng_scr4l_run4_rng;
            trng_scr4l_run4_max;
            trng_scr5l_run5_rng;
            trng_scr5l_run5_max;
            trng_scr6pl_run6p_rng;
            trng_scr6pl_run6p_max;
            trng_int_ctrl_unused
            " >
      <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%paramType0 value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask0) | %macro0(value);
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            trng_mctl_prgm,
            trng_mctl_err,
            trng_mctl_for_sclk,
            trng_mctl_rst_def,
            trng_mctl_trng_acc,
            trng_mctl_unused,
            trng_mctl_osc_div,
            trng_mctl_samp_mode,
            trng_scmisc_rty_ct,
            trng_scmisc_lrun_max,
            trng_pkrrng_pkr_rng,
            trng_pkrmax_pkr_max,
            trng_sdctl_ent_dly,
            trng_sdctl_samp_size,
            trng_sblim_sb_lim,
            trng_frqmin_frq_min,
            trng_frqmax_frq_max,
            trng_scml_mono_rng,
            trng_scml_mono_max,
            trng_scr1l_run1_rng,
            trng_scr1l_run1_max,
            trng_scr2l_run2_rng,
            trng_scr2l_run2_max,
            trng_scr3l_run3_rng,
            trng_scr3l_run3_max,
            trng_scr4l_run4_rng,
            trng_scr4l_run4_max,
            trng_scr5l_run5_rng,
            trng_scr5l_run5_max,
            trng_scr6pl_run6p_rng,
            trng_scr6pl_run6p_max,
            trng_sec_cfg_sk_val,
            trng_sec_cfg_no_prgm,
            trng_sec_cfg_sh0,
            trng_int_ctrl_unused,
            trng_int_ctrl_frq_ct_fail,
            trng_int_ctrl_ent_val,
            trng_int_ctrl_hw_err,
            trng_int_mask_frq_ct_fail,
            trng_int_mask_ent_val,
            trng_int_mask_hw_err,
            trng_int_status_frq_ct_fail
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t   // ..........  Configure ...........
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
             condition="/$(_STRUCTNAME)/generateSharedIrqInfo" >   <![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      // Only set call-backs if feature enabled
      \t      Info::setCallback(init.callbackFunction);
      \t      Info::enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t   // ..........  Regs to init .......... ;
      \t   trng->MCTL    = init.mctl;
      \t   trng->SCMISC    = init.scmisc;
      \t   trng->PKRRNG    = init.pkrrng;
      \t   trng->PKRMAX    = init.pkrmax;
      \t   trng->PKRSQ    = init.pkrsq;
      \t   trng->SDCTL    = init.sdctl;
      \t   trng->SBLIM    = init.sblim;
      \t   trng->TOTSAM    = init.totsam;
      \t   trng->FRQMIN    = init.frqmin;
      \t   trng->FRQCNT    = init.frqcnt;
      \t   trng->FRQMAX    = init.frqmax;
      \t   trng->SCMC    = init.scmc;
      \t   trng->SCML    = init.scml;
      \t   trng->SCR1C    = init.scr1c;
      \t   trng->SCR1L    = init.scr1l;
      \t   trng->SCR2C    = init.scr2c;
      \t   trng->SCR2L    = init.scr2l;
      \t   trng->SCR3C    = init.scr3c;
      \t   trng->SCR3L    = init.scr3l;
      \t   trng->SCR4C    = init.scr4c;
      \t   trng->SCR4L    = init.scr4l;
      \t   trng->SCR5C    = init.scr5c;
      \t   trng->SCR5L    = init.scr5l;
      \t   trng->SCR6PC    = init.scr6pc;
      \t   trng->SCR6PL    = init.scr6pl;
      \t   trng->STATUS    = init.status;
      \t   trng->ENT%S    = init.ent%s;
      \t   trng->PKRCNT10    = init.pkrcnt10;
      \t   trng->PKRCNT32    = init.pkrcnt32;
      \t   trng->PKRCNT54    = init.pkrcnt54;
      \t   trng->PKRCNT76    = init.pkrcnt76;
      \t   trng->PKRCNT98    = init.pkrcnt98;
      \t   trng->PKRCNTBA    = init.pkrcntba;
      \t   trng->PKRCNTDC    = init.pkrcntdc;
      \t   trng->PKRCNTFE    = init.pkrcntfe;
      \t   trng->SEC_CFG    = init.sec_cfg;
      \t   trng->INT_CTRL    = init.int_ctrl;
      \t   trng->INT_MASK    = init.int_mask;
      \t   trng->INT_STATUS    = init.int_status;
      \t   trng->VID1    = init.vid1;
      \t   trng->VID2    = init.vid2;
      \t}
      \t\n
   ]]>
   </template>

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <template namespace="baseClass" >
   <![CDATA[
      }; // class $(_Structname)BasicInfo
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="trng_files" >
      <copy source="Project_Headers/trng.h"         target="Project_Headers/trng.h"          overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->
   <category name="Advanced" description="SIM configuration" >
      <aliasOption key="/SIM/sim_scgc3_$(_basename)"      locked="false" optional="true" />
   </category>

</peripheralPage>
