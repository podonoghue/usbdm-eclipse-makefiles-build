<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- trng_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="True Random Number Generator">

   <equation key="irq_parameters"             value=""          />
   <equation key="irq_dummy_parameters"       value=""          />
   <equation key="irq_call_parameters"        value=""          />
   <equation key="generateDefault"            value="false"     />
   <equation key="configureInStartupDefault"  value="false"     />
   <xi:include href="enablePeripheral.xml"    />
   <title />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <!-- ____ MCTL ____ -->
   <title description="Miscellaneous Control Register" />

   <binaryOption key="trng_mctl_prgm" condition="trng_mctl_prgm_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngMode"
      baseType="uint32_t"
      toolTip="No Entropy value will be generated while the TRNG is in Program Mode.\n
               Note that different RNG registers are accessible at the same address \n
               depending on whether PRGM is set to 1 or 0."
      description="Programming Mode Select" >
      <choice name="Run mode"      value="0" enum="Run"     isDefault="true" />
      <choice name="Program mode"  value="1" enum="Program" />
   </binaryOption >

   <binaryOption key="trng_mctl_tstop_ok" condition="trng_mctl_tstop_ok_present"
      hidden="true"
      derived="true"
      typeName="TrngStopOk"
      baseType="uint32_t"
      toolTip="Software should check that this bit is a 1 before transitioning TRNG0 to low power mode\n
               The TRNG turns on the free-running ring oscillator whenever new entropy is being \n
               generated. If the TRNG clock is stopped while the TRNG ring oscillator is running,\n
               the oscillator will continue running even though the TRNG0 clock is stopped.\n
               TSTOP_OK is asserted when the TRNG ring oscillator is not running and may be stopped."
      description="Indicates the Trng may be stopped" >
      <choice name="Busy and may not be stopped"  value="0" enum="Busy" />
      <choice name="Idle and may be stopped"      value="1" enum="Idle" />
   </binaryOption >

   <binaryOption key="trng_mctl_err" condition="trng_mctl_err_present"
      hidden="true"
      derived="true"
      typeName="TrngStatus"
      baseType="uint32_t"
      toolTip="Write-1 to clear error status"
      description="Error status" >
      <choice name="No action"    value="0" enum="NoError" />
      <choice name="Clear error"  value="1" enum="Error"   isDefault="true" />
   </binaryOption >

   <binaryOption key="trng_mctl_tst_out" condition="trng_mctl_tst_out_present"
      hidden="true"
      derived="true"
      typeName="TrngTestOutput"
      baseType="uint32_t"
      toolTip="Read only: Test point inside ring oscillator"
      description="Test point for oscillator" >
      <choice name="Low value"                           value="0" enum="Low" />
      <choice name="High value"                          value="1" enum="High" />
   </binaryOption >

   <binaryOption key="trng_mctl_ent_val" condition="trng_mctl_ent_val_present"
      hidden="true"
      derived="true"
      typeName="TrngEntropy"
      baseType="uint32_t"
      toolTip="Read only: Entropy Valid.\n
               Will assert only if TRNG ACC bit is set, and then after an entropy value is generated.\n
               Will be cleared at most one (1) bus clock cycle after reading the TRNG0_ENT15 register."
      description="Entropy Valid" >
      <choice name="No entropy values available"        value="0" enum="Busy" />
      <choice name="New entropy values available"       value="1" enum="ValuesAvailable" />
   </binaryOption >

   <binaryOption key="trng_mctl_fct_val" condition="trng_mctl_fct_val_present"
      hidden="true"
      derived="true"
      typeName="TrngFrequencyCountStatus"
      baseType="uint32_t"
      toolTip="Read only: Frequency Count Valid.\n
               Indicates that a valid frequency count may be read from TRNG0_FRQCNT."
      description="Frequency Count Valid" >
      <choice name="No count available"            value="0" enum="Busy" />
      <choice name="Count available"               value="1" enum="Available" />
   </binaryOption >

   <binaryOption key="trng_mctl_fct_fail" condition="trng_mctl_fct_fail_present"
      hidden="true"
      derived="true"
      typeName="TrngFrequencyCountFailed"
      baseType="uint32_t"
      toolTip="Read Only: Indicates the frequency counter has detected a failure.\n
               This may be due to improper programming of the TRNG0_FRQMAX and/or\n
               TRNG0_FRQMIN registers, or a hardware failure in the ring oscillator.\n
               This error may be cleared by writing a 1 to the ERR bit."
      description="Frequency Count Fail" >
      <choice name="No failure" value="0" enum="OK" />
      <choice name="Failure"    value="1" enum="Failed" />
   </binaryOption >

   <binaryOption key="trng_mctl_for_sclk" condition="trng_mctl_for_sclk_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngForceClock"
      baseType="uint32_t"
      toolTip="Forces use of the system clock operate the TRNG, instead of the ring oscillator.\n
               This is for test use only, and indeterminate results may occur.\n
               This bit is writable only if PRGM bit is 1, or PRGM bit is being written to 1\n
               simultaneously to writing this bit. This bit is cleared by writing the RST_DEF bit to 1."
      description="Force System Clock" >
      <choice name="Normal mode - Ring oscillator" value="0" enum="Normal" />
      <choice name="Test mode - System clock"      value="1" enum="Test"   />
   </binaryOption>

   <binaryOption key="trng_mctl_rst_def" condition="trng_mctl_rst_def_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngReset"
      baseType="uint32_t"
      toolTip="Writing a 1 to this bit clears various TRNG registers, and bits within registers,\n
               to their default state. This bit is writable only if PRGM bit is 1, or PRGM bit\n
               is being written to 1 simultaneously to writing this bit.\n
               Reading this bit always produces a 0."
      description="Reset to Defaults" >
      <choice name="No action"  value="0" enum="NoAction" />
      <choice name="Reset"      value="1" enum="Apply"    />
   </binaryOption >

   <binaryOption key="trng_mctl_trng_acc" condition="trng_mctl_trng_acc_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngAccessMode"
      baseType="uint32_t"
      toolTip="When set to 1, the TRNG will generate an Entropy value that can be read via the\n
               TRNG0_ENT0-TRNG0_ENT15 registers.\n
               The Entropy value may be read once the ENT VAL bit is asserted."
      description="Access Mode" >
      <choice name="Stopped"  value="0" enum="Stopped"  />
      <choice name="Generate" value="1" enum="Generate" isDefault="true" />
   </binaryOption >

   <choiceOption key="trng_mctl_osc_div" condition="trng_mctl_osc_div_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngOscDivide"
      baseType="uint32_t"
      toolTip="Determines the amount of dividing done to the ring oscillator before it is used by the TRNG.\n
               This field is writable only if PRGM bit is 1, or PRGM bit is being written to 1\n
               simultaneously to writing this field.\n
               This field is cleared to the default POR value by writing the RST_DEF bit to 1."
      description="Oscillator Divide" >
      <choice name="Ring oscillator with no divide"  value="0" enum="DivBy1" />
      <choice name="Ring oscillator divided-by-2"    value="1" enum="DivBy2" />
      <choice name="Ring oscillator divided-by-4"    value="2" enum="DivBy4" />
      <choice name="Ring oscillator divided-by-8"    value="3" enum="DivBy8" />
   </choiceOption >

   <choiceOption key="trng_mctl_samp_mode" condition="trng_mctl_samp_mode_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngSampleMode"
      baseType="uint32_t"
      toolTip="Determines the method of sampling the ring oscillator while generating the Entropy value.\n
               This field is writable only if PRGM bit is 1, or PRGM bit is being written to 1\n
               simultaneously with writing this field.\n
               This field is cleared to the POR default value by writing the RST_DEF bit to 1."
      description="Sample Mode" >
      <choice name="Von Neumann data -> Entropy shifter and Statistical Checker"          value="0" enum="VonNeumann" />
      <choice name="Raw data -> Entropy shifter and Statistical Checker"                  value="1" enum="RawData"    isDefault="true" />
      <choice name="Von Neumann data -> Entropy shifter. Raw data -> Statistical Checker" value="2" enum="VonNeumannToEntropy_RawDataToChecker" />
   </choiceOption >

   <!-- ____ SCMISC ____ -->
   <title description="Statistical Check Miscellaneous Register" />

   <intOption key="trng_scmisc_rty_ct" condition="trng_scmisc_rty_ct_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngMaximumRetry"
      baseType="uint32_t"
      toolTip="If a statistical check fails during the TRNG Entropy Generation, the RTY_CT value\n
               indicates the number of times a retry should occur before generating an error.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
      description="Retry Count"
      value="1"
      min="0" max="15"
   />

   <intOption key="trng_scmisc_lrun_max" condition="trng_scmisc_lrun_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngMaximumConsecutiveRun"
      baseType="uint32_t"
      toolTip="This value is the largest allowable number of consecutive samples of all 1, or all 0 \n
               that is allowed during the Entropy generation.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to the POR reset value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
      description="Long Run Limit"
      value="0b100010"
      min="0" max="255"
   />

   <!-- ____ PKRRNG ____ -->
   <title description="Poker Range Register" />

   <intOption key="trng_pkrrng_pkr_rng" condition="trng_pkrrng_pkr_rng_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngPokerRange"
      baseType="uint16_t"
      description="Poker Range"
      toolTip="During the TRNG Statistical Checks, a Poker Test is run which requires a maximum and minimum limit.\n
               The maximum is programmed in the PKRMAX[PKR_MAX] register, and the minimum is derived by subtracting\n
               the PKR_RNG value from the programmed maximum value.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1.\n
               Note that the minimum allowable Poker result is PKR_MAX - PKR_RNG + 1."
      value="0b100110100011"
      min="0" max="65535"
   />

   <!-- ____ PKRMAX ____ -->
   <title description="Poker Maximum Limit Register" />

   <intOption key="trng_pkrmax_pkr_max" condition="trng_pkrmax_pkr_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngPokerLimit"
      baseType="uint32_t"
      description="Poker Maximum Limit"
      toolTip="During the TRNG Statistical Checks, a Poker Test is run which requires a maximum and minimum limit.\n
               The maximum allowable result is programmed in the TRNG0_PKRMAX[PKR_MAX] register. \n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This register is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1.\n
               Note that the TRNG0_PKRMAX and TRNG0_PKRRNG registers combined are used to define the minimum\n
               allowable Poker result, which is PKR_MAX - PKR_RNG + 1.\n
               Note that if TRNG0_MCTL[PRGM] bit is 0, this register address is used to read the Poker Test Square\n
               Calculation result in register TRNG0_PKRSQ"
      value="0b110100100100000"
      min="0" max="16777215"
   />

   <!-- ____ PKRSQ ____ -->
   <title description="Poker Square Calculation Result Register" />

   <intOption key="trng_pkrsq_pkr_sq" condition="trng_pkrsq_pkr_sq_present"
      hidden="true"
      derived="true"
      typeName="uint32_t"
      description="Poker Square Calculation Result"
      toolTip="During the TRNG Statistical Checks, a Poker Test is run which starts with the value\n
			      TRNG0_PKRMAX[PKR_MAX]. This value decreases according to a sum of squares algorithm, and\n
			      must remain greater than zero, but less than the TRNG0_PKRRNG[PKR_RNG] limit.\n
			      The resulting value may be read through this register, if TRNG0_MCTL[PRGM] bit is 0.\n
			      Note that if TRNG0_MCTL[PRGM] bit is 1, this register address is used to access the Poker\n
			      Test Maximum Limit in register TRNG0_PKRMAX."
   />

   <!-- ____ SDCTL ____ -->
   <title description="Seed Control Register" />

   <intOption key="trng_sdctl_ent_dly" condition="trng_sdctl_ent_dly_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngEntropyDelay"
      baseType="uint32_t"
      description="Entropy Delay"
      toolTip="Defines the length (in system clocks) of each Entropy sample taken.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to its reset value at POR."
      value="0b110010000000"
      min="0" max="65535"
   />

   <intOption key="trng_sdctl_samp_size" condition="trng_sdctl_samp_size_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngEntropySampleSize"
      baseType="uint32_t"
      description="Sample Size"
      toolTip="Defines the total number of Entropy samples that will be taken during Entropy generation.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
      value="0b100111000100"
      min="0" max="65535"
   />

   <!-- ____ SBLIM ____ -->
   <title description="Sparse Bit Limit Register" />

   <intOption key="trng_sblim_sb_lim" condition="trng_sblim_sb_lim_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngSparseBitLimit"
      baseType="uint16_t"
      description="Sparse Bit Limit"
      toolTip="During Von Neumann sampling, samples are discarded if two consecutive raw samples\n
               are both 0 or both 1.\n
               If this discarding occurs for a long period of time, it indicates that there is\n
               insufficient Entropy.\n
               The Sparse Bit Limit defines the maximum number of consecutive samples that may\n
               be discarded before an error is generated.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This register is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1.\n
               Note that if TRNG0_MCTL[PRGM] bit is 0, this register address is used to read the Total\n
               Samples count in register TRNG0_TOTSAM"
      value="0b111111"
      min="0" max="1023"
   />

   <!-- ____ TOTSAM ____ -->
   <title description="Total Samples Register" />

   <intOption key="trng_totsam_tot_sam" condition="trng_totsam_tot_sam_present"
      hidden="true"
      derived="true"
      typeName="uint32_t"
      description="Total Samples"
      toolTip="During Entropy generation, the total number of raw samples is counted.\n
               This count is useful in determining how often a sample is used during Von Neumann sampling. \n
               The count may be read through this register, if TRNG0_MCTL[PRGM] bit is 0.\n
               Note that if TRNG0_MCTL[PRGM] bit is 1, this register address is used to access\n
               the Sparse Bit Limit in register TRNG0_SBLIM"
   />

   <!-- ____ FRQMIN ____ -->
   <title description="Frequency Count Minimum Limit Register" />

   <intOption key="trng_frqmin_frq_min" condition="trng_frqmin_frq_min_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngFrequencyCountMinimum"
      baseType="uint32_t"
      description="Frequency Count Minimum Limit"
      toolTip="Defines the minimum allowable count taken during each entropy sample.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1\n
               This field will read zeroes if TRNG0_MCTL[PRGM] = 0.\n
               This field is cleared to its reset value at POR."
      value="0b11001000000"
      min="0" max="4194303"
   />

   <!-- ____ FRQCNT ____ -->
   <title description="Frequency Count Register" />

   <intOption key="trng_frqcnt_frq_ct" condition="trng_frqcnt_frq_ct_present"
      hidden="true"
      derived="true"
      typeName="uint32_t"
      description="Frequency Count"
      toolTip="If TRNG0_MCTL[TRNG_ACC] = 1, reads a sample frequency count taken during entropy generation.\n
               Requires TRNG0_MCTL[PRGM] = 0.\n
               Note that if TRNG0_MCTL[PRGM] bit is 1, this register address is used to access\n
               the Poker Test Maximum Limit in register TRNG0_PKRMAX"
   />

   <!-- ____ FRQMAX ____ -->
   <title description="Frequency Count Limit Register" />

   <intOption key="trng_frqmax_frq_max" condition="trng_frqmax_frq_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngFrqmaxFrqMax"
      baseType="uint32_t"
      description="Frequency Counter Maximum Limit"
      toolTip="Defines the maximum allowable count taken during each entropy sample.\n
               This field is writable only if TRNG0_MCTL[PRGM] bit is 1.\n
               This field is cleared to its reset value at POR.\n
               Note that if TRNG0_MCTL[PRGM] bit is 0, this register address is used to \n
               read the Frequency Count result in register TRNG0_FRQCNT"
      value="0b110010000000000"
      min="0" max="4194303"
   />

   <!-- ____ SCMC ____ -->
   <title description="Statistical Check Monobit Count" />

   <intOption key="trng_scmc_mono_ct" condition="trng_scmc_mono_ct_present"
      hidden="true"
      derived="true"
      typeName="uint32_t"
      description="Monobit Count"
      toolTip="Reads the final Monobit count after entropy generation.\n
               Requires TRNG0_MCTL[PRGM] = 0.\n
               Note that if TRNG0_MCTL[PRGM] bit is 1, this register address is used to\n
               access the Statistical Check Monobit Limit in register TRNG0_SCML"
   />

   <!-- ____ SCML ____ -->
   <title description="Statistical Check Monobit Limit" />

   <intOption key="trng_scml_mono_rng" condition="trng_scml_mono_rng_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScmlMonoRng"
      baseType="uint32_t"
      description="Monobit Range"
      toolTip="The number of ones/zeroes detected during entropy generation must be greater than\n
               MONO_MAX - MONO_RNG, else a retry or error will occur.\n
               This register is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
      value="0b100001100"
      min="0" max="65535"
   />

   <intOption key="trng_scml_mono_max" condition="trng_scml_mono_max_present"
      enabledBy="enablePeripheralSupport"
      typeName="TrngScmlMonoMax"
      baseType="uint32_t"
      description="Monobit Maximum Limit"
      toolTip="Defines the maximum allowable count taken during entropy generation.\n
               The number of ones/zeroes detected during entropy generation must be\n
               less than MONO_MAX, else a retry or error will occur.\n
               This register is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
      value="0b10101101000"
      min="0" max="65535"
   />

   <for keys="   run_length :  limit1      :  limit2        "
        values=" 1          :  0b10110010  :  0b110010101   ;
                 2          :  0b01111010  :  0b11011100    ;
                 3          :  0b01011000  :  0b01111101    ;
                 4          :  0b01000000  :  0b01001011    ;
                 5          :  0b00101110  :  0b00101111    ;
                 6p         :  0b00101110  :  0b00101111    " >
      <!-- ____ SCR1C ____ -->
      <title description="Run Length %(run_length) Count" />
      <intOption key="trng_scr%(run_length)c_r%(run_length)_1_ct" condition="trng_scr%(run_length)c_r%(run_length)_1_ct_present"
         hidden="true"
         derived="true"
         typeName="uint32_t"
         description="Runs of One, Length %(run_length) Count\n"
         toolTip="Reads the final Runs of Ones, length %(run_length) count after entropy generation.\n
                  Requires TRNG0_MCTL[PRGM] = 0."
      />
      <intOption key="trng_scr%(run_length)c_r%(run_length)_0_ct" condition="trng_scr%(run_length)c_r%(run_length)_0_ct_present"
         hidden="true"
         derived="true"
         typeName="uint32_t"
         description="Runs of Zero, Length %(run_length) Count"
         toolTip="Reads the final Runs of Zeroes, length %(run_length) count after entropy generation.\n
                  Requires TRNG0_MCTL[PRGM] = 0."
      />

      <!-- ____ SCRnL ____ -->
      <title description="Run Length %(run_length) Limit" />

      <intOption key="trng_scr%(run_length)l_run%(run_length)_rng" condition="trng_scr%(run_length)l_run%(run_length)_rng_present"
         enabledBy="enablePeripheralSupport"
         typeName="TrngScr1lRun1Rng"
         baseType="uint32_t"
         description="Run Length %(run_length) Range"
         toolTip="The number of runs of length %(run_length) (for both 0 and 1) detected during entropy\n
                  generation must be greater than RUN1_MAX - RUN1_RNG, else a retry or error\n
                  will occur. \n
                  This register is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
         value="%(limit1)"
         radix="16"
         min="0" max="32767"
      />

      <intOption key="trng_scr%(run_length)l_run%(run_length)_max" condition="trng_scr%(run_length)l_run%(run_length)_max_present"
         enabledBy="enablePeripheralSupport"
         typeName="TrngScr%(run_length)lRun%(run_length)Max"
         baseType="uint32_t"
         description="Run Length %(run_length) Maximum Limit"
         toolTip="Defines the maximum allowable runs of length %(run_length) (for both 0 and 1) detected\n
                  during entropy generation. The number of runs of length 1 detected during\n
                  entropy generation must be less than RUN1_MAX, else a retry or error will occur.\n
                  This register is cleared to the default POR value by writing the TRNG0_MCTL[RST_DEF] bit to 1."
         value="%(limit2)"
         radix="16"
         min="0" max="32767"
      />
   </for>

   <!-- ____ STATUS ____ -->
   <title description="Status Register" />

   <intOption key="trng_status_retry_ct" condition="trng_status_retry_ct_present"
      hidden="true"
      derived="true"
      typeName="uint32_t"
      toolTip="This represents the current number of entropy generation retries left before a\n
               statistical test failure will cause the RNG to generate an error condition."
      description="RETRY COUNT"
   />

   <for keys="   bit_name : description "
        values=" tfmb     : Mono Bit   ;
                 tfp      : Poker      ;
                 tflr     : Long Run   ;
                 tfsb     : Sparse Bit " >
      <binaryOption key="trng_status_%(bit_name)" condition="trng_status_%(bit_name)_present"
         hidden="true"
         derived="true"
         typeName="TrngStatusTfmb"
         baseType="uint32_t"
         toolTip="Indicates if the %(description) Test has failed"
         description="%(description) Test Result" >
         <choice name="Test OK"      value="0" enum="TestOK"     />
         <choice name="Test Failed"  value="1" enum="Choice1" />
      </binaryOption >
   </for>

   <for keys="   run_length "
        values=" 1          ;
                 2          ;
                 3          ;
                 4          ;
                 5          ;
                 6p         " >

      <binaryOption key="trng_status_tf%(run_length)br1" condition="trng_status_tf%(run_length)br1_present"
         hidden="true"
         derived="true"
         typeName="TrngStatusTf%(run_length)br1"
         baseType="uint32_t"
         toolTip="Indicates if test failed"
         description="%(run_length) Bit Run, Sampling 1s, Test Result" >
         <choice name="Test OK"      value="0" enum="TestOK"     />
         <choice name="Test Failed"  value="1" enum="TestFailed" />
      </binaryOption >

      <binaryOption key="trng_status_tf%(run_length)br0" condition="trng_status_tf%(run_length)br0_present"
         hidden="true"
         derived="true"
         typeName="TrngStatusTf%(run_length)br0"
         baseType="uint32_t"
         toolTip="Indicates if test failed"
         description="%(run_length) Bit Run, Sampling 0s, Test Result" >
         <choice name="Test OK"      value="0" enum="TestOK"     />
         <choice name="Test Failed"  value="1" enum="TestFailed" />
      </binaryOption >
   </for>

   <!-- ____ ENT ____ -->
   <title description="Entropy Read Register" />

   <intOption key="trng_ent_ent" condition="trng_ent_ent_present"
      hidden="true"
      derived="true"
      typeName="uint32_t"
      description="Entropy Value"
      toolTip="Will be non-zero only if TRNG0_MCTL[PRGM] = 0 Run Mode) and TRNG0_MCTL[ENT_VAL] = 1 (Entropy Valid).\n
               The most significant bits of the entropy are read from the lowest offset, and the least significant\n
               bits are read from the highest offset.\n
               Note that reading the highest offset also clears the entire entropy value, and starts a new entropy generation."
   />
   <for keys="   rl1 :  rl2 "
        values="  1   :  0   ;
                  3   :  2   ;
                  5   :  4   ;
                  7   :  6   ;
                  9   :  8   ;
                  b   :  a   ;
                  d   :  c   ;
                  f   :  e   " >
      <!-- ____ PKRCNTnn ____ -->
      <title description='="Statistical Check Poker Count "+ToUpperCase("%(rl2)")+" and "+ToUpperCase("%(rl1)")+" Register"' />

      <intOption key="trng_pkrcnt%(rl1)%(rl2)_pkr_%(rl2)_ct" condition="trng_pkrcnt%(rl1)%(rl2)_pkr_%(rl2)_ct_present"
         hidden="true"
         derived="true"
         typeName="uint32_t"
         toolTip=""
         description='="Poker "+ToUpperCase("%(rl2)")+" Count"'
      />

      <intOption key="trng_pkrcnt%(rl1)%(rl2)_pkr_%(rl1)_ct" condition="trng_pkrcnt%(rl1)%(rl2)_pkr_%(rl1)_ct_present"
         hidden="true"
         derived="true"
         typeName="uint32_t"
         toolTip=""
         description='="Poker "+ToUpperCase("%(rl1)")+" Count"'
      />
   </for>

   <!-- ____ SEC_CFG ____ -->
   <title description="Security Configuration Register" />

   <binaryOption key="trng_sec_cfg_no_prgm" condition="trng_sec_cfg_no_prgm_present"
      enabledBy="enablePeripheralSupport"
      register="sec_cfg"
      typeName="TrngSecCfgNoPrgm"
      baseType="uint32_t"
      toolTip="If set, the TRNG registers cannot be programmed"
      description="Register protection" >
      <choice name="Normal access"  value="0" enum="Normal" />
      <choice name="Protected"      value="1" enum="Protected" />
   </binaryOption >

   <!-- ____ INT_CTRL ____ -->
   <title description="Interrupt Control Register" />

   <binaryOption key="trng_int_ctrl_frq_ct_fail" condition="trng_int_ctrl_frq_ct_fail_present"
      enabledBy="enablePeripheralSupport"
      register="int_ctrl"
      hidden="true"
      derived="true"
      typeName="TrngCountErrorClear"
      baseType="uint32_t"
      toolTip=""
      description="Clear Counter error" >
      <choice name="Inactive" value="0" enum="Clear" />
      <choice name="Active"   value="1" enum="Active" />
   </binaryOption >

   <binaryOption key="trng_int_ctrl_ent_val" condition="trng_int_ctrl_ent_val_present"
      enabledBy="enablePeripheralSupport"
      register="int_ctrl"
      hidden="true"
      derived="true"
      typeName="TrngEntropyAvailableClear"
      baseType="uint32_t"
      toolTip=""
      description="Clear entropy valid" >
      <choice name="Inactive" value="0" enum="Clear" />
      <choice name="Active"   value="1" enum="Active" />
   </binaryOption >

   <binaryOption key="trng_int_ctrl_hw_err" condition="trng_int_ctrl_hw_err_present"
      enabledBy="enablePeripheralSupport"
      register="int_ctrl"
      hidden="true"
      derived="true"
      typeName="TrngHardwareErrorClear"
      baseType="uint32_t"
      toolTip=""
      description="Clear Hardware error" >
      <choice name="Inactive" value="0" enum="Clear" />
      <choice name="Active"   value="1" enum="Active" />
   </binaryOption >

   <!-- ____ INT_MASK ____ -->
   <title description="Mask Register" />

   <binaryOption key="trng_int_mask_frq_ct_fail" condition="trng_int_mask_frq_ct_fail_present"
      enabledBy="enablePeripheralSupport"
      register="int_mask"
      typeName="TrngCountErrorAction"
      baseType="uint32_t"
      toolTip="This enables an interrupt when the frequency counter has detected a failure"
      description="Counter error action" >
      <choice name="No Action"  value="0" enum="None"      />
      <choice name="Interrupt"  value="1" enum="Interrupt" />
   </binaryOption >

   <binaryOption key="trng_int_mask_ent_val" condition="trng_int_mask_ent_val_present"
      enabledBy="enablePeripheralSupport"
      register="int_mask"
      typeName="TrngEntropyAvailableAction"
      baseType="uint32_t"
      toolTip="This enables an interrupt when TRNG ACC bit is set (Entropy value is available)"
      description="Entropy available action" >
      <choice name="No Action"  value="0" enum="None"    />
      <choice name="Interrupt"  value="1" enum="Interrupt" />
   </binaryOption >

   <binaryOption key="trng_int_mask_hw_err" condition="trng_int_mask_hw_err_present"
      enabledBy="enablePeripheralSupport"
      register="int_mask"
      typeName="TrngHardwareErrorAction"
      baseType="uint32_t"
      toolTip="This enables an interrupt when a hardware error occurs"
      description="Hardware error action" >
      <choice name="No Action"  value="0" enum="None"      />
      <choice name="Interrupt"  value="1" enum="Interrupt" />
   </binaryOption >

   <!-- ____ INT_STATUS ____ -->
   <title description="Interrupt Status Register" />

   <binaryOption key="trng_int_status_frq_ct_fail" condition="trng_int_status_frq_ct_fail_present"
      hidden="true"
      derived="true"
      register="int_status"
      typeName="TrngCounterStatus"
      baseType="uint32_t"
      toolTip="The frequency counter has detected a failure.\n
               This may be due to improper programming of the TRNG0_FRQMAX and/or \n
               TRNG0_FRQMIN registers, or a hardware failure FRQ_CT_FAIL in the ring oscillator.\n
               Read only"
      description="Frequency Counter Failure" >
      <choice name="No errors"        value="0" enum="NoErrors" />
      <choice name="Counter failure"  value="1" enum="Failure" />
   </binaryOption >

   <binaryOption key="trng_int_status_ent_val" condition="trng_int_status_ent_val_present"
      hidden="true"
      derived="true"
      register="int_status"
      typeName="TrngEntropyStatus"
      baseType="uint32_t"
      toolTip="Will assert only if TRNG ACC bit is set, and then after an entropy value is generated.\n
               Will be cleared when TRNG0_ENT15 is read. (TRNG0_ENT0 through TRNG0_ENT14 should \n
               be read before reading TRNG0_ENT15).\n
               Read Only"
      description="Entropy Valid" >
      <choice name="Busy - Entropy value read is invalid"  value="0" enum="Busy" />
      <choice name="Complete - Entropy is valid if read"   value="1" enum="EntropyAvailable" />
   </binaryOption >

   <binaryOption key="trng_int_status_hw_err" condition="trng_int_status_hw_err_present"
      hidden="true"
      derived="true"
      register="int_status"
      typeName="TrngErrorStatus"
      baseType="uint32_t"
      toolTip="Any HW error in the TRNG will trigger this interrupt.\n
               Read Only"
      description="Error status" >
      <choice name="No error"        value="0" enum="NoError" />
      <choice name="Error detected"  value="1" enum="ErrorDetected" />
   </binaryOption >

   <!-- ____ VID1 ____ -->
   <title description="Version ID Register (MS)" />

   <choiceOption key="trng_vid1_ip_id" condition="trng_vid1_ip_id_present"
      hidden="true"
      derived="true"
      typeName="TrngVid1IpId"
      baseType="uint32_t"
      toolTip=""
      description="Freescale IP ID" >
      <choice name="ID for TRNG" value="48" enum="IdForTrng" />
   </choiceOption >

   <choiceOption key="trng_vid1_maj_rev" condition="trng_vid1_maj_rev_present"
      hidden="true"
      derived="true"
      typeName="TrngVid1MajRev"
      baseType="uint32_t"
      toolTip=""
      description="Freescale IP Major revision of the TRNG" >
      <choice name="Major revision number for TRNG"  value="1" enum="MajorRevisionNumberForTrng" />
   </choiceOption >

   <choiceOption key="trng_vid1_min_rev" condition="trng_vid1_min_rev_present"
      hidden="true"
      derived="true"
      typeName="TrngVid1MinRev"
      baseType="uint32_t"
      toolTip=""
      description="Freescale IP Minor revision of the TRNG" >
      <choice name="Minor revision number for TRNG"  value="0" enum="MinorRevisionNumberForTrng" />
   </choiceOption >

   <!-- ____ VID2 ____ -->
   <title description="Version ID Register (LS)" />

   <choiceOption key="trng_vid2_era" condition="trng_vid2_era_present"
      hidden="true"
      derived="true"
      typeName="TrngVid2Era"
      baseType="uint32_t"
      toolTip=""
      description="Freescale compile options for the TRNG" >
      <choice name="COMPILE_OPT for TRNG"  value="0" enum="Compile_optForTrng" />
   </choiceOption >

   <choiceOption key="trng_vid2_intg_opt" condition="trng_vid2_intg_opt_present"
      hidden="true"
      typeName="TrngVid2IntgOpt"
      baseType="uint32_t"
      toolTip=""
      description="Freescale integration options for the TRNG" >
      <choice name="INTG_OPT for TRNG"  value="0" enum="Intg_optForTrng" />
   </choiceOption >

   <choiceOption key="trng_vid2_eco_rev" condition="trng_vid2_eco_rev_present"
      hidden="true"
      derived="true"
      typeName="TrngVid2EcoRev"
      baseType="uint32_t"
      toolTip=""
      description="Freescale IP ECO revision of the TRNG" >
      <choice name="TRNG_ECO_REV for TRNG"  value="0" enum="Trng_eco_revForTrng" />
   </choiceOption >

   <choiceOption key="trng_vid2_config_opt" condition="trng_vid2_config_opt_present"
      hidden="true"
      derived="true"
      typeName="TrngVid2ConfigOpt"
      baseType="uint32_t"
      toolTip=""
      description="Freescale IP Configuaration options for the TRNG" >
      <choice name="TRNG_CONFIG_OPT for TRNG"  value="0" enum="Trng_config_optForTrng" />
   </choiceOption >

   <!-- ____ Getters and Setters ____________ -->

   <for keys="field                     : set   : get   : clear : genCode                 : name"
        values="
         trng_mctl_prgm                 : true  : true  : false : true                    : Mode;
         trng_mctl_tstop_ok             : false : true  : false : true                    : StopOk;
         trng_mctl_err                  : false : true  : true  : true                    : Error;
         trng_mctl_tst_out              : false : true  : false : enableGettersAndSetters : MctlTstOut;
         trng_mctl_fct_val              : false : true  : false : enableGettersAndSetters : MctlFctVal;
         trng_mctl_fct_fail             : false : true  : false : enableGettersAndSetters : MctlFctFail;
         trng_mctl_for_sclk             : true  : true  : false : enableGettersAndSetters : MctlForSclk;
         trng_mctl_rst_def              : true  : false : false : true                    : SoftwareReset;
         trng_mctl_trng_acc             : true  : true  : false : true                    : Access;
         trng_mctl_osc_div              : true  : true  : false : enableGettersAndSetters : MctlOscDiv;
         trng_mctl_samp_mode            : true  : true  : false : enableGettersAndSetters : MctlSampMode;

         trng_scmisc_rty_ct             : true  : true  : false : enableGettersAndSetters : ScmiscRtyCt;
         trng_scmisc_lrun_max           : true  : true  : false : enableGettersAndSetters : ScmiscLrunMax;

         trng_pkrrng_pkr_rng            : true  : true  : false : enableGettersAndSetters : PkrrngPkrRng;

         trng_pkrmax_pkr_max            : true  : true  : false : enableGettersAndSetters : PkrmaxPkrMax;

         trng_pkrsq_pkr_sq              : false : true  : false : enableGettersAndSetters : PkrsqPkrSq;

         trng_sdctl_ent_dly             : true  : true  : false : enableGettersAndSetters : SdctlEntDly;
         trng_sdctl_samp_size           : true  : true  : false : enableGettersAndSetters : SdctlSampSize;

         trng_sblim_sb_lim              : true  : true  : false : enableGettersAndSetters : SblimSbLim;

         trng_totsam_tot_sam            : false : true  : false : enableGettersAndSetters : TotsamTotSam;

         trng_frqmin_frq_min            : true  : true  : false : enableGettersAndSetters : FrqminFrqMin;

         trng_frqcnt_frq_ct             : false : true  : false : enableGettersAndSetters : FrqcntFrqCt;

         trng_frqmax_frq_max            : true  : true  : false : enableGettersAndSetters : FrqmaxFrqMax;

         trng_scmc_mono_ct              : false : true  : false : enableGettersAndSetters : ScmcMonoCt;

         trng_scml_mono_rng             : true  : true  : false : enableGettersAndSetters : ScmlMonoRng;
         trng_scml_mono_max             : true  : true  : false : enableGettersAndSetters : ScmlMonoMax;

         trng_scr1c_r1_1_ct             : false : true  : false : enableGettersAndSetters : Scr1cR11Ct;
         trng_scr1c_r1_0_ct             : false : true  : false : enableGettersAndSetters : Scr1cR10Ct;

         trng_scr1l_run1_rng            : true  : true  : false : enableGettersAndSetters : Scr1lRun1Rng;
         trng_scr1l_run1_max            : true  : true  : false : enableGettersAndSetters : Scr1lRun1Max;

         trng_scr2c_r2_1_ct             : false : true  : false : enableGettersAndSetters : Scr2cR21Ct;
         trng_scr2c_r2_0_ct             : false : true  : false : enableGettersAndSetters : Scr2cR20Ct;

         trng_scr2l_run2_rng            : true  : true  : false : enableGettersAndSetters : Scr2lRun2Rng;
         trng_scr2l_run2_max            : true  : true  : false : enableGettersAndSetters : Scr2lRun2Max;

         trng_scr3c_r3_1_ct             : false : true  : false : enableGettersAndSetters : Scr3cR31Ct;
         trng_scr3c_r3_0_ct             : false : true  : false : enableGettersAndSetters : Scr3cR30Ct;

         trng_scr3l_run3_rng            : true  : true  : false : enableGettersAndSetters : Scr3lRun3Rng;
         trng_scr3l_run3_max            : true  : true  : false : enableGettersAndSetters : Scr3lRun3Max;

         trng_scr4c_r4_1_ct             : false : true  : false : enableGettersAndSetters : Scr4cR41Ct;
         trng_scr4c_r4_0_ct             : false : true  : false : enableGettersAndSetters : Scr4cR40Ct;

         trng_scr4l_run4_rng            : true  : true  : false : enableGettersAndSetters : Scr4lRun4Rng;
         trng_scr4l_run4_max            : true  : true  : false : enableGettersAndSetters : Scr4lRun4Max;

         trng_scr5c_r5_1_ct             : false : true  : false : enableGettersAndSetters : Scr5cR51Ct;
         trng_scr5c_r5_0_ct             : false : true  : false : enableGettersAndSetters : Scr5cR50Ct;

         trng_scr5l_run5_rng            : true  : true  : false : enableGettersAndSetters : Scr5lRun5Rng;
         trng_scr5l_run5_max            : true  : true  : false : enableGettersAndSetters : Scr5lRun5Max;

         trng_scr6pc_r6p_1_ct           : false : true  : false : enableGettersAndSetters : Scr6pcR6p1Ct;
         trng_scr6pc_r6p_0_ct           : false : true  : false : enableGettersAndSetters : Scr6pcR6p0Ct;

         trng_scr6pl_run6p_rng          : true  : true  : false : enableGettersAndSetters : Scr6plRun6pRng;
         trng_scr6pl_run6p_max          : true  : true  : false : enableGettersAndSetters : Scr6plRun6pMax;

         trng_status_retry_ct           : false : true  : false : enableGettersAndSetters : StatusRetryCt;
         trng_status_tfmb               : false : true  : false : enableGettersAndSetters : StatusTfmb;
         trng_status_tfp                : false : true  : false : enableGettersAndSetters : StatusTfp;
         trng_status_tflr               : false : true  : false : enableGettersAndSetters : StatusTflr;
         trng_status_tfsb               : false : true  : false : enableGettersAndSetters : StatusTfsb;
         trng_status_tf6pbr1            : false : true  : false : enableGettersAndSetters : StatusTf6pbr1;
         trng_status_tf6pbr0            : false : true  : false : enableGettersAndSetters : StatusTf6pbr0;
         trng_status_tf5br1             : false : true  : false : enableGettersAndSetters : StatusTf5br1;
         trng_status_tf5br0             : false : true  : false : enableGettersAndSetters : StatusTf5br0;
         trng_status_tf4br1             : false : true  : false : enableGettersAndSetters : StatusTf4br1;
         trng_status_tf4br0             : false : true  : false : enableGettersAndSetters : StatusTf4br0;
         trng_status_tf3br1             : false : true  : false : enableGettersAndSetters : StatusTf3br1;
         trng_status_tf3br0             : false : true  : false : enableGettersAndSetters : StatusTf3br0;
         trng_status_tf2br1             : false : true  : false : enableGettersAndSetters : StatusTf2br1;
         trng_status_tf2br0             : false : true  : false : enableGettersAndSetters : StatusTf2br0;
         trng_status_tf1br1             : false : true  : false : enableGettersAndSetters : StatusTf1br1;
         trng_status_tf1br0             : false : true  : false : enableGettersAndSetters : StatusTf1br0;

         trng_pkrcnt10_pkr_1_ct         : false : true  : false : enableGettersAndSetters : Pkrcnt10Pkr1Ct;
         trng_pkrcnt10_pkr_0_ct         : false : true  : false : enableGettersAndSetters : Pkrcnt10Pkr0Ct;

         trng_pkrcnt32_pkr_3_ct         : false : true  : false : enableGettersAndSetters : Pkrcnt32Pkr3Ct;
         trng_pkrcnt32_pkr_2_ct         : false : true  : false : enableGettersAndSetters : Pkrcnt32Pkr2Ct;

         trng_pkrcnt54_pkr_5_ct         : false : true  : false : enableGettersAndSetters : Pkrcnt54Pkr5Ct;
         trng_pkrcnt54_pkr_4_ct         : false : true  : false : enableGettersAndSetters : Pkrcnt54Pkr4Ct;

         trng_pkrcnt76_pkr_7_ct         : false : true  : false : enableGettersAndSetters : Pkrcnt76Pkr7Ct;
         trng_pkrcnt76_pkr_6_ct         : false : true  : false : enableGettersAndSetters : Pkrcnt76Pkr6Ct;

         trng_pkrcnt98_pkr_9_ct         : false : true  : false : enableGettersAndSetters : Pkrcnt98Pkr9Ct;
         trng_pkrcnt98_pkr_8_ct         : false : true  : false : enableGettersAndSetters : Pkrcnt98Pkr8Ct;

         trng_pkrcntba_pkr_b_ct         : false : true  : false : enableGettersAndSetters : PkrcntbaPkrBCt;
         trng_pkrcntba_pkr_a_ct         : false : true  : false : enableGettersAndSetters : PkrcntbaPkrACt;

         trng_pkrcntdc_pkr_d_ct         : false : true  : false : enableGettersAndSetters : PkrcntdcPkrDCt;
         trng_pkrcntdc_pkr_c_ct         : false : true  : false : enableGettersAndSetters : PkrcntdcPkrCCt;

         trng_pkrcntfe_pkr_f_ct         : false : true  : false : enableGettersAndSetters : PkrcntfePkrFCt;
         trng_pkrcntfe_pkr_e_ct         : false : true  : false : enableGettersAndSetters : PkrcntfePkrECt;

         trng_sec_cfg_sk_val            : true  : true  : false : enableGettersAndSetters : SecCfgSkVal;
         trng_sec_cfg_no_prgm           : true  : true  : false : enableGettersAndSetters : SecCfgNoPrgm;
         trng_sec_cfg_sh0               : true  : true  : false : enableGettersAndSetters : SecCfgSh0;

         trng_int_ctrl_frq_ct_fail      : false : false : true  : true                    : CountErrorClear;
         trng_int_ctrl_ent_val          : false : false : true  : enableGettersAndSetters : EntropyAvailableClear;
         trng_int_ctrl_hw_err           : false : false : true  : true                    : HardwareErrorClear;

         trng_int_mask_frq_ct_fail      : true  : true  : false : enableGettersAndSetters : CountErrorAction;
         trng_int_mask_ent_val          : true  : true  : false : enableGettersAndSetters : EntropyAvailableAction;
         trng_int_mask_hw_err           : true  : true  : false : enableGettersAndSetters : HardwareErrorAction;

         trng_int_status_frq_ct_fail    : false : true  : false : true                    : CounterStatus;
         trng_int_status_ent_val        : false : true  : false : true                    : EntropyStatus;
         trng_int_status_hw_err         : false : true  : false : true                    : ErrorStatus;

         trng_vid1_ip_id                : false : true  : false : enableGettersAndSetters : Vid1IpId;
         trng_vid1_maj_rev              : false : true  : false : enableGettersAndSetters : Vid1MajRev;
         trng_vid1_min_rev              : false : true  : false : enableGettersAndSetters : Vid1MinRev;

         trng_vid2_era                  : false : true  : false : enableGettersAndSetters : Vid2Era;
         trng_vid2_intg_opt             : false : true  : false : enableGettersAndSetters : Vid2IntgOpt;
         trng_vid2_eco_rev              : false : true  : false : enableGettersAndSetters : Vid2EcoRev;
         trng_vid2_config_opt           : false : true  : false : enableGettersAndSetters : Vid2ConfigOpt" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t * (%(field))
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t * (%(field))
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %returnType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
         tooltipPadding="x*x"      ><![CDATA[
         \t/**
         \t * Clear %description
         \t * (%(field))
         \t *
         \t * %tooltip
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate variables="trng_ent_ent" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \tstatic %paramType getEntropy(int index) {
      \t   return %paramType(%register[index]);
      \t}
      \t\n
   ]]></variableTemplate>

   <!-- ________ TRNG Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   TrngMode_Run ,                    // Programming Mode Select - Run mode
      \t *   TrngReset_Apply ,                 // Reset to Defaults - Software reset
      \t *   TrngAccessMode_Generate ,         // Access Mode - Generate
      \t *   TrngCountErrorAction_Interrupt ,  // Counter error action - Interrupt
      \t *   TrngEntropyAvailableAction_None , // Entropy available action - No Action
      \t *   TrngHardwareErrorAction_None,     // Hardware error action - No Action
      \t *
      \t *   $(_name)Callback,                    // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tprivate:
      \t   /**
      \t    * Prevent implicit parameter conversions
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(Types...) = delete;
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      %multilineDescription
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : trng_mctl_prgm,trng_mctl_err,trng_mctl_for_sclk,
                             trng_mctl_rst_def,trng_mctl_trng_acc,trng_mctl_unused,
                             trng_mctl_osc_div,trng_mctl_samp_mode                :   0      ;
               %baseType   : trng_scmisc_rty_ct,trng_scmisc_lrun_max              :   0      ;
               %baseType   : trng_pkrrng_pkr_rng                                  :   0      ;
               %baseType   : trng_pkrmax_pkr_max                                  :   0      ;
               %baseType   : trng_sdctl_ent_dly,trng_sdctl_samp_size              :   0      ;
               %baseType   : trng_sblim_sb_lim                                    :   0      ;
               %baseType   : trng_frqmin_frq_min                                  :   0      ;
               %baseType   : trng_frqmax_frq_max                                  :   0      ;
               %baseType   : trng_scml_mono_rng,trng_scml_mono_max                :   0      ;
               %baseType   : trng_scr1l_run1_rng,trng_scr1l_run1_max              :   0      ;
               %baseType   : trng_scr2l_run2_rng,trng_scr2l_run2_max              :   0      ;
               %baseType   : trng_scr3l_run3_rng,trng_scr3l_run3_max              :   0      ;
               %baseType   : trng_scr4l_run4_rng,trng_scr4l_run4_max              :   0      ;
               %baseType   : trng_scr5l_run5_rng,trng_scr5l_run5_max              :   0      ;
               %baseType   : trng_scr6pl_run6p_rng,trng_scr6pl_run6p_max          :   0      ;
               %baseType   : trng_sec_cfg_sk_val,trng_sec_cfg_no_prgm,
                             trng_sec_cfg_sh0                                     :   0      ;
               %baseType   : trng_int_ctrl_unused,trng_int_ctrl_frq_ct_fail,
                             trng_int_ctrl_ent_val,trng_int_ctrl_hw_err           :   0      ;
               %baseType   : trng_int_mask_frq_ct_fail,trng_int_mask_ent_val,
                             trng_int_mask_hw_err                                 :   0      ;
               %baseType   : trng_int_status_frq_ct_fail                          :   0      ;
               %paramType  : /PCR/nvic_irqLevel                                   :   %defaultValue   " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="/PCR/nvic_irqLevel,irqLevel"
      linePadding="xxx"
   ><![CDATA[
      %multilineDescription
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!-- Init Constructors -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for Random Number Generator Accelerator
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param callbackFunction   Random Number Generator Accelerator call-back
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(CallbackFunction callbackFunction, Types... rest) : Init(rest...) {
      \t
      \t      this->callbackFunction = callbackFunction;
      \t   }\n\n
   ]]></template>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    * (%variables)
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            trng_mctl_osc_div;
            trng_mctl_samp_mode;
            trng_sec_cfg_sk_val;
            trng_sec_cfg_no_prgm;
            trng_sec_cfg_sh0;
            trng_int_ctrl_frq_ct_fail;
            trng_int_ctrl_ent_val;
            trng_int_ctrl_hw_err;
            trng_int_mask_frq_ct_fail;
            trng_int_mask_ent_val;
            trng_int_mask_hw_err;
            trng_int_status_frq_ct_fail
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%variables)
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>


   <for keys="r"
      values="
            trng_mctl_prgm;
            trng_mctl_err;
            trng_mctl_for_sclk;
            trng_mctl_rst_def;
            trng_mctl_trng_acc;
            trng_mctl_unused;
            trng_scmisc_rty_ct;
            trng_scmisc_lrun_max;
            trng_pkrrng_pkr_rng;
            trng_pkrmax_pkr_max;
            trng_sdctl_ent_dly;
            trng_sdctl_samp_size;
            trng_sblim_sb_lim;
            trng_frqmin_frq_min;
            trng_frqmax_frq_max;
            trng_scml_mono_rng;
            trng_scml_mono_max;
            trng_scr1l_run1_rng;
            trng_scr1l_run1_max;
            trng_scr2l_run2_rng;
            trng_scr2l_run2_max;
            trng_scr3l_run3_rng;
            trng_scr3l_run3_max;
            trng_scr4l_run4_rng;
            trng_scr4l_run4_max;
            trng_scr5l_run5_rng;
            trng_scr5l_run5_max;
            trng_scr6pl_run6p_rng;
            trng_scr6pl_run6p_max;
            trng_int_ctrl_unused
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%paramType0 value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask0) | %macro0(value);
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            trng_mctl_prgm,
            trng_mctl_err,
            trng_mctl_for_sclk,
            trng_mctl_rst_def,
            trng_mctl_trng_acc,
            trng_mctl_unused,
            trng_mctl_osc_div,
            trng_mctl_samp_mode,
            trng_scmisc_rty_ct,
            trng_scmisc_lrun_max,
            trng_pkrrng_pkr_rng,
            trng_pkrmax_pkr_max,
            trng_sdctl_ent_dly,
            trng_sdctl_samp_size,
            trng_sblim_sb_lim,
            trng_frqmin_frq_min,
            trng_frqmax_frq_max,
            trng_scml_mono_rng,
            trng_scml_mono_max,
            trng_scr1l_run1_rng,
            trng_scr1l_run1_max,
            trng_scr2l_run2_rng,
            trng_scr2l_run2_max,
            trng_scr3l_run3_rng,
            trng_scr3l_run3_max,
            trng_scr4l_run4_rng,
            trng_scr4l_run4_max,
            trng_scr5l_run5_rng,
            trng_scr5l_run5_max,
            trng_scr6pl_run6p_rng,
            trng_scr6pl_run6p_max,
            trng_sec_cfg_sk_val,
            trng_sec_cfg_no_prgm,
            trng_sec_cfg_sh0,
            trng_int_ctrl_unused,
            trng_int_ctrl_frq_ct_fail,
            trng_int_ctrl_ent_val,
            trng_int_ctrl_hw_err,
            trng_int_mask_frq_ct_fail,
            trng_int_mask_ent_val,
            trng_int_mask_hw_err,
            trng_int_status_frq_ct_fail
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral
      \t   enable();
      \t
      \t   // Do software reset if requested
      \t   trng->MCTL = init.mctl&TRNG_MCTL_RST_DEF_MASK;
      \t\n
   ]]>
   </template>
   <template codeGenCondition="irqHandlingMethod" condition="irqHandlingMethod" >
   <![CDATA[
      \t   // Configure call-backs
      \t   setCallback(init.callbackFunction);\n
   ]]>
   </template>
   <for keys=
             " var                                                    : statement            "
      values=" irqLevel                                               : enableNvicInterrupts(init.irqlevel) ;
               trng_mctl_prgm,trng_mctl_err,trng_mctl_for_sclk,
               trng_mctl_rst_def,trng_mctl_trng_acc,trng_mctl_unused,
               trng_mctl_osc_div,trng_mctl_samp_mode                  : %configRegAssignment  ;
               trng_scmisc_rty_ct,trng_scmisc_lrun_max                : %configRegAssignment  ;
               trng_pkrrng_pkr_rng                                    : %configRegAssignment  ;
               trng_pkrmax_pkr_max                                    : %configRegAssignment  ;
               trng_sdctl_ent_dly,trng_sdctl_samp_size                : %configRegAssignment  ;
               trng_sblim_sb_lim                                      : %configRegAssignment  ;
               trng_frqmin_frq_min                                    : %configRegAssignment  ;
               trng_frqmax_frq_max                                    : %configRegAssignment  ;
               trng_scml_mono_rng,trng_scml_mono_max                  : %configRegAssignment  ;
               trng_scr1l_run1_rng,trng_scr1l_run1_max                : %configRegAssignment  ;
               trng_scr2l_run2_rng,trng_scr2l_run2_max                : %configRegAssignment  ;
               trng_scr3l_run3_rng,trng_scr3l_run3_max                : %configRegAssignment  ;
               trng_scr4l_run4_rng,trng_scr4l_run4_max                : %configRegAssignment  ;
               trng_scr5l_run5_rng,trng_scr5l_run5_max                : %configRegAssignment  ;
               trng_scr6pl_run6p_rng,trng_scr6pl_run6p_max            : %configRegAssignment  ;
               trng_sec_cfg_sk_val,trng_sec_cfg_no_prgm,
               trng_sec_cfg_sh0                                       : %configRegAssignment  ;
               trng_int_ctrl_unused,trng_int_ctrl_frq_ct_fail,
               trng_int_ctrl_ent_val,trng_int_ctrl_hw_err             : %configRegAssignment  ;
               trng_int_mask_frq_ct_fail,trng_int_mask_ent_val,
               trng_int_mask_hw_err                                   : %configRegAssignment  ;
               trng_int_status_frq_ct_fail                            : %configRegAssignment " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            trng_mctl_prgm,trng_mctl_err,trng_mctl_for_sclk,
            trng_mctl_rst_def,trng_mctl_trng_acc,trng_mctl_unused,
            trng_mctl_osc_div,trng_mctl_samp_mode,
            trng_scmisc_rty_ct,trng_scmisc_lrun_max,
            trng_pkrrng_pkr_rng,
            trng_pkrmax_pkr_max,
            trng_sdctl_ent_dly,trng_sdctl_samp_size,
            trng_sblim_sb_lim,
            trng_frqmin_frq_min,
            trng_frqmax_frq_max,
            trng_scml_mono_rng,trng_scml_mono_max,
            trng_scr1l_run1_rng,trng_scr1l_run1_max,
            trng_scr2l_run2_rng,trng_scr2l_run2_max,
            trng_scr3l_run3_rng,trng_scr3l_run3_max,
            trng_scr4l_run4_rng,trng_scr4l_run4_max,
            trng_scr5l_run5_rng,trng_scr5l_run5_max,
            trng_scr6pl_run6p_rng,trng_scr6pl_run6p_max,
            trng_sec_cfg_sk_val,trng_sec_cfg_no_prgm,
            trng_sec_cfg_sh0,
            trng_int_ctrl_unused,trng_int_ctrl_frq_ct_fail,
            trng_int_ctrl_ent_val,trng_int_ctrl_hw_err,
            trng_int_mask_frq_ct_fail,trng_int_mask_ent_val,
            trng_int_mask_hw_err,
            trng_int_status_frq_ct_fail
            irqLevel" >
    <![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues
      \t};
      \t\n
   ]]>
   </variableTemplate>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Info)> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="trng_files" >
      <copy source="Project_Headers/trng.h"         target="Project_Headers/trng.h"          overwrite="true" derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="These settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

</peripheralPage>
