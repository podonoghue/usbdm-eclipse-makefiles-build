<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- adc0_s32k142.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Analogue to Digital Converter">

   <xi:include href="_default_instance.xml"/>
   <xi:include href="_mapPinsOption.xml"/>
   
   <choiceOption key="adc_cfg1_adiv" description="Clock Divide Select"
      toolTip="Selects the divide ratio used by the ADC to generate the internal clock ADCK">
      <choice value="0" name="Divide by 1" isDefault="true" />
      <choice value="1" name="Divide by 2" />
      <choice value="2" name="Divide by 4" />
      <choice value="3" name="Divide by 8" />
   </choiceOption>

   <floatOption key="clockFrequency" 
      constant="true"
      description="Frequency of ADC clock"
      toolTip="Determined from clock source and prescaler"
      derived="true"
      units="Hz"/>

   <choiceOption key="adc_cfg1_mode" description="Conversion mode selection"
      toolTip="Selects the ADC resolution mode">
      <choice value="0" name="8-bit single/9-bit differential" />
      <choice value="1" name="12-bit single/13-bit differential" />
      <choice value="2" name="10-bit single/11-bit differential" isDefault="true" />
   </choiceOption>

   <intOption key="adc_cfg2_smplts" description="Sample Time Configuration" 
      toolTip="Selects between different sample times based on the conversion mode selected\n
      Longer sample times are advantageous for high impedance sources and also reduces\n
      power consumption in continuous mode as conversion rate is reduced"
      value="2" min="2" max="256" offset="-1"
      />
      
   <choiceOption key="adc_sc2_refsel" description="Voltage Reference Selection"
      toolTip="Selects the voltage reference source used for conversions">
      <choice value="0" name="VRefH and VRefl" isDefault="true" />
      <choice value="1" name="Gnd and VrefOut(1.2V)" />
      <choice value="2" name="Reserved" />
      <choice value="3" name="Reserved" />
   </choiceOption>

   <binaryOption key="adc_sc2_dmaen" description="DMA Enable"
      toolTip="Enables use of DMA with ADC">
      <choice value="0" name="Disabled" isDefault="true" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <choiceOption key="adc_sc2_compare" description="Compare function"
      toolTip="Enables comparison of ADC result with CV1 and CV2" >
      <choice value="0" name="Disabled" isDefault="true" />
      <choice value="1" name="ADC &lt; low" />
      <choice value="2" name="ADC &gt;= low" />
      <choice value="3" name="(ADC &lt; low) or (high &lt; ADC)" />
      <choice value="4" name="(low &lt; ADC &lt; high)" />
      <choice value="5" name="(low &lt;= ADC &lt;= high)" />
      <choice value="6" name="(ADC &lt;= low) or (high &lt;= ADC)" />
   </choiceOption>

   <intOption key="low_comparison_value" description="ADC low comparison value" 
      toolTip="Low value for ADC automatic comparison\n
         This value is assumed unsigned"
      min="0" max="0xFFFF"
      />
   
   <intOption key="high_comparison_value" description="ADC high comparison value" 
      toolTip="High value for ADC automatic comparison\n
         This value is assumed unsigned"
      min="0" max="0xFFFF"
      />
   
   <intOption key="adc_cv1" description="ADC CV1 value" 
      toolTip="CV1 threshold value\n
         Either low or high value" 
      constant="true" 
      derived="true" />
   <intOption key="adc_cv2" description="ADC CV2 value" 
      toolTip="CV2 threshold value\n
         Either low or high value"  
      constant="true" 
      derived="true" />
   
   <intOption key="adc_sc2_acfe"  description="Compare Function Enable"               
      toolTip="Enable comparison" 
      constant="true" 
      derived="true" />
   <intOption key="adc_sc2_acfgt" description="Compare Function Greater Than Enable"  
      toolTip="Greater-than enable" 
      constant="true" 
      derived="true" />
   <intOption key="adc_sc2_acren" description="Compare Function Range Enable"         
      toolTip="Compare using range" 
      constant="true" 
      derived="true" />
   
   <binaryOption key="adc_sc2_adtrg" description="Conversion Trigger Select"
      toolTip="Selects the type of trigger used for initiating a conversion">
      <choice value="0" name="Software trigger (write to SC1A)" isDefault="true" />
      <choice value="1" name="Hardware trigger (ADHWT source)" />
   </binaryOption>
   
   <category name="Advanced" description="Advanced Options" >
      <aliasOption key="/SIM/sim_sopt7_adc$(_instance)alttrgen"  constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt7_adc$(_instance)pretrgsel" constant="false" optional="true"/>
      <aliasOption key="/SIM/sim_sopt7_adc$(_instance)trgsel"    constant="false" optional="true"/>
   </category>

   <xi:include href="_irqOption.xml"/>
      
   <template namespace="usbdm"><![CDATA[
   #ifndef USBDM_ADC_CLOCK_SOURCES_DEFINED
   #define USBDM_ADC_CLOCK_SOURCES_DEFINED
      \t/**
      \t * ADC input clock source.
      \t */
      \tenum AdcClockSource {
      \t   AdcClockSource_PccAdcClk  = ADC_CFG1_ADICLK(0), //!< Clock from PCC_ADCn multiplexor
      \t   AdcClockSource_Reserved1  = ADC_CFG1_ADICLK(1), //!< Reserved
      \t   AdcClockSource_Reserved2  = ADC_CFG1_ADICLK(2), //!< Reserved
      \t   AdcClockSource_Reserved3  = ADC_CFG1_ADICLK(3), //!< Reserved
      \t   AdcClockSource_Default    = AdcClockSource_PccAdcClk
      \t};
   #endif\n\n
   ]]></template>
   
   <template><![CDATA[
     \t/**
     \t *  Get input clock frequency for ADC
     \t *  
     \t *  @param adcClockSource Clock source chosen for ADC
     \t *
     \t *  @return Frequency in Hz
     \t */
     \tstatic unsigned getInputClockFrequency(AdcClockSource adcClockSource) {
     \t
     \t   switch (adcClockSource) {
     \t      case AdcClockSource_Default:
     \t         return PccInfo::getAdc$(_instance)Frequency();
     \t      default:
     \t         return 0;
     \t   }
     \t}
     
     \t/**
     \t *  Get input clock frequency for ADC
     \t *
     \t *  @return Frequency in Hz
     \t */
     \tstatic unsigned getInputClockFrequency() {
     \t   return getInputClockFrequency(static_cast<AdcClockSource>(adc->CFG1 & ADC_CFG1_ADICLK_MASK));
     \t}\n\n
   ]]></template>
   
   <template><![CDATA[
     \t//! Default resolution
     \tstatic constexpr uint32_t defaultAdcResolution = ADC_CFG1_MODE($(adc_cfg1_mode));

     \t//! Default value for ADCx_CFG1 register
     \tstatic constexpr uint32_t cfg1  = 
     \t    ADC_CFG1_ADICLK(0)|
     \t    ADC_CFG1_MODE($(adc_cfg1_mode))|
     \t    ADC_CFG1_ADIV($(adc_cfg1_adiv));
     
     \t//! Default value for ADCx_CFG2 register
     \t static constexpr uint32_t cfg2  = 
     \t    ADC_CFG2_SMPLTS($(adc_cfg2_smplts));

     
     \t//! Default value for ADCx_SC2 register
     \tstatic constexpr uint32_t sc2  =
     \t    ADC_SC2_ACFE($(adc_sc2_acfe))|
     \t    ADC_SC2_ACFGT($(adc_sc2_acfgt))|
     \t    ADC_SC2_ACREN($(adc_sc2_acren))|
     \t    ADC_SC2_REFSEL($(adc_sc2_refsel))|
     \t    ADC_SC2_DMAEN($(adc_sc2_dmaen))|
     \t    ADC_SC2_ADTRG($(adc_sc2_adtrg));
     
     \t//! Default value for ADCx_CV1 register
     \tstatic constexpr uint32_t cv1  = $(adc_cv1);
     
     \t//! Default value for ADCx_CV2 register
     \tstatic constexpr uint32_t cv2  = $(adc_cv2);\n\n
   ]]></template>
   
   <template key="/ADC/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_name)
   \t */
   \ttypedef AdcBase_T<$(_class)Info> $(_class);\n
   ]]></template>
      
   <signals/>
   
   <xi:include href="_clockOption.xml"/>

   <!-- validate
      class="net.sourceforge.usbdm.deviceEditor.validators.AdcValidate">
   </validate -->

   <projectActionList id = "adc_files" >
      <copy source="Project_Headers/adc_S32.h"                    target="Project_Headers/adc.h"                    overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-comparison-example.cpp" target="Snippets/analogue-comparison-example.cpp" overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-example.cpp"            target="Snippets/analogue-example.cpp"            overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-diff-example.cpp"       target="Snippets/analogue-diff-example.cpp"       overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-interrupt-example.cpp"  target="Snippets/analogue-interrupt-example.cpp"  overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-joystick-example.cpp"   target="Snippets/analogue-joystick-example.cpp"   overwrite="true"  derived="true" />
   </projectActionList>
   
</peripheralPage>
