<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- coredebug.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Core Debug">

   <xi:include href="default_instance.xml"/>

   <xi:include href="mapPinsOption.xml"/>

   <intOption key="coredebug_dfsr_external" condition="coredebug_dfsr_external_present"
      description="Indicates a debug event generated because of the assertion of EDBGRQ"
   />

   <intOption key="coredebug_dfsr_vcatch" condition="coredebug_dfsr_vcatch_present"
      description="Indicates triggering of a Vector catch"
   />

   <intOption key="coredebug_dfsr_dwttrap" condition="coredebug_dfsr_dwttrap_present"
      description="Indicates a debug event generated by the DWT"
   />

   <intOption key="coredebug_dfsr_bkpt" condition="coredebug_dfsr_bkpt_present"
      description="Indicates a debug event generated by BKPT instruction execution or a breakpoint match in FPB"
   />

   <intOption key="coredebug_dfsr_halted" condition="coredebug_dfsr_halted_present"
      description="Indicates a active halt request debug event"
   />

   <intOption key="coredebug_dcrsr_regwnr" condition="coredebug_dcrsr_regwnr_present"
      description="Specifies the access type for the transfer"
   />

   <intOption key="coredebug_dcrsr_regsel" condition="coredebug_dcrsr_regsel_present"
      description="Specifies the ARM core, special-purpose, or Floating-point register"
   />

<!-- Grahic here -->  

   <for keys="field:name"
        values="
">
      <variableTemplate variables="%(field)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %fieldAssignment
         \t}\n\n
      ]]></variableTemplate>
   </for>

<!--   ========== CoreDebug Init class =============================== -->

   <template key="init_description" namespace="all">
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init init {
      \t *
      \t *   // Setup values
      \t *   0,                                        // Indicates a debug event generated because of the assertion of EDBGRQ,
      \t *   0,                                        // Indicates triggering of a Vector catch,
      \t *   0,                                        // Indicates a debug event generated by the DWT,
      \t *   0,                                        // Indicates a debug event generated by BKPT instruction execution or a breakpoint match in FPB,
      \t *   0,                                        // Indicates a active halt request debug event,
      \t *   0,                                        // Specifies the access type for the transfer,
      \t *   0,                                        // Specifies the ARM core, special-purpose, or Floating-point register,
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure(init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm">
   <![CDATA[
      class $(_Class)BasicInfo {
      \t
      public:
      \t\n
   ]]>
   </template>

   <template namespace="usbdm">
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate namespace="usbdm"
      variables="coredebug_dfsr_external,coredebug_dfsr_vcatch,coredebug_dfsr_dwttrap,coredebug_dfsr_bkpt,coredebug_dfsr_halted"
   ><![CDATA[
      \t   /// Debug Fault Status Register
      \t   uint32_t dfsr = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm"
      variables="coredebug_dcrsr_regwnr,coredebug_dcrsr_regsel"
   ><![CDATA[
      \t   /// Debug Core Register Selector Register
      \t   uint32_t dcrsr = 0;\n\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template discardRepeats="true" key="/COREDEBUG/InitMethod" ><![CDATA[
      \t/**
      \t * Configure COREDEBUG from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t   enable();
      \t
      \t   coredebug->DFSR    = init.dfsr;
      \t   coredebug->DHCSR    = init.dhcsr;
      \t   coredebug->DCRSR    = init.dcrsr;
      \t   coredebug->DCRDR    = init.dcrdr;
      \t   coredebug->DEMCR    = init.demcr;
      \t
      \t   calibrate();
      \t}
      \t
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}\n
   ]]></template>

<!--   Constructors -->

   <for keys="r"
      values="
            coredebug_dfsr_external;
            coredebug_dfsr_vcatch;
            coredebug_dfsr_dwttrap;
            coredebug_dfsr_bkpt;
            coredebug_dfsr_halted;
            coredebug_dcrsr_regwnr;
            coredebug_dcrsr_regsel
            ">
      <variableTemplate namespace="usbdm"
         variables="%(r)"
         linePadding="xxx">
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(unsigned value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | value;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate
      separator=","
      terminator=","
      variables="

         "
   ><![CDATA[
      $(init_description)
      \ttypedef $(_Class)BasicInfo::Init Init;
      \t
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></variableTemplate>

   <template namespace="usbdm">
      <![CDATA[
      \t}; // $(_Class)::BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm">
      <![CDATA[
      }; // $(_Class)::BasicInfo\n\n
   ]]>
   </template>

<signals />

</peripheralPage>
