<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- wdog_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="External Watchdog Monitor">

   <xi:include href="_default_instance.xml"/>

   <xi:include href="_irqOption.xml"/>         

   <projectActionList id = "wdog_files" >
      <copy source="Project_Headers/wdog.h"         target="Project_Headers/wdog.h"          overwrite="true" derived="true" />
      <copy source="Snippets/wdog-example.cpp"      target="Snippets/wdog-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>
   
   <binaryOption key="wdogSystemEnable" 
      description="Enable Watchdog system"
      toolTip="This cabn be used to disable the entire watchdog system">
      <choice value="false" enum="Disabled" name="Watchdog system disabled" isDefault="true" />
      <choice value="true"  enum="Enabled"  name="Watchdog system enabled" />
   </binaryOption>  

   <binaryOption key="secondsSupport" 
      enabledBy="wdogSystemEnable" 
      description="Enable use of Seconds for time"
      toolTip="Use of floating point is necessary to support specifing watchdog timeouts in seconds in runtime code.\n
               This is seldom needed and the overhead can be avoided by disabling this option">
      <choice value="false" enum="Disabled" name="Seconds disabled" isDefault="true" />
      <choice value="true"  enum="Enabled"  name="Seconds enabled" />
   </binaryOption>  

   <!-- ************* WDOG_STCTRLH ****************** -->
  
   <binaryOption key="wdog_stctrlh_wdogen" 
      enabledBy="wdogSystemEnable" 
      enumStem="WdogEnable"
      enumType="uint16_t" 
      description="Watchdog enable"
      toolTip="Main enable for WDOG">
      <choice value="0" enum="Disabled" name="Watchdog disabled" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Watchdog enabled" />
   </binaryOption>  

   <binaryOption key="wdog_stctrlh_distestwdog" 
      enabledBy="wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      enumType="uint16_t" 
      enumStem="WdogTestMode" 
      description="Test mode disable"
      toolTip="Disables watchdog test mode until next reset">
      <choice value="0" enum="Enabled"  name="Test mode enabled" />
      <choice value="1" enum="Disabled" name="Test mode disabled" isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_waiten" 
      enabledBy="wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      enumType="uint16_t" 
      enumStem="WdogEnableInWait" 
      description="Enable watchdog in WAIT mode"
      toolTip="Control watchdog operation in WAIT mode">
      <choice value="1" enum="Enabled"  name="Enabled in WAIT mode" />
      <choice value="0" enum="Disabled" name="Disabled in WAIT mode" isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_stopen" 
      enabledBy="wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      enumType="uint16_t" 
      enumStem="WdogEnableInStop" 
      description="Enable watchdog in STOP mode"
      toolTip="Control watchdog operation in STOP mode">
      <choice value="1" enum="Enabled"  name="Enabled in STOP mode" />
      <choice value="0" enum="Disabled" name="Disabled in STOP mode" isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_dbgen" 
      enabledBy="wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      enumType="uint16_t" 
      enumStem="WdogEnableInDebug" 
      description="Enable watchdog in DEBUG mode"
      toolTip="Control watchdog operation in DEBUG mode">
      <choice value="1" enum="Enabled"  name="Enabled in DEBUG mode" />
      <choice value="0" enum="Disabled" name="Disabled in DEBUG mode" isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_allowupdate" 
      enabledBy="wdogSystemEnable" 
      enumType="uint16_t" 
      enumStem="WdogAllowUpdate" 
      description="Allow watchdog update"
      toolTip="Enables updates to watchdog write-once registers, after \n
               the reset-triggered initial configuration window closes\n
               This still requires the unlock sequence">
      <choice value="0" enum="Disabled" name="Update Disabled" />
      <choice value="1" enum="Enabled"  name="Update Enabled" isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_winen" 
      enabledBy="wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      enumType="uint16_t" 
      enumStem="WdogWindow" 
      description="Enable watchdog windowing mode"
      toolTip="Windowing mode only allows refresh during a restricted window">
      <choice value="0" enum="Disabled" name="Windowing mode is disabled" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Windowing mode is enabled" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_irqrsten" 
      enabledBy="wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      enumType="uint16_t" 
      enumStem="WdogIntBeforeReset" 
      description="Enable interrupt before reset"
      toolTip="Allows an interrupt handler to record state before the watchdog reset occurs">
      <choice value="0" enum="Disabled" name="Reset only" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Interrupt followed by reset" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_clksrc" 
      enabledBy="wdogSystemEnable" 
      target="inputClockFrequency"
      enumType="uint16_t" 
      enumStem="WdogClock" 
      description="Watchdog clock source"
      toolTip="Clock source for WDOG">
      <choice value="0" enum="LpoClk"       code="PmcInfo::getLpoClock()"  ref="/PMC/system_low_power_clock" name="LPO oscillator"   isDefault="true" />
      <choice value="1" enum="SystemBusClk" code="SystemBusClock"          ref="/SIM/system_bus_clock"       name="System bus clock" />
   </binaryOption>
   
   <clockCodeTemplate variable="wdog_stctrlh_clksrc"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setClockSource(%enumClass %enumParam) {
      \t   %defaultFieldExpression
      \t}

      \t/**
      \t * Get %description
      \t *
      %paramDescription
      \t
      \t * @return Clock frequency in Hz
      \t */
      \tstatic inline uint32_t getInputClockFrequency(%params) {
      \t   
      \t   switch(%enumParam) {
      \t      default:
      %body
      \t   }
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getInputClockFrequency() {
      \t   
      \t   return getInputClockFrequency((%enumClass)(%defaultMaskingExpression));
      \t}\n\n
   ]]></clockCodeTemplate>

   <intOption key="inputClockFrequency" 
      enabledBy="wdogSystemEnable" 
      constant="true"
      description="Watchdog Input clock frequency"
      toolTip="Determined from timer clock source"
      derived="true"
      units="Hz"/>
      
   <choiceOption key="wdog_presc_prescval" 
      enabledBy="wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      target="timerTickPeriod"
      description="Prescaler for the watchdog clock source" 
      enumStem="WdogPrescale"
      enumType="uint16_t"
      toolTip="This prescaler divides the input clock for the watchdog counter">
      <choice value="0"  name="Prescaler = 1"  ref="1.0/inputClockFrequency" enum="Direct" />
      <choice value="1"  name="Prescaler = 2"  ref="2.0/inputClockFrequency" enum="DivBy2" />
      <choice value="2"  name="Prescaler = 3"  ref="3.0/inputClockFrequency" enum="DivBy3" />
      <choice value="3"  name="Prescaler = 4"  ref="4.0/inputClockFrequency" enum="DivBy4" />
      <choice value="4"  name="Prescaler = 5"  ref="5.0/inputClockFrequency" enum="DivBy5" />
      <choice value="5"  name="Prescaler = 6"  ref="6.0/inputClockFrequency" enum="DivBy6" />
      <choice value="6"  name="Prescaler = 7"  ref="7.0/inputClockFrequency" enum="DivBy7" />
      <choice value="7"  name="Prescaler = 8"  ref="8.0/inputClockFrequency" enum="DivBy8" />
   </choiceOption>

   <floatOption key="timerTickPeriod" 
      enabledBy="wdogSystemEnable" 
      constant="true"
      description="Period of watchdog counter"
      toolTip="Determined from timer clock source and prescaler"
      derived="true"
      units="s"/>
      
   <floatOption key="wdog_timeoutPeriod" 
      enabledBy="wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      description="Watchdog Timeout"
      toolTip="The watchdog must be refreshed before this interval expires"
      valueFormat="%s_s"
      typeName="Seconds"
      units="s"
      value="1"/>
   
   <intOption key="wdog_timeout" 
      enabledBy="wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      ref="timerTickPeriod;(wdog_timeoutPeriod)/timerTickPeriod"
      constant="true"
      description="Watchdog Timeout in ticks"
      toolTip="The watchdog must be refreshed before the counter reaches this value"
      valueFormat="%s_ticks"
      typeName="Ticks"
      derived="true"
      min="550" max="4294967295" 
   />
   
   <floatOption key="wdog_windowPeriod" 
      enabledBy="wdog_stctrlh_winen&amp;&amp;wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      description="Watchdog Window"
      toolTip="Refresh of the watchdog may not be carried out before this interval has expired i.e.\n
               Refresh must occur within [window...timeout] if window mode is enabled.\n
               A refresh outside of this range resets the system"
      valueFormat="%s_s"
      typeName="Seconds"
      derived="true"
      units="s"
      value="0"/>
   
   <intOption key="wdog_window"
      enabledBy="wdog_stctrlh_winen&amp;&amp;wdog_stctrlh_wdogen&amp;&amp;wdogSystemEnable" 
      ref="timerTickPeriod;(wdog_windowPeriod)/timerTickPeriod"
      constant="true"
      description="Watchdog Window in ticks"
      toolTip="If windowed operation is enabled, then the watchdog can only be refreshed \n
               if the timer reaches a value greater than or equal to this window length value.\n
               A refresh outside of this window resets the system"
      valueFormat="%s_ticks"
      typeName="Ticks"
      value="0" min="0" max="4294967295" 
   />
   
   <template key="/SYSTEM/Includes" namespace="all" ><![CDATA[
      #include "wdog.h"\n
   ]]></template>
   
   <template key="/SYSTEM/WatchdogInitialise" namespace="all" ><![CDATA[
      \t/*
      \t * Initialise watchdog
      \t */
      \tUSBDM::Wdog::defaultConfigure();
      \t
   ]]></template>
   
   <setTemplate key="/WDOG/publicMethods" namespace="all" 
      variables="
         wdog_stctrlh_wdogen,
         wdog_stctrlh_clksrc,
         wdog_stctrlh_winen,
         wdog_stctrlh_irqrsten,
         wdog_stctrlh_dbgen,
         wdog_stctrlh_stopen,
         wdog_stctrlh_waiten"
   ><![CDATA[
      \t/**
      \t * Configure watchdog
      \t
      \t * @note This is a protected operation which uses unlock
      \t * @note Register changes after unlock is enabled
      \t
      %comments
      \t */
      \tstatic void configure(
      %params) {
      \t
      \t   // Protect sequence from interrupts
      \t   CriticalSection cs;
      \t
      \t   // Unlock before changing settings
      \t   wdog->UNLOCK = WdogUnlock_1;
      \t   wdog->UNLOCK = WdogUnlock_2;
      \t
      \t   // Read-back to delay until change effected
      \t   (void)(wdog->UNLOCK);
      \t
      \t   %register = %paramExpression;
      \t}
   ]]></setTemplate>
   
   <!-- ************* MISC ****************** -->
   <choiceOption key="wdog_constants1"
      hidden="true"
      enumStem="WdogRefresh"
      valueFormat="%s"
      description="Values for refresh and update registers"
      toolTip="" 
      >
      <choice value="0xA602" enum="1" name="1st refresh value"   />
      <choice value="0xB480" enum="2" name="2nd refresh value"  />
   </choiceOption>
   
   <choiceOption key="wdog_constants2"
      hidden="true"
      enumStem="WdogUnlock"
      valueFormat="%s"
      description="Values for refresh and update registers"
      toolTip="" 
      >
      <choice value="0xC520" enum="1"  name="1st unlock value"  />
      <choice value="0xD928" enum="2"  name="2nd unlock value"  />
   </choiceOption>
   
   <template><![CDATA[
      \t
      \t/**
      \t * Type definition for WDOG interrupt call back
      \t */
      \ttypedef void (*CallbackFunction)();\n\n
   ]]></template>

   <template key="/WDOG/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_name)
   \t */
   \tclass $(_class) : public $(_base_class)Base_T<$(_class)Info> {};\n
   ]]></template>
      
<!-- ========== WDOG Init class =============================== -->

   <template><![CDATA[
      \t/**
      \t * Class used to do initialisation of an WDOG
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * @code
      \t * static const Wdog$(_instance)::Init wdogInit {
      \t      WdogEnable_Enabled ,          // Watchdog enable - Watchdog enabled
      \t      WdogEnableInWait_Disabled ,   // Enable watchdog in WAIT mode - Disabled in WAIT mode
      \t      WdogEnableInStop_Disabled ,   // Enable watchdog in STOP mode - Disabled in STOP mode
      \t      WdogEnableInDebug_Disabled ,  // Enable watchdog in DEBUG mode - Disabled in DEBUG mode
      \t      WdogAllowUpdate_Enabled ,     // Allow watchdog update - Update Enabled
      \t      WdogWindow_Disabled ,         // Enable watchdog windowing mode - Windowing mode is disabled
      \t      WdogIntBeforeReset_Enabled ,  // Enable interrupt before reset - Interrupt followed by Reset
      \t      wdogCallback,                 // Call-back
      \t      WdogClock_SystemBusClk ,      // Watchdog clock source - System bus clock
      \t      NvicPriority_Normal,          // IRQ level for this peripheral - Normal
      \t      // Either
      \t      WdogPrescale_DivBy2 ,         // Prescaler for the watchdog clock source (must be in this order and last entries)
      \t      1000_ticks, 2000_ticks,       // Timeout and Window values
      \t      // **** OR ****
      \t      1000_ticks, 2000_ticks,       // Timeout and Window values (must be in this order and last entries)
      \t * };
      \t *
      \t * // Initialise WDOG from values specified above
      \t * Wdog$(_instance)::configure(wdogInit)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**                               
      \t    * Copy Constructor                  
      \t    */                             
      \t   constexpr Init(const Init &other) = delete;
      \t   
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]></template>
   
<!-- Member variables -->
  
   <setTemplate variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod" 
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></setTemplate>
   
   <initialValueTemplate 
      variables="
         wdog_timeout"
   ><![CDATA[
      \t   ///  %description
      \t   Seconds_Ticks %registerName = {0_ticks};\n\n
   ]]></initialValueTemplate>
   
   <initialValueTemplate 
      variables="
         wdog_window"
   ><![CDATA[
      \t   ///  %description
      \t   Seconds_Ticks %registerName = {0_ticks};\n\n
   ]]></initialValueTemplate>
   
   <initialValueTemplate 
      variables="
         wdog_stctrlh_distestwdog,
         wdog_stctrlh_waiten,
         wdog_stctrlh_stopen,
         wdog_stctrlh_dbgen,
         wdog_stctrlh_allowupdate,
         wdog_stctrlh_winen,
         wdog_stctrlh_irqrsten,
         wdog_stctrlh_clksrc,
         wdog_stctrlh_wdogen"
   ><![CDATA[
      \t   ///  Watchdog Status and Control Register High
      \t   uint16_t %registerName = 0;\n\n
   ]]></initialValueTemplate>
   
   <initialValueTemplate 
      variables="
         wdog_presc_prescval"
   ><![CDATA[
      \t   ///  %description
      \t   uint16_t %registerName = 0;\n\n
   ]]></initialValueTemplate>
   
   <initialValueTemplate variables="/PCR/nvic_irqLevel" codeGenCondition="irqHandlingMethod" 
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName = %enumClass_Normal;\n\n
   ]]></initialValueTemplate>

<!-- Configure methods -->
   <setTemplate key="/WDOG/InitMethod" namespace="all" discardRepeats="true"  
      variables="wdogSystemEnable" 
      codeGenCondition="wdogSystemEnable"
      ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}\n\n
   ]]></setTemplate>
  
   <setTemplate key="/WDOG/InitMethod" namespace="all" discardRepeats="true"  
      variables="wdogSystemEnable" 
      codeGenCondition="!wdogSystemEnable"
      ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Unlock before changing settings
      \t   wdog->UNLOCK  = WdogUnlock_1;
      \t   wdog->UNLOCK  = WdogUnlock_2;
      \t
      \t   // Read-back to delay until change effected
      \t   (void)(wdog->UNLOCK);
      \t
      \t   // Disable watchdog
      \t   wdog->STCTRLH = WdogEnable_Disabled|WdogAllowUpdate_Disabled;
      \t}\n\n
   ]]></setTemplate>
  
   <setTemplate variables="wdog_stctrlh_wdogen" discardRepeats="true" key="/WDOG/InitMethod" namespace="all" ><![CDATA[
      \t/**
      \t * Configure WDOG from values specified in init
      \t
      \t * @param init Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const typename Info::Init &init) {
      \t   
      \t   Seconds_Ticks timeout = init.timeout;
      \t   Seconds_Ticks window  = init.window;
      \t   uint16_t presc   = init.presc;
      \t   
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      // Only set call-back if feature enabled and non-null
      \t      if (init.callbackFunction != nullptr) {
      \t         setCallback(init.callbackFunction);
      \t      }
      \t   }
      #if $(/WDOG/secondsSupport)
      \t   if (presc == ((uint16_t)-1)) {
      \t   
      \t      // Calculate timeout, window and prescaler
      \t      ErrorCode rc = calculateTimingParameters(init.stctrlh, timeout, window, presc);
      \t      if (rc != E_NO_ERROR) {
      \t         return rc;
      \t      }
      \t   }
      #endif
      \t   // Protect sequence from interrupts
      \t   CriticalSection cs;
      \t   
      \t   // Unlock before changing settings
      \t   wdog->UNLOCK = WdogUnlock_1;
      \t   wdog->UNLOCK = WdogUnlock_2;
      \t   
      \t   // Read-back to delay until change effected
      \t   (void)(wdog->UNLOCK);
      \t   
      \t   // Configure watchdog
      \t   wdog->STCTRLH  = init.stctrlh;
      \t   wdog->PRESC    = presc;
      \t   wdog->WINH     = window.ticks>>16;
      \t   wdog->WINL     = window.ticks;
      \t   wdog->TOVALH   = timeout.ticks>>16;
      \t   wdog->TOVALL   = timeout.ticks;
      \t   
      \t   // For some reason this must be done after above
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></setTemplate>

<!-- Constructors -->
  
   <setTemplate 
      codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%enumParam0 = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>
   
   <setTemplate 
      variables="/PCR/nvic_irqLevel" 
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      #if $(/WDOG/irqHandlingMethod)
      \t      %registerName = %paramExpression;
      #else
      \t      (void)%paramExpression;
      #endif
      \t   }\n\n
   ]]></setTemplate>
   
   <for keys="r" values="
         wdog_stctrlh_distestwdog;
         wdog_stctrlh_waiten;
         wdog_stctrlh_stopen;
         wdog_stctrlh_dbgen;
         wdog_stctrlh_allowupdate;
         wdog_stctrlh_winen;
         wdog_stctrlh_irqrsten;
         wdog_stctrlh_clksrc;
         wdog_stctrlh_wdogen">
      <setTemplate variables="%(r)"
         linePadding="xxx" 
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %comments
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t   
         \t      %registerName |= %paramExpression;
         \t   }
         \t\n
      ]]></setTemplate>
   </for>
   
   <setTemplate variables="wdog_presc_prescval,wdog_timeout,wdog_window"
      linePadding="xxx" 
      nonDefaultParams="2" 
      params=",timeout,window"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description0, %description1 & %description2
      \t    *
      %paramDescription
      \t    */
      \t   constexpr Init(
      %params) : %registerName1(%enumParam1), %registerName2(%enumParam2), %registerName0(%enumParam0) {
      \t   }
      \t\n
   ]]></setTemplate>
   
   <setTemplate variables="wdog_timeoutPeriod,wdog_windowPeriod"
      linePadding="xxx"
      params="timeout,window"
   ><![CDATA[
      #if $(secondsSupport)
      \t   /**
      \t    * Constructor for %description0, %description1 & %description2
      \t    *
      %paramDescription
      \t    */
      \t   constexpr Init(
      %params) : %enumParam0(%enumParam0), %enumParam1(%enumParam1), presc((uint16_t)-1) {
      \t   }
      #endif\n
   ]]></setTemplate>
   
   <template ><![CDATA[
      \t};\n\n
   ]]></template>

<!-- Default Initialisation value -->
  
   <template><![CDATA[
      \t/**
      \t * Default initialisation value for Wdog$(_instance)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic const Init DefaultInitValue;\n\n
   ]]></template>

   <initialValueTemplate key="/HARDWARE/StaticObjects" namespace="all"
      separator=","
      terminator=","     
      variables="
         wdog_stctrlh_distestwdog,
         wdog_stctrlh_waiten,
         wdog_stctrlh_stopen,
         wdog_stctrlh_dbgen,
         wdog_stctrlh_allowupdate,
         wdog_stctrlh_winen,
         wdog_stctrlh_irqrsten,
         wdog_stctrlh_clksrc,
         wdog_stctrlh_wdogen,
         irqLevel,
         wdog_presc_prescval,
         wdog_timeout,
         wdog_window,
         "     
   ><![CDATA[
      \t/**
      \t * Default initialisation value for Wdog$(_instance)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tconst Wdog$(_instance)Info::Init Wdog$(_instance)Info::DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <validate class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" />
      
</peripheralPage>
