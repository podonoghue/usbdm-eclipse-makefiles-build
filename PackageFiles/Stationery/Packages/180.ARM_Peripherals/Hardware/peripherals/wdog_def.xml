<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- wdog_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Watchdog Monitor">

   <binaryOption key="irqEnable" ref="fullCodeSupport" hidden="true" derived="true" locked="true" >
      <choice value="false" name="false" />
      <choice value="true"  name="true"  />
   </binaryOption>

   <constant key="enableGettersAndSetters" type="Boolean" value="false" />

   <equation key="no_initvectors"             value="true"      />
   <equation key="irq_parameters"            value=""  />
   <equation key="irq_dummy_parameters"      value=""  />
   <equation key="irq_call"                  value=""  />
   <equation key="generateDefault"           value="true"         />
   <equation key="configureInStartupDefault" value="true"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <binaryOption key="fullCodeSupport"
      enabledBy="enablePeripheralSupport"
      description="Enable Watchdog system"
      toolTip="This allows the generation of minimal code to disable the watchdog system\n
               or provide full configuration support" >
      <choice value="false" enum="Disabled" name="Generate watchdog disable code only" isDefault="true" />
      <choice value="true"  enum="Enabled"  name="Generate full watchdog code support" />
   </binaryOption>

   <binaryOption key="secondsSupport"
      enabledBy="fullCodeSupport"
      description="Enable use of Seconds for time"
      toolTip="Use of floating point libraries is necessary to support routines using seconds in runtime code.\n
               This is seldom needed and the overhead can be avoided by disabling this option" >
      <choice value="false" enum="Disabled" name="Seconds support disabled" isDefault="true" />
      <choice value="true"  enum="Enabled"  name="Seconds support enabled" />
   </binaryOption>

   <!-- ____ STCTRLH ____ -->

   <binaryOption key="wdog_stctrlh_wdogen" condition="wdog_stctrlh_wdogen_present"
      enabledBy="fullCodeSupport"
      typeName="WdogEnable"
      baseType="uint16_t"
      toolTip="Main enable for WDOG\n
      When disabled, the watchdog timer is kept in the reset state, but the other exception conditions can \n
      still trigger a reset/interrupt"
      description="Watchdog enable" >
      <choice value="0" enum="Disabled" name="Watchdog disabled" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Watchdog enabled" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_distestwdog" condition="wdog_stctrlh_distestwdog_present"
      enabledBy="wdog_stctrlh_wdogen"
      baseType="uint16_t"
      typeName="WdogTestMode"
      toolTip="Disables watchdog test mode until next reset"
      description="Test mode disable" >
      <choice value="0" enum="Enabled"  name="Test mode enabled" />
      <choice value="1" enum="Disabled" name="Test mode disabled" isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_waiten" condition="wdog_stctrlh_waiten_present"
      enabledBy="wdog_stctrlh_wdogen"
      baseType="uint16_t"
      typeName="WdogEnableInWait"
      toolTip="Control watchdog operation in WAIT mode"
      description="Enable watchdog in WAIT mode" >
      <choice name="Disabled in WAIT mode"  value="0" enum="Disabled" isDefault="true" />
      <choice name="Enabled in WAIT mode"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="wdog_stctrlh_stopen" condition="wdog_stctrlh_stopen_present"
      enabledBy="wdog_stctrlh_wdogen"
      baseType="uint16_t"
      typeName="WdogEnableInStop"
      toolTip="Control watchdog operation in STOP mode"
      description="Enable watchdog in STOP mode" >
      <choice name="Disabled in STOP mode"  value="0" enum="Disabled" isDefault="true" />
      <choice name="Enabled in STOP mode"   value="1" enum="Enabled" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_dbgen" condition="wdog_stctrlh_dbgen_present"
      enabledBy="wdog_stctrlh_wdogen"
      baseType="uint16_t"
      typeName="WdogEnableInDebug"
      toolTip="Control watchdog operation in DEBUG mode"
      description="Enable watchdog in DEBUG mode" >
      <choice name="Disabled in DEBUG mode"  value="0" enum="Disabled" isDefault="true" />
      <choice name="Enabled in DEBUG mode"   value="1" enum="Enabled" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_allowupdate" condition="wdog_stctrlh_allowupdate_present"
      enabledBy="fullCodeSupport"
      baseType="uint16_t"
      typeName="WdogAllowUpdate"
      toolTip="Enables updates to watchdog write-once registers, after \n
               the reset-triggered initial configuration window closes\n
               This still requires the unlock sequence"
      description="Allow watchdog update"
      disabledValue="false" >
      <choice name="Update Disabled" value="0" enum="Disabled" />
      <choice name="Update Enabled"  value="1" enum="Enabled"  isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_winen" condition="wdog_stctrlh_winen_present"
      enabledBy="wdog_stctrlh_wdogen"
      baseType="uint16_t"
      typeName="WdogWindow"
      toolTip="Windowing mode only allows refresh during a restricted window"
      description="Enable watchdog windowing mode" >
      <choice name="Windowing mode disabled" value="0" enum="Disabled" isDefault="true" />
      <choice name="Windowing mode enabled"  value="1" enum="Enabled"  />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_irqrsten" condition="wdog_stctrlh_irqrsten_present"
      enabledBy="wdog_stctrlh_wdogen"
      baseType="uint16_t"
      typeName="WdogAction"
      toolTip="This write-once bit allows an interrupt handler to record state prior to forcing a reset.\n
               The reset occurs after a delay of 128 bus clocks following the interrupt vector fetch."
      description="Action on watchdog event" >
      <choice name="Immediate Reset"             value="0" enum="ImmediateReset" isDefault="true" />
      <choice name="Interrupt followed by reset" value="1" enum="ResetAfterInterrupt"   />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_clksrc" condition="wdog_stctrlh_clksrc_present"
      enabledBy="fullCodeSupport"
      target="inputClockFrequency"
      baseType="uint16_t"
      typeName="WdogClock"
      description="Watchdog clock source"
      toolTip="Clock source for watchdog" >
      <choice name="1 kHz low-power oscillator (LPOCLK)"  value="0" enum="LpoClk"       code="SimInfo::getLpoClock()"  ref="/PMC/system_low_power_clock"  isDefault="true" />
      <choice name="System bus clock"                     value="1" enum="SystemBusClk" code="SystemBusClock"          ref="/SIM/system_bus_clock[0]"     />
   </binaryOption>

   <intOption key="inputClockFrequency"
      enabledBy="fullCodeSupport"
      locked="true"
      description="Watchdog Input clock frequency"
      toolTip="Determined from timer clock source"
      derived="true"
      units="Hz"/>

   <!-- ____ PRESC ____ -->

   <choiceOption key="wdog_presc_prescval" condition="wdog_presc_prescval_present"
      enabledBy="wdog_stctrlh_wdogen"
      target="timerTickPeriod"
      typeName="WdogPrescale"
      baseType="uint16_t"
      description="Prescaler for the watchdog clock source"
      toolTip="This prescaler divides the input clock for the watchdog counter" >
      <choice value="0"  name="Prescaler = 1"  ref="1.0/inputClockFrequency" enum="Direct" />
      <choice value="1"  name="Prescaler = 2"  ref="2.0/inputClockFrequency" enum="DivBy2" />
      <choice value="2"  name="Prescaler = 3"  ref="3.0/inputClockFrequency" enum="DivBy3" />
      <choice value="3"  name="Prescaler = 4"  ref="4.0/inputClockFrequency" enum="DivBy4" />
      <choice value="4"  name="Prescaler = 5"  ref="5.0/inputClockFrequency" enum="DivBy5" />
      <choice value="5"  name="Prescaler = 6"  ref="6.0/inputClockFrequency" enum="DivBy6" />
      <choice value="6"  name="Prescaler = 7"  ref="7.0/inputClockFrequency" enum="DivBy7" />
      <choice value="7"  name="Prescaler = 8"  ref="8.0/inputClockFrequency" enum="DivBy8" />
   </choiceOption>

   <floatOption key="timerTickPeriod"
      enabledBy="fullCodeSupport"
      locked="true"
      description="Period of watchdog counter"
      toolTip="Determined from timer clock source and prescaler"
      derived="true"
      units="s"/>

   <floatOption key="wdog_timeoutPeriod"
      enabledBy="wdog_stctrlh_wdogen"
      description="Watchdog Timeout"
      toolTip="The watchdog must be refreshed before this interval expires"
      units="s"
      value="1"/>

   <intOption key="wdog_timeout"
      enabledBy="wdog_stctrlh_wdogen"
      ref="(wdog_timeoutPeriod)/timerTickPeriod#timerTickPeriod"
      locked="true"
      units="ticks"
      description="Watchdog Timeout in ticks"
      toolTip="The watchdog must be refreshed before the counter reaches this value"
      derived="true"
      min="200" max="0xFFFF"
      disabledValue="0xFFFF"
   />

   <floatOption key="wdog_windowPeriod"
      valueFormat="%s"
      enabledBy="wdog_stctrlh_winen&amp;&amp;wdog_stctrlh_wdogen"
      description="Watchdog Window"
      toolTip="Refresh of the watchdog may not be carried out before this interval has expired i.e.\n
               Refresh must occur within [window...timeout] if window mode is enabled.\n
               A refresh outside of this range resets the system"
      derived="true"
      units="s"
      value="0"/>

   <intOption key="wdog_window"
      enabledBy="wdog_stctrlh_winen&amp;&amp;wdog_stctrlh_wdogen"
      ref="(wdog_windowPeriod)/timerTickPeriod#timerTickPeriod"
      locked="true"
      units="ticks"
      description="Watchdog Window in ticks"
      toolTip="If windowed operation is enabled, then the watchdog can only be refreshed \n
               if the timer reaches a value greater than or equal to this window length value.\n
               A refresh outside of this window resets the system"
      value="0" min="0" max="0xFFFF"
      disabledValue="0xFFFF"
   />

   <!-- ____ STCTRLL ____ -->

   <binaryOption key="wdog_stctrll_intflg" condition="wdog_stctrll_intflg_present"
      hidden="true"
      typeName="WdogException"
      toolTip="It is set when an exception occurs. IRQRSTEN = 1 is a precondition to set this flag.\n
               INTFLG = 1 results in an interrupt being issued followed by a reset, WCT time later. \n
               The interrupt can be cleared by writing 1 to this bit. It also gets cleared on a system reset"
      description="Interrupt flag." >
      <choice name="No interrupt"       value="0" enum="NoInterrupt"/>
      <choice name="Interrupt pending"  value="1" enum="InterruptPending"/>
   </binaryOption >

   <!-- ____ RSTCNT ____ -->

   <intOption key="wdog_rstcnt_rstcnt" condition="wdog_rstcnt_rstcnt_present"
      derived="true"
      hidden="true"
      typeName="uint16_t"
      description="Counts the number of times the watchdog resets the system."
      toolTip="This register is reset only on a POR. Writing 1 to the bit to be cleared, enables you to clear the contents of this register"
   />

   <!-- ____ PRESC ____ -->

   <choiceOption key="wdog_constants1"
      hidden="true"
      typeName="WdogRefresh"
      valueFormat="%s"
      description="Watchdog refresh"
      toolTip="Key values needed for refreshing the WDOG"
      >
      <choice value="0xA602" enum="1" name="1st refresh value"   />
      <choice value="0xB480" enum="2" name="2nd refresh value"  />
   </choiceOption>

   <choiceOption key="wdog_constants2"
      hidden="true"
      typeName="WdogUnlock"
      valueFormat="%s"
      description="Watchdog unlock"
      toolTip="Key values needed for unlocking the WDOG"
      >
      <choice value="0xC520" enum="1"  name="1st unlock value"  />
      <choice value="0xD928" enum="2"  name="2nd unlock value"  />
   </choiceOption>

   <!-- ____ Getters and Setters ____________ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)">
   <![CDATA[
      \t/**
      \t * Calculate clock frequency settings
      \t *
      \t * @param[in]     clockFrequency Input clock frequency to WDOG
      \t * @param[in,out] timeout        .seconds Timeout value in seconds -> .ticks   Timeout value in ticks
      \t * @param[in,out] window         .seconds  Window value in seconds -> .ticks   Window value in ticks
      \t * @param[out]    presc          Calculated prescale value (PRESC.PRESCVAL)
      \t *
      \t * @return Error code
      \t */
      \tstatic ErrorCode calculateTimingParameters(
      \t      uint32_t       clockFrequency,
      \t      Seconds_Ticks &timeout,
      \t      Seconds_Ticks &window,
      \t      uint16_t      &presc) {
      \t
      \t   float constexpr maxCount = ~1UL;
      \t
      \t   if ((int)window.toTicks()>(int)timeout.toTicks()) {
      \t      return E_ILLEGAL_PARAM;
      \t   }
      \t   Seconds maxTime = maxCount/clockFrequency;
      \t
      \t   for(int prescale=1; prescale<=8; prescale++) {
      \t      float counterFrequency = clockFrequency/(float)prescale;
      \t      maxTime = maxCount/clockFrequency;
      \t      if (maxTime > timeout.toSeconds()) {
      \t         timeout.fromTicks(Ticks(roundf(float(timeout.toSeconds())*counterFrequency)));
      \t         window.fromTicks(Ticks(roundf(float(window.toSeconds())*counterFrequency)));
      \t         presc = WDOG_PRESC_PRESCVAL(prescale-1);
      \t         return E_NO_ERROR;
      \t      }
      \t   }
      \t   return setErrorCode(E_TOO_LARGE);
      \t}
      \t\n
   ]]>
   </template>

   <template where="info" codeGenCondition="$(_InfoGuard)">
   <![CDATA[
      \t/**
      \t * Writing the sequence of 0xA602 (WdogRefresh_1) followed by 0xB480 (WdogRefresh_2) within 20 bus clock
      \t * cycles refreshes the WDOG and prevents it from resetting the system. Writing a value other than
      \t * the above mentioned sequence or if the sequence is longer than 20 bus cycles, resets the system,
      \t * or if IRQRSTEN is set, it interrupts and then resets the system.
      \t *
      \t * @param wdogRefresh_1 1st value to write (WdogRefresh_1)
      \t * @param wdogRefresh_2 2nd value to write (WdogRefresh_2)
      \t *
      \t * @note This operation is time-critical so interrupts are disabled during refresh
      \t * @note Due to clock domain issues it is necessary to wait at least 5 clock
      \t *       cycles between attempted refreshes.  This is most significant when
      \t *       using the LPO clock source (i.e. at least 5 ms in that case).
      \t */
      \tstatic void refresh(WdogRefresh wdogRefresh_1, WdogRefresh wdogRefresh_2) {
      \t
      \t   // Protect sequence from interrupts
      \t   CriticalSection cs;
      \t
      \t   wdog->REFRESH = wdogRefresh_1;
      \t   wdog->REFRESH = wdogRefresh_2;
      \t}
      \t/**
      \t * Gets watchdog reset count.
      \t * This is a count of the number of watchdog timeout resets since power-on reset
      \t *
      \t * @return Count of timeout resets
      \t */
      \tstatic uint16_t getResetCount() {
      \t   return wdog->RSTCNT;
      \t}
      \t
      \t/**
      \t * Gets watchdog timer value.
      \t *
      \t * @return current timer value
      \t */
      \tstatic Ticks getTimer() {
      \t   return Ticks((wdog->TMROUTH<<16)|wdog->TMROUTL);
      \t}
      \t
      \t/**
      \t * Sets watchdog pre-scaler and time-out value in ticks.
      \t * The watchdog clock is divided by this value to provide the prescaled WDOG_CLK
      \t *
      \t * @param wdogPrescale This prescaler divides the input clock for the watchdog counter
      \t * @param timeout      The watchdog must be refreshed before the counter reaches this value
      \t * @param window       If windowed operation is enabled, then the watchdog can only be refreshed
      \t *        if the timer reaches a value greater than or equal to this window length value.
      \t *        A refresh outside of this window resets the system
      \t *
      \t * @note This is a protected operation which uses unlock
      \t */
      \tstatic void setTimeout(
      \t         WdogPrescale wdogPrescale,
      \t         Ticks        timeout,
      \t         Ticks        window = 0_ticks) {
      \t
      \t   // Disable interrupts while accessing watchdog
      \t   CriticalSection cs;
      \t
      \t   // Unlock before changing settings
      \t   wdog->UNLOCK = WdogUnlock_1;
      \t   wdog->UNLOCK = WdogUnlock_2;
      \t
      \t   wdog->PRESC  = wdogPrescale;
      \t   wdog->TOVALH = (unsigned)timeout>>16;
      \t   wdog->TOVALL = (unsigned)timeout;
      \t   wdog->WINH   = (unsigned)window>>16;
      \t   wdog->WINL   = (unsigned)window;
      \t}
      \t/**
      \t * Lock watchdog register against further changes
      \t */
      \tstatic void lockRegisters() {
      \t   // Protect sequence from interrupts
      \t   CriticalSection cs;
      \t
      \t   // Unlock before changing settings
      \t   wdog->UNLOCK = WdogUnlock_1;
      \t   wdog->UNLOCK = WdogUnlock_2;
      \t
      \t   // Read-back to delay until change effected
      \t   (void)(wdog->UNLOCK);
      \t
      \t   wdog->STCTRLH = wdog->STCTRLH & ~WDOG_STCTRLH_ALLOWUPDATE_MASK;
      \t}
      \t
      \t/**
      \t * Enable/disable interrupts
      \t *
      \t * @param[in]  enable        True => enable, False => disable
      \t *
      \t * @note This is a protected operation which requires unlock
      \t */
      \tstatic void enableInterrupt(bool enable=true) {
      \t   // Protect sequence from interrupts
      \t   CriticalSection cs;
      \t   if (enable) {
      \t      wdog->STCTRLH = wdog->STCTRLH | WDOG_STCTRLH_IRQRSTEN_MASK;
      \t   }
      \t   else {
      \t      wdog->STCTRLH = wdog->STCTRLH & ~WDOG_STCTRLH_IRQRSTEN_MASK;
      \t   }
      \t}
      \t\n
   ]]>
   </template>

   <template where="info" codeGenCondition="secondsSupport">
   <![CDATA[
      \t/**
      \t * Sets the watchdog time-out value in seconds.
      \t *
      \t * @param timeout The watchdog must be refreshed before this interval expires
      \t * @param window  Refresh of the watchdog may not be carried out before this interval has expired i.e.
      \t *        Refresh must occur within [window...timeout] if window mode is enabled.
      \t *        A refresh outside of this range resets the system
      \t *
      \t * @note This is a protected operation which uses unlock
      \t * @note This adjusts both the prescaler and the timeout value.
      \t */
      \tstatic ErrorCode setTimeout(
      \t         Seconds timeout,
      \t         Seconds window  = 0.0_s) {
      \t
      \t   unsigned prescaler;
      \t   uint64_t timerValue;
      \t   uint32_t inputClockFreq = WdogInfo::getInputClockFrequency();
      \t
      \t   for (prescaler = 1; prescaler++; ) {
      \t      if (prescaler>8) {
      \t         return setErrorCode(E_TOO_LARGE);
      \t      }
      \t      timerValue = uint64_t((float(timeout)*inputClockFreq)/prescaler);
      \t      if (timerValue <= 0xFFFFFFFF) {
      \t         break;
      \t      }
      \t   }
      \t   uint32_t windowValue = uint32_t((float(window)*inputClockFreq)/prescaler);
      \t   setTimeout((WdogPrescale)WDOG_PRESC_PRESCVAL(prescaler-1), Ticks(uint32_t(timerValue)), Ticks(windowValue));
      \t   return E_NO_ERROR;
      \t}
      \t\n
   ]]>
   </template>

   <clockCodeTemplate variable="wdog_stctrlh_clksrc" codeGenCondition="fullCodeSupport"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t * (%variables)
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setClockSource(%paramType %paramName) {
      \t   %fieldAssignment;
      \t}

      \t/**
      \t * Get %description
      \t * (%variables)
      \t *
      %paramDescription
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic inline uint32_t getInputClockFrequency(%params) {
      \t
      \t   switch(%paramName) {
      \t      default:
      %body
      \t   }
      \t}
      \t
      \t/**
      \t * Get %description
      \t * (%variables)
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getInputClockFrequency() {
      \t
      \t   return getInputClockFrequency((%paramType)(%maskingExpression));
      \t}\n\n
   ]]></clockCodeTemplate>

   <!-- ________ WDOG Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   WdogEnable_Enabled ,          // Watchdog enable
      \t *   WdogEnableInWait_Disabled ,   // Enable watchdog in WAIT mode
      \t *   WdogEnableInStop_Disabled ,   // Enable watchdog in STOP mode
      \t *   WdogEnableInDebug_Disabled ,  // Enable watchdog in DEBUG mode
      \t *   WdogAllowUpdate_Enabled ,     // Allow watchdog update
      \t *   WdogWindow_Disabled ,         // Enable watchdog windowing mode
      \t *   WdogAction_ImmediateReset ,   // Action on watchdog event
      \t *   WdogClock_SystemBusClk ,      // Watchdog clock source
      \t *   NvicPriority_Normal,          // IRQ level for this peripheral
      \t *   $(_name)Callback,                // Call-back to execute on event - call-back function name
      \t *   // Either
      \t *   WdogPrescale_Direct ,         // Prescaler for the watchdog clock source (must be in this order)
      \t *   2000_ticks, 1000_ticks,       // Timeout and Window values
      \t *   // ____ OR ____
      \t *   20_seconds, 10_seconds,       // Timeout and Window values (must be in this order)
      \t *   // Option
      \t *   Wdog::DefaultInitValue,       // Take base values from DefaultInitValue
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tprivate:
      \t   /**
      \t    * Prevent implicit parameter conversions
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(Types...) = delete;
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      %multilineDescription
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : wdog_stctrlh_distestwdog,wdog_stctrlh_bytesel,
                             wdog_stctrlh_testsel,wdog_stctrlh_testwdog,
                             wdog_stctrlh_waiten,wdog_stctrlh_stopen,wdog_stctrlh_dbgen,
                             wdog_stctrlh_allowupdate,wdog_stctrlh_winen,
                             wdog_stctrlh_irqrsten,wdog_stctrlh_clksrc,
                             wdog_stctrlh_wdogen                                  :   0      ;
               %baseType   : wdog_presc_prescval                                  :   0      ;
               %paramType  : /PCR/nvic_irqLevel                                   :   %defaultValue   " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="fullCodeSupport"
      variables="wdog_timeout"
   ><![CDATA[
      \t   ///  %description or seconds
      \t   Seconds_Ticks %registerName;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="fullCodeSupport"
      variables="wdog_window"
   ><![CDATA[
      \t   ///  %description or seconds
      \t   Seconds_Ticks %registerName;\n\n
   ]]></variableTemplate>

   <!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    * (%variables)
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="/PCR/nvic_irqLevel;
            wdog_stctrlh_distestwdog;wdog_stctrlh_bytesel;
            wdog_stctrlh_testsel;wdog_stctrlh_testwdog;
            wdog_stctrlh_waiten;wdog_stctrlh_stopen;wdog_stctrlh_dbgen;
            wdog_stctrlh_allowupdate;wdog_stctrlh_winen;
            wdog_stctrlh_irqrsten;wdog_stctrlh_clksrc;
            wdog_stctrlh_wdogen
            " >
      <variableTemplate where="basicInfo" codeGenCondition="fullCodeSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%variables)
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="fullCodeSupport"
      variables="wdog_presc_prescval,wdog_timeout,wdog_window"
      linePadding="xxx"
      nonDefaultParams="2"
      params=",timeout,window"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description0, %description1 & %description2
      \t    *
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%registerName1.fromTicks(%paramName1);
      \t      this->%registerName2.fromTicks(%paramName2);
      \t      this->%registerName0 = %paramName0;
      \t   }
      \t\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="secondsSupport"
      variables="wdog_timeoutPeriod,wdog_windowPeriod"
      linePadding="xxx"
      params="timeout,window"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description0 and %description1
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0.fromSeconds(%paramName0);
      \t      this->%paramName1.fromSeconds(%paramName1);
      \t      this->presc = ((uint16_t)-1);
      \t   }\n
   ]]></variableTemplate>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Configure methods ____ -->


   <template codeGenCondition="!fullCodeSupport"  ><![CDATA[
      \t/**
      \t * Disable $(_BASENAME)
      \t */
      \tstatic inline void disableWdog() {
      \t
      \t   if (wdog->STCTRLH&WdogEnable_Enabled) {
      \t
      \t      // Unlock before changing settings
      \t      wdog->UNLOCK  = WdogUnlock_1;
      \t      wdog->UNLOCK  = WdogUnlock_2;
      \t
      \t      // Read-back to delay until change effected
      \t      (void)(wdog->UNLOCK);
      \t
      \t      // Disable watchdog
      \t      wdog->STCTRLH = WdogEnable_Disabled|WdogAllowUpdate_Disabled;
      \t   }
      \t}
      \t\n
   ]]></template>

   <template codeGenCondition="fullCodeSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const Init &init) {
      \t
      \t   enable();
      \t
      \t   Seconds_Ticks timeout = init.timeout;
      \t   Seconds_Ticks window  = init.window;
      \t   uint16_t presc        = init.presc;
      \t\n
   ]]>
   </template>
   <template codeGenCondition="irqHandlingMethod" condition="irqHandlingMethod" >
   <![CDATA[
      \t   // Configure call-backs
      \t   setCallback(init.callbackFunction);\n
   ]]>
   </template>
   <template codeGenCondition="fullCodeSupport&amp;&amp;secondsSupport" ><![CDATA[
      \t   if (presc == ((uint16_t)-1)) {
      \t
      \t      // Calculate timeout, window and prescaler
      \t      uint32_t clockFrequency = WdogInfo::getInputClockFrequency((WdogClock)(init.stctrlh & WDOG_STCTRLH_CLKSRC_MASK));
      \t      ErrorCode rc = calculateTimingParameters(clockFrequency, timeout, window, presc);
      \t      if (rc != E_NO_ERROR) {
      \t         return rc;
      \t      }
      \t   }\n
   ]]></template>
   <template codeGenCondition="fullCodeSupport" >
   <![CDATA[
      \t   // Protect sequence from interrupts
      \t   CriticalSection cs;
      \t
      \t   // Unlock before changing settings
      \t   wdog->UNLOCK = WdogUnlock_1;
      \t   wdog->UNLOCK = WdogUnlock_2;
      \t
      \t   // Read-back to delay until change effected
      \t   (void)(wdog->UNLOCK);
      \t
   ]]>
   </template>
   <for keys=
             " var                                                    : statement            "
      values=" wdog_stctrlh_distestwdog,wdog_stctrlh_bytesel,
               wdog_stctrlh_testsel,wdog_stctrlh_testwdog,
               wdog_stctrlh_waiten,wdog_stctrlh_stopen,wdog_stctrlh_dbgen,
               wdog_stctrlh_allowupdate,wdog_stctrlh_winen,
               wdog_stctrlh_irqrsten,wdog_stctrlh_clksrc,
               wdog_stctrlh_wdogen                                    : %configRegAssignment  ;
               wdog_presc_prescval                                    : %register    = %registerName " >
      <variableTemplate codeGenCondition="fullCodeSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="fullCodeSupport" >
   <![CDATA[
      \t   wdog->WINH     = window.toTicks()>>16;
      \t   wdog->WINL     = window.toTicks();
      \t   wdog->TOVALH   = timeout.toTicks()>>16;
      \t   wdog->TOVALL   = timeout.toTicks();
      \t
      \t   // For some reason this must be done after above
      \t   enableNvicInterrupts(init.irqlevel);
      \t
      \t   return E_NO_ERROR;
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="fullCodeSupport"
      separator=","
      terminator=","
      padToComments="35"
      variables="
            wdog_stctrlh_wdogen,
            wdog_stctrlh_distestwdog,
            wdog_stctrlh_waiten,
            wdog_stctrlh_stopen,
            wdog_stctrlh_dbgen,
            wdog_stctrlh_allowupdate,
            wdog_stctrlh_winen,
            wdog_stctrlh_irqrsten,
            wdog_stctrlh_clksrc,
            wdog_presc_prescval,
            wdog_timeout,
            wdog_window
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tusing $(_Class) = $(_Class)Info;
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="wdog_files" >
      <copy source="Project_Headers/wdog.h"         target="Project_Headers/wdog.h"          overwrite="true" derived="true" />
      <copy source="Snippets/wdog-example.cpp"      target="Snippets/wdog-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>

   <!-- _____________ Startup __________________ -->

   <template key="/SYSTEM/Includes" codeGenCondition="configurePeripheralInStartUp" ><![CDATA[
      #include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/WatchdogInitialise" codeGenCondition="configurePeripheralInStartUp&amp;&amp;!fullCodeSupport" ><![CDATA[
      \t/*
      \t * Disable watchdog
      \t */
      \tUSBDM::Wdog::disableWdog();
      \t
   ]]></template>

   <template key="/SYSTEM/WatchdogInitialise" codeGenCondition="configurePeripheralInStartUp&amp;&amp;fullCodeSupport" ><![CDATA[
      \t/*
      \t * Initialise watchdog
      \t */
      \tUSBDM::Wdog::defaultConfigure();
      \t\n
   ]]></template>

   <!-- _____________ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration" >
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <aliasOption key="/SIM/sim_scgc4_ewm" locked="false" optional="true" />
   </category>

   <signals enabledBy="fullCodeSupport" locked="!/PCR/_present" />

</peripheralPage>
