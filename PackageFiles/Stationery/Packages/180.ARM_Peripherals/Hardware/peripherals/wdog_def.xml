<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- wdog_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Watchdog Monitor">

   <constant key="suppressInstance"         type="Boolean" value="false"         />
   <constant key="irq_parameters"           type="String"  value="&quot;&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;&quot;"  />
   <constant key="isGeneratedByDefault"     type="Boolean" value="true"          />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Structname)BasicInfo&quot;" />

   <!--binaryOption key="enablePeripheralSupport"
      description="Enable Watchdog system"
      toolTip="This can be used to disable the entire watchdog system">
      <choice value="false" enum="Disabled" name="Watchdog system disabled" isDefault="true" />
      <choice value="true"  enum="Enabled"  name="Watchdog system enabled" />
   </binaryOption -->

   <binaryOption key="secondsSupport"
      enabledBy="enablePeripheralSupport"
      description="Enable use of Seconds for time"
      toolTip="Use of floating point is necessary to support specifing watchdog timeouts in seconds in runtime code.\n
               This is seldom needed and the overhead can be avoided by disabling this option">
      <choice value="false" enum="Disabled" name="Seconds support disabled" isDefault="true" />
      <choice value="true"  enum="Enabled"  name="Seconds support enabled" />
   </binaryOption>

   <!-- ************* STCTRLH ****************** -->

   <binaryOption key="wdog_stctrlh_wdogen" condition="wdog_stctrlh_wdogen_present"
      enabledBy="enablePeripheralSupport"
      typeName="WdogEnable"
      enumType="uint16_t"
      toolTip="Main enable for WDOG\n
      When disabled, the watchdog timer is kept in the reset state, but the other exception conditions can \n
      still trigger a reset/interrupt"
      description="Watchdog enable" >
      <choice value="0" enum="Disabled" name="Watchdog disabled" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Watchdog enabled" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_distestwdog" condition="wdog_stctrlh_distestwdog_present"
      enabledBy="wdog_stctrlh_wdogen"
      enumType="uint16_t"
      typeName="WdogTestMode"
      toolTip="Disables watchdog test mode until next reset"
      description="Test mode disable" >
      <choice value="0" enum="Enabled"  name="Test mode enabled" />
      <choice value="1" enum="Disabled" name="Test mode disabled" isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_waiten" condition="wdog_stctrlh_waiten_present"
      enabledBy="wdog_stctrlh_wdogen"
      enumType="uint16_t"
      typeName="WdogEnableInWait"
      toolTip="Control watchdog operation in WAIT mode"
      description="Enable watchdog in WAIT mode" >
      <choice name="Enabled in WAIT mode"  value="1" enum="Enabled"   />
      <choice name="Disabled in WAIT mode" value="0" enum="Disabled" isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_stopen" condition="wdog_stctrlh_stopen_present"
      enabledBy="wdog_stctrlh_wdogen"
      enumType="uint16_t"
      typeName="WdogEnableInStop"
      toolTip="Control watchdog operation in STOP mode"
      description="Enable watchdog in STOP mode" >
      <choice name="Enabled in STOP mode"  value="1" enum="Enabled"  />
      <choice name="Disabled in STOP mode" value="0" enum="Disabled" isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_dbgen" condition="wdog_stctrlh_dbgen_present"
      enabledBy="wdog_stctrlh_wdogen"
      enumType="uint16_t"
      typeName="WdogEnableInDebug"
      toolTip="Control watchdog operation in DEBUG mode"
      description="Enable watchdog in DEBUG mode" >
      <choice name="Enabled in DEBUG mode"  value="1" enum="Enabled"  />
      <choice name="Disabled in DEBUG mode" value="0" enum="Disabled" isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_allowupdate" condition="wdog_stctrlh_allowupdate_present"
      enabledBy="enablePeripheralSupport"
      enumType="uint16_t"
      typeName="WdogAllowUpdate"
      toolTip="Enables updates to watchdog write-once registers, after \n
               the reset-triggered initial configuration window closes\n
               This still requires the unlock sequence"
      description="Allow watchdog update" >
      <choice name="Update Disabled" value="0" enum="Disabled" />
      <choice name="Update Enabled"  value="1" enum="Enabled"  isDefault="true" />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_winen" condition="wdog_stctrlh_winen_present"
      enabledBy="wdog_stctrlh_wdogen"
      enumType="uint16_t"
      typeName="WdogWindow"
      toolTip="Windowing mode only allows refresh during a restricted window"
      description="Enable watchdog windowing mode" >
      <choice name="Windowing mode disabled" value="0" enum="Disabled" isDefault="true" />
      <choice name="Windowing mode enabled"  value="1" enum="Enabled"  />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_irqrsten" condition="wdog_stctrlh_irqrsten_present"
      enabledBy="wdog_stctrlh_wdogen"
      enumType="uint16_t"
      typeName="WdogAction"
      toolTip="This write-once bit allows an interrupt handler to record state prior to forcing a reset"
      description="Controls interrupt before reset" >
      <choice name="Immediate Reset"             value="0" enum="ImmediateReset" isDefault="true" />
      <choice name="Interrupt followed by reset" value="1" enum="ResetAfterInterrupt"   />
   </binaryOption>

   <binaryOption key="wdog_stctrlh_clksrc" condition="wdog_stctrlh_clksrc_present"
      enabledBy="enablePeripheralSupport"
      target="inputClockFrequency"
      enumType="uint16_t"
      typeName="WdogClock"
      description="Watchdog clock source"
      toolTip="Clock source for watchdog" >
      <choice name="1 kHz low-power oscillator (LPOCLK)"  value="0" enum="LpoClk"       code="PmcInfo::getLpoClock()"  ref="/PMC/system_low_power_clock"  isDefault="true" />
      <choice name="System bus clock"                     value="1" enum="SystemBusClk" code="SystemBusClock"          ref="/SIM/system_bus_clock[0]"     />
   </binaryOption>

   <clockCodeTemplate variable="wdog_stctrlh_clksrc"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setClockSource(%paramType %paramName) {
      \t   %fieldAssignment
      \t}

      \t/**
      \t * Get %description
      \t *
      %paramDescription
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic inline uint32_t getInputClockFrequency(%params) {
      \t
      \t   switch(%paramName) {
      \t      default:
      %body
      \t   }
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getInputClockFrequency() {
      \t
      \t   return getInputClockFrequency((%paramType)(%maskingExpression));
      \t}\n\n
   ]]></clockCodeTemplate>

   <intOption key="inputClockFrequency"
      enabledBy="enablePeripheralSupport"
      locked="true"
      description="Watchdog Input clock frequency"
      toolTip="Determined from timer clock source"
      derived="true"
      units="Hz"/>

   <!-- ************* PRESC ****************** -->

   <choiceOption key="wdog_presc_prescval" condition="wdog_presc_prescval_present"
      enabledBy="wdog_stctrlh_wdogen"
      target="timerTickPeriod"
      typeName="WdogPrescale"
      enumType="uint16_t"
      description="Prescaler for the watchdog clock source"
      toolTip="This prescaler divides the input clock for the watchdog counter" >
      <choice value="0"  name="Prescaler = 1"  ref="1.0/inputClockFrequency" enum="Direct" />
      <choice value="1"  name="Prescaler = 2"  ref="2.0/inputClockFrequency" enum="DivBy2" />
      <choice value="2"  name="Prescaler = 3"  ref="3.0/inputClockFrequency" enum="DivBy3" />
      <choice value="3"  name="Prescaler = 4"  ref="4.0/inputClockFrequency" enum="DivBy4" />
      <choice value="4"  name="Prescaler = 5"  ref="5.0/inputClockFrequency" enum="DivBy5" />
      <choice value="5"  name="Prescaler = 6"  ref="6.0/inputClockFrequency" enum="DivBy6" />
      <choice value="6"  name="Prescaler = 7"  ref="7.0/inputClockFrequency" enum="DivBy7" />
      <choice value="7"  name="Prescaler = 8"  ref="8.0/inputClockFrequency" enum="DivBy8" />
   </choiceOption>

   <floatOption key="timerTickPeriod"
      enabledBy="enablePeripheralSupport"
      locked="true"
      description="Period of watchdog counter"
      toolTip="Determined from timer clock source and prescaler"
      derived="true"
      units="s"/>

   <floatOption key="wdog_timeoutPeriod"
      enabledBy="wdog_stctrlh_wdogen"
      description="Watchdog Timeout"
      toolTip="The watchdog must be refreshed before this interval expires"
      valueFormat="%s_s"
      typeName="const Seconds &amp;"
      units="s"
      value="1"/>

   <intOption key="wdog_timeout"
      enabledBy="wdog_stctrlh_wdogen"
      ref="(wdog_timeoutPeriod)/timerTickPeriod#timerTickPeriod"
      locked="true"
      description="Watchdog Timeout in ticks"
      toolTip="The watchdog must be refreshed before the counter reaches this value"
      valueFormat="%s_ticks"
      typeName="Ticks"
      derived="true"
      min="550" max="4294967295"
   />

   <floatOption key="wdog_windowPeriod"
      enabledBy="wdog_stctrlh_winen&amp;&amp;wdog_stctrlh_wdogen"
      description="Watchdog Window"
      toolTip="Refresh of the watchdog may not be carried out before this interval has expired i.e.\n
               Refresh must occur within [window...timeout] if window mode is enabled.\n
               A refresh outside of this range resets the system"
      valueFormat="%s_s"
      typeName="const Seconds &amp;"
      derived="true"
      units="s"
      value="0"/>

   <intOption key="wdog_window"
      enabledBy="wdog_stctrlh_winen&amp;&amp;wdog_stctrlh_wdogen"
      ref="(wdog_windowPeriod)/timerTickPeriod#timerTickPeriod"
      locked="true"
      description="Watchdog Window in ticks"
      toolTip="If windowed operation is enabled, then the watchdog can only be refreshed \n
               if the timer reaches a value greater than or equal to this window length value.\n
               A refresh outside of this window resets the system"
      valueFormat="%s_ticks"
      typeName="Ticks"
      value="0" min="0" max="4294967295"
   />

   <!-- ************* STCTRLL ****************** -->

   <binaryOption key="wdog_stctrll_intflg" condition="wdog_stctrll_intflg_present"
      hidden="true"
      typeName="WdogException"
      toolTip="It is set when an exception occurs. IRQRSTEN = 1 is a precondition to set this flag.\n
               INTFLG = 1 results in an interrupt being issued followed by a reset, WCT time later. \n
               The interrupt can be cleared by writing 1 to this bit. It also gets cleared on a system reset"
      description="Interrupt flag." >
      <choice name="No interrupt"       value="0" enum="NoInterrupt"/>
      <choice name="Interrupt pending"  value="1" enum="InterruptPending"/>
   </binaryOption >

   <!-- ************* RSTCNT ****************** -->

   <intOption key="wdog_rstcnt_rstcnt" condition="wdog_rstcnt_rstcnt_present"
      hidden="true"
      typeName="uint16_t"
      description="Counts the number of times the watchdog resets the system."
      toolTip="This register is reset only on a POR. Writing 1 to the bit to be cleared, enables you to clear the contents of this register"
   />

   <!-- ************* MISC ****************** -->
   <choiceOption key="wdog_constants1"
      hidden="true"
      typeName="WdogRefresh"
      valueFormat="%s"
      description="Watchdog refresh"
      toolTip="Key values needed for refreshing the WDOG"
      >
      <choice value="0xA602" enum="1" name="1st refresh value"   />
      <choice value="0xB480" enum="2" name="2nd refresh value"  />
   </choiceOption>

   <choiceOption key="wdog_constants2"
      hidden="true"
      typeName="WdogUnlock"
      valueFormat="%s"
      description="Watchdog unlock"
      toolTip="Key values needed for unlocking the WDOG"
      >
      <choice value="0xC520" enum="1"  name="1st unlock value"  />
      <choice value="0xD928" enum="2"  name="2nd unlock value"  />
   </choiceOption>

<!-- Setters and getters -->

   <for keys="field                : set   : get   : clear : genCode                 : name"
        values="
         wdog_stctrlh_wdogen       : false : true  : false : enableGettersAndSetters : Enable;
         wdog_stctrlh_distestwdog  : false : true  : false : enableGettersAndSetters : TestMode;
         wdog_stctrlh_bytesel      : false : true  : false : enableGettersAndSetters : ByteSelect;
         wdog_stctrlh_testsel      : false : true  : false : enableGettersAndSetters : TestSelect;
         wdog_stctrlh_testwdog     : false : true  : false : enableGettersAndSetters : TestMode;
         wdog_stctrlh_waiten       : false : true  : false : enableGettersAndSetters : WaitEnable;
         wdog_stctrlh_stopen       : false : true  : false : enableGettersAndSetters : StopEnable;
         wdog_stctrlh_dbgen        : false : true  : false : enableGettersAndSetters : DebugeEnable;
         wdog_stctrlh_allowupdate  : false : true  : false : enableGettersAndSetters : AllowUpdate;
         wdog_stctrlh_winen        : false : true  : false : enableGettersAndSetters : StctrlhWinen;
         wdog_stctrlh_irqrsten     : false : true  : false : enableGettersAndSetters : StctrlhIrqrsten;
         wdog_stctrlh_clksrc       : false : true  : false : enableGettersAndSetters : StctrlhClksrc;
         wdog_stctrll_intflg       : false : true  : false : enableGettersAndSetters : StctrllIntflg;
         wdog_tovalh_tovalhigh     : false : true  : false : enableGettersAndSetters : TovalhTovalhigh;
         wdog_tovall_tovallow      : false : true  : false : enableGettersAndSetters : TovallTovallow;
         wdog_winh_winhigh         : false : true  : false : enableGettersAndSetters : WinhWinhigh;
         wdog_winl_winlow          : false : true  : false : enableGettersAndSetters : WinlWinlow;
         wdog_tmrouth_timerouthigh : false : true  : false : enableGettersAndSetters : TmrouthTimerouthigh;
         wdog_tmroutl_timeroutlow  : false : true  : false : enableGettersAndSetters : TmroutlTimeroutlow;
         wdog_rstcnt_rstcnt        : false : true  : false : enableGettersAndSetters : RstcntRstcnt;
         wdog_presc_prescval       : false : true  : false : enableGettersAndSetters : PrescPrescval" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate key="/WDOG/publicMethods" namespace="all" codeGenCondition="enablePeripheralSupport"
      variables="
         wdog_stctrlh_wdogen,
         wdog_stctrlh_clksrc,
         wdog_stctrlh_winen,
         wdog_stctrlh_irqrsten,
         wdog_stctrlh_dbgen,
         wdog_stctrlh_stopen,
         wdog_stctrlh_waiten"
   ><![CDATA[
      \t/**
      \t * Configure watchdog
      \t
      \t * @note This is a protected operation which uses unlock
      \t * @note Register changes after unlock is enabled
      \t
      %paramDescription
      \t */
      \tstatic void configure(
      %params) {
      \t
      \t   // Protect sequence from interrupts
      \t   CriticalSection cs;
      \t
      \t   // Unlock before changing settings
      \t   wdog->UNLOCK = WdogUnlock_1;
      \t   wdog->UNLOCK = WdogUnlock_2;
      \t
      \t   // Read-back to delay until change effected
      \t   (void)(wdog->UNLOCK);
      \t
      \t   %register = %paramExpression;
      \t}
   ]]></variableTemplate>

   <!--   ========== class $(_Structname)BasicInfo =============================== -->

   <template namespace="baseClass" ><![CDATA[
      class $(_Structname)BasicInfo {

      public:\n
   ]]></template>

   <!--   ========== Interrupt handling =============================== -->

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="irqHandlingMethod"
   ><![CDATA[
       \t//! Common class based callback code has been generated for this class of peripheral
       \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
       \t\n
   ]]></variableTemplate>

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Baseclass) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  $(_basename)Callback Callback function to execute on interrupt
      \t *                             Use nullptr to remove callback.
      \t */
      \tstatic void setCallback(CallbackFunction $(_basename)Callback) {
      \t   if ($(_basename)Callback == nullptr) {
      \t      $(_basename)Callback = unhandledCallback;
      \t   }
      \t   // Allow either no handler set yet or removing handler
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || ($(_basename)Callback == unhandledCallback),
      \t         "Handler already set");
      \t   sCallback = $(_basename)Callback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   //.....IRQ handler code here..........
      \t
      \t   // Clear interrupt flag
      \t   //.....
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t}
      \t\n
   ]]>
   </template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/**
      \t * Callback for programmatically set handler for $(_Class)
      \t */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Structname)BasicInfo::unhandledCallback;
      \t\n
   ]]>
   </template>

   <!--   ========== WDOG Init class =============================== -->

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   WdogEnable_Enabled ,          // Watchdog enable
      \t *   WdogEnableInWait_Disabled ,   // Enable watchdog in WAIT mode
      \t *   WdogEnableInStop_Disabled ,   // Enable watchdog in STOP mode
      \t *   WdogEnableInDebug_Disabled ,  // Enable watchdog in DEBUG mode
      \t *   WdogAllowUpdate_Enabled ,     // Allow watchdog update
      \t *   WdogWindow_Disabled ,         // Enable watchdog windowing mode
      \t *   WdogAction_ImmediateReset ,   // Action on watchdog event
      \t *   WdogClock_SystemBusClk ,      // Watchdog clock source
      \t *   NvicPriority_Normal,          // IRQ level for this peripheral
      \t *   call-back,                    // Call-back
      \t *   // Either
      \t *   WdogPrescale_Direct ,         // Prescaler for the watchdog clock source (must be in this order)
      \t *   2000_ticks, 1000_ticks,       // Timeout and Window values
      \t *   // **** OR ****
      \t *   20_seconds, 10_seconds,       // Timeout and Window values (must be in this order)
      \t *   // Option
      \t *   Wdog::DefaultInitValue,       // Take base values from DefaultInitValue
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!--   Member variables -->

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="wdog_timeout"
   ><![CDATA[
      \t   ///  %description or seconds
      \t   Seconds_Ticks %registerName;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="wdog_window"
   ><![CDATA[
      \t   ///  %description or seconds
      \t   Seconds_Ticks %registerName;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="wdog_stctrlh_distestwdog,wdog_stctrlh_bytesel,wdog_stctrlh_testsel,wdog_stctrlh_testwdog,wdog_stctrlh_waiten,wdog_stctrlh_stopen,wdog_stctrlh_dbgen,wdog_stctrlh_allowupdate,wdog_stctrlh_winen,wdog_stctrlh_irqrsten,wdog_stctrlh_clksrc,wdog_stctrlh_wdogen"
   ><![CDATA[
      \t   ///  Watchdog Status and Control Register High
      \t   uint16_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="wdog_presc_prescval"
   ><![CDATA[
      \t   /// Prescaler Register
      \t   uint16_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %symbolicExpression1;
      \t\n
   ]]></variableTemplate>

   <!--   Constructors -->

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            wdog_stctrlh_distestwdog;
            wdog_stctrlh_waiten;
            wdog_stctrlh_stopen;
            wdog_stctrlh_dbgen;
            wdog_stctrlh_allowupdate;
            wdog_stctrlh_winen;
            wdog_stctrlh_irqrsten;
            wdog_stctrlh_clksrc;
            wdog_stctrlh_wdogen;
            " >
      <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

      <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="wdog_presc_prescval,wdog_timeout,wdog_window"
      linePadding="xxx"
      nonDefaultParams="2"
      params=",timeout,window"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description0, %description1 & %description2
      \t    *
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      %params, Types... rest) : Init(rest...) {
      \t
      \t      this->%registerName1.fromTicks(%paramName1);
      \t      this->%registerName2.fromTicks(%paramName2);
      \t      this->%registerName0 = %paramName0;
      \t   }
      \t\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="secondsSupport"
      variables="wdog_timeoutPeriod,wdog_windowPeriod"
      linePadding="xxx"
      params="timeout,window"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description0 and %description1
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      %params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0.fromSeconds(%paramName0);
      \t      this->%paramName1.fromSeconds(%paramName1);
      \t      this->presc = ((uint16_t)-1);
      \t   }\n
   ]]></variableTemplate>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            wdog_stctrlh_wdogen,
            wdog_stctrlh_distestwdog,
            wdog_stctrlh_waiten,
            wdog_stctrlh_stopen,
            wdog_stctrlh_dbgen,
            wdog_stctrlh_allowupdate,
            wdog_stctrlh_winen,
            wdog_stctrlh_irqrsten,
            wdog_stctrlh_clksrc,
            wdog_presc_prescval,
            wdog_timeout,
            wdog_window
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/WDOG/InitMethod" discardRepeats="true" codeGenCondition="!enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Disable $(_BASENAME)
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Unlock before changing settings
      \t   wdog->UNLOCK  = WdogUnlock_1;
      \t   wdog->UNLOCK  = WdogUnlock_2;
      \t
      \t   // Read-back to delay until change effected
      \t   (void)(wdog->UNLOCK);
      \t
      \t   // Disable watchdog
      \t   wdog->STCTRLH = WdogEnable_Disabled|WdogAllowUpdate_Disabled;
      \t}\n\n
   ]]></template>

   <template key="/WDOG/InitMethod" discardRepeats="true" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}\n\n
   ]]></template>

   <template key="/WDOG/InitMethod" discardRepeats="true" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t
      \t * @param init Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const typename Info::Init &init) {
      \t
      \t   Seconds_Ticks timeout = init.timeout;
      \t   Seconds_Ticks window  = init.window;
      \t   uint16_t presc   = init.presc;
      \t
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      // Only set call-back if feature enabled and non-null
      \t      if (init.callbackFunction != nullptr) {
      \t         Info::setCallback(init.callbackFunction);
      \t      }
      \t   }\n
   ]]></template>
   <template key="/WDOG/InitMethod" discardRepeats="true" codeGenCondition="secondsSupport&amp;&amp;enablePeripheralSupport" ><![CDATA[
      \t   if (presc == ((uint16_t)-1)) {
      \t
      \t      // Calculate timeout, window and prescaler
      \t      ErrorCode rc = calculateTimingParameters(init.stctrlh, timeout, window, presc);
      \t      if (rc != E_NO_ERROR) {
      \t         return rc;
      \t      }
      \t   }\n
   ]]></template>
   <template key="/WDOG/InitMethod" discardRepeats="true" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t   // Protect sequence from interrupts
      \t   CriticalSection cs;
      \t
      \t   // Unlock before changing settings
      \t   wdog->UNLOCK = WdogUnlock_1;
      \t   wdog->UNLOCK = WdogUnlock_2;
      \t
      \t   // Read-back to delay until change effected
      \t   (void)(wdog->UNLOCK);
      \t
      \t   // Configure watchdog
      \t   wdog->STCTRLH  = init.stctrlh;
      \t   wdog->PRESC    = presc;
      \t   wdog->WINH     = window.toTicks()>>16;
      \t   wdog->WINL     = window.toTicks();
      \t   wdog->TOVALH   = timeout.toTicks()>>16;
      \t   wdog->TOVALL   = timeout.toTicks();
      \t
      \t   // For some reason this must be done after above
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></template>

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <template namespace="baseClass" >
   <![CDATA[
      }; // class $(_Structname)BasicInfo
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="wdog_files" >
      <copy source="Project_Headers/wdog.h"         target="Project_Headers/wdog.h"          overwrite="true" derived="true" />
      <copy source="Snippets/wdog-example.cpp"      target="Snippets/wdog-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->
   <template key="/SYSTEM/Includes" codeGenCondition="!enablePeripheralSupport||configurePeripheralInStartUp" ><![CDATA[
      #include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/WatchdogInitialise" codeGenCondition="!enablePeripheralSupport||configurePeripheralInStartUp" ><![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

</peripheralPage>
