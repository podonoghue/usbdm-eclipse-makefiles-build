<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- common_settings.xml -->

<peripheralPage name="CommonSettings" description="Common settings" >

<stringOption name="Hardware includes" key="/HARDWARE_H/userIncludes"
   description="Header files included in Hardware.h"
   value="// None"  />

<stringOption name="Hardware declarations" key="/HARDWARE_H/userDeclarations"
   description="Code included in Hardware.h"
   value="// None"  />

<stringOption name="Hardware definitions" key="/HARDWARE_CPP/userDefinitions"
   description="Code included in Hardware.cpp"
   value="// None"  />

<binaryOption name="Map all pins on startup" key="/HARDWARE/mapAllPins" condition="(/PCR/lk_present)"
   description="Execute mapAllPins() during startup"
   toolTip="Enables mapping of allocated pins during startup using mapAllPins()\n
   Multiply mapped pins cannot be assigned by mapAllPins()">
   <choice value="false" name="Don't map - Use manual mapping or enable mapping for peripherals individually"  isDefault="true" />
   <choice value="true"  name="Map pins during startup using mapAllPins()" />
</binaryOption>

<binaryOption name="Lock mapped pins" key="/HARDWARE/lockMappedPins" condition="(/PCR/lk_present)"
   description="Lock mapped pins during startup"
   toolTip="Lock pin control registers (PCRs) during mapAllPins()">
   <choice value="PinLock_Unlocked" name="Don't force locked - Pins may still be individually locked" isDefault="true"/>
   <choice value="PinLock_Locked"   name="Force all pins to be locked in mapAllPins()" />
</binaryOption>

<binaryOption name="Disable unbonded pins" key="/HARDWARE/lockoutUnbondedPins"  condition="(/PCR/lk_present)"
   description="Lock out pins that are not bonded to physical pins on package"
   toolTip="In some smaller packages there are die pads that are not bonded to package pins\n
            For those pins the PCR can be set to 0 (analogue/disabled) to minimize power consumption\n
            This is the reset state">
   <choice value="false" name="Leave unbonded pins unchanged" isDefault="true" />
   <choice value="true"  name="Force unbonded pins to analogue function" />
</binaryOption>

<binaryOption name="Warn if multiple signals mapped to pin" key="/HARDWARE/warnMultipleSignalsOnPin"
   description="Generate warnings about conflicting signal mappings"
   toolTip="It is allowable to have multiple signals mapped to a single pin on the understanding\n
            that they will be dynamically mapped during execution to avoid conflict.\n
            Multiply mapped pins cannot be assigned by mapAllPins()">
   <choice value="false" name="Don't produce warning during compilation" isDefault="true" />
   <choice value="true"  name="Produce warning during compilation" />
</binaryOption>

<binaryOption name="Extended information on hard fault" key="/HARDWARE/extendedHardFaultInformation"
   description="Add code to the hard fault handler to print register information"
   toolTip="This will increase code size for the DEBUG build\n
            Disabled in RELEASE builds.">
   <choice value="false" name="No extended information" isDefault="true" />
   <choice value="true"  name="Extended information provided" />
</binaryOption>

<binaryOption name="Use extended type system for timers" key="/HARDWARE/useTypeSystemForTimers"
   description="Use a dimensioned type system for time and frequency"
   toolTip="Controls 'Seconds', 'Hertz' and 'Ticks' type definitions">
   <choice value="false" name="Don't use extended type system" isDefault="true"
      toolTip="Types 'Seconds', 'Hertz' and 'Ticks' are simple aliases for basic C++ types"/>
   <choice value="true"  name="Use extended type system"
      toolTip="Types 'Seconds', 'Hertz' and 'Ticks' are an enforced type system using classes"/>
</binaryOption>

<binaryOption name="Debug definitions" key="/HARDWARE/generateDebugDefinitions"
   description="Generate some debug definintions"
   toolTip="These definitions are used to control testing">
   <choice value="No definitions"         name="Don't Generate definitions" isDefault="true"/>
   <choice value="Definitions generated"  name="Generate definitions" />
</binaryOption>

<category name="Examples" description="Pin mapping for examples">
   <stringOption name="Led1"        key="/HARDWARE/Led1"       value="GpioA&lt;1,  ActiveLow&gt;"  description="LED for examples" />
   <stringOption name="Led2"        key="/HARDWARE/Led2"       value="GpioA&lt;2,  ActiveLow&gt;"  description="LED for examples" />
   <stringOption name="Led3"        key="/HARDWARE/Led3"       value="GpioD&lt;5,  ActiveLow&gt;"  description="LED for examples" />
   <stringOption name="Switch1"     key="/HARDWARE/Switch1"    value="GpioB&lt;17, ActiveLow&gt;"  description="Switch for examples" />
   <stringOption name="Analogue0"   key="/HARDWARE/Analogue0"  value="Adc0::Channel&lt;8&gt;"      description="ADC channel for examples" />
   <stringOption name="Analogue1"   key="/HARDWARE/Analogue1"  value="Adc0::Channel&lt;9&gt;"      description="ADC channel for examples" />
   <stringOption name="Digital0"    key="/HARDWARE/Digital0"   value="GpioD&lt;5,  ActiveLow&gt;"  description="Digital I/O for examples" />
   <stringOption name="Digital1"    key="/HARDWARE/Digital1"   value="GpioD&lt;6,  ActiveLow&gt;"  description="Digital I/O for examples" />
   <stringOption name="Ftm1"        key="/HARDWARE/Ftm1"       value="Ftm0::Channel&lt;0&gt;"      description="FTM channel for examples" />
   <stringOption name="Ftm2"        key="/HARDWARE/Ftm2"       value="Ftm0::Channel&lt;1&gt;"      description="FTM channel for examples" />
</category>

<category name="Linker" description="Device Linker information" toolTip="This information is used to generate linker scripts" >
   <binaryOption key="RegenerateLinkerFiles"
      name="Regenerate Linker files!"
      description="Update linker scripts when code is generated"
      toolTip="This option is not preserved and must be set each time it is needed"
      derived="true" >
      <choice name="Don't modify linker files" value="false" isDefault="true" />
      <choice name="Update linker files"       value="true" />
   </binaryOption>

   <intOption name="Stack size"    key="/LINKER/stackSize"  value="0" description="RAM allocated to stack (bytes)"  step="4" min="0" />
   <intOption name="Heap size"     key="/LINKER/heapSize"   value="0" description="RAM allocated to heap (bytes)"   step="4" min="0" />

   <intOption name="Bitband size"  key="/LINKER/bitbandSize"
      description="RAM allocated to bit-band/bit-manipulation-engine (bytes)" step="4" min="0" max="0x1000"
      toolTip="Space is allocated in .bitband_ram memory region\n
               Each byte is also mapped to 8 words in .bitband memory region\n
               C Example:\n
               \t    // Variable allocated in bitband/bme accessible region (.bitband_ram)\n
               \t    // May be uint8_t, uint16_t or uint32_t\n
               \t    __attribute__ ((section('.bitband_ram')))\n
               \t    uint32_t variable;\n
               \t    // Each word of array maps to an individual bit in bit-band region (.bitband)\n
               \t    __attribute__ ((section('.bitband')))\n
               \t    uint32_t variable_bits[8*sizeof(variable)];\n
               See bme.h and bitband.h for more information"
      value="0x0" />

   <binaryOption name="Enable USBDM Bootloader" key="/LINKER/enableBootloader"
      description="Enable custom USBDM bootloader"
      toolTip="This relocates the program image to allow space for a bootloader at the beginning of the flash region" >
      <choice value="0" name="Disabled" isDefault="true" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <intOption name="Bootloader size"               key="/LINKER/bootloaderSize"      locked="true" value = "0x4000" radix="16" description="Amount of flash reserved for bootloader"   />
   <intOption name="Bootloader Information size"   key="/LINKER/bootloaderInfoSize"  locked="true" value = "0x10"   radix="16" description="Size of bootloader information block"       />

   <intOption name="Program Flash size" key="/LINKER/flashSize"       locked="true" description="Program Flash available in target"   />
   <intOption name="Upper SRAM size"    key="/LINKER/ramUpperSize"    locked="true" description="Upper RAM available in target"    />
   <intOption name="Lower SRAM size"    key="/LINKER/ramLowerSize"    locked="true" description="Lower RAM available in target"    />
   <intOption name="Flex RAM size"      key="/LINKER/flexRamSize"     locked="true" description="Flex RAM available in target"     />
   <intOption name="Flex NVM size"      key="/LINKER/flexNvmSize"     locked="true" description="Flex Flash available in target"   />

   <constant name="Linker Extra Regions" key="/LINKER/extraRegions" type="String" />
   <constant name="Linker Information"   key="/LINKER/information"  type="String" />

   <stringOption name="Vector table template"  key="/LINKER/vectorsFilename"  locked="true" description="File used for target vector table"  />

   <stringOption name="Linker script template"        key="/LINKER/scriptFilename"   locked="true" description="File used as linker script"       />
   <stringOption name="Linker memory map template"    key="/LINKER/mapFilename"      locked="true" description="File used for target memory map"  />

   <category name="Section placement in Flash" description="How regions are mapped to available Flash"
     toolTip=
      "Cortex-M4 Kinetis devices may have additional Flash that can be used as backing storage \n
       for non-volatile memory (FlexRAM -> FlexNVM.)\n
       If not used for this purpose, FlexNVM may be used to hold code or constant data.\n
       These settings control which region (regular flash or FlexNVM) is used for various linker sections"
      >

      <choiceOption name="Startup code" key="/LINKER/startup_rom" description="Segment allocation"
         toolTip="Fixed placement for vector table and reset code"
         locked="true"  >
         <choice value="flash"       name="Main Flash"  isDefault="true"/>
         <choice value="flexNVM"     name="Flex NVM Flash" />
      </choiceOption>

      <choiceOption name="Code (apart from startup)"        key="/LINKER/text_rom"   derivedFrom="/LINKER/startup_rom" toolTip="Text (code), vtables etc in Flash" />
      <choiceOption name="Read-only data"                   key="/LINKER/rodata_rom" derivedFrom="/LINKER/startup_rom" toolTip="const data in Flash" />
      <choiceOption name="Flash image for initialised data" key="/LINKER/data_rom"   derivedFrom="/LINKER/startup_rom" toolTip="Initialised data in Flash which is copied to ram on startup" />
   </category>

   <category name="Section placement in RAM" description="How regions are mapped to available RAM"
     toolTip=
       "The RAM on Cortex-M4 Kinetis devices is divided into upper and lower memory regions.\n
        These settings control which region is used for various linker sections.\n
        These sections cannot cross regions as unaligned half-word and long-word accesses are not supported"
   >
      <choiceOption name="ramu_default" key="/LINKER/ramu_default" description="Segment allocation" hidden="true"
         toolTip="This selects placement for the segment" >
         <choice value="ram_low"  name="Low RAM"  />
         <choice value="ram_high" name="High RAM"  isDefault="true" />
         <choice value="flexRAM"  name="Flex RAM" />
      </choiceOption>

      <choiceOption name="raml_default" key="/LINKER/raml_default" description="Segment allocation" hidden="true"
         toolTip="This selects placement for the segment" >
         <choice value="ram_low"  name="Low RAM" isDefault="true" />
         <choice value="ram_high" name="High RAM" />
         <choice value="flexRAM"  name="Flex RAM" />
      </choiceOption>

      <choiceOption name="Stack"                         key="/LINKER/stack_ram"      derivedFrom="/LINKER/ramu_default"/>
      <choiceOption name="Heap"                          key="/LINKER/heap_ram"       derivedFrom="/LINKER/raml_default"/>
      <choiceOption name="Vector table relocated to RAM" key="/LINKER/interrupts_ram" derivedFrom="/LINKER/raml_default"/>
      <choiceOption name="Initialised DATA"              key="/LINKER/data_ram"       derivedFrom="/LINKER/raml_default"/>
      <choiceOption name="Zeroed Data (BSS)"             key="/LINKER/bss_ram"        derivedFrom="/LINKER/raml_default"/>
      <choiceOption name="Non-initialised DATA"          key="/LINKER/noinit_ram"     derivedFrom="/LINKER/raml_default"/>
      <choiceOption name="Micro Trace Buffer"            key="/LINKER/mtb_ram"        derivedFrom="/LINKER/raml_default"/>
      <choiceOption name="USB Endpoint buffers"          key="/LINKER/bdts_ram"       derivedFrom="/LINKER/raml_default"/>
   </category>
</category>


<!-- template where="usbdm" condition="/MCG/_present" ><![CDATA[
   \t/** Clock for CORE (CPU) and SYSTEM (NVIC, RAM ...) */
   \textern "C" uint32_t SystemCoreClock;
   \t
   \t/** Clock for Bus (PIT, SPI, UART ...) */
   \textern "C" uint32_t SystemBusClock;
   \t\n
]]></template -->

<template where="usbdm" ><![CDATA[
   /* Template:common_settings.xml */
   \t/**
   \t * Shared callback to catch unhandled interrupt
   \t * Only used for callbacks with no parameters
   \t */
   \textern void unhandledCallback();
   \t\n
]]></template>

<template where="usbdm" >
<![CDATA[
   \t/**
   \t * Class used to do vector initialisation
   \t *
   \t * This class has a templated constructor that accepts various values.
   \t *
   \t * @note This constructor may be used to create a const instance in Flash
   \t *
   \t */
   \ttemplate <typename Init, typename CallbackFunction, typename EnumType, size_t NumVectors>
   \tclass InitVectors : public Init {
   \t
   \tpublic:
   \t   /**
   \t    * Copy Constructor
   \t    */
   \t   constexpr InitVectors(const InitVectors &other) = default;
   \t
   \t  /**
   \t   * Copy constructor
   \t   *
   \t   * @tparam Types
   \t   * @param rest         Remaining parameters
   \t
   \t   * @param other   Object to use as default value
   \t   */
   \t  template <typename... Types>
   \t  constexpr InitVectors(const InitVectors &other, Types... rest) : InitVectors(rest...) {
   \t     priorities = other.priorities;
   \t     callbacks  = other.callbacks;
   \t  }
   \t
   \t   /**
   \t    * Other constructors are inherited
   \t    *
   \t    * @tparam Types
   \t    * @param rest
   \t    */
   \t   template <typename... Types>
   \t   constexpr InitVectors(Types... rest) : Init(rest...) {
   \t   }
   \t
   \t   /**
   \t    * Initialise Interrupt callbacks
   \t    * (Used when only a single vector)
   \t    *
   \t    * @tparam Types
   \t    * @param rest         Remaining parameters
   \t
   \t    * @param nvicPriority Priority for the handler
   \t    * @param callback     Callback function to use
   \t    */
   \t   template <typename... Types>
   \t   constexpr InitVectors(CallbackFunction callback, NvicPriority nvicPriority, Types... rest) : InitVectors(rest...) {
   \t      priorities[0]  = nvicPriority;
   \t      callbacks[0]   = callback;
   \t   }
   \t
   \t   /**
   \t    * Initialise Interrupt callbacks
   \t    * (Used when only a single vector)
   \t    *
   \t    * @tparam Types
   \t    * @param rest         Remaining parameters
   \t
   \t    * @param nvicPriority Priority for the handler
   \t    * @param callback     Callback function to use
   \t    */
   \t   template <typename... Types>
   \t   constexpr InitVectors(NvicPriority nvicPriority, CallbackFunction callback, Types... rest) : InitVectors(rest...) {
   \t      priorities[0]  = nvicPriority;
   \t      callbacks[0]   = callback;
   \t   }
   \t
   \t   /**
   \t    * Initialise Interrupt callbacks
   \t    * (Multiple vectors)
   \t    *
   \t    * @tparam Types
   \t    * @param rest         Remaining parameters
   \t
   \t    * @param irqNum       Interrupt number
   \t    * @param nvicPriority Priority for the handler
   \t    * @param callback     Callback function to use
   \t    */
   \t   template <typename... Types>
   \t   constexpr InitVectors(EnumType irqNum, NvicPriority nvicPriority, CallbackFunction callback, Types... rest) : InitVectors(rest...) {
   \t      priorities[irqNum]  = nvicPriority;
   \t      callbacks[irqNum]   = callback;
   \t   }
   \t
   \t   /**
   \t    * Information describing the priority and callback function for each interrupt
   \t    */
   \t    std::array<CallbackFunction, NumVectors> callbacks = {};
   \t    std::array<NvicPriority,     NumVectors> priorities = {};
   \t
   \t}; // class InitVectors
   \t\n
]]>
</template>


<template where="usbdm" condition="(/PCR/lk_present)" ><![CDATA[
   /* Template:common_settings.xml */
   \t
   \t/**
   \t *  Enables mapping of all allocated pins during startup using mapAllPins()
   \t */
   \tstatic constexpr bool MapAllPinsOnStartup = $(/HARDWARE/mapAllPins);
   \t
   \t/**
   \t * Controls forcing all pins to be locked in mapAllPins()
   \t */
   \tstatic constexpr PinLock ForceLockedPins = $(/HARDWARE/lockMappedPins);
   \t
   \t/**
   \t *  Enables forcing unbonded pins to analogue function in mapAllPins()
   \t */
   \tstatic constexpr bool ForceLockoutUnbondedPins = $(/HARDWARE/lockoutUnbondedPins);
   \t\n
]]></template>

<template where="usbdm" condition="!(/PCR/lk_present)" ><![CDATA[
   /* Template:common_settings.xml */

   \t/**
   \t * Enables mapping of all allocated pins during startup using mapAllPins()
   \t * Not available on this MCU
   \t */
   \tstatic constexpr bool MapAllPinsOnStartup = false;

   \t/**
   \t * Controls forcing all pins to be locked in mapAllPins()
   \t * Not available on this MCU
   \t */
   \tstatic constexpr uint32_t ForceLockedPins = 0;
   \tstatic constexpr uint32_t PinLock_Locked  = 0;

   \t/**
   \t * Enables forcing unbonded pins to analogue function in mapAllPins()
   \t * Not available on this MCU
   \t */
   \tstatic constexpr bool ForceLockoutUnbondedPins = false;
   \t\n
]]></template>

<!-- Template is added to pin_mapping.h -->
<template where="usbdm"><![CDATA[
   // Use when in-lining makes the release build smaller
   #ifdef DEBUG_BUILD
   #define INLINE_RELEASE __attribute__((noinline))
   #else
   #define INLINE_RELEASE __attribute__((always_inline))
   #endif

   #ifdef DEBUG_BUILD
   #define NOINLINE_DEBUG __attribute__((noinline))
   #else
   #define NOINLINE_DEBUG
   #endif

   \t/**
   \t * Calculate a Vector number using an offset from an existing number.
   \t * This is only useful if related vectors are consecutive e.g. DMA0_IRQn, DMA1_IRQn ...
   \t *
   \t * @param vector  Base vector to use
   \t * @param offset  Offset from base vector
   \t *
   \t * @return  Vector number calculated from vector+offset
   \t */
   \tconstexpr IRQn_Type inline operator+(IRQn_Type vector, unsigned offset) {
   \t   return static_cast<IRQn_Type>(static_cast<unsigned>(vector) + offset);
   \t}

   \t/**
   \t * Calculate a Vector number using an offset from an existing number.
   \t * This is only useful if related vectors are consecutive e.g. DMA0_IRQn, DMA1_IRQn ...
   \t *
   \t * @param vector  Base vector to use
   \t * @param offset  Offset from base vector
   \t *
   \t * @return  Vector number calculated from vector+offset
   \t */
   \tconstexpr IRQn_Type inline operator+(IRQn_Type vector, int offset) {
   \t   return vector + static_cast<unsigned>(offset);
   \t}

   \t/**
   \t * @tparam  T  Type of comparison object (inferred)
   \t * @param   a  Left-hand object for comparison
   \t * @param   b  Right-hand object for comparison
   \t *
   \t * @return Smaller of a or b
   \t */
   \ttemplate<class T>
   \tconstexpr T min(const T a, const T b) {
   \t   return (b < a) ? b : a;
   \t}

   \t/**
   \t * @tparam  T  Type of comparison object (inferred)
   \t * @param   a  Left-hand object for comparison
   \t * @param   b  Right-hand object for comparison
   \t *
   \t * @return Larger of a or b
   \t */
   \ttemplate<class T>
   \tconstexpr T max(const T a, const T b) {
   \t   return (b > a) ? b : a;
   \t}

   \tconstexpr IRQn_Type IRQn_None = static_cast<IRQn_Type>(-20);
   \n
]]></template>

<!-- Template is added to pin_mapping.h -->
<template where="usbdm"><![CDATA[
   \t/**
   \t * Determine the number of elements in an array
   \t *
   \t * @tparam T      Deduced array type
   \t * @tparam N      Deduced array size
   \t *
   \t * @return  Size of array in elements
   \t */
   \ttemplate<typename T, size_t N>
   \t   constexpr size_t sizeofArray(T (&)[N]) {
   \t      return N;
   \t   }

   \t/**
   \t * Enter critical section
   \t *
   \t * Disables interrupts for a critical section
   \t *
   \t * @param cpuSR Variable to hold interrupt state so it can be restored
   \t *
   \t * @code
   \t * uint8_t cpuSR;
   \t * ...
   \t * enterCriticalSection(cpuSR);
   \t *  // Critical section
   \t * exitCriticalSection(cpuSR);
   \t * @endcode
   \t */
   \tstatic inline void enterCriticalSection(uint8_t &cpuSR) {
   \t   __asm__ volatile (
   \t         "  MRS   r0, PRIMASK       \n"   // Copy flags
   \t         // It may be possible for a ISR to run here but it
   \t         // would save/restore PRIMASK so this code is OK
   \t         "  CPSID I                 \n"   // Disable interrupts
   \t         "  STRB  r0, %[output]     \n"   // Save flags
   \t         : [output] "=m" (cpuSR) : : "r0");
   \t}

   \t/**
   \t * Exit critical section
   \t *
   \t * Restores interrupt state saved by enterCriticalSection()
   \t *
   \t * @param cpuSR Variable to holding interrupt state to be restored
   \t */
   \tstatic inline void exitCriticalSection(uint8_t &cpuSR) {
   \t   __asm__ volatile (
   \t         "  LDRB r0, %[input]    \n"  // Retrieve original flags
   \t         "  MSR  PRIMASK,r0;     \n"  // Restore
   \t         : :[input] "m" (cpuSR) : "r0");
   \t}

   \t/**
   \t * Class to implement simple critical sections by disabling interrupts.
   \t *
   \t * Disables interrupts for a critical section.
   \t * This would be from the declaration of the object until the end of
   \t * enclosing block. An object of this class should be declared at the
   \t * start of a block. e.g.
   \t * @code
   \t *    {
   \t *       CriticalSection cs;
   \t *       ...
   \t *       Protected code
   \t *       ...
   \t *    }
   \t * @endcode
   \t *
   \t * @note uses PRIMASK
   \t */
   \tclass CriticalSection {
   \t
   \tprivate:
   \t   /** Used to record interrupt state on entry */
   \t   volatile uint32_t cpuSR;
   \t
   \tpublic:
   \t   /**
   \t    * Constructor - Enter critical section
   \t    *
   \t    * Disables interrupts for a critical section
   \t    * This would be from the declaration of the object until end of enclosing block.
   \t    */
   \t   CriticalSection() __attribute__((always_inline)) {
   \t      __asm__ volatile (
   \t            "  MRS   r0, PRIMASK       \n"   // Copy flags
   \t            // It may be possible for a ISR to run here but it
   \t            // would save/restore PRIMASK so this code is OK
   \t            "  CPSID I                 \n"   // Disable interrupts
   \t            "  STR  r0, %[output]      \n"   // Save flags
   \t            : [output] "=m" (cpuSR) : : "r0");
   \t   }
   \t
   \t   /**
   \t    * Destructor - Exit critical section
   \t    *
   \t    * Enables interrupts IFF previously disabled by this object
   \t    * This would be done implicitly by exiting the enclosing block.
   \t    */
   \t   inline ~CriticalSection() __attribute__((always_inline)) {
   \t      __asm__ volatile (
   \t            "  LDR r0, %[input]     \n"  // Retrieve original flags
   \t            "  MSR  PRIMASK,r0;     \n"  // Restore
   \t            : :[input] "m" (cpuSR) : "r0");
   \t   }
   \t};
   /* END Template:common_settings.xml */\n\n
]]></template>

<projectActionList id="common_files_always" >
   <copy source="Sources/delay.cpp"                                        target="Sources/delay.cpp"                            overwrite="true"  derived="true" />
   <copy source="Project_Headers/delay.h"                                  target="Project_Headers/delay.h"                      overwrite="true"  derived="true" />
   <copy source="Snippets/bitband-example.cpp"                             target="Snippets/bitband-example.cpp"                 overwrite="true"  derived="true" />
   <copy source="Startup_Code/$(/LINKER/vectorsFilename)"                  target="Startup_Code/vectors.cpp"                     overwrite="true"  derived="true" />
</projectActionList>

<projectActionList id="common_files_conditional" codeGenCondition='Exists("Initial_Build")||RegenerateLinkerFiles'>
   <copy source="Project_Settings/Linker_Files/$(/LINKER/scriptFilename)"  target="Project_Settings/Linker_Files/Linker-rom.ld"  overwrite="true"  derived="true" />
   <copy source="Project_Settings/Linker_Files/$(/LINKER/mapFilename)"     target="Project_Settings/Linker_Files/MemoryMap.ld"   overwrite="true"  derived="true" />
</projectActionList>

</peripheralPage>
