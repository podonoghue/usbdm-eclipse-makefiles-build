<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- sim_mke04z4.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="System Integration Module" >

<!-- ___________ Constants ____________________ -->

   <equation key="generateDefault"           value="false"         />
   <equation key="configureInStartupDefault" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!-- ____________________ Constants ____________________ -->

   <!-- Peripheral speeds                 RUN        -->
   <constant key="ICSOUTCLK_max"  value="50MHz"  type="Long"    hidden="false" />
   <constant key="ICSFLLCLK_max"  value="50MHz"  type="Long"    hidden="false" />
   <constant key="I2S_max"        value="25MHz"  type="Long"    hidden="false" />
   <constant key="LPUART_max"     value="48MHz"  type="Long"    hidden="false" />
   <constant key="FTM_max"        value="48MHz"  type="Long"    hidden="false" />

   <!-- LLWU wakeup devices -->
   <!-- None -->

   <!-- Clock divider -->
   <!-- None -->
   <!-- DMA slots -->
   <!-- None -->

   <!--
        Simple pin mapping information
        inputPinMap  Input pins with custom mapping implementation in peripheral file
        outputPinMap Output pins with custom mapping implementation in peripheral file
        pinMap       Default pin mapping enabled whenever the peripheral signal is enabled (done in enablePeripheral.xml)
   -->
   <!-- Pin mapping for ADC0 SE0-SE11 -->
   <constant key="/ADC0/inputPinMap" type="String"
      value='"PTA0,PTA1,PTA6,PTA7,PTB0,PTB1,PTB2,PTB3,PTC0,PTC1,PTC2,PTC3"' />

   <!-- Pin mapping for ACMP0 IN0,IN1,IN2 -->
   <constant key="/ACMP0/inputPinMap" type="String" value='"PTB2,PTA1,PTA0"' />

   <!-- Pin mapping for ACMP1 IN0,IN1,IN2 -->
   <constant key="/ACMP1/inputPinMap" type="String" value='"PTA6,PTA7,PTB4"' />


   <!-- FTM0 channels -->
   <dynamicSignalMapping signal="FTM0_CH0" >
      <signalMapping pin="-"     expression="!/FTM0/Ch0PinInUse"  />
      <signalMapping pin="PTA0"  expression="!sim_pinsel_ftm0ps0"        />
      <signalMapping pin="PTB2" />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM0_CH1" >
      <signalMapping pin="-"     expression="!/FTM0/Ch1PinInUse" />
      <signalMapping pin="PTA1"  expression="(!sim_pinsel_ftm0ps1)"        />
      <signalMapping pin="PTB3" />
   </dynamicSignalMapping>

   <!-- FTM2 channels -->
   <dynamicSignalMapping signal="FTM2_CH0" >
      <signalMapping pin="-"     expression="!/FTM2/Ch0PinInUse"  />
      <signalMapping pin="*"    />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_CH1" >
      <signalMapping pin="-"     expression="!/FTM2/Ch1PinInUse" />
      <signalMapping pin="*"    />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_CH2" >
      <signalMapping pin="-"     expression="!/FTM2/Ch2PinInUse"  />
      <signalMapping pin="PTC2"  expression="(!sim_pinsel_ftm2ps2)"        />
      <signalMapping pin="PTC4" />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_CH3" >
      <signalMapping pin="-"     expression="!/FTM2/Ch3PinInUse" />
      <signalMapping pin="PTC3"  expression="(!sim_pinsel_ftm2ps3)"        />
      <signalMapping pin="PTC5" />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_CH4" >
      <signalMapping pin="-"     expression="!/FTM2/Ch4PinInUse"  />
      <signalMapping pin="*"    />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_CH5" >
      <signalMapping pin="-"     expression="!/FTM2/Ch5PinInUse" />
      <signalMapping pin="*"    />
   </dynamicSignalMapping>

   <!-- FTM2 Hardware Triggers -->

   <constant key="/FTM2/hardwareTriggerSources" type="String"
       value='"ACMP0/ACMP1,FTM0_CH0,FTMSYNC"'  />

   <dynamicSignalMapping signal="FTM2_TRIG0" >
      <signalMapping pin="-"         expression="(/FTM2/ftm_sync_trig&amp;0b1)==0" />
      <signalMapping pin="ACMP1_O"   expression="sim_sopt_actrg" />
      <signalMapping pin="ACMP0_O"   />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_TRIG1" >
      <signalMapping pin="-"         expression="(/FTM2/ftm_sync_trig&amp;0b10)==0" />
      <signalMapping pin="FTM0_CH0"  />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_TRIG2" >
      <signalMapping pin="-"         expression="(/FTM2/ftm_sync_trig&amp;0b100)==0" />
      <signalMapping pin="FTMSYNC"   />
   </dynamicSignalMapping>

   <!-- Fault pin mapping for FTM2 -->
   <for keys="inp" dim="4">
      <dynamicSignalMapping signal="FTM2_FLT%(inp)" >
         <signalMapping pin="*"     expression="/FTM2/ftm_fltctrl_fault%(inp)en != 0" />
         <signalMapping pin="-"    />
      </dynamicSignalMapping>
   </for>

   <!-- Pin mapping for IRQ -->
   <constant key="/IRQ/pinMap"      type="String" value='"IRQ,PTA5"' />

   <!-- Pin mapping for KBIs -->
   <constant key="/KBI0/inputPinMap" type="String" value='"PT(A-B)(0-3)"'               />
   <constant key="/KBI1/inputPinMap" type="String" value='"PTC(4-5),PTC(0-3),PTB(4-5)"' />

   <!-- Pin mapping for OSC0 -->
   <constant key="/OSC0/pinMap"      type="String" value='"XTAL,PTB6;EXTAL,PTB7"' />

   <!-- Pin mapping for PWT (mapping done by PWT XML) -->
   <constant key="/PWT/inputMapping" value='"PTC4","PTB0","ACMP0_O","ACMP1_O"' type="String" />

   <!-- Pin mapping for RTC -->
   <constant key="/RTC/outputPinMap" type="String" value='"PTA0"' />

   <!-- Pin mapping for TCLK 1 and 2 inputs -->
   <for keys=  " tclk : clksel "
        values="  1   : false  ;
                  2   : true   " >
      <dynamicSignalMapping signal="TCLK%(tclk)" >
         <signalMapping
            pin="*"
            expression="
               (/FTM0/externalClockUsed&amp;&amp;(sim_pinsel_ftm0clkps==%(clksel)))||
               (/FTM2/externalClockUsed&amp;&amp;(sim_pinsel_ftm2clkps==%(clksel)))||
               (/PWT/externalClockUsed &amp;&amp;(sim_pinsel_pwtclkps ==%(clksel)))"  />
         <signalMapping pin="-" />
      </dynamicSignalMapping>
   </for>

   <xi:include href="simCommon.xml" />

   <!-- ____ Class Declaration __________________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_Baseclass)BasicInfo"' />

   <for keys="n" dim="=numberOfClockSettings" >
      <aliasCategoryOption key="/ICS/ClockConfig[%(n)]" derived="true" locked="true" >

         <aliasOption key="/ICS/enableClockConfiguration[%(n)]" locked="false" />
         <if condition="%(n)==0">
            <aliasOption key="/ICS/ics_c2_bdiv[%(n)]" locked="false" />
         </if>
         <for keys="u : name              : code            : ref"
            values="0 : System bus clock : SystemBusClock : system_bus_clock[%(n)]" >

            <choiceOption key="system_uart%(u)_fixedclocksource[%(n)]"
               addToVar="Uart%(u)ExternalItems"
               hidden="true"
               target="system_uart%(u)_clock[%(n)]"
               locked="true"
               derived="true"
               description="UART%(u) Clock source"
               toolTip="Fixed clock source for UART (%(code))" >
               <choice value="0"  name="%(name)" ref="%(ref)" code="%(code)" />
            </choiceOption>

            <intOption key="system_uart%(u)_clock[%(n)]"
               addToVar="Uart%(u)ExternalItems"
               hidden="true"
               locked="true"
               derived="true"
               units="Hz"
               description="UART%(u) Clock frequency"
               toolTip="Frequency of clock to UART%(u)"
               value="0" />
         </for>

         <choiceOption key="sim_clkdiv_outdiv1[%(n)]" condition="sim_clkdiv_outdiv1_present"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            typeName="SimCoreClkDivider"
            toolTip="This field sets the divide value for the core/system clock"
            description="Core/System Clock Divider value" >
            <choice name="ICSOUTCLK/1"    value="0" enum="Direct" />
            <choice name="ICSOUTCLK/2"    value="1" enum="DivBy2" />
            <choice name="ICSOUTCLK/3"    value="2" enum="DivBy3" />
            <choice name="ICSOUTCLK/4"    value="3" enum="DivBy4" />
         </choiceOption>

         <binaryOption key="sim_clkdiv_outdiv2[%(n)]" condition="sim_clkdiv_outdiv2_present"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            typeName="SimBusClkDivider"
            toolTip="This field sets the divide value for the bus/FLASH, follows OUTDIV1"
            description="Bus/Flash Clock Divider value" >
            <choice name="Core clock/1"    value="0" enum="Direct" />
            <choice name="Core clock/2"    value="1" enum="DivBy2" />
         </binaryOption >

         <binaryOption key="sim_clkdiv_outdiv3[%(n)]" condition="sim_clkdiv_outdiv3_present"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            typeName="SimTimerClkDivider"
            toolTip="This field sets the divide value for the timers(FTM0, FTM2,PWT)"
            description="Timer Clock Divider value" >
            <choice name="ICSOUTCLK/1"    value="0" enum="Direct" />
            <choice name="ICSOUTCLK/2"    value="1" enum="DivBy2" />
         </binaryOption>

         <intOption key="system_core_clock[%(n)]"
            locked="true"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            ref="(/ICS/system_icsoutclk_clock[%(n)])/((sim_clkdiv_outdiv1[%(n)])+1)#/ICS/system_icsoutclk_clock[%(n)]"
            derived="true"
            isNamedClock="true"
            units="Hz"
            description="System Core Clock"
            toolTip="Clock for CORE (CPU) and SYSTEM (NVIC, RAM, ...)"
            value="48 MHz"
            disabledValue="0"
            min="1" />

         <intOption key="system_bus_clock[%(n)]"
            locked="true"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            ref="(system_core_clock[%(n)])/((sim_clkdiv_outdiv2[%(n)])?2:1)#system_core_clock[%(n)]"
            derived="true"
            isNamedClock="true"
            units="Hz"
            description="System Bus Clock"
            toolTip="Clock for Bus (PIT, I2C, SPI, UART, ...)"
            value="8 MHz"
            disabledValue="0"
            min="1"/>

         <intOption key="system_timer_clock[%(n)]"
            locked="true"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            ref="(/ICS/system_icsoutclk_clock[%(n)])/((sim_clkdiv_outdiv3[%(n)])?2:1)#/ICS/system_icsoutclk_clock[%(n)]"
            derived="true"
            isNamedClock="true"
            units="Hz"
            description="System Timer Clock"
            toolTip="Clock for timers (FTM, PWT, ...)"
            value="8 MHz"
            disabledValue="0"
            min="1"/>

      </aliasCategoryOption>
   </for>

   <title />

   <category name="Control Signals" description="Control Signal Mapping" >
      <binaryOption key="sim_scgc_swd" condition="sim_scgc_swd_present"
         enabledBy="$(_BasicInfoGuard)"
         disabledValue="1"
         typeName="SimScgcSwd"
         description="SWD Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" isDefault="true" />
      </binaryOption>

      <binaryOption key="sim_sopt_swde" condition="sim_sopt_swde_present"
         ref="sim_scgc_swd"
         enabledBy="$(_BasicInfoGuard)"
         locked="true"
         derived="true"
         disabledValue="1"
         typeName="SimSWDEnable"
         disabledPinMap="SWD_DIO,PTA4;SWD_CLK,PTA0"
         toolTip="Controls: \n
                  PTA4 as PTA4/ACMP0_OUT or SWD_DIO, \n
                  PTA0 as PTA0/KBI0_P0/FTM0_CH0/RTC_CLKOUT/ACMP0_IN2/ADC0_SE0 or SWD_CLK functions"
         description="Single Wire Debug Port Pin Enable" >
         <choice name="PTA4, PTA0 available for peripherals"  value="0" enum="Pta4Pta0AsPeripheralPins" pinMap="SWD_DIO,;SWD_CLK," />
         <choice name="PTA4, PTA0 mapped as SWD pins"         value="1" enum="Pta4Pta0AsSwdPins"        pinMap="SWD_DIO,PTA4;SWD_CLK,PTA0" isDefault="true" />
      </binaryOption>

      <binaryOption key="sim_sopt_rstpe" condition="sim_sopt_rstpe_present"
         enabledBy="$(_BasicInfoGuard)"
         disabledValue="1"
         typeName="SimResetEnable"
         toolTip="This field can only be written once after any reset"
         description="RESET Pin Enable" >
         <choice name="PTA5 available for peripherals"  value="0" enum="Pta5AsPeripheralPin" pinMap="RESET_b," />
         <choice name="PTA5 mapped as RESET"            value="1" enum="Pta5AsReset"         pinMap="RESET_b,PTA5" isDefault="true" />
      </binaryOption>

      <binaryOption key="sim_sopt_nmie" condition="sim_sopt_nmie_present"
         enabledBy="$(_BasicInfoGuard)"
         disabledValue="1"
         typeName="SimNmiEnable"
         toolTip="This field can only be written once after any reset"
         description="NMI Pin Enable" >
         <choice name="PTB4 available for peripherals" value="0" enum="Ptb4AsPeripheralPins" pinMap="NMI_b," />
         <choice name="PTB4 mapped as NMI"             value="1" enum="Ptb4AsNmi"            pinMap="NMI_b,PTB4" isDefault="true" />
      </binaryOption>

      <choiceOption key="sim_sopt_busref" condition="sim_sopt_busref_present"
         enabledBy="$(_BasicInfoGuard)"
         valueFormat="SIM_SOPT_CLKOE(%s),SIM_SOPT_BUSREF(%s)"
         typeName="SimSoptRefClock"
         toolTip="Enable bus reference clock output on PTC5 with prescaler"
         description="BUS Clock Output select" >
         <choice name="Disabled (PTC5 available)" value="0,0" enum="Disabled"             pinMap="CLKOUT," />
         <choice name="Bus clock"                 value="1,0" enum="BusClock"             pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 2"    value="1,1" enum="BusClockDividedBy2"   pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 4"    value="1,2" enum="BusClockDividedBy4"   pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 8"    value="1,3" enum="BusClockDividedBy8"   pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 16"   value="1,4" enum="BusClockDividedBy16"  pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 32"   value="1,5" enum="BusClockDividedBy32"  pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 64"   value="1,6" enum="BusClockDividedBy64"  pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 128"  value="1,7" enum="BusClockDividedBy128" pinMap="CLKOUT,PTC5"  />
      </choiceOption>
   </category>

   <category name="ACMP" description="ACMP Options" >
      <binaryOption key="sim_scgc_acmp0" condition="sim_scgc_acmp0_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcAcmp0"
         description="ACMP0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_scgc_acmp1" condition="sim_scgc_acmp1_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcAcmp1"
         description="ACMP1 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_sopt_actrg" condition="sim_sopt_actrg_present"
         addToVar="Acmp0ExternalItems,Acmp1ExternalItems,Ftm2ExternalItems"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimSoptActrg"
         toolTip="Selects ACMP output used as the trigger0 input of FTM2"
         description="ACMP Trigger FTM2 selection" >
         <choice name="ACMP0_OUT"   value="0" enum="Acmp0_out" />
         <choice name="ACMP1_OUT"   value="1" enum="Acmp1_out" />
      </binaryOption>
   </category>

   <category name="ADC" description="ADC Options" >
      <binaryOption key="sim_scgc_adc0" condition="sim_scgc_adc0_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcAdc"
         description="ADC Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <choiceOption key="sim_sopt_adhwt" condition="sim_sopt_adhwt_present"
         enabledBy="$(_BasicInfoGuard)"
         addToVar="Adc0ExternalItems"
         typeName="SimSoptAdhwt"
         toolTip="Selects the ADC hardware trigger source. All trigger sources start ADC conversion on rising-edge"
         description="ADC Hardware Trigger Source" >
         <choice name="RTC overflow"                         value="0" enum="RtcOverflow" />
         <choice name="FTM0"                                 value="1" enum="Ftm0" />
         <choice name="FTM2 init trigger with 8-bit delay"   value="2" enum="Ftm2InitTriggerWith8BitDelay" />
         <choice name="FTM2 match trigger with 8-bit delay"  value="3" enum="Ftm2MatchTriggerWith8BitDelay" />
         <choice name="PIT channel 0 overflow"               value="4" enum="PitChannel0Overflow" />
         <choice name="PIT channel 1 overflow"               value="5" enum="PitChannel1Overflow" />
         <choice name="ACMP0 OUT"                            value="6" enum="Acmp0Out" />
         <choice name="ACMP1 OUT"                            value="7" enum="Acmp1Out" />
      </choiceOption>

      <intOption key="sim_sopt_delay" condition="sim_sopt_delay_present"
         addToVar="Adc0ExternalItems"
         enabledBy="$(_BasicInfoGuard)"
         units="ticks"
         description="FTM2 Trigger Delay"
         toolTip="Specifies the delay from FTM2 initial or match trigger to ADC hardware trigger when 1 is written to ADHWT.\n
                  The 8-bit modulo value allows the delay from 0 to 255 upon the BUSREF clock settings.\n
                  This is a one-shot counter that starts ticking when the trigger arrives and stops ticking when the counter value reaches the modulo value that is defined"
                  value="0"
      />
   </category>

   <category name="CRC" description="CRC Options" >
      <binaryOption key="sim_scgc_crc" condition="sim_scgc_crc_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcCrc"
         description="CRC Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>
   </category>

   <category name="FLASH" description="FLASH Options" >
      <binaryOption key="sim_scgc_flash" condition="sim_scgc_flash_present"
         enabledBy="$(_BasicInfoGuard)"
         disabledValue="1"
         typeName="SimScgcFlash"
         description="FLASH Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" isDefault="true" />
      </binaryOption>
   </category>

   <for keys="n" values="1;2" >
      <intOption key="Tclk%(n)"
         hidden="true"
         addToVar="FtmExternalItems,PwtExternalItems"
         description="Timer External clock input #%(n)"
         toolTip="This input is available as an external clock source for the timers"
         value="0"
         units="Hz"
      />
      <variableTemplate variables="Tclk%(n)"
         initExpressionOnSameLine="true"
      ><![CDATA[
         \t/// %tooltip
         \tstatic constexpr uint32_t Tclk%(n) =  %initExpression;
         \t\n
      ]]></variableTemplate>
   </for>

   <category name="FTM" description="FTM Options" >

      <for keys="n" values="1;2" >
         <aliasOption key="Tclk%(n)" locked="false" />
      </for>
      <binaryOption key="sim_sopt_ftmsync" condition="sim_sopt_ftmsync_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimSoptFtmsync"
         derived="true"
         locked="true"
         hidden="true"
         toolTip="Writing this field generates a PWM synchronisation trigger to the FTM2 module"
         description="FTM2 Synchronisation Select" >
         <choice name="Generates trigger"  value="1" enum="GenerateFtmTrigger" isDefault="true" />
      </binaryOption>

      <for keys="ftmNum" values="0;2" >

         <title description="FTM %(ftmNum)"/>

         <binaryOption key="sim_scgc_ftm%(ftmNum)" condition="sim_scgc_ftm%(ftmNum)_present"
            addToVar="Ftm%(ftmNum)ExternalItems"
            enabledBy="$(_BasicInfoGuard)"
            typeName="SimScgcFtm%(ftmNum)"
            description="FTM%(ftmNum) Clock Gate Control" >
            <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
            <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
         </binaryOption>

         <binaryOption key="sim_pinsel_ftm%(ftmNum)clkps" condition="sim_pinsel_ftm%(ftmNum)clkps_present"
            target="ftm%(ftmNum)ExternalClock"
            addToVar="Ftm%(ftmNum)ExternalItems"
            enabledBy="$(_BasicInfoGuard)"
            typeName="SimPinselFtm%(ftmNum)clkps"
            description="FTM%(ftmNum) TCLK Pin Select" >
            <choice name="Selects TCLK1 for FTM%(ftmNum) module"  value="0" enum="Tclk1" ref="Tclk1" code="Tclk1" />
            <choice name="Selects TCLK2 for FTM%(ftmNum) module"  value="1" enum="Tclk2" ref="Tclk2" code="Tclk2" />
         </binaryOption>

         <intOption key="ftm%(ftmNum)ExternalClock" condition="sim_pinsel_ftm%(ftmNum)clkps"
            addToVar="Ftm%(ftmNum)ExternalItems"
            toolTip="The frequency of the external clock selected for FTM%(ftmNum)"
            description="FTM%(ftmNum) external clock"
            locked="true"
            derived="true"
            units="Hz" />

         <clockCodeTemplate variable="sim_pinsel_ftm%(ftmNum)clkps"
            returnFormat="%s"
         ><![CDATA[
            \t/**
            \t * Get %description
            \t *
            \t * @return Clock frequency in Hz
            \t */
            \tstatic uint32_t getFtm%(ftmNum)ExternalClockFrequency() {
            \t
            \t   switch(%maskingExpression) {
            \t      default: return 0;
            %body
            \t   }
            \t}\n\n
         ]]></clockCodeTemplate>

         <binaryOption key="sim_pinsel_ftm0ps0" condition="sim_pinsel_ftm0ps0_present&amp;&amp;(%(ftmNum)==0)"
            addToVar="Ftm0ExternalItems"
            enabledBy="$(_BasicInfoGuard)"
            typeName="SimPinselFtm0ps0"
            description="FTM0 channel 0 Pin Select" >
            <choice name="PTA0"        value="0" enum="Pta0" />
            <choice name="PTB2"        value="1" enum="Ptb2" />
         </binaryOption>

         <binaryOption key="sim_pinsel_ftm0ps1" condition="sim_pinsel_ftm0ps1_present&amp;&amp;(%(ftmNum)==0)"
            addToVar="Ftm0ExternalItems"
            enabledBy="$(_BasicInfoGuard)"
            typeName="SimPinselFtm0ps1"
            description="FTM0 channel 1 Pin Select" >
            <choice name="PTA1"        value="0" enum="Pta1" />
            <choice name="PTB3"        value="1" enum="Ptb3" />
         </binaryOption>

         <choiceOption key="sim_sopt_ftmic" condition="sim_sopt_ftmic_present&amp;&amp;(%(ftmNum)==0)"
            addToVar="Ftm0ExternalItems"
            enabledBy="$(_BasicInfoGuard)"
            typeName="SimSoptFtmic"
            toolTip="Selects the sources for FTM0CH0 as capture input"
            description="FTM0 channel 0 Input Capture Source" >
            <choice name="FTM0_CH0 pin"  value="0" enum="Ftm0_ch0Pin" />
            <choice name="ACMP0_OUT"     value="1" enum="Acmp0_out" />
            <choice name="ACMP1_OUT"     value="2" enum="Acmp1_out" />
            <choice name="RTC overflow"  value="3" enum="RtcOverflow" />
         </choiceOption>

         <binaryOption key="sim_sopt_rxdce" condition="sim_sopt_rxdce_present&amp;&amp;(%(ftmNum)==0)"
            addToVar="Ftm0ExternalItems,Uart0ExternalItems"
            enabledBy="$(_BasicInfoGuard)"
            typeName="SimSoptRxdce"
            toolTip="Enables the UART0_RX to be captured by FTM0 channel 1"
            description="UART0_RX Capture on FTM0 channel 1" >
            <choice name="Not connected"                         value="0" enum="NotConnected" />
            <choice name="UART0_RX connected as FTM0 channel 1"  value="1" enum="Uart0_rxConnectedAsFtm0Channel1" />
         </binaryOption>

         <binaryOption key="sim_pinsel_ftm2ps2" condition="sim_pinsel_ftm2ps2_present&amp;&amp;(%(ftmNum)==2)"
            addToVar="Ftm2ExternalItems"
            enabledBy="$(_BasicInfoGuard)"
            typeName="SimPinselFtm2ps2"
            description="FTM2 Channel 2 Pin Select" >
            <choice name="PTC2"        value="0" enum="Ptc2"  />
            <choice name="PTC4"        value="1" enum="Ptc4"  />
         </binaryOption>

         <binaryOption key="sim_pinsel_ftm2ps3" condition="sim_pinsel_ftm2ps3_present&amp;&amp;(%(ftmNum)==2)"
            addToVar="Ftm2ExternalItems"
            enabledBy="$(_BasicInfoGuard)"
            typeName="SimPinselFtm2ps3"
            disabledPinMap="FTM2_CH3,PTC3#/FTM2/Ch3PinInUse"
            description="FTM2 Channel 3 Pin Select" >
            <choice name="PTC3"  value="0" enum="Ptc3" />
            <choice name="PTC5"  value="1" enum="Ptc5" />
         </binaryOption>
      </for>
   </category>

   <category name="I2C" description="I2C Options" >
      <binaryOption key="sim_scgc_i2c" condition="sim_scgc_i2c_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcI2c0"
         description="I2C0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_pinsel_i2c0ps" condition="sim_pinsel_i2c0ps_present"
         addToVar="I2c0ExternalItems"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimPinselI2c0ps"
         disabledPinMap="I2C0_SCL,PTA3;I2C0_SDA,PTA2#/I2C0/enablePeripheralSupport"
         description="I2C0 Pin Select" >
         <choice name="PTA3,PTA2 mapped to SCL,SDA"  value="0" enum="Pta3Pta2MappedToI2c0" pinMap="I2C0_SCL,PTA3;I2C0_SDA,PTA2" />
         <choice name="PTB7,PTB6 mapped to SCL,SDA"  value="1" enum="Ptb7Ptb6MappedToI2c0" pinMap="I2C0_SCL,PTB7;I2C0_SDA,PTB6" />
      </binaryOption>

   </category>

   <category name="IRQ" description="IRQ Options" >
      <binaryOption key="sim_scgc_irq" condition="sim_scgc_irq_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcIrq"
         description="IRQ Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>
   </category>

   <category name="KBI" description="KBI Options" >
      <binaryOption key="sim_scgc_kbi0" condition="sim_scgc_kbi0_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcKbi0"
         description="KBI0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_scgc_kbi1" condition="sim_scgc_kbi1_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcKbi1"
         description="KBI1 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>
   </category>

   <category name="PIT" description="PIT Options" >
      <binaryOption key="sim_scgc_pit" condition="sim_scgc_pit_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcPit"
         description="PIT Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>
   </category>

   <category name="PWT" description="PWT Options" >
      <for keys="n" values="1;2" >
         <aliasOption key="Tclk%(n)" locked="false" />
      </for>
      <binaryOption key="sim_scgc_pwt" condition="sim_scgc_pwt_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcPwt"
         description="PWT Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_pinsel_pwtclkps" condition="sim_pinsel_pwtclkps_present"
         addToVar="PwtExternalItems"
         target="pwtExternalClock"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimPinselPwtclkps"
         description="PWT TCLK Pin Select" >
         <choice name="Selects TCLK1 for PWT module"  value="0" enum="Tclk1" ref="Tclk1" code="Tclk1" />
         <choice name="Selects TCLK2 for PWT module"  value="1" enum="Tclk2" ref="Tclk2" code="Tclk2" />
      </binaryOption>

      <intOption key="pwtExternalClock" condition="sim_pinsel_pwtclkps"
         addToVar="PwtExternalItems"
         toolTip="The frequency of the external clock selected for PWT"
         description="PWT external clock"
         locked="true"
         derived="true"
         units="Hz" />

      <clockCodeTemplate variable="sim_pinsel_pwtclkps"
         returnFormat="%s"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return Clock frequency in Hz
         \t */
         \tstatic uint32_t getPwtExternalClockFrequency() {
         \t
         \t   switch(%maskingExpression) {
         \t      default: return 0;
         %body
         \t   }
         \t}\n\n
      ]]></clockCodeTemplate>

   </category>

   <category name="RTC" description="RTC Options" >
      <binaryOption key="sim_scgc_rtc" condition="sim_scgc_rtc_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcRtc"
         description="RTC Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

   </category>

   <category name="SPI" description="SPI Options" >
      <binaryOption key="sim_scgc_spi0" condition="sim_scgc_spi0_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcSpi0"
         description="SPI0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_pinsel_spi0ps" condition="sim_pinsel_spi0ps_present"
         addToVar="Spi0ExternalItems"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimPinselSpi0ps"
         toolTip="Selects the SPI0 Pinouts"
         disabledPinMap="#/SPI0/enablePeripheralSupport"
         description="SPI0 Pin Select" >
         <choice name="PTB2,PTB3,PTB4,PTB5 mapped to SPI0 pins"  value="0" enum="Ptb2Ptb3Ptb4Ptb5MappedToSpi0" pinMap="SPI0_SCK,PTB2;SPI0_MOSI,PTB3;SPI0_MISO,PTB4;SPI0_PCS,PTB5" />
         <choice name="PTA6,PTA7,PTB1,PTB0 mapped to SPI0 pins"  value="1" enum="Pta6Pta7Ptb1Ptb0MappedToSpi0" pinMap="SPI0_SCK,PTA6;SPI0_MOSI,PTA7;SPI0_MISO,PTB1;SPI0_PCS,PTB0" />
      </binaryOption>

   </category>

   <category name="UART" description="UART Options" >
      <binaryOption key="sim_scgc_uart0" condition="sim_scgc_uart0_present"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimScgcUart0"
         description="UART0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_pinsel_uart0ps" condition="sim_pinsel_uart0ps_present"
         addToVar="Uart0ExternalItems"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimPinselUart0ps"
         disabledPinMap="#/UART0/enablePeripheralSupport"
         description="UART0 Pin Select" >
         <choice name="PTB1,PTB0 mapped to Tx,Rx"  value="0" enum="MappedToPtb1Ptb0" pinMap="UART0_TX,PTB1;UART0_RX,PTB0" />
         <choice name="PTA3,PTA2 mapped to Tx,Rx"  value="1" enum="MappedToPta3Pta2" pinMap="UART0_TX,PTA3;UART0_RX,PTA2" />
      </binaryOption>

      <binaryOption key="sim_sopt_txdme" condition="sim_sopt_txdme_present"
         addToVar="Uart0ExternalItems,Ftm0ExternalItems"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimSoptTxdme"
         toolTip="Enables the UART0_TX output modulated by FTM0 channel 0"
         description="UART0_TX Modulation Select" >
         <choice name="UART0_TX directly connected to pin"  value="0" enum="Uart0_txDirectlyConnectedToPin" />
         <choice name="UART0_TX modulated by FTM0 channel"  value="1" enum="Uart0_txModulatedByFtm0Channel" />
      </binaryOption>

      <choiceOption key="sim_sopt_rxdfe" condition="sim_sopt_rxdfe_present"
         addToVar="Uart0ExternalItems,AcmpExternalItems"
         enabledBy="$(_BasicInfoGuard)"
         typeName="SimSoptRxdfe"
         toolTip="Enables the UART0_RX input to be filtered by ACMP.\n
                  When this function is enabled, any signal tagged with ACMP inputs can be regarded as UART0"
         description="UART0_RX Filter Select" >
         <choice name="UART0 module directly"  value="0" enum="Uart0ModuleDirectly" />
         <choice name="Filtered by ACMP0"      value="1" enum="FilteredByAcmp0" />
         <choice name="Filtered by ACMP1"      value="2" enum="FilteredByAcmp1" />
      </choiceOption>

   </category>


<!-- Grahic here -->

   <variableTemplate variables="sim_sopt_ftmsync" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * %description
      \t *
      %paramDescription
      \t */
      \tstatic void triggerFtm2() {
      \t   %register |= %mask;
      \t}\n\n
   ]]></variableTemplate>

   <for keys="field        : name"
      values="
      sim_sopt_delay       : Ftm2Delay;
      sim_sopt_adhwt       : SoptAdhwt;
      sim_sopt_busref      : SoptClkOut;
      sim_sopt_txdme       : SoptTxdme;
      sim_sopt_rxdce       : SoptRxdce;
      sim_sopt_ftmic       : SoptFtmic;
      sim_sopt_rxdfe       : SoptRxdfe;
      sim_sopt_actrg       : SoptActrg;
      sim_sopt_swde        : SingleWireDebugPins;
      sim_sopt_rstpe       : ResetPin;
      sim_sopt_nmie        : NonMaskableInterruptPin" >
      <variableTemplate variables="%(field)" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %fieldAssignment;
         \t}\n\n
      ]]></variableTemplate>
   </for>

   <for keys="field:name"
        values="
      sim_pinsel_pwtclkps  : PwtExternalClockPin;
      sim_pinsel_ftm2clkps : Ftm2ExternalClockPin;
      sim_pinsel_ftm0clkps : Ftm0ExternalClockPin;
      sim_pinsel_ftm2ps3   : Ftm2Ch3Pin;
      sim_pinsel_ftm2ps2   : Ftm2Ch2Pin;
      sim_pinsel_ftm0ps1   : Ftm0Ch1Pin;
      sim_pinsel_ftm0ps0   : Ftm0Ch0Pin;
      sim_pinsel_uart0ps   : Uart0Pins;
      sim_pinsel_spi0ps    : Spi0Pins;
      sim_pinsel_i2c0ps    : I2c0Pins" >
      <variableTemplate variables="%(field)" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void select%(name)(%params) {
         \t   %fieldAssignment;
         \t}\n\n
      ]]></variableTemplate>
   </for>

   <for keys="field:name"
        values="
      sim_scgc_acmp0:Acmp0;
      sim_scgc_acmp1:Acmp1;
      sim_scgc_adc:Adc;
      sim_scgc_irq:Irq;
      sim_scgc_kbi1:Kbi1;
      sim_scgc_kbi0:Kbi0;
      sim_scgc_uart0:Uart0;
      sim_scgc_spi0:Spi0;
      sim_scgc_i2c:I2c0;
      sim_scgc_swd:Swd;
      sim_scgc_flash:Flash;
      sim_scgc_crc:Crc;
      sim_scgc_ftm0:Ftm0;
      sim_scgc_ftm2:Ftm2;
      sim_scgc_pwt:Pwt;
      sim_scgc_pit:Pit;
      sim_scgc_rtc:Rtc" >
      <variableTemplate variables="%(field)" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t */
         \tstatic bool get%(name)ClockEnable() {
         \t   return %register & %mask;
         \t}
         \t
         \t/**
         \t * Disable %description
         \t */
         \tstatic void enable%(name)Clock() {
         \t   %register = %register | %mask;
         \t}
         \t
         \t/**
         \t * Enable %description
         \t */
         \tstatic void disable%(name)Clock() {
         \t   %register = %register & ~%mask;
         \t}\n\n
      ]]></variableTemplate>
   </for>

   <for keys="         field         :   name"
        values="sim_clkdiv_outdiv1[] : CoreClkDivider;
                sim_clkdiv_outdiv2[] : BusClockDivider;
                sim_clkdiv_outdiv3[] : TimerClockDivider" >
      <variableTemplate variables="%(field)" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}\n\n
      ]]></variableTemplate>
   </for>

<!--   __________ SIM Init class _______________________________ -->

   <template where="basicInfo" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init init {
      \t *
      \t *   // Setup values
      \t *
      \t *   0 , // FTM2 Trigger Delay
      \t *   SimSoptAdhwt_RtcOverflow , // ADC Hardware Trigger Source - RTC overflow
      \t *   SimSoptReferenceClockOutput_Disabled , // BUS Clock Output select - Disabled (PTC5 available)
      \t *   SimSoptTxdme_Uart0_txDirectlyConnectedToPin , // UART0_TX Modulation Select - UART0_TX directly connected to pin
      \t *   SimSoptRxdce_NotConnected , // UART0_RX Capture on FTM0 channel 1 - Not connected
      \t *   SimSoptRxdfe_Uart0ModuleDirectly , // UART0_RX Filter Select - UART0 module directly
      \t *   SimSoptFtmic_Ftm0_ch0Pin , // FTM0 channel 0 Input Capture Source - FTM0_CH0 pin
      \t *   SimSoptActrg_Acmp0_out , // ACMP Trigger FTM2 selection - ACMP0_OUT
      \t *   SimSWDEnable_Pta4Pta0AsSwdPins , // Single Wire Debug Port Pin Enable - PTA4, PTA0 mapped as SWD pins
      \t *   SimResetEnable_Pta5AsReset , // RESET Pin Enable - PTA5 mapped as RESET
      \t *   SimNmiEnable_Ptb4AsNmi , // NMI Pin Enable - PTB4 mapped as NMI
      \t *   SimPinselPwtclkps_SelectsTclk1ForPwtModule , // PWT TCLK Pin Select - Selects TCLK1 for PWT module
      \t *   SimPinselFtm2clkps_SelectsTclk1ForFtm2Module , // FTM2 TCLK Pin Select - Selects TCLK1 for FTM2 module
      \t *   SimPinselFtm0clkps_SelectsTclk1ForFtm0Module , // FTM0 TCLK Pin Select - Selects TCLK1 for FTM0 module
      \t *   SimPinselFtm2ps3_Ptc3 , // FTM2 Channel 3 Pin Select - PTC3
      \t *   SimPinselFtm2ps2_Ptc2 , // FTM2 Channel 2 Pin Select - PTC2
      \t *   SimPinselFtm0ps1_Pta1 , // FTM0 channel 1 Pin Select - PTA1
      \t *   SimPinselFtm0ps0_Pta0 , // FTM0 channel 0 Pin Select - PTA0
      \t *   SimPinselUart0ps_MappedToPtb1Ptb0 , // UART0 Pin Select - PTB1,PTB0 mapped to Tx,Rx
      \t *   SimPinselSpi0ps_Ptb2Ptb3Ptb4Ptb5MappedToSpi0 , // SPI0 Pin Select - PTB2,PTB3,PTB4,PTB5 mapped to SPI0 pins
      \t *   SimPinselI2c0ps_Pta3Pta2MappedToI2c0 , // I2C0 Pin Select - PTA3,PTA2 mapped to SCL,SDA
      \t *   SimScgcAcmp1_ClockDisabled , // ACMP1 Clock Gate Control - Clock disabled
      \t *   SimScgcAcmp0_ClockDisabled , // ACMP0 Clock Gate Control - Clock disabled
      \t *   SimScgcAdc_ClockDisabled , // ADC Clock Gate Control - Clock disabled
      \t *   SimScgcIrq_ClockDisabled , // IRQ Clock Gate Control - Clock disabled
      \t *   SimScgcKbi1_ClockDisabled , // KBI1 Clock Gate Control - Clock disabled
      \t *   SimScgcKbi0_ClockDisabled , // KBI0 Clock Gate Control - Clock disabled
      \t *   SimScgcUart0_ClockEnabled , // UART0 Clock Gate Control - Clock enabled
      \t *   SimScgcSpi0_ClockDisabled , // SPI0 Clock Gate Control - Clock disabled
      \t *   SimScgcI2c_ClockDisabled , // I2C0 Clock Gate Control - Clock disabled
      \t *   SimScgcSwd_ClockEnabled , // SWD Clock Gate Control - Clock enabled
      \t *   SimScgcFlash_ClockEnabled , // FLASH Clock Gate Control - Clock enabled
      \t *   SimScgcCrc_ClockDisabled , // CRC Clock Gate Control - Clock disabled
      \t *   SimScgcFtm2_ClockDisabled , // FTM2 Clock Gate Control - Clock disabled
      \t *   SimScgcFtm0_ClockDisabled , // FTM0 Clock Gate Control - Clock disabled
      \t *   SimScgcPwt_ClockDisabled , // PWT Clock Gate Control - Clock disabled
      \t *   SimScgcPit_ClockDisabled , // PIT Clock Gate Control - Clock disabled
      \t *   SimScgcRtc_ClockDisabled,  // RTC Clock Gate Control - Clock disabled
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure(init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate where="basicInfo" codeGenCondition="enablePeripheralSupport"
      variables="sim_sopt_delay,sim_sopt_dlyact,sim_sopt_adhwt,sim_sopt_busref,sim_sopt_txdme,sim_sopt_ftmsync,sim_sopt_rxdce,sim_sopt_rxdfe,sim_sopt_ftmic,sim_sopt_actrg,sim_sopt_swde,sim_sopt_rstpe,sim_sopt_nmie"
      linePadding="xxx"
   ><![CDATA[
      %multilineDescription
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="enablePeripheralSupport"
      variables="sim_pinsel_pwtclkps,sim_pinsel_ftm2clkps,sim_pinsel_ftm0clkps,sim_pinsel_ftm2ps3,sim_pinsel_ftm2ps2,sim_pinsel_ftm0ps1,sim_pinsel_ftm0ps0,sim_pinsel_uart0ps,sim_pinsel_spi0ps,sim_pinsel_i2c0ps"
      linePadding="xxx"
   ><![CDATA[
      %multilineDescription
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="enablePeripheralSupport"
      variables="sim_scgc_acmp1,sim_scgc_acmp0,sim_scgc_adc,sim_scgc_irq,sim_scgc_kbi1,sim_scgc_kbi0,sim_scgc_uart0,sim_scgc_spi0,sim_scgc_i2c,sim_scgc_swd,sim_scgc_flash,sim_scgc_crc,sim_scgc_ftm2,sim_scgc_ftm0,sim_scgc_pwt,sim_scgc_pit,sim_scgc_rtc"
      linePadding="xxx"
   ><![CDATA[
      %multilineDescription
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

<!--   Constructors -->

   <for keys="r"
      values="
            sim_sopt_adhwt;
            sim_sopt_busref;
            sim_sopt_txdme;
            sim_sopt_ftmsync;
            sim_sopt_rxdce;
            sim_sopt_rxdfe;
            sim_sopt_ftmic;
            sim_sopt_actrg;
            sim_sopt_swde;
            sim_sopt_rstpe;
            sim_sopt_nmie;
            sim_pinsel_pwtclkps;
            sim_pinsel_ftm2clkps;
            sim_pinsel_ftm0clkps;
            sim_pinsel_ftm2ps3;
            sim_pinsel_ftm2ps2;
            sim_pinsel_ftm0ps1;
            sim_pinsel_ftm0ps0;
            sim_pinsel_uart0ps;
            sim_pinsel_spi0ps;
            sim_pinsel_i2c0ps;
            sim_scgc_acmp1;
            sim_scgc_acmp0;
            sim_scgc_adc;
            sim_scgc_irq;
            sim_scgc_kbi1;
            sim_scgc_kbi0;
            sim_scgc_uart0;
            sim_scgc_spi0;
            sim_scgc_i2c;
            sim_scgc_swd;
            sim_scgc_flash;
            sim_scgc_crc;
            sim_scgc_ftm2;
            sim_scgc_ftm0;
            sim_scgc_pwt;
            sim_scgc_pit;
            sim_scgc_rtc;
            sim_sopt_delay
            " >
      <variableTemplate where="basicInfo" codeGenCondition="enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            sim_sopt_delay,
            sim_sopt_dlyact,
            sim_sopt_adhwt,
            sim_sopt_busref,
            sim_sopt_txdme,
            sim_sopt_rxdce,
            sim_sopt_rxdfe,
            sim_sopt_ftmic,
            sim_sopt_actrg,
            sim_sopt_swde,
            sim_sopt_rstpe,
            sim_sopt_nmie,
            sim_pinsel_pwtclkps,
            sim_pinsel_ftm2clkps,
            sim_pinsel_ftm0clkps,
            sim_pinsel_ftm2ps3,
            sim_pinsel_ftm2ps2,
            sim_pinsel_ftm0ps1,
            sim_pinsel_ftm0ps0,
            sim_pinsel_uart0ps,
            sim_pinsel_spi0ps,
            sim_pinsel_i2c0ps,
            sim_scgc_acmp1,
            sim_scgc_acmp0,
            sim_scgc_adc,
            sim_scgc_irq,
            sim_scgc_kbi1,
            sim_scgc_kbi0,
            sim_scgc_uart0,
            sim_scgc_spi0,
            sim_scgc_i2c,
            sim_scgc_swd,
            sim_scgc_flash,
            sim_scgc_crc,
            sim_scgc_ftm2,
            sim_scgc_ftm0,
            sim_scgc_pwt,
            sim_scgc_pit,
            sim_scgc_rtc
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues
      \t};\n\n
   ]]></variableTemplate>

   <template  codeGenCondition="enablePeripheralSupport" >
      <![CDATA[
      \t/**
      \t * Configure $(_BASENAME)
      \t *
      \t * This only includes SOPT, PINSEL and SCGC
      \t */
      \tstatic void configure(const Init &configValue) {
      \t   sim->SOPT            = configValue.sopt;
      \t   sim->PINSEL          = configValue.pinsel;
      \t   sim->SCGC            = configValue.scgc;
      \t}
      \t
      \t/**
      \t * Default initialisation for $(_BASENAME)
      \t */
      \tstatic void defaultConfigure() {
      \t   configure(DefaultInitValue);
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="enablePeripheralSupport" >
      <![CDATA[
      \t}; // class $(_Class)::BasicInfo::Init\n\n
   ]]>
   </template>

   <!-- ____ Clock Variables __________________ -->

   <template where="basicInfo" codeGenCondition="/ICS/enablePeripheralSupport" ><![CDATA[
      \t/*
      \t * Global clocks
      \t */
      \t\n
   ]]></template>
   <template where="basicInfo" codeGenCondition="!/ICS/enablePeripheralSupport" ><![CDATA[
      \t/*
      \t * Global clocks constants
      \t * These are provided when minimal clock generator code is used.
      \t * They assume no clock changes are made after startup.
      \t * Values provided are from USBDM configuration.
      \t */
      \t\n
   ]]></template>

   <for keys=" clock                            : name "
      values=" system_core_clock[0]             : SystemCoreClock;
               system_bus_clock[0]              : SystemBusClock;
               system_timer_clock[0]            : SystemTimerClock;
               system_flexbus_clock[0]          : SystemFlexbusClock
         " >
      <variableTemplate where="usbdm" variables="%(clock)" codeGenCondition="/ICS/enablePeripheralSupport" ><![CDATA[
         \t/**
         \t *  %description
         \t *  %tooltip
         \t *  (Full configuration - declaration)
         \t */
         \textern "C" uint32_t %(name);
         \t\n
      ]]></variableTemplate>
      <variableTemplate key="/SYSTEM/Clocks" variables="%(clock)" codeGenCondition="/ICS/enablePeripheralSupport" ><![CDATA[
         \t/**
         \t *  %description
         \t *  %tooltip
         \t *  (Full configuration - definition)
         \t */
         \tuint32_t %(name);
         \t\n
      ]]></variableTemplate>
      <variableTemplate where="usbdm" variables="%(clock)" codeGenCondition="!/ICS/enablePeripheralSupport" ><![CDATA[
         \t/**
         \t *  %description
         \t *  %tooltip
         \t *  (Minimal configuration - definition)
         \t */
         \tconstexpr uint32_t %(name) = %valueExpression;
         \t\n
      ]]></variableTemplate>
   </for>

   <template><![CDATA[
      \t/*
      \t * Template:sim_commonTemplates.xml
      \t */ \n
   ]]></template>


   <template codeGenCondition="/ICS/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Update system clock values
      \t *
      \t * @param systemClock Frequency of clock provided to system clock dividers
      \t */
      \tstatic void updateSystemClocks(unsigned systemClock) {
      \t
      \t   SystemCoreClock    = systemClock/(((SIM->CLKDIV&SIM_CLKDIV_OUTDIV1_MASK)>>SIM_CLKDIV_OUTDIV1_SHIFT)+1);
      \t   SystemBusClock     = SystemCoreClock/(((SIM->CLKDIV&SIM_CLKDIV_OUTDIV2_MASK)>>SIM_CLKDIV_OUTDIV2_SHIFT)+1);
      \t   SystemTimerClock   = systemClock/(((SIM->CLKDIV&SIM_CLKDIV_OUTDIV3_MASK)>>SIM_CLKDIV_OUTDIV3_SHIFT)+1);
      \t}\n\n
   ]]></template>

   <template  ><![CDATA[
      \t//! Frequency of Low Power Oscillator (LPO) Clock [~1kHz]
      \tstatic constexpr uint32_t system_low_power_clock = $(/PMC/system_low_power_clock)UL;

      \t/**
      \t * Get LPO clock
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic constexpr uint32_t getLpoClock() {
      \t   return system_low_power_clock;
      \t}\n\n
   ]]></template>

   <template where="static" ><![CDATA[
      \t/**
      \t * Shared callback to catch unhandled interrupt
      \t * Only used for callbacks with no parameters
      \t */
      \tvoid unhandledCallback() {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]></template>

   <!-- ____ Common __________________ -->

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <template key="/ICS/ClockStartupAfter" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \tUSBDM::$(_Info)::defaultConfigure();
   ]]></template>

   <template key="DefaultInitValue" ><![CDATA[
      \tstatic void initRegs() {
      \t
      \t   defaultConfigure();
      \t};\n\n
   ]]></template>

   <xi:include href="simFiles-MKE.xml" />

   <variableTemplate variables="sim_clkdiv_outdiv1[0],sim_clkdiv_outdiv2[0],sim_clkdiv_outdiv3[0],sim_clkdiv_outdiv4[0]"><![CDATA[
      \t/** Reset clock divider value if clock not fully configured */
      \tstatic constexpr uint32_t sim_clkdiv = %initExpression;
      \t\n
   ]]></variableTemplate>

   <for keys="n" values=";0;1;2;3;4;5;6" >
      <variableTemplate variables="system_uart%(n)_fixedclocksource[%(n)]" ><![CDATA[
         \t/**
         \t * Get UART%(n) input clock frequency
         \t *
         \t * @return Clock frequency in Hz
         \t */
         \tstatic inline uint32_t getUart%(n)Clock() {
         \t   return $(system_uart%(n)_fixedclocksource[%(n)].code[]);
         \t}\n\n
      ]]></variableTemplate>
   </for>

</peripheralPage>
