<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- sim_mke04z4.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="System Integration Module" >

   <constant key="isGeneratedByDefault"     type="Boolean" value="false" />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"  />
   <xi:include href="enablePeripheral.xml" />
   <title />

<!-- ==================== Constants ==================== -->

   <!--                                   RUN        -->
   <constant key="ICSOUTCLK_max"  value="50MHz"  type="Long"    hidden="false" />
   <constant key="ICSFLLCLK_max"  value="50MHz"  type="Long"    hidden="false" />
   <constant key="I2S_max"        value="25MHz"  type="Long"    hidden="false" />
   <constant key="LPUART_max"     value="48MHz"  type="Long"    hidden="false" />
   <constant key="FTM_max"        value="48MHz"  type="Long"    hidden="false" />

   <!-- Indicates the number of PIT channels -->
   <constant key="/PIT_NumChannels" type="Long" value="2" />

   <!-- Indicates the number of IRQ vectors allocated to the PIT -->
   <constant key="/PIT_NumVectors" type="Long" value="2" />

   <!-- Indicates the number of FTM channels -->
   <constant key="/FTM0_NumChannels" type="Long" value="2" />
   <constant key="/FTM2_NumChannels" type="Long" value="6" />

   <!-- Indicates the number of IRQ vectors allocated to the FTMs -->
   <constant key="/FTM0_NumVectors" type="Long" value="1" />
   <constant key="/FTM2_NumVectors" type="Long" value="1" />

   <!-- Indicates the number of DMA channels -->
   <!-- None -->

   <!-- Indicates the number of DMA channels -->
   <!-- None -->

   <!-- LLWU wakeup devices -->
   <!-- None -->

   <!-- DMA slots -->
   <!-- None -->

   <!--
        Simple pin mapping information
        inputPinMap  Input pins with custom mapping implementation in peripheral file
        outputPinMap Output pins with custom mapping implementation in peripheral file
        pinMap       Default pin mapping enabled whenever the peripheral signal is enabled
   -->
   <!-- Pin mapping for ADC0 SE0-SE11 -->
   <constant key="/ADC0/inputPinMap" type="String"
      value="&quot;PTA0,PTA1,PTA6,PTA7,PTB0,PTB1,PTB2,PTB3,PTC0,PTC1,PTC2,PTC3&quot;" />

   <!-- Pin mapping for ACMP0 IN0,IN1,IN2 -->
   <constant key="/ACMP0/inputPinMap"  type="String" value="&quot;PTB2,PTA1,PTA0&quot;" />

   <!-- Pin mapping for ACMP1 IN0,IN1,IN2 -->
   <constant key="/ACMP1/inputPinMap"  type="String" value="&quot;PTA6,PTA7,PTB4&quot;" />


   <!-- FTM0 channels -->
   <dynamicSignalMapping signal="FTM0_CH0" >
      <signalMapping pin="-"     expression="!/FTM0/Ch0PinInUse"  />
      <signalMapping pin="PTA0"  expression="!sim_pinsel_ftm0ps0"        />
      <signalMapping pin="PTB2" />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM0_CH1" >
      <signalMapping pin="-"     expression="!/FTM0/Ch1PinInUse" />
      <signalMapping pin="PTA1"  expression="(!sim_pinsel_ftm0ps1)"        />
      <signalMapping pin="PTB3" />
   </dynamicSignalMapping>

   <!-- FTM2 channels -->
   <dynamicSignalMapping signal="FTM2_CH0" >
      <signalMapping pin="-"     expression="!/FTM2/Ch0PinInUse"  />
      <signalMapping pin="*"    />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_CH1" >
      <signalMapping pin="-"     expression="!/FTM2/Ch1PinInUse" />
      <signalMapping pin="*"    />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_CH2" >
      <signalMapping pin="-"     expression="!/FTM2/Ch2PinInUse"  />
      <signalMapping pin="PTC2"  expression="(!sim_pinsel_ftm2ps2)"        />
      <signalMapping pin="PTC4" />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_CH3" >
      <signalMapping pin="-"     expression="!/FTM2/Ch3PinInUse" />
      <signalMapping pin="PTC3"  expression="(!sim_pinsel_ftm2ps3)"        />
      <signalMapping pin="PTC5" />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_CH4" >
      <signalMapping pin="-"     expression="!/FTM2/Ch4PinInUse"  />
      <signalMapping pin="*"    />
   </dynamicSignalMapping>
   <dynamicSignalMapping signal="FTM2_CH5" >
      <signalMapping pin="-"     expression="!/FTM2/Ch5PinInUse" />
      <signalMapping pin="*"    />
   </dynamicSignalMapping>

   <!-- Fault pin mapping for FTM2 -->
   <for keys="inp" dim="4">
      <dynamicSignalMapping signal="FTM2_FLT%(inp)" >
         <signalMapping pin="*"     expression="/FTM2/ftm_fltctrl_fault%(inp)en != 0" />
         <signalMapping pin="-"    />
      </dynamicSignalMapping>
   </for>

   <!-- Pin mapping for IRQ -->
   <constant key="/IRQ/pinMap"      type="String" value="&quot;IRQ,PTA5&quot;" />

   <!-- Pin mapping for KBIs -->
   <constant key="/KBI0/inputPinMap" type="String" value="&quot;PT(A-B)(0-3)&quot;"               />
   <constant key="/KBI1/inputPinMap" type="String" value="&quot;PTC(4-5),PTC(0-3),PTB(4-5)&quot;" />

   <!-- Pin mapping for OSC0 -->
   <constant key="/OSC0/pinMap"      type="String" value="&quot;XTAL,PTB6;EXTAL,PTB7&quot;" />

   <!-- Pin mapping for PWT -->
   <constant key="/PWT/inputMapping" value="&quot;PTC4&quot;,&quot;PTB0&quot;,&quot;ACMP0_O&quot;,&quot;ACMP1_O&quot;" type="String" />

   <!-- Pin mapping for RTC -->
   <constant key="/RTC/outputPinMap" type="String" value="&quot;PTA0&quot;" />

   <!-- Pin mapping for TCLK 1 and 2 inputs -->
   <for keys=  " tclk : clksel "
        values="  1   : false  ;
                  2   : true   " >
      <dynamicSignalMapping signal="TCLK%(tclk)" >
         <signalMapping
            pin="*"
            expression="
               (/FTM0/externalClockUsed&amp;&amp;(sim_pinsel_ftm0clkps==%(clksel)))||
               (/FTM2/externalClockUsed&amp;&amp;(sim_pinsel_ftm2clkps==%(clksel)))||
               (/PWT/externalClockUsed &amp;&amp;(sim_pinsel_pwtclkps ==%(clksel)))"  />
         <signalMapping pin="-" />
      </dynamicSignalMapping>
   </for>

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %paramType[index]               As for %paramType
    * %paramName[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %fieldAssignment         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %maskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

   <xi:include href="simCommon.xml" />

   <for keys="n" dim="=numberOfClockSettings" >
      <aliasCategoryOption key="/ICS/ClockConfig[%(n)]" derived="true" locked="true" >

         <aliasOption key="/ICS/enableClockConfiguration[%(n)]" locked="false" />
         <if condition="%(n)==0">
            <aliasOption key="/ICS/ics_c2_bdiv[%(n)]" locked="false" />
         </if>
         <for keys="u : name              : code            : ref"
            values="0 : System bus clock : SystemBusClock : system_bus_clock[%(n)]" >

            <choiceOption key="system_uart%(u)_fixedclocksource[%(n)]"
               hidden="true"
               target="system_uart%(u)_clock[%(n)]"
               locked="true"
               derived="true"
               description="UART%(u) Clock source"
               toolTip="Fixed clock source for UART (%(code))" >
               <choice value="0"  name="%(name)" ref="%(ref)" code="%(code)" />
            </choiceOption>

            <intOption key="system_uart%(u)_clock[%(n)]"
               hidden="true"
               locked="true"
               derived="true"
               units="Hz"
               description="UART%(u) Clock frequency"
               toolTip="Frequency of clock to UART%(u)"
               value="0" />
         </for>

         <choiceOption key="sim_clkdiv_outdiv1[%(n)]" condition="sim_clkdiv_outdiv1_present"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            typeName="SimCoreClkDivider"
            toolTip="This field sets the divide value for the core/system clock"
            description="Core/System Clock Divider value" >
            <choice name="ICSOUTCLK/1"    value="0" enum="Direct" />
            <choice name="ICSOUTCLK/2"    value="1" enum="DivBy2" />
            <choice name="ICSOUTCLK/3"    value="2" enum="DivBy3" />
            <choice name="ICSOUTCLK/4"    value="3" enum="DivBy4" />
         </choiceOption>

         <binaryOption key="sim_clkdiv_outdiv2[%(n)]" condition="sim_clkdiv_outdiv2_present"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            typeName="SimBusClkDivider"
            toolTip="This field sets the divide value for the bus/FLASH, follows OUTDIV1"
            description="Bus/Flash Clock Divider value" >
            <choice name="Core clock/1"    value="0" enum="Direct" />
            <choice name="Core clock/2"    value="1" enum="DivBy2" />
         </binaryOption >

         <binaryOption key="sim_clkdiv_outdiv3[%(n)]" condition="sim_clkdiv_outdiv3_present"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            typeName="SimTimerClkDivider"
            toolTip="This field sets the divide value for the timers(FTM0, FTM2,PWT)"
            description="Timer Clock Divider value" >
            <choice name="ICSOUTCLK/1"    value="0" enum="Direct" />
            <choice name="ICSOUTCLK/2"    value="1" enum="DivBy2" />
         </binaryOption>

         <intOption key="system_core_clock[%(n)]"
            locked="true"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            ref="(/ICS/system_icsoutclk_clock[%(n)])/((sim_clkdiv_outdiv1[%(n)])+1)#/ICS/system_icsoutclk_clock[%(n)]"
            derived="true"
            isNamedClock="true"
            units="Hz"
            description="System Core Clock"
            toolTip="Clock for CORE (CPU) and SYSTEM (NVIC, RAM, ...)"
            value="48 MHz"
            disabledValue="0"
            min="1" />

         <intOption key="system_bus_clock[%(n)]"
            locked="true"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            ref="(system_core_clock[%(n)])/((sim_clkdiv_outdiv2[%(n)])?2:1)#system_core_clock[%(n)]"
            derived="true"
            isNamedClock="true"
            units="Hz"
            description="System Bus Clock"
            toolTip="Clock for Bus (PIT, I2C, SPI, UART, ...)"
            value="8 MHz"
            disabledValue="0"
            min="1"/>

         <intOption key="system_timer_clock[%(n)]"
            locked="true"
            enabledBy="(%(n)==0)||/ICS/enableClockConfiguration[%(n)]"
            ref="(/ICS/system_icsoutclk_clock[%(n)])/((sim_clkdiv_outdiv3[%(n)])?2:1)#/ICS/system_icsoutclk_clock[%(n)]"
            derived="true"
            isNamedClock="true"
            units="Hz"
            description="System Timer Clock"
            toolTip="Clock for timers (FTM, PWT, ...)"
            value="8 MHz"
            disabledValue="0"
            min="1"/>

      </aliasCategoryOption>
   </for>

   <title />

   <category name="Control Signals" description="Control Signal Mapping" >
      <binaryOption key="sim_scgc_swd" condition="sim_scgc_swd_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         disabledValue="1"
         typeName="SimScgcSwd"
         description="SWD Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" isDefault="true" />
      </binaryOption>

      <binaryOption key="sim_sopt_swde" condition="sim_sopt_swde_present"
         ref="sim_scgc_swd"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         locked="true"
         derived="true"
         disabledValue="1"
         typeName="SimSWDEnable"
         disabledPinMap="SWD_DIO,PTA4;SWD_CLK,PTA0"
         toolTip="Controls: \n
                  PTA4 as PTA4/ACMP0_OUT or SWD_DIO, \n
                  PTA0 as PTA0/KBI0_P0/FTM0_CH0/RTC_CLKOUT/ACMP0_IN2/ADC0_SE0 or SWD_CLK functions"
         description="Single Wire Debug Port Pin Enable" >
         <choice name="PTA4, PTA0 available for peripherals"  value="0" enum="Pta4Pta0AsPeripheralPins" pinMap="SWD_DIO,;SWD_CLK," />
         <choice name="PTA4, PTA0 mapped as SWD pins"         value="1" enum="Pta4Pta0AsSwdPins"        pinMap="SWD_DIO,PTA4;SWD_CLK,PTA0" isDefault="true" />
      </binaryOption>

      <binaryOption key="sim_sopt_rstpe" condition="sim_sopt_rstpe_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         disabledValue="1"
         typeName="SimResetEnable"
         toolTip="This field can only be written once after any reset"
         description="RESET Pin Enable" >
         <choice name="PTA5 available for peripherals"  value="0" enum="Pta5AsPeripheralPin" pinMap="RESET_b," />
         <choice name="PTA5 mapped as RESET"            value="1" enum="Pta5AsReset"         pinMap="RESET_b,PTA5" isDefault="true" />
      </binaryOption>

      <binaryOption key="sim_sopt_nmie" condition="sim_sopt_nmie_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         disabledValue="1"
         typeName="SimNmiEnable"
         toolTip="This field can only be written once after any reset"
         description="NMI Pin Enable" >
         <choice name="PTB4 available for peripherals" value="0" enum="Ptb4AsPeripheralPins" pinMap="NMI_b," />
         <choice name="PTB4 mapped as NMI"             value="1" enum="Ptb4AsNmi"            pinMap="NMI_b,PTB4" isDefault="true" />
      </binaryOption>

      <choiceOption key="sim_sopt_busref" condition="sim_sopt_busref_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         valueFormat="SIM_SOPT_CLKOE(%s),SIM_SOPT_BUSREF(%s)"
         typeName="SimSoptRefClock"
         toolTip="Enable bus reference clock output on PTC5 with prescaler"
         description="BUS Clock Output select" >
         <choice name="Disabled (PTC5 available)" value="0,0" enum="Disabled"             pinMap="CLKOUT," />
         <choice name="Bus clock"                 value="1,0" enum="BusClock"             pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 2"    value="1,1" enum="BusClockDividedBy2"   pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 4"    value="1,2" enum="BusClockDividedBy4"   pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 8"    value="1,3" enum="BusClockDividedBy8"   pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 16"   value="1,4" enum="BusClockDividedBy16"  pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 32"   value="1,5" enum="BusClockDividedBy32"  pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 64"   value="1,6" enum="BusClockDividedBy64"  pinMap="CLKOUT,PTC5"  />
         <choice name="Bus clock divided by 128"  value="1,7" enum="BusClockDividedBy128" pinMap="CLKOUT,PTC5"  />
      </choiceOption>
   </category>

   <category name="ADC" description="ADC Options" >
      <binaryOption key="sim_scgc_adc" condition="sim_scgc_adc_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcAdc"
         description="ADC Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <choiceOption key="sim_sopt_adhwt" condition="sim_sopt_adhwt_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimSoptAdhwt"
         toolTip="Selects the ADC hardware trigger source. All trigger sources start ADC conversion on rising-edge"
         description="ADC Hardware Trigger Source" >
         <choice name="RTC overflow"                         value="0" enum="RtcOverflow" />
         <choice name="FTM0"                                 value="1" enum="Ftm0" />
         <choice name="FTM2 init trigger with 8-bit delay"   value="2" enum="Ftm2InitTriggerWith8BitDelay" />
         <choice name="FTM2 match trigger with 8-bit delay"  value="3" enum="Ftm2MatchTriggerWith8BitDelay" />
         <choice name="PIT channel 0 overflow"               value="4" enum="PitChannel0Overflow" />
         <choice name="PIT channel 1 overflow"               value="5" enum="PitChannel1Overflow" />
         <choice name="ACMP0 OUT"                            value="6" enum="Acmp0Out" />
         <choice name="ACMP1 OUT"                            value="7" enum="Acmp1Out" />
      </choiceOption>

      <intOption key="sim_sopt_delay" condition="sim_sopt_delay_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="Ticks"
         units="ticks"
         description="FTM2 Trigger Delay"
         toolTip="Specifies the delay from FTM2 initial or match trigger to ADC hardware trigger when 1 is written to ADHWT.\n
                  The 8-bit modulo value allows the delay from 0 to 255 upon the BUSREF clock settings.\n
                  This is a one-shot counter that starts ticking when the trigger arrives and stops ticking when the counter value reaches the modulo value that is defined"
                  value="0"
      />
   </category>

   <category name="ACMP" description="ACMP Options" >
      <binaryOption key="sim_scgc_acmp0" condition="sim_scgc_acmp0_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcAcmp0"
         description="ACMP0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_sopt_actrg" condition="sim_sopt_actrg_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimSoptActrg"
         toolTip="Selects ACMP output used as the trigger0 input of FTM2"
         description="ACMP Trigger FTM2 selection" >
         <choice name="ACMP0_OUT"   value="0" enum="Acmp0_out" />
         <choice name="ACMP1_OUT"   value="1" enum="Acmp1_out" />
      </binaryOption>

      <binaryOption key="sim_scgc_acmp1" condition="sim_scgc_acmp1_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcAcmp1"
         description="ACMP1 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>
   </category>

   <category name="CRC" description="CRC Options" >
      <binaryOption key="sim_scgc_crc" condition="sim_scgc_crc_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcCrc"
         description="CRC Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>
   </category>

   <category name="FLASH" description="FLASH Options" >
      <binaryOption key="sim_scgc_flash" condition="sim_scgc_flash_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         disabledValue="1"
         typeName="SimScgcFlash"
         description="FLASH Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" isDefault="true" />
      </binaryOption>
   </category>

   <category name="FTM" description="FTM Options" >
      <binaryOption key="sim_sopt_ftmsync" condition="sim_sopt_ftmsync_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimSoptFtmsync"
         derived="true"
         locked="true"
         hidden="true"
         toolTip="Writing this field generates a PWM synchronisation trigger to the FTM2 module"
         description="FTM2 Synchronisation Select" >
         <choice name="Generates trigger"  value="1" enum="GenerateFtmTrigger" isDefault="true" />
      </binaryOption>

      <title description="FTM 0"/>

      <binaryOption key="sim_scgc_ftm0" condition="sim_scgc_ftm0_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcFtm0"
         description="FTM0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_pinsel_ftm0clkps" condition="sim_pinsel_ftm0clkps_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimPinselFtm0clkps"
         description="FTM0 TCLK Pin Select" >
         <choice name="Selects TCLK1 for FTM0 module"  value="0" enum="SelectsTclk1ForFtm0Module" />
         <choice name="Selects TCLK2 for FTM0 module"  value="1" enum="SelectsTclk2ForFtm0Module" />
      </binaryOption>

      <binaryOption key="sim_pinsel_ftm0ps0" condition="sim_pinsel_ftm0ps0_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimPinselFtm0ps0"
         description="FTM0 channel 0 Pin Select" >
         <choice name="PTA0"        value="0" enum="Pta0" />
         <choice name="PTB2"        value="1" enum="Ptb2" />
      </binaryOption>

      <binaryOption key="sim_pinsel_ftm0ps1" condition="sim_pinsel_ftm0ps1_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimPinselFtm0ps1"
         description="FTM0 channel 1 Pin Select" >
         <choice name="PTA1"        value="0" enum="Pta1" />
         <choice name="PTB3"        value="1" enum="Ptb3" />
      </binaryOption>

      <choiceOption key="sim_sopt_ftmic" condition="sim_sopt_ftmic_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimSoptFtmic"
         toolTip="Selects the sources for FTM0CH0 as capture input"
         description="FTM0 channel 0 Input Capture Source" >
         <choice name="FTM0_CH0 pin"  value="0" enum="Ftm0_ch0Pin" />
         <choice name="ACMP0_OUT"     value="1" enum="Acmp0_out" />
         <choice name="ACMP1_OUT"     value="2" enum="Acmp1_out" />
         <choice name="RTC overflow"  value="3" enum="RtcOverflow" />
      </choiceOption>

      <binaryOption key="sim_sopt_rxdce" condition="sim_sopt_rxdce_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimSoptRxdce"
         toolTip="Enables the UART0_RX to be captured by FTM0 channel 1"
         description="UART0_RX Capture on FTM0 channel 1" >
         <choice name="Not connected"                         value="0" enum="NotConnected" />
         <choice name="UART0_RX connected as FTM0 channel 1"  value="1" enum="Uart0_rxConnectedAsFtm0Channel1" />
      </binaryOption>

      <title description="FTM 2"/>

      <binaryOption key="sim_scgc_ftm2" condition="sim_scgc_ftm2_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcFtm2"
         description="FTM2 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_pinsel_ftm2clkps" condition="sim_pinsel_ftm2clkps_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimPinselFtm2clkps"
         description="FTM2 TCLK Pin Select" >
         <choice name="Selects TCLK1 for FTM2 module"  value="0" enum="SelectsTclk1ForFtm2Module" />
         <choice name="Selects TCLK2 for FTM2 module"  value="1" enum="SelectsTclk2ForFtm2Module" />
      </binaryOption>

      <binaryOption key="sim_pinsel_ftm2ps2" condition="sim_pinsel_ftm2ps2_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimPinselFtm2ps2"
         description="FTM2 Channel 2 Pin Select" >
         <choice name="PTC2"        value="0" enum="Ptc2"  />
         <choice name="PTC4"        value="1" enum="Ptc4"  />
      </binaryOption>

      <binaryOption key="sim_pinsel_ftm2ps3" condition="sim_pinsel_ftm2ps3_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimPinselFtm2ps3"
         disabledPinMap="FTM2_CH3,PTC3#/FTM2/Ch3PinInUse"
         description="FTM2 Channel 3 Pin Select" >
         <choice name="PTC3"  value="0" enum="Ptc3" />
         <choice name="PTC5"  value="1" enum="Ptc5" />
      </binaryOption>

   </category>

   <category name="I2C" description="I2C Options" >
      <binaryOption key="sim_scgc_i2c" condition="sim_scgc_i2c_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcI2c0"
         description="I2C0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_pinsel_i2c0ps" condition="sim_pinsel_i2c0ps_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimPinselI2c0ps"
         disabledPinMap="I2C0_SCL,PTA3;I2C0_SDA,PTA2#/I2C0/enablePeripheralSupport"
         description="I2C0 Pin Select" >
         <choice name="PTA3,PTA2 mapped to SCL,SDA"  value="0" enum="Pta3Pta2MappedToI2c0" pinMap="I2C0_SCL,PTA3;I2C0_SDA,PTA2" />
         <choice name="PTB7,PTB6 mapped to SCL,SDA"  value="1" enum="Ptb7Ptb6MappedToI2c0" pinMap="I2C0_SCL,PTB7;I2C0_SDA,PTB6" />
      </binaryOption>

   </category>

   <category name="IRQ" description="IRQ Options" >
      <binaryOption key="sim_scgc_irq" condition="sim_scgc_irq_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcIrq"
         description="IRQ Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>
   </category>

   <category name="KBI" description="KBI Options" >
      <binaryOption key="sim_scgc_kbi0" condition="sim_scgc_kbi0_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcKbi0"
         description="KBI0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_scgc_kbi1" condition="sim_scgc_kbi1_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcKbi1"
         description="KBI1 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>
   </category>

   <category name="PIT" description="PIT Options" >
      <binaryOption key="sim_scgc_pit" condition="sim_scgc_pit_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcPit"
         description="PIT Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>
   </category>

   <category name="PWT" description="PWT Options" >
      <binaryOption key="sim_scgc_pwt" condition="sim_scgc_pwt_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcPwt"
         description="PWT Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_pinsel_pwtclkps" condition="sim_pinsel_pwtclkps_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimPinselPwtclkps"
         description="PWT TCLK Pin Select" >
         <choice name="Selects TCLK1 for PWT module"  value="0" enum="SelectsTclk1ForPwtModule" />
         <choice name="Selects TCLK2 for PWT module"  value="1" enum="SelectsTclk2ForPwtModule" />
      </binaryOption>
   </category>

   <category name="RTC" description="RTC Options" >
      <binaryOption key="sim_scgc_rtc" condition="sim_scgc_rtc_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcRtc"
         description="RTC Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

   </category>

   <category name="SPI" description="SPI Options" >
      <binaryOption key="sim_scgc_spi0" condition="sim_scgc_spi0_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcSpi0"
         description="SPI0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_pinsel_spi0ps" condition="sim_pinsel_spi0ps_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimPinselSpi0ps"
         toolTip="Selects the SPI0 Pinouts"
         disabledPinMap="#/SPI0/enablePeripheralSupport"
         description="SPI0 Pin Select" >
         <choice name="PTB2,PTB3,PTB4,PTB5 mapped to SPI0 pins"  value="0" enum="Ptb2Ptb3Ptb4Ptb5MappedToSpi0" pinMap="SPI0_SCK,PTB2;SPI0_MOSI,PTB3;SPI0_MISO,PTB4;SPI0_PCS,PTB5" />
         <choice name="PTA6,PTA7,PTB1,PTB0 mapped to SPI0 pins"  value="1" enum="Pta6Pta7Ptb1Ptb0MappedToSpi0" pinMap="SPI0_SCK,PTA6;SPI0_MOSI,PTA7;SPI0_MISO,PTB1;SPI0_PCS,PTB0" />
      </binaryOption>

   </category>

   <category name="UART" description="UART Options" >
      <binaryOption key="sim_scgc_uart0" condition="sim_scgc_uart0_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimScgcUart0"
         description="UART0 Clock Gate Control" >
         <choice name="Clock disabled"  value="0" enum="ClockDisabled" />
         <choice name="Clock enabled"   value="1" enum="ClockEnabled" />
      </binaryOption>

      <binaryOption key="sim_pinsel_uart0ps" condition="sim_pinsel_uart0ps_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimPinselUart0ps"
         disabledPinMap="#/UART0/enablePeripheralSupport"
         description="UART0 Pin Select" >
         <choice name="PTB1,PTB0 mapped to Tx,Rx"  value="0" enum="MappedToPtb1Ptb0" pinMap="UART0_TX,PTB1;UART0_RX,PTB0" />
         <choice name="PTA3,PTA2 mapped to Tx,Rx"  value="1" enum="MappedToPta3Pta2" pinMap="UART0_TX,PTA3;UART0_RX,PTA2" />
      </binaryOption>

      <binaryOption key="sim_sopt_txdme" condition="sim_sopt_txdme_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimSoptTxdme"
         toolTip="Enables the UART0_TX output modulated by FTM0 channel 0"
         description="UART0_TX Modulation Select" >
         <choice name="UART0_TX directly connected to pin"  value="0" enum="Uart0_txDirectlyConnectedToPin" />
         <choice name="UART0_TX modulated by FTM0 channel"  value="1" enum="Uart0_txModulatedByFtm0Channel" />
      </binaryOption>

      <choiceOption key="sim_sopt_rxdfe" condition="sim_sopt_rxdfe_present"
         enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
         typeName="SimSoptRxdfe"
         toolTip="Enables the UART0_RX input to be filtered by ACMP.\n
                  When this function is enabled, any signal tagged with ACMP inputs can be regarded as UART0"
         description="UART0_RX Filter Select" >
         <choice name="UART0 module directly"  value="0" enum="Uart0ModuleDirectly" />
         <choice name="Filtered by ACMP0"      value="1" enum="FilteredByAcmp0" />
         <choice name="Filtered by ACMP1"      value="2" enum="FilteredByAcmp1" />
      </choiceOption>

   </category>


<!-- Grahic here -->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Baseclass)BasicInfo&quot;" />

   <template namespace="usbdm" codeGenCondition="/ICS/enablePeripheralSupport" ><![CDATA[
      \t/*
      \t * Global clocks
      \t */
      \t\n
   ]]></template>
   <template namespace="usbdm" codeGenCondition="!/ICS/enablePeripheralSupport" ><![CDATA[
      \t/*
      \t * Global clocks constants
      \t * These are provided when minimal clock generator code is used.
      \t * They assume no clock changes are made after startup.
      \t * Values provided are from USBDM configuration.
      \t */
      \t\n
   ]]></template>

   <for keys=" clock                  : name "
      values=" system_core_clock[0]   : SystemCoreClock;
               system_bus_clock[0]    : SystemBusClock;
               system_timer_clock[0]  : SystemTimerClock
         ">
      <variableTemplate namespace="usbdm" variables="%(clock)" codeGenCondition="/ICS/enablePeripheralSupport" ><![CDATA[
         \t/**
         \t *  %description
         \t *  %tooltip
         \t */
         \textern "C" uint32_t %(name);
         \t\n
      ]]></variableTemplate>
      <variableTemplate key="/SYSTEM/Clocks" variables="%(clock)" codeGenCondition="/ICS/enablePeripheralSupport" ><![CDATA[
         \t/**
         \t *  %description
         \t *  %tooltip
         \t */
         \tuint32_t %(name);
         \t\n
      ]]></variableTemplate>
      <variableTemplate namespace="usbdm" variables="%(clock)" codeGenCondition="!/ICS/enablePeripheralSupport" ><![CDATA[
         \t/**
         \t *  %description
         \t *  %tooltip
         \t */
         \tconstexpr uint32_t %(name) = %valueExpression;
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate variables="sim_sopt_ftmsync" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * %description
      \t *
      %paramDescription
      \t */
      \tstatic void triggerFtm2() {
      \t   %register |= %mask;
      \t}\n\n
   ]]></variableTemplate>

   <for keys="field:name"
        values="
      sim_sopt_delay : Ftm2Delay;
      sim_sopt_adhwt : SoptAdhwt;
      sim_sopt_busref: SoptClkOut;
      sim_sopt_txdme : SoptTxdme;
      sim_sopt_rxdce : SoptRxdce;
      sim_sopt_ftmic : SoptFtmic;
      sim_sopt_rxdfe : SoptRxdfe;
      sim_sopt_actrg : SoptActrg;
      sim_sopt_swde  : SingleWireDebugPins;
      sim_sopt_rstpe : ResetPin;
      sim_sopt_nmie  : NonMaskableInterruptPin" >
      <variableTemplate variables="%(field)" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %fieldAssignment
         \t}\n\n
      ]]></variableTemplate>
   </for>

   <for keys="field:name"
        values="
      sim_pinsel_pwtclkps  : Pwtclkps;
      sim_pinsel_ftm2clkps : Ftm2clkps;
      sim_pinsel_ftm0clkps : Ftm0clkps;
      sim_pinsel_ftm2ps3   : Ftm2ps3;
      sim_pinsel_ftm2ps2   : Ftm2ps2;
      sim_pinsel_ftm0ps1   : Ftm0ps1;
      sim_pinsel_ftm0ps0   : Ftm0ps0;
      sim_pinsel_uart0ps   : Uart0ps;
      sim_pinsel_spi0ps    : Spi0ps;
      sim_pinsel_i2c0ps    : I2c0ps" >
      <variableTemplate variables="%(field)" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void select%(name)Pins(%params) {
         \t   %fieldAssignment
         \t}\n\n
      ]]></variableTemplate>
   </for>

   <for keys="field:name"
        values="
      sim_scgc_acmp0:Acmp0;
      sim_scgc_acmp1:Acmp1;
      sim_scgc_adc:Adc;
      sim_scgc_irq:Irq;
      sim_scgc_kbi1:Kbi1;
      sim_scgc_kbi0:Kbi0;
      sim_scgc_uart0:Uart0;
      sim_scgc_spi0:Spi0;
      sim_scgc_i2c:I2c0;
      sim_scgc_swd:Swd;
      sim_scgc_flash:Flash;
      sim_scgc_crc:Crc;
      sim_scgc_ftm0:Ftm0;
      sim_scgc_ftm2:Ftm2;
      sim_scgc_pwt:Pwt;
      sim_scgc_pit:Pit;
      sim_scgc_rtc:Rtc" >
      <variableTemplate variables="%(field)" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void enable%(name)Clock(%params) {
         \t   %fieldAssignment
         \t}\n\n
      ]]></variableTemplate>
   </for>

   <for keys="         field         :   name"
        values="sim_clkdiv_outdiv1[] : CoreClkDivider;
                sim_clkdiv_outdiv2[] : BusClockDivider;
                sim_clkdiv_outdiv3[] : TimerClockDivider" >
      <variableTemplate variables="%(field)" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment
         \t}\n\n
      ]]></variableTemplate>
   </for>

<!--   ========== SIM Init class =============================== -->

   <template key="init_description"  codeGenCondition="enablePeripheralSupport">
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init init {
      \t *
      \t *   // Setup values
      \t *
      \t *   0 , // FTM2 Trigger Delay
      \t *   SimSoptAdhwt_RtcOverflow , // ADC Hardware Trigger Source - RTC overflow
      \t *   SimSoptReferenceClockOutput_Disabled , // BUS Clock Output select - Disabled (PTC5 available)
      \t *   SimSoptTxdme_Uart0_txDirectlyConnectedToPin , // UART0_TX Modulation Select - UART0_TX directly connected to pin
      \t *   SimSoptRxdce_NotConnected , // UART0_RX Capture on FTM0 channel 1 - Not connected
      \t *   SimSoptRxdfe_Uart0ModuleDirectly , // UART0_RX Filter Select - UART0 module directly
      \t *   SimSoptFtmic_Ftm0_ch0Pin , // FTM0 channel 0 Input Capture Source - FTM0_CH0 pin
      \t *   SimSoptActrg_Acmp0_out , // ACMP Trigger FTM2 selection - ACMP0_OUT
      \t *   SimSWDEnable_Pta4Pta0AsSwdPins , // Single Wire Debug Port Pin Enable - PTA4, PTA0 mapped as SWD pins
      \t *   SimResetEnable_Pta5AsReset , // RESET Pin Enable - PTA5 mapped as RESET
      \t *   SimNmiEnable_Ptb4AsNmi , // NMI Pin Enable - PTB4 mapped as NMI
      \t *   SimPinselPwtclkps_SelectsTclk1ForPwtModule , // PWT TCLK Pin Select - Selects TCLK1 for PWT module
      \t *   SimPinselFtm2clkps_SelectsTclk1ForFtm2Module , // FTM2 TCLK Pin Select - Selects TCLK1 for FTM2 module
      \t *   SimPinselFtm0clkps_SelectsTclk1ForFtm0Module , // FTM0 TCLK Pin Select - Selects TCLK1 for FTM0 module
      \t *   SimPinselFtm2ps3_Ptc3 , // FTM2 Channel 3 Pin Select - PTC3
      \t *   SimPinselFtm2ps2_Ptc2 , // FTM2 Channel 2 Pin Select - PTC2
      \t *   SimPinselFtm0ps1_Pta1 , // FTM0 channel 1 Pin Select - PTA1
      \t *   SimPinselFtm0ps0_Pta0 , // FTM0 channel 0 Pin Select - PTA0
      \t *   SimPinselUart0ps_MappedToPtb1Ptb0 , // UART0 Pin Select - PTB1,PTB0 mapped to Tx,Rx
      \t *   SimPinselSpi0ps_Ptb2Ptb3Ptb4Ptb5MappedToSpi0 , // SPI0 Pin Select - PTB2,PTB3,PTB4,PTB5 mapped to SPI0 pins
      \t *   SimPinselI2c0ps_Pta3Pta2MappedToI2c0 , // I2C0 Pin Select - PTA3,PTA2 mapped to SCL,SDA
      \t *   SimScgcAcmp1_ClockDisabled , // ACMP1 Clock Gate Control - Clock disabled
      \t *   SimScgcAcmp0_ClockDisabled , // ACMP0 Clock Gate Control - Clock disabled
      \t *   SimScgcAdc_ClockDisabled , // ADC Clock Gate Control - Clock disabled
      \t *   SimScgcIrq_ClockDisabled , // IRQ Clock Gate Control - Clock disabled
      \t *   SimScgcKbi1_ClockDisabled , // KBI1 Clock Gate Control - Clock disabled
      \t *   SimScgcKbi0_ClockDisabled , // KBI0 Clock Gate Control - Clock disabled
      \t *   SimScgcUart0_ClockEnabled , // UART0 Clock Gate Control - Clock enabled
      \t *   SimScgcSpi0_ClockDisabled , // SPI0 Clock Gate Control - Clock disabled
      \t *   SimScgcI2c_ClockDisabled , // I2C0 Clock Gate Control - Clock disabled
      \t *   SimScgcSwd_ClockEnabled , // SWD Clock Gate Control - Clock enabled
      \t *   SimScgcFlash_ClockEnabled , // FLASH Clock Gate Control - Clock enabled
      \t *   SimScgcCrc_ClockDisabled , // CRC Clock Gate Control - Clock disabled
      \t *   SimScgcFtm2_ClockDisabled , // FTM2 Clock Gate Control - Clock disabled
      \t *   SimScgcFtm0_ClockDisabled , // FTM0 Clock Gate Control - Clock disabled
      \t *   SimScgcPwt_ClockDisabled , // PWT Clock Gate Control - Clock disabled
      \t *   SimScgcPit_ClockDisabled , // PIT Clock Gate Control - Clock disabled
      \t *   SimScgcRtc_ClockDisabled,  // RTC Clock Gate Control - Clock disabled
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure(init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" >
   <![CDATA[
      class $(_Class)BasicInfo {
      \t
      public:
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="sim_sopt_delay,sim_sopt_dlyact,sim_sopt_adhwt,sim_sopt_busref,sim_sopt_txdme,sim_sopt_ftmsync,sim_sopt_rxdce,sim_sopt_rxdfe,sim_sopt_ftmic,sim_sopt_actrg,sim_sopt_swde,sim_sopt_rstpe,sim_sopt_nmie"
   ><![CDATA[
      \t   /// System Options Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="sim_pinsel_pwtclkps,sim_pinsel_ftm2clkps,sim_pinsel_ftm0clkps,sim_pinsel_ftm2ps3,sim_pinsel_ftm2ps2,sim_pinsel_ftm0ps1,sim_pinsel_ftm0ps0,sim_pinsel_uart0ps,sim_pinsel_spi0ps,sim_pinsel_i2c0ps"
   ><![CDATA[
      \t   /// Pin Selection Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="sim_scgc_acmp1,sim_scgc_acmp0,sim_scgc_adc,sim_scgc_irq,sim_scgc_kbi1,sim_scgc_kbi0,sim_scgc_uart0,sim_scgc_spi0,sim_scgc_i2c,sim_scgc_swd,sim_scgc_flash,sim_scgc_crc,sim_scgc_ftm2,sim_scgc_ftm0,sim_scgc_pwt,sim_scgc_pit,sim_scgc_rtc"
   ><![CDATA[
      \t   /// System Clock Gating Control Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

<!--   Constructors -->

   <for keys="r"
      values="
            sim_sopt_adhwt;
            sim_sopt_busref;
            sim_sopt_txdme;
            sim_sopt_ftmsync;
            sim_sopt_rxdce;
            sim_sopt_rxdfe;
            sim_sopt_ftmic;
            sim_sopt_actrg;
            sim_sopt_swde;
            sim_sopt_rstpe;
            sim_sopt_nmie;
            sim_pinsel_pwtclkps;
            sim_pinsel_ftm2clkps;
            sim_pinsel_ftm0clkps;
            sim_pinsel_ftm2ps3;
            sim_pinsel_ftm2ps2;
            sim_pinsel_ftm0ps1;
            sim_pinsel_ftm0ps0;
            sim_pinsel_uart0ps;
            sim_pinsel_spi0ps;
            sim_pinsel_i2c0ps;
            sim_scgc_acmp1;
            sim_scgc_acmp0;
            sim_scgc_adc;
            sim_scgc_irq;
            sim_scgc_kbi1;
            sim_scgc_kbi0;
            sim_scgc_uart0;
            sim_scgc_spi0;
            sim_scgc_i2c;
            sim_scgc_swd;
            sim_scgc_flash;
            sim_scgc_crc;
            sim_scgc_ftm2;
            sim_scgc_ftm0;
            sim_scgc_pwt;
            sim_scgc_pit;
            sim_scgc_rtc
            " >
      <variableTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Constructors -->

   <variableTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="sim_sopt_delay"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param value %description
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%paramType0 value, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = (%registerName&~%mask0) | %macro0(value);
      \t   }
      \t\n
   ]]>
   </variableTemplate>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            sim_sopt_delay,
            sim_sopt_dlyact,
            sim_sopt_adhwt,
            sim_sopt_busref,
            sim_sopt_txdme,
            sim_sopt_rxdce,
            sim_sopt_rxdfe,
            sim_sopt_ftmic,
            sim_sopt_actrg,
            sim_sopt_swde,
            sim_sopt_rstpe,
            sim_sopt_nmie,
            sim_pinsel_pwtclkps,
            sim_pinsel_ftm2clkps,
            sim_pinsel_ftm0clkps,
            sim_pinsel_ftm2ps3,
            sim_pinsel_ftm2ps2,
            sim_pinsel_ftm0ps1,
            sim_pinsel_ftm0ps0,
            sim_pinsel_uart0ps,
            sim_pinsel_spi0ps,
            sim_pinsel_i2c0ps,
            sim_scgc_acmp1,
            sim_scgc_acmp0,
            sim_scgc_adc,
            sim_scgc_irq,
            sim_scgc_kbi1,
            sim_scgc_kbi0,
            sim_scgc_uart0,
            sim_scgc_spi0,
            sim_scgc_i2c,
            sim_scgc_swd,
            sim_scgc_flash,
            sim_scgc_crc,
            sim_scgc_ftm2,
            sim_scgc_ftm0,
            sim_scgc_pwt,
            sim_scgc_pit,
            sim_scgc_rtc
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></variableTemplate>

   <template codeGenCondition="/ICS/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Update system clock values
      \t *
      \t * @param systemClock Frequency of clock provided to system clock dividers
      \t */
      \tstatic void updateSystemClocks(unsigned systemClock) {
      \t
      \t   SystemCoreClock    = systemClock/(((SIM->CLKDIV&SIM_CLKDIV_OUTDIV1_MASK)>>SIM_CLKDIV_OUTDIV1_SHIFT)+1);
      \t   SystemBusClock     = SystemCoreClock/(((SIM->CLKDIV&SIM_CLKDIV_OUTDIV2_MASK)>>SIM_CLKDIV_OUTDIV2_SHIFT)+1);
      \t   SystemTimerClock   = systemClock/(((SIM->CLKDIV&SIM_CLKDIV_OUTDIV3_MASK)>>SIM_CLKDIV_OUTDIV3_SHIFT)+1);
      \t}\n\n
   ]]></template>

   <template  codeGenCondition="enablePeripheralSupport" >
      <![CDATA[
      \t/**
      \t * Configure $(_BASENAME)
      \t *
      \t * This only includes SOPT, PINSEL and SCGC
      \t */
      \tstatic void configure(const Init &configValue) {
      \t   sim->SOPT            = configValue.sopt;
      \t   sim->PINSEL          = configValue.pinsel;
      \t   sim->SCGC            = configValue.scgc;
      \t}
      \t
      \t/**
      \t * Default initialisation for $(_BASENAME)
      \t */
      \tstatic void defaultConfigure() {
      \t   configure(DefaultInitValue);
      \t}
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="enablePeripheralSupport" >
      <![CDATA[
      \t}; // class $(_Class)::BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm" >
      <![CDATA[
      }; // class $(_Class)::BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <template key="/ICS/ClockStartupAfter" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \tUSBDM::$(_Class)Info::defaultConfigure();
   ]]></template>

   <template key="DefaultInitValue" ><![CDATA[
      \tstatic void initRegs() {
      \t
      \t   defaultConfigure();
      \t};\n\n
   ]]></template>

   <xi:include href="simFiles-MKE.xml" />

   <variableTemplate variables="sim_clkdiv_outdiv1[0],sim_clkdiv_outdiv2[0],sim_clkdiv_outdiv3[0],sim_clkdiv_outdiv4[0]"><![CDATA[
      \t/** Reset clock divider value if clock not fully configured */
      \tstatic constexpr uint32_t sim_clkdiv = %initExpression;
      \t\n
   ]]></variableTemplate>

   <for keys="n" values=";0;1;2;3;4;5;6" >
      <variableTemplate variables="system_uart%(n)_fixedclocksource[%(n)]" ><![CDATA[
         \t/**
         \t * Get UART%(n) input clock frequency
         \t *
         \t * @return Clock frequency in Hz
         \t */
         \tstatic inline uint32_t getUart%(n)Clock() {
         \t   return $(system_uart%(n)_fixedclocksource[%(n)].code[]);
         \t}\n\n
      ]]></variableTemplate>
   </for>

</peripheralPage>
