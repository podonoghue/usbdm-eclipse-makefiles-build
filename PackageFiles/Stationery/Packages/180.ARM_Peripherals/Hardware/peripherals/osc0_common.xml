<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >

<!-- osc0_common.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

   <equation key="generateDefault"           value="false"         />
   <equation key="configureInStartupDefault" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <!-- ************* CR ****************** -->

   <aliasOption key="/MCG/mcg_c2_oscMode" locked="false" />

   <intOption key="osc_input_freq"
      enabledBy="/MCG/mcg_c2_oscMode!=/OscMode_NotConfigured"
      units="Hz"
      description="OSC frequency"
      toolTip="Frequency of external crystal or clock on XTAL/EXTAL"
      value="8000000"
      disabledValue="0" />

   <intOption key="osc_clock"
      enabledBy="/MCG/mcg_c2_oscMode!=/OscMode_NotConfigured"
      ref="osc_input_freq"
      valueFormat="%s"
      locked="true"
      derived="true"
      units="Hz"
      description="Frequency of OSC Clock or Crystal [OSCCLK]"
      toolTip="Frequency of oscillator or external clock"
      value="8000000"
      disabledValue="0"
      min="1" />

   <binaryOption key="osc_cr_erclken"
      enabledBy="/MCG/mcg_c2_oscMode!=/OscMode_NotConfigured"
      typeName="OscErClkEn"
      description="External Reference Enable"
      disabledValue="0"
      toolTip="Enables the OSC clock [OSCERCLK] for use by peripherals\n
               The oscillator will also be enabled if used by MCG">
      <choice value="0" name="Disabled" enum="Disabled"  />
      <choice value="1" name="Enabled"  enum="Enabled"   isDefault="true" />
   </binaryOption>

   <choiceOption key="oscillatorRange"
      derived="true"
      locked="true"
      description="Oscillator Frequency Range Select"
      toolTip="This range value is determined from the crystal frequency.\n
               It some cases it may be unused and a range value suited to the FLL is used instead">
      <choice value="0" name="Low range" />
      <choice value="1" name="High range" />
      <choice value="2" name="Very High range" />
      <choice value="3" name="Unconstrained by Oscillator" isDefault="true" />
   </choiceOption>

   <choiceOption key="osc_cr_scp"
      typeName="OscCap"
      enabledBy="(/MCG/mcg_c2_oscMode>/OscMode_ExternalClock)&amp;&amp;(/MCG/mcg_c2_oscMode!=/OscMode_RTC_Controlled)"
      description="Oscillator load capacitance"
      toolTip="Configures the oscillator load capacitance">
      <choice value="0"  enum="None" name="0 pF" />
      <choice value="8"  enum="2pf"  name="2 pF" />
      <choice value="4"  enum="4pf"  name="4 pF" />
      <choice value="12" enum="6pf"  name="6 pF" />
      <choice value="2"  enum="8pf"  name="8 pF" isDefault="true" />
      <choice value="10" enum="10pf" name="10 pF" />
      <choice value="6"  enum="12pf" name="12 pF" />
      <choice value="14" enum="14pf" name="14 pF" />
      <choice value="1"  enum="16pf" name="16 pF" />
      <choice value="9"  enum="18pf" name="18 pF" />
      <choice value="5"  enum="20pf" name="20 pF" />
      <choice value="13" enum="22pf" name="22 pF" />
      <choice value="3"  enum="24pf" name="24 pF" />
      <choice value="11" enum="26pf" name="26 pF" />
      <choice value="7"  enum="28pf" name="28 pF" />
      <choice value="15" enum="30pf" name="30 pF" />
   </choiceOption>

   <binaryOption key="osc_cr_erefsten"
      typeName="OscExternalRef"
      enabledBy="osc_cr_erclken"
      description="External Reference Stop Enable"
      toolTip="Determines if external reference clock is enabled in Stop mode" >
      <choice value="0" enum="DisabledInStop" name="Disabled in Stop mode" />
      <choice value="1" enum="EnabledInStop"  name="Enabled in Stop mode" />
   </binaryOption>

   <!-- ************* DIV ****************** -->

   <if  condition="osc_div_erps_present">
      <intOption key="oscer_undiv_clock"
         enabledBy="osc_cr_erclken"
         ref="osc_clock"
         valueFormat="%s"
         derived="true"
         units="Hz"
         description="Oscillator clock to some peripherals [OSCERCLK_UNDIV]"
         toolTip="Generated from OSCCLK without division"
         value="8000000"
         locked="true"
         disabledValue="0" />

      <choiceOption key="osc_div_erps" condition="osc_div_erps_present"
         enabledBy="osc_cr_erclken"
         typeName="OscErClkDiv"
         description="External clock output [OSCERCLK] prescaler"
         toolTip="Division for the External Clock [OSCERCLK] output" >
         <choice value="0"  name="/1" enum="By1"  isDefault="true" />
         <choice value="1"  name="/2" enum="By2" />
         <choice value="2"  name="/4" enum="By4" />
         <choice value="3"  name="/8" enum="By8" />
      </choiceOption>

      <intOption key="oscer_clock"
         enabledBy="osc_cr_erclken"
         ref="(osc_clock)/(1&lt;&lt;osc_div_erps)"
         valueFormat="%s"
         derived="true"
         units="Hz"
         description="Oscillator clock [OSCERCLK]"
         toolTip="Clock available to some peripherals"
         origin="OSC0 gated by ERCLKEN"
         value="8000000"
         disabledValue="0"
         locked="true"
         min="1" />
   <else />
      <intOption key="oscer_clock"
         enabledBy="osc_cr_erclken"
         ref="osc_clock"
         valueFormat="%s"
         derived="true"
         units="Hz"
         description="Oscillator clock [OSCERCLK]"
         toolTip="Clock available to some peripherals"
         value="8000000"
         disabledValue="0"
         locked="true"
         min="1" />
   </if>

   <intOption key="osc32k_clock"
         enabledBy="(/MCG/mcg_c2_oscMode!=/OscMode_NotConfigured)&amp;&amp;(osc_input_freq&gt;=32000)&amp;&amp;(osc_input_freq&lt;=40000)
                     ##Disabled as XTAL frequency unsuitable"
         ref="osc_clock"
         valueFormat="%s"
         derived="true"
         units="Hz"
         description="Oscillator low range 32K clock [OSC32KCLK]"
         toolTip="Generated from OSCCLK in low frequency mode only"
         origin="OSC0 in low frequency mode"
         value="8000000"
         disabledValue="0"
         locked="true" />

<!--   ========== Class constants =============================== -->

<!-- Graphic here -->

   <variableTemplate
      variables="osc_clock"
   ><![CDATA[
      \t//! Frequency of OSC Clock or Crystal
      \tstatic constexpr uint32_t osc_clock = %initExpression
      \t\n
   ]]></variableTemplate>

   <variableTemplate
      variables="osc32k_clock"
   ><![CDATA[
      \t//! Frequency of 32K OSC Clock or Crystal (if applicable)
      \tstatic constexpr uint32_t osc32k_clock = %initExpression
      \t\n
   ]]></variableTemplate>

<!-- ************* Class methods ****************** -->

   <for keys="field           : get   : set   : genCode                 : name"
        values="
         osc_cr_erclken       : true  : true  : true                    : ExternalReference;
         osc_cr_erefsten      : true  : true  : enableGettersAndSetters : ExternalReferenceInStop;
         osc_cr_scp           : true  : true  : enableGettersAndSetters : LoadCapacitance;
         osc_div_erps         : true  : true  : enableGettersAndSetters : ErcDivider" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <template><![CDATA[
      \t/**
      \t * Get OSC clock (internal, assumed available)
      \t *
      \t * @return Clock frequency as uint32_t in Hz
      \t */
      \tstatic constexpr uint32_t getOscClock() {
      \t   return osc_clock;
      \t}\n\n
   ]]></template>

   <if condition="osc_div_erps" >
      <template><![CDATA[
         \t/**
         \t * Get OSC clock (external, gated by OSC_CR_ERCLKEN)
         \t *
         \t * @return Clock frequency as uint32_t in Hz
         \t */
         \tstatic uint32_t getOscerClock() {
         \t   return (osc->CR&OSC_CR_ERCLKEN_MASK)?
         \t      (osc_clock/(1<<((osc->DIV&OSC_DIV_ERPS_MASK)>>OSC_DIV_ERPS_SHIFT))):
         \t      0;
         \t}\n\n
      ]]></template>
   <else />
      <template><![CDATA[
         \t/**
         \t * Get OSC clock (external, gated by OSC_CR_ERCLKEN)
         \t *
         \t * @return Clock frequency as uint32_t in Hz
         \t */
         \tstatic uint32_t getOscerClock() {
         \t   return (osc->CR&OSC_CR_ERCLKEN_MASK)?osc_clock:0;
         \t}\n\n
      ]]></template>
   </if>

   <template><![CDATA[
      \t/**
      \t * Get OSC32KCLK clock
      \t *
      \t * @return Clock frequency as uint32_t in Hz
      \t
      \t * @note This clock is only available if a 32kHz crystal or external clock is used
      \t */
      \tstatic uint32_t getOsc32kClock() {
      \t   return osc32k_clock;
      \t}\n\n
   ]]></template>

<!--   ========== OSC Init class =============================== -->

   <template where="basicInfo" discardRepeats="true" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   OscErClkEn_Enabled ,            // External Reference Enable - Enabled
      \t *   OscExternalRef_DisabledInStop , // External Reference Stop Enable - Disabled in Stop mode
      \t *   OscCap_8pf,                     // Oscillator load capacitance - 8 pF
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="osc_cr_erclken,osc_cr_erefsten,osc_cr_scp,osc_cr_scp"
   ><![CDATA[
      \t   /// Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="osc_div_erps"
   ><![CDATA[
      \t   /// Clock Divider Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <!--   Constructors -->

   <for keys="r"
      values="
            osc_cr_erclken;
            osc_cr_erefsten;
            osc_cr_scp;
            osc_div_erps
            " >
      <variableTemplate where="basicInfo" codeGenCondition="enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            osc_cr_erclken,
            osc_cr_erefsten,
            osc_cr_scp,
            osc_div_erps
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t
      \t   osc->CR    = init.cr;\n
   ]]>
   </template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="enablePeripheralSupport" condition="osc_div_erps" >
   <![CDATA[
      \t   osc->DIV    = init.div;\n
   ]]>
   </template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" discardRepeats="true" codeGenCondition="enablePeripheralSupport" >
      <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      /**
       * Class representing $(_NAME)
       */
      class $(_Class) : public $(_Baseclass)Base_T<$(_Info)> {};
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.OscValidate">
   </validate>

   <projectActionList id="osc_files" >
      <copy source="Project_Headers/osc.h"  target="Project_Headers/osc.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/MCG/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/MCG/ClockStartupBefore" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* Signal mapping ****************** -->
   <category name="SIM" description="Pin mapping and clock enables">
      <aliasOption key="/SIM/sim_scgc_$(_name)"      locked="false" optional="true" />
      <aliasOption key="/SIM/sim_scgc_$(_basename)"  locked="false" optional="true" />
   </category>

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</fragment>
