<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- adc0_mke04.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Analog-to-Digital Converter" >

   <constant key="irq_parameters"            type="String"  value="&quot;uint32_t result, int channel&quot;"  />
   <constant key="irq_dummy_parameters"      type="String"  value="&quot;uint32_t, int&quot;"  />
   <constant key="irq_call"                  type="String"  value="&quot;adc->R[0], adc->SC1[0]&amp;ADC_SC1_ADCH_MASK&quot;"  />
   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <constant key="disable_peripheral" value="&quot;adc->SC1[0] = ADC_SC1_ADCH(-1);&quot;"  type="String" />

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Structname)BasicInfo&quot;" />

   <!-- ************* SC1 ****************** -->

   <intOption key="adiclk"
      description="Adc internal asynchronous clock"
      toolTip="This is nominally 8MHz.  (Actually 4MHz in in ADC low power)"
      locked="true"
      units="Hz"
      value="8_MHz"
   />
   <binaryOption key="adc_sc1_aien" condition="adc_sc1_aien_present"
      enabledBy="irqHandlingMethod"
      typeName="AdcInterrupt"
      description="Conversion Complete Interrupt" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="adc_sc1_adco" condition="adc_sc1_adco_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcContinuous"
      toolTip="Selects between single and multiple conversions.\n
               Conversions are triggered by a write to the ADC_SC1 when software triggered operation is selected,\n
               or following assertion of ADHWT when hardware triggered operation is selected.\n
               When the FIFO function is enabled (AFDEP &gt; 0), a set of conversions are triggered"
      description="Continuous Conversion Enable" >
      <choice name="Single"      value="0" enum="Disabled"/>
      <choice name="Continuous"  value="1" enum="Enabled"/>
   </binaryOption >

   <choiceOption key="adc_sc1_adch" condition="adc_sc1_adch_present"
      hidden="true"
      typeName="AdcChannelNum"
      description="Input Channel"
      toolTip="Channel to modify" >
      <choiceExpansion keys="ch" dim="0,15" value="%(ch)" name="Channel %(ch)" enum="%(ch)"/>
      <choice name="Vss"                value="16" enum="Vss"/>
      <choice name="Temperature Sensor" value="22" enum="TempSensor"/>
      <choice name="Bandgap"            value="23" enum="Bandgap"/>
      <choice name="VRefH"              value="29" enum="Vrefh"/>
      <choice name="VRefL"              value="30" enum="Vrefl"/>
      <choice name="Module disabled"    value="31" enum="Disabled"/>
   </choiceOption >

   <!-- ************* SC2 ****************** -->

   <binaryOption key="adc_sc2_adtrg" condition="adc_sc2_adtrg_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcPretrigger"
      toolTip="Controls whether conversions are triggered by writes to ADC_SC1 (software) or assertion of ADHWT input (hardware)"
      description="Conversion Trigger Select" >
      <choice name="Software trigger"  value="0" enum="SoftwareTrigger"/>
      <choice name="Hardware trigger"  value="1" enum="HardwareTrigger"/>
   </binaryOption >

   <choiceOption key="adc_sc2_refsel" condition="adc_sc2_refsel_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcRefSel"
      description="Voltage Reference Selection" >
      <choice name="VREFH and VREFL"  value="0" enum="VrefhAndVrefl"/>
      <choice name="VDDA and VSSA"    value="1" enum="VddaAndVssa"/>
      <choice name="Reserved"         value="2" enum="Reserved"/>
   </choiceOption >

   <choiceOption key="adc_sc2_compare" condition="adc_sc2_acfe_present&amp;&amp;adc_sc2_acfgt_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcCompare"
      valueFormat="ADC_SC2_ACFE(%s),ADC_SC2_ACFGT(%s)"
      description="Compare Function Control"
      toolTip="Configures the ADC compare function">
      <choice name="No comparison done"            value="0,0" enum="Disabled"/>
      <choice name="ADC value &lt; compare value"  value="1,0" enum="LessThan"/>
      <choice name="ADC value &gt;= compare value" value="1,1" enum="GreaterThanOrEqual"/>
   </choiceOption >

   <!-- ************* CV ****************** -->

   <intOption key="adc_cv_cv" condition="adc_cv_cv_present"
      typeName="uint16_t"
      valueFormat="%s"
      enabledBy="adc_sc2_compare>0"
      description="Compare Value"
      toolTip="Value compared against ADC conversion result"
      value="0"
   />

   <!-- ************* SC3 ****************** -->

   <binaryOption key="adc_sc3_adlpc" condition="adc_sc3_adlpc_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcPower"
      toolTip="Controls trade-off between speed and power consumption"
      description="Low-Power Configuration" >
      <choice name="Normal"      value="0" enum="Normal"/>
      <choice name="Low power"   value="1" enum="Low"/>
   </binaryOption >

   <choiceOption key="adc_sc3_adiv" condition="adc_sc3_adiv_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcClockDivider"
      description="Clock Divide Select" >
      <choice name="Divide by 1"  value="0" enum="DivBy1"/>
      <choice name="Divide by 2"  value="1" enum="DivBy2"/>
      <choice name="Divide by 4"  value="2" enum="DivBy4"/>
      <choice name="Divide by 8"  value="3" enum="DivBy8"/>
   </choiceOption >

   <binaryOption key="adc_sc3_adlsmp" condition="adc_sc3_adlsmp_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcSample"
      description="Sample Time Configuration" >
      <choice name="Short sample"  value="0" enum="Short"/>
      <choice name="Long sample"   value="1" enum="Long"/>
   </binaryOption >

   <choiceOption key="adc_sc3_mode" condition="adc_sc3_mode_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcResolution"
      description="ADC resolution" >
      <choice name="8-bit"       value="0" enum="8bit_se"/>
      <choice name="10-bit"      value="1" enum="10bit_se"/>
      <choice name="12-bit"      value="2" enum="12bit_se"/>
   </choiceOption >

   <choiceOption key="adc_sc3_adiclk" condition="adc_sc3_adiclk_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcClockSource"
      description="Input Clock Select" >
      <choice name="Bus clock"                   value="0" enum="BusClock"     code="SystemBusClock" />
      <choice name="(Bus clock)/2"               value="1" enum="BusClockDiv2" code="SystemBusClock/2" />
      <choice name="Alternate clock (ALTCLK)"    value="2" enum="Altclk"       code="Osc0Info::getOscClock()" />
      <choice name="Asynchronous clock (ADICK)"  value="3" enum="Asynch"       code="adiclk" />
   </choiceOption >

   <!-- ************* SC4 ****************** -->

   <binaryOption key="adc_sc4_htrgme" condition="adc_sc4_htrgme_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcSc4Htrgme"
      toolTip="This field enables hardware trigger multiple conversions in fifo mode"
      description="Hardware Trigger Multiple Conversion Enable" >
      <choice name="Single"      value="0" enum="Single"/>
      <choice name="Multiple"    value="1" enum="Multiple"/>
   </binaryOption >

   <binaryOption key="adc_sc4_ascane" condition="adc_sc4_ascane_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcSc4Ascane"
      description="FIFO Scan Mode Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="adc_sc4_acfsel" condition="adc_sc4_acfsel_present"
      enabledBy="adc_sc4_afdep>0"
      typeName="AdcSc4Acfsel"
      toolTip="If cleared, ADC will OR all of the compare triggers and set COCO if at least one trigger occurs. \n
               If set, ADC will AND all of compare triggers and set COCO only when all triggers have occurred"
      description="Compare function OR/AND selection." >
      <choice name="ORed triggers"   value="0" enum="OredTriggers"/>
      <choice name="ANDed triggers"  value="1" enum="AndedTriggers"/>
   </binaryOption >

   <choiceOption key="adc_sc4_afdep" condition="adc_sc4_afdep_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcSc4Afdep"
      description="FIFO Depth" >
      <choice name="FIFO disabled"  value="0" enum="FifoDisabled"/>
      <choice name="2-level FIFO"   value="1" enum="2LevelFifo"/>
      <choice name="3-level FIFO"   value="2" enum="3LevelFifo"/>
      <choice name="4-level FIFO"   value="3" enum="4LevelFifo"/>
      <choice name="5-level FIFO"   value="4" enum="5LevelFifo"/>
      <choice name="6-level FIFO"   value="5" enum="6LevelFifo"/>
      <choice name="7-level FIFO"   value="6" enum="7LevelFifo"/>
      <choice name="8-level FIFO"   value="7" enum="8LevelFifo"/>
   </choiceOption >

   <!-- ************* SC5 ****************** -->

   <choiceOption key="adc_sc5_hwtriggermask" condition="adc_sc5_htrgmaske_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
   valueFormat="ADC_SC5_HTRGMASKE(%s),ADC_SC5_HTRGMASKSEL(%s)"
      typeName="AdcHardwareTriggerMask"
      toolTip="Control hardware trigger"
      description="Hardware Trigger Mask" >
      <choice name="Unmasked"                      value="0,0" enum="Unmasked"/>
      <choice name="Masked"                        value="1,0" enum="Masked"/>
      <choice name="Masked when FIFO is not empty" value="0,1" enum="MaskedByFifo"/>
   </choiceOption>

   <!-- ************* APCTL1 ****************** -->

   <title description="Inputs" />

   <bitmaskOption key="adc_apctl1_adpc"  condition="adc_apctl1_adpc_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="AdcChannelMask"
      enumType="uint16_t"
      description="GPIO Pin Disable"
      toolTip="Bit mask controlling the GPIO function on the corresponding pins\n
               This is only necessary for Channels 0-15\n
               0:pin is GPIO, 1:pin is Analogue"
      value="0"
      bitmask="0"
      bitList="=inputPinMap"
      pinMap="=&quot;ADC$(_instance)_SE%i:&quot;+inputPinMap"
    />


<!-- Graphic here -->

   <for keys="field:name"
        values="
      adc_sc1_aien:Interrupt;
      adc_sc1_adco:Continuous;
      adc_sc1_adch:Channel" >
      <variableTemplate variables="%(field)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %register[0] = (%register[0] & ~%mask)|%paramExpression;
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register[0]&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate variables="adc_sc2_compare,adc_cv_cv" codeGenCondition="enableGettersAndSetters"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tstatic void configureCompare(
      %params) {
      \t
      \t      %register0 =  (%register0 & ~%mask0)| %paramName0;
      \t      %register1 =  %paramName1;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="field:name"
        values="
      adc_sc2_adtrg:Pretrigger;
      adc_sc2_refsel:RefSel;
      adc_sc3_adlpc:Power;
      adc_sc3_adiv:ClockDivider;
      adc_sc3_adlsmp:Sample;
      adc_sc3_mode:Resolution;
      adc_sc3_adiclk:ClockSource;
      adc_sc4_htrgme:HardwareMultipleConversion;
      adc_sc4_ascane:ScanMode;
      adc_sc4_acfsel:CompareOperation;
      adc_sc4_afdep:FifoDepth;
      adc_sc5_hwtriggermask:HardwareMask" >
      <variableTemplate variables="%(field)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate variables="adc_sc1_adch, adc_apctl1_adpc" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
   ><![CDATA[
      \t/**
      \t * Allocate %description0
      \t * The GPIO function on the associated pin is disabled
      \t *
      %paramDescription0
      \t */
      \tstatic void allocateAnaloguePin(%paramType0 %paramName0) {
      \t   %register1 = %register1 | (1<<%paramName0);
      \t}
      \t
      \t/**
      \t * Release %description0
      \t * The GPIO function on the associated pin is enabled
      \t *
      %paramDescription0
      \t */
      \tstatic void releaseAnaloguePin(%paramType0 %paramName0) {
      \t   %register1 = %register1 & ~(1<<%paramName0);
      \t}\n\n
   ]]></variableTemplate>

<!--   ========== ADC Init class =============================== -->

   <template key="init_description" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t status) {
      \t *    (void) status;
      \t * }
      \t *
      \t * @code
      \t * // Initialisation values for $(_Class)
      \t * // Options available vary with device - See $(_Class)::DefaultInitValue for example
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   // Omitted parameters are take to be zero unless a base value is given
      \t *   AdcResolution_8bit_se ,         // ADC resolution - 8-bit
      \t *   AdcClockSource_BusClock ,       // Input Clock Select - Bus clock
      \t *   AdcClockDivider_DivBy1 ,        // Clock Divide Select - Divide by 1
      \t *   AdcRefSel_VrefhAndVrefl ,       // Voltage Reference Selection - VREFH and VREFL
      \t *   AdcSample_Short ,               // Sample Time Configuration - Short sample
      \t *   AdcPower_Normal ,               // Low-Power Configuration - Normal
      \t *   AdcChannelNum_10 ,              // GPIO pin disables (available for analogue function)
      \t *   AdcChannelNum_11 ,
      \t *   AdcCompare_LessThan, 200,       // Compare Function Control - ADC value < 100
      \t *   AdcPretrigger_SoftwareTrigger , // Conversion Trigger Select - Software trigger
      \t *   AdcSc4Htrgme_Single ,           // Hardware Trigger Multiple Conversion Enable - Single
      \t *   AdcSc4Ascane_Disabled ,         // FIFO Scan Mode Enable - Disabled
      \t *   AdcSc4Acfsel_OredTriggers ,     // Compare function select OR/AND when the FIFO function is enabled - ORed triggers
      \t *   AdcSc4Afdep_FifoDisabled ,      // FIFO Depth - FIFO disabled
      \t *   AdcHardwareMask_Unmasked,       // Hardware Trigger Mask - Unmasked
      \t *
      \t *   $(_name)Callback,                // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                // Priority for interrupt - Low
      \t *
      \t *    // Optional base value to start with (must be last parameter)
      \t *    $(_Class)::DefaultValue
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" discardRepeats="true" >
   <![CDATA[
      class $(_Structname)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="/$(_BASENAME)/irqHandlingMethod"
   ><![CDATA[
       \t//! Common class based callback code has been generated for this class of peripheral
       \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
       \t\n
   ]]></variableTemplate>

   <template namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));\n
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  adcCallback Callback function to execute on interrupt
      \t */
      \tstatic void setCallback(CallbackFunction adcCallback) {
      \t   if (adcCallback == nullptr) {
      \t      adcCallback = unhandledCallback;
      \t   }
      \t   // Allow either no handler set yet or removing handler
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || (adcCallback == unhandledCallback),
      \t         "Handler already set");
      \t   sCallback = adcCallback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   //.....IRQ handler code here..........
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t   return;
      \t}
      \t\n
   ]]>
   </template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback for programmatically set handler */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Structname)BasicInfo::unhandledCallback;
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate namespace="usbdm" discardRepeats="true" variables="irqHandlingMethod" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_sc2_adtrg,adc_sc2_compare,adc_sc2_refsel"
   ><![CDATA[
      \t   /// Status and Control Register 2
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_sc3_adlpc,adc_sc3_adiv,adc_sc3_adlsmp,adc_sc3_mode,adc_sc3_adiclk"
   ><![CDATA[
      \t   /// Status and Control Register 3
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_sc4_htrgme,adc_sc4_ascane,adc_sc4_acfsel,adc_sc4_afdep"
   ><![CDATA[
      \t   /// Status and Control Register 4
      \t   uint16_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_cv_cv"
   ><![CDATA[
      \t   /// Compare Value Register
      \t   uint16_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_apctl1_adpc"
   ><![CDATA[
      \t   /// Pin Control 1 Register
      \t   uint16_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_sc5_hwtriggermask"
   ><![CDATA[
      \t   /// Status and Control Register 5
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t   // ..........  Configure ...........
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
             condition="irqHandlingMethod" ><![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      Info::setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t   // ..........  Regs to init .......... ;
      \t   adc->SC2    = init.sc2;
      \t   adc->SC3    = init.sc3;
      \t   adc->SC4    = init.sc4;
      \t   adc->CV    = init.cv;
      \t   adc->APCTL1    = init.apctl1;
      \t   adc->SC5    = init.sc5;
      \t}
      \t\n
   ]]></template>

<!--   Constructors -->

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            adc_sc2_adtrg;
            adc_sc2_refsel;
            adc_sc3_adlpc;
            adc_sc3_adiv;
            adc_sc3_adlsmp;
            adc_sc3_mode;
            adc_sc3_adiclk;
            adc_sc4_htrgme;
            adc_sc4_ascane;
            adc_sc4_acfsel;
            adc_sc4_afdep;
            adc_sc5_hwtriggermask
            " >
      <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_sc2_compare,adc_cv_cv"
      linePadding="xxx"
      nonDefaultParams="3" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description0, %description1
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      %params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName0 =  (%registerName0 & ~%mask0)| %paramName0;
      \t      %registerName1 =  %paramName1;
      \t   }
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_apctl1_adpc"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description using a bit mask
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param value %tooltip
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName |= %paramName0;
      \t   }
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_sc1_adch, adc_apctl1_adpc"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description1
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param value %description
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%param0, Types... rest) : Init(rest...) {
      \t
      \t      %registerName1 |= 1<<%paramName0;
      \t   }
      \t\n
   ]]>
   </variableTemplate>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      separator=","
      terminator=","
      variables="
            adc_sc3_mode,
            adc_sc3_adiclk,
            adc_sc3_adiv,
            adc_sc2_refsel,
            adc_sc3_adlsmp,
            adc_sc3_adlpc,
            adc_apctl1_adpc,
            adc_sc2_compare,adc_cv_cv ,
            adc_sc2_adtrg,
            adc_sc2_acfgt,
            adc_sc4_htrgme,
            adc_sc4_ascane,
            adc_sc4_acfsel,
            adc_sc4_afdep,
            adc_sc5_hwtriggermask
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></variableTemplate>

<!--  ==========  ADC MISC =============================== -->

   <clockCodeTemplate variable="adc_sc3_adiclk" returnFormat="%s" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
   ><![CDATA[
      \t/** Internal ADC clock */
      \tstatic constexpr unsigned adiclk = $(adiclk);
      \t
      \t/**
      \t * Set %description
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setClockout(%paramType %paramName) {
      \t   %fieldAssignment;
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getClockFrequency(%paramType %paramName) {
      \t
      \t   switch(%paramName) {
      \t      default: return 0;
      %body
      \t   }
      \t}
      \t
      \t/**
      \t * Get clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getClockFrequency() {
      \t   return getClockFrequency((%paramType)(%maskingExpression));
      \t}; \n\n
   ]]></clockCodeTemplate>

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <template namespace="baseClass" >
   <![CDATA[
      }; // class $(_Structname)BasicInfo
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="adc_files" >
      <copy source="Project_Headers/adc-MKE.h"                target="Project_Headers/adc.h"                    overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-comparison-example.cpp" target="Snippets/analogue-comparison-example.cpp" overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-example.cpp"            target="Snippets/analogue-example.cpp"            overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-diff-example.cpp"       target="Snippets/analogue-diff-example.cpp"       overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-interrupt-example.cpp"  target="Snippets/analogue-interrupt-example.cpp"  overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-joystick-example.cpp"   target="Snippets/analogue-joystick-example.cpp"   overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->
   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <aliasOption key="/SIM/sim_sopt0_adhwt"    locked="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt0_delay"    locked="false" optional="true" />
   </category>

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
