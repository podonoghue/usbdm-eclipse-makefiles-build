<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- adc0_mke04.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Analog-to-Digital Converter" >

   <constant key="disable_peripheral" value='"adc->SC1[0] = ADC_SC1_ADCH(-1);"'  type="String" />

   <equation key="irq_parameters"            value=""       />
   <equation key="irq_dummy_parameters"      value=""       />
   <equation key="irq_call"                  value=""       />
   <equation key="generateDefault"           value="false"  />
   <equation key="configureInStartupDefault" value="false"  />
   <xi:include href="enablePeripheral.xml"  />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <!-- ____ Interrupts continued ____ -->

   <binaryOption key="adc_sc1_aien" condition="adc_sc1_aien_present"
      enabledBy="irqHandlingMethod"
      typeName="AdcInterrupt"
      baseType="uint8_t"
      description="Conversion Complete Interrupt"
      toolTip="Allows an interrupt to be generated on when a conversion completes" >
      <choice name="Disabled"    value="0" enum="Disabled" />
      <choice name="Enabled"     value="1" enum="Enabled" />
   </binaryOption >

   <!-- ____ Hidden ____ -->

   <binaryOption key="adc_sc2_adact" condition="adc_sc2_adact_present"
      hidden="true"
      derived="true"
      typeName="AdcActive"
      baseType="uint8_t"
      description="Conversion Active"
      toolTip="Indicates if the ADC is busy with a conversion" >
      <choice name="Idle"        value="0" enum="Idle" />
      <choice name="Busy"        value="1" enum="Busy" />
   </binaryOption >

   <binaryOption key="adc_sc2_fempty" condition="adc_sc2_fempty_present"
      hidden="true"
      derived="true"
      typeName="AdcFifoEmpty"
      baseType="uint8_t"
      description="Result FIFO empty"
      toolTip="Indicates if the FIFO is empty" >
      <choice name="FIFO has data"  value="0" enum="FifoHasData" />
      <choice name="FIFO empty"     value="1" enum="FifoEmpty" />
   </binaryOption >

   <binaryOption key="adc_sc2_ffull" condition="adc_sc2_ffull_present"
      hidden="true"
      derived="true"
      typeName="AdcFifofull"
      baseType="uint8_t"
      description="Result FIFO full"
      toolTip="Indicates if the FIFO is full" >
      <choice name="FIFO not full"  value="0" enum="FifoNotFull" />
      <choice name="FIFO full"      value="1" enum="FifoFull" />
   </binaryOption >

   <intOption key="adc_r_d" condition="adc_r_d_present"
      hidden="true"
      derived="true"
      typeName="uint16_t"
      description="Data result"
      toolTip="Result from last conversion"
   />

   <binaryOption key="adc_sc1_coco" condition="adc_sc1_coco_present"
      hidden="true"
      derived="true"
      typeName="AdcConversionComplete"
      baseType="uint8_t"
      description="Conversion Complete Flag"
      toolTip="Flag set when conversion completes" >
      <choice name="Not complete"  value="0" enum="NotComplete" />
      <choice name="Complete"      value="1" enum="Complete" />
   </binaryOption >

   <!-- ____ Clock ____ -->

   <title description="Clock" />

   <binaryOption key="adc_sc3_adlpc" condition="adc_sc3_adlpc_present"
      enabledBy="enablePeripheralSupport"
      typeName="AdcPower"
      baseType="uint8_t"
      description="Low-Power Configuration"
      toolTip="Controls trade-off between speed and power consumption\n
               It also determines the speed of the asynchronous clock" >
      <choice name="Normal"      value="0" enum="Normal" />
      <choice name="Low power"   value="1" enum="Low" />
   </binaryOption >

   <intOption key="adc_internal_clock"
      ref="adc_sc3_adlpc?4000000:8000000"
      derived="true"
      description="Adc asynchronous clock"
      toolTip="This clock is generated from a clock source within the ADC module.\n
               When selected as the clock source, this clock remains active while\n
               the MCU is in Wait or Stop mode and allows conversions in these modes\n
               for lower noise operation.\n
               This is nominally 8MHz in Adc high speed or 4MHz in in ADC low power modes"
      locked="true"
      units="Hz" />

   <choiceOption key="adc_sc3_adiclk" condition="adc_sc3_adiclk_present"
      target="adc_intermediate_clock_frequency"
      enabledBy="enablePeripheralSupport"
      typeName="AdcClockSource"
      baseType="uint8_t"
      description="Input Clock Select"
      toolTip="Input clock for ADC" >
      <choice name="Bus clock"                   value="0" enum="BusClock"     code="SystemBusClock"           ref="/SIM/system_bus_clock[0]"   />
      <choice name="(Bus clock)/2"               value="1" enum="BusClockDiv2" code="SystemBusClock/2"         ref="/SIM/system_bus_clock[0]/2" />
      <choice name="Alternate clock (ALTCLK)"    value="2" enum="Altclk"       code="Osc0Info::getOscClock()"  ref="/OSC0/oscer_clock"           />
      <choice name="Asynchronous clock (ADICK)"  value="3" enum="Asynch"       code="adiclk"                   ref="adc_internal_clock"         />
   </choiceOption >

   <intOption key="adc_intermediate_clock_frequency"
      locked="true"
      derived="true" />

   <choiceOption key="adc_sc3_adiv" condition="adc_sc3_adiv_present"
      target="adc_clock_frequency"
      enabledBy="enablePeripheralSupport"
      typeName="AdcClockDivider"
      baseType="uint8_t"
      description="Clock Divide Select"
      toolTip="Sets the division of the available clock for use by the ADC" >
      <choice name="Divide by 1"  value="0" enum="DivBy1" ref="adc_intermediate_clock_frequency"     />
      <choice name="Divide by 2"  value="1" enum="DivBy2" ref="adc_intermediate_clock_frequency/(2)" />
      <choice name="Divide by 4"  value="2" enum="DivBy4" ref="adc_intermediate_clock_frequency/(4)" />
      <choice name="Divide by 8"  value="3" enum="DivBy8" ref="adc_intermediate_clock_frequency/(8)" />
   </choiceOption >

   <intOption key="adc_clock_frequency"
      derived="true"
      locked="true"
      description="ADC Clock Frequency"
      toolTip="This is the final clock provided to the ADC after\n
               input clock selection and division"
      units="Hz"
      min="400000"
      max="adc_sc3_adlpc?4000000:8000000"
       />

   <!-- ____ Main Configuration ____ -->

   <title/>

   <choiceOption key="adc_sc1_adch" condition="adc_sc1_adch_present"
      typeName="AdcChannelNum"
      baseType="uint8_t"
      description="Input Channel Select"
      toolTip="ADC Channel to use" >
      <choiceExpansion keys="ch" dim="16" value="%(ch)" name="Channel %(ch)" enum="%(ch)" />
      <choice name="Vss"                value="16" enum="Vss"        />
      <choice name="Temperature Sensor" value="22" enum="TempSensor" />
      <choice name="Bandgap"            value="23" enum="Bandgap"    />
      <choice name="VRefH"              value="29" enum="Vrefh"      />
      <choice name="VRefL"              value="30" enum="Vrefl"      />
      <choice name="Module disabled"    value="31" enum="Disabled"   isDefault="true" />
   </choiceOption >

   <choiceOption key="adc_sc3_mode" condition="adc_sc3_mode_present"
      enabledBy="enablePeripheralSupport"
      typeName="AdcResolution"
      baseType="uint8_t"
      description="ADC resolution"
      toolTip="Resolution used for conversion" >
      <choice name="8-bit"       value="0" enum="8bit_se" />
      <choice name="10-bit"      value="1" enum="10bit_se" />
      <choice name="12-bit"      value="2" enum="12bit_se" />
   </choiceOption >

   <choiceOption key="adc_sc2_refsel" condition="adc_sc2_refsel_present"
      enabledBy="enablePeripheralSupport"
      typeName="AdcReferenceSel"
      baseType="uint8_t"
      description="Voltage Reference Selection"
      toolTip="Select the voltage reference used for the conversion" >
      <choice name="VREFH and VREFL"  value="0" enum="VrefhAndVrefl" />
      <choice name="VDDA and VSSA"    value="1" enum="VddaAndVssa" />
      <choice name="Reserved"         value="2" enum="Reserved" />
   </choiceOption >

   <binaryOption key="adc_sc3_adlsmp" condition="adc_sc3_adlsmp_present"
      enabledBy="enablePeripheralSupport"
      typeName="AdcSample"
      baseType="uint8_t"
      description="Sample Time Configuration"
      toolTip="Selects between long and short sample times.\n
               Longer sample periods allow higher impedance inputs to be accurately sampled.\n
               Shorter sample period maximizes the conversion speed for lower impedance inputs.\n
               Longer sample times can also be used to lower overall power consumption when\n
               continuous conversions are enabled." >
      <choice name="Short sample"  value="0" enum="Short" />
      <choice name="Long sample"   value="1" enum="Long" />
   </binaryOption >

   <binaryOption key="adc_sc1_adco" condition="adc_sc1_adco_present"
      enabledBy="enablePeripheralSupport"
      typeName="AdcOperation"
      baseType="uint8_t"
      description="Continuous Conversion Enable"
      toolTip="Selects between single and multiple conversions.\n
               Conversions are triggered by a write to the ADC_SC1 when software triggered operation is selected,\n
               or following assertion of ADHWT when hardware triggered operation is selected.\n
               When the FIFO function is enabled (AFDEP != 0), looped sets of conversions are triggered." >
      <choice name="Single"      value="0" enum="Single"
         toolTip="Selected: A single conversion in non-FIFO or a single set of conversions in FIFO mode"
      />
      <choice name="Continuous"  value="1" enum="Continuous"
         toolTip="Selected: Continuous conversions in non-FIFO or continuous sets of conversions in FIFO mode"
      />
   </binaryOption >

   <!-- ____ FIFO ____ -->

   <title description="FIFO" />

   <choiceOption key="adc_sc4_afdep" condition="adc_sc4_afdep_present"
      enabledBy="enablePeripheralSupport"
      typeName="AdcFifoDepth"
      baseType="uint16_t"
      description="FIFO Depth"
      toolTip="Emables the FIFO and selects FIFO depth" >
      <choice name="FIFO disabled"  value="0" enum="FifoDisabled" />
      <choice name="2-level FIFO"   value="1" enum="2LevelFifo" />
      <choice name="3-level FIFO"   value="2" enum="3LevelFifo" />
      <choice name="4-level FIFO"   value="3" enum="4LevelFifo" />
      <choice name="5-level FIFO"   value="4" enum="5LevelFifo" />
      <choice name="6-level FIFO"   value="5" enum="6LevelFifo" />
      <choice name="7-level FIFO"   value="6" enum="7LevelFifo" />
      <choice name="8-level FIFO"   value="7" enum="8LevelFifo" />
   </choiceOption >

   <binaryOption key="adc_sc4_ascane" condition="adc_sc4_ascane_present"
      enabledBy="adc_sc4_afdep>0"
      typeName="AdcFifoScanMode"
      baseType="uint16_t"
      description="FIFO Scan Mode Enable"
      toolTip="When enabled, the FIFO always use the first channel written to SC1. \n
               The ADC will repeat conversions using this channel until the result\n
               FIFO is fulfilled.\n
               In continuous mode (SC1.ADCO = 1), the ADC will start the next\n
               conversion with the same channel after SC1.COCO is set." >
      <choice name="Disabled"    value="0" enum="Disabled" />
      <choice name="Enabled"     value="1" enum="Enabled"  />
   </binaryOption >

   <!-- ____ Trigger ____ -->

   <title description="Trigger" />

   <binaryOption key="adc_sc2_adtrg" condition="adc_sc2_adtrg_present"
      enabledBy="enablePeripheralSupport"
      typeName="AdcPretrigger"
      baseType="uint8_t"
      description="Conversion Trigger Select"
      toolTip="Controls whether conversions are triggered by writes to ADC_SC1 (software)\n
               or assertion of ADHWT input (hardware)" >
      <choice name="Software trigger"  value="0" enum="SoftwareTrigger" />
      <choice name="Hardware trigger"  value="1" enum="HardwareTrigger" />
   </binaryOption >

   <choiceOption key="adc_sc5_htrigger" condition="adc_sc5_htrigger_present"
      enabledBy="adc_sc2_adtrg"
      typeName="AdcHardwareTriggerMask"
      baseType="uint8_t"
      description="Hardware Trigger Mask"
      toolTip="Control hardware trigger" >
      <choice name="Masking disabled"              value="0b00" enum="Unmasked"              />
      <choice name="Masked"                        value="0b10" enum="Masked"                />
      <choice name="Masked when FIFO is not empty" value="0b01" enum="MaskedIfFifoNotEmpty"  />
   </choiceOption>

   <binaryOption key="adc_sc4_htrgme" condition="adc_sc4_htrgme_present"
      enabledBy="adc_sc2_adtrg&amp;&amp;(adc_sc4_afdep>0)"
      typeName="AdcHardwareAction"
      baseType="uint16_t"
      description="Hardware Trigger Multiple Conversion Enable"
      toolTip="Selects whether a hardware trigger event initiates a single conversion\n
               or multiple conversions until the FIFO is full" >
      <choice name="Single conversion"                 value="0" enum="SingleConversion"     />
      <choice name="Multiple conversions filling FIFO" value="1" enum="MultipleConversions"  />
   </binaryOption >

   <!-- ____ Compare ____ -->

   <title description="Compare" />

   <choiceOption key="adc_sc2_compare" condition="adc_sc2_acfe_present&amp;&amp;adc_sc2_acfgt_present"
      enabledBy="enablePeripheralSupport"
      typeName="AdcCompare"
      baseType="uint8_t"
      valueFormat="ADC_SC2_ACFE(%s),ADC_SC2_ACFGT(%s)"
      description="Compare Function Control"
      toolTip="Configures when the ADC compare function will generate events">
      <choice name="No comparison done"            value="0,0" enum="Disabled" />
      <choice name="ADC value &lt; compare value"  value="1,0" enum="LessThan" />
      <choice name="ADC value &gt;= compare value" value="1,1" enum="GreaterThanOrEqual" />
   </choiceOption >

   <intOption key="adc_cv_cv" condition="adc_cv_cv_present"
      enabledBy="adc_sc2_compare>0"
      typeName="uint16_t"
      valueFormat="%s"
      description="Compare Value"
      toolTip="Value compared against ADC conversion result to generate compare events"
      value="0"
      min="0" max="4095"
   />

   <binaryOption key="adc_sc4_acfsel" condition="adc_sc4_acfsel_present"
      enabledBy="adc_sc4_afdep>0"
      typeName="AdcCompareCondition"
      baseType="uint16_t"
      description="Compare function OR/AND selection."
      toolTip="This controls how the compare events from the FIFO values are combined.\n
               If cleared, ADC will OR all of the compare events and set COCO if at least one events occurs. \n
               If set, ADC will AND all of compare events and set COCO only when all events have occurred" >
      <choice name="ORed events"   value="0" enum="OredEvents"  />
      <choice name="ANDed events"  value="1" enum="AndedEvents" />
   </binaryOption >

   <!-- ____ Inputs ____ -->

   <title description="Inputs" />

   <bitmaskOption key="adc_apctl1_adpc"  condition="adc_apctl1_adpc_present"
      enabledBy="enablePeripheralSupport"
      typeName="AdcChannelMask"
      baseType="uint16_t"
      description="GPIO Pin Disable"
      toolTip="Bit mask disabling the GPIO function on the pin corresponding to a ADC channel.\n
               This is only necessary for Channels 0-15.\n
               The GPIO corresponding to the Input Channel Selected will also be disabled.\n
               0:pin is GPIO, 1:pin is Analogue"
      value="0"
      bitmask="0"
      bitList="=inputPinMap"
      pinMap='="ADC$(_instance)_SE%i:"+inputPinMap'
      bitDescription="Channel %i"
    />

   <!-- ____ Setters and Getters ____________ -->

   <variableTemplate variables="adc_sc2_compare,adc_cv_cv" codeGenCondition="enableGettersAndSetters" multipleParamsOnNewline="true"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tstatic void configureCompare(%params) {
      \t
      \t      %register0 =  (%register0 & ~%mask0)| %paramName0;
      \t      %register1 =  %paramName1;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="field                     : set   : get   : clear : genCode                 : name"
        values="
         adc_sc2_adact                  : false : true  : false : enableGettersAndSetters : Active;
         adc_sc2_adtrg                  : true  : true  : false : enableGettersAndSetters : Pretrigger;
         adc_sc2_compare                : true  : true  : false : enableGettersAndSetters : Compare;
         adc_sc2_fempty                 : false : true  : false : enableGettersAndSetters : FifoEmpty;
         adc_sc2_ffull                  : false : true  : false : enableGettersAndSetters : FifoFull;
         adc_sc2_refsel                 : true  : true  : false : enableGettersAndSetters : RefSel;

         adc_sc3_adlpc                  : true  : true  : false : enableGettersAndSetters : Power;
         adc_sc3_adiv                   : true  : true  : false : enableGettersAndSetters : ClockDivider;
         adc_sc3_adlsmp                 : true  : true  : false : enableGettersAndSetters : Sample;
         adc_sc3_mode                   : true  : true  : false : enableGettersAndSetters : Resolution;
         adc_sc3_adiclk                 : true  : true  : false : enableGettersAndSetters : ClockSource;

         adc_sc4_htrgme                 : true  : true  : false : enableGettersAndSetters : HardwareMultipleConversion;
         adc_sc4_ascane                 : true  : true  : false : enableGettersAndSetters : ScanMode;
         adc_sc4_acfsel                 : true  : true  : false : enableGettersAndSetters : CompareOperation;
         adc_sc4_afdep                  : true  : true  : false : enableGettersAndSetters : FifoDepth;

         adc_cv_cv                      : true  : true  : false : enableGettersAndSetters : CompareValue;

         adc_apctl1_adpc                : true  : true  : false : enableGettersAndSetters : DisabledGpios;

         adc_sc5_htrigger               : true  : true  : false : enableGettersAndSetters : HardwareMask" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Clear %description
         \t *
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!--
   <deleteVariables variables="adc_sc1_dim"           />
   <constant key="adc_sc1_dim" type="Long" value="2"  />
   -->

   <choiceOption key="adc_index" condition="=adc_sc1_dim>1"
      hidden="true"
      derived="true"
      valueFormat="%s"
      typeName="AdcIndex"
      baseType="int"
      description="Index for SC1 or R registers"
      toolTip="Some ADCs have multiple SC1[] or R[] registers to\n
               allow multiple hardware triggers while retaining results" >
      <choiceExpansion value="%(i)" name="Index %(i)" enum="%(i)" keys="i" values="0" />
   </choiceOption>

   <equation key="sc1_index" value="0"        condition="=(adc_sc1_dim==1)" />
   <equation key="sc1_index" value="adcIndex" condition="=(adc_sc1_dim>1)"  />
   <!--
   <printVar key="adc_sc1_dim" />
   <printVar key="sc1_index" />
   -->

   <for keys="field                     : set   : get   : clear : genCode                 : context              : name"
        values="
         adc_sc1_coco,adc_index         : false : true  : false : true                    : SC1[$(sc1_index)]    : ConversionComplete;
         adc_sc1_aien,adc_index         : true  : true  : false : enableGettersAndSetters : SC1[$(sc1_index)]    : InterruptEnable;
         adc_sc1_adco,adc_index         : true  : true  : false : enableGettersAndSetters : SC1[$(sc1_index)]    : ContinuousConversion;
         adc_sc1_adch,adc_index         : true  : true  : false : true                    : SC1[$(sc1_index)]    : Channel;

         adc_r_d,adc_index              : false : true  : false : true                    : R[$(sc1_index)]      : ConversionResult" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)" multipleParamsOnNewline="true"
      immediateVariables="sc1_index"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t
         \t   $(_basename)->%(context) = ($(_basename)->%(context) & ~%mask)|%paramName0;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)" params="*,"  multipleParamsOnNewline="true"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         %paramDescription
         \t *
         \t * @return %tooltip0
         \t */
         \tstatic %paramType get%(name)(%params) {
         \t   return %paramType($(_basename)->%(context)&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Clear %description
         \t *
         %paramDescription
         \t */
         \tstatic void clear%(name)() {
         \t   $(_basename)->%(context) = $(_basename)->%(context)|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate variables="adc_sc1_adch, adc_apctl1_adpc" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * Allocate %description0
      \t * The GPIO function on the associated pin is disabled
      \t *
      %paramDescription0
      \t */
      \tstatic void allocateAnaloguePin(%paramType0 %paramName0) {
      \t   %register1 = %register1 | (1<<%paramName0);
      \t}
      \t
      \t/**
      \t * Release %description0
      \t * The GPIO function on the associated pin is enabled
      \t *
      %paramDescription0
      \t */
      \tstatic void releaseAnaloguePin(%paramType0 %paramName0) {
      \t   %register1 = %register1 & ~(1<<%paramName0);
      \t}\n\n
   ]]></variableTemplate>

   <!-- ________ ADC Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t result, int channel) {
      \t *    (void) status;
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   AdcInterrupt_Enabled ,           // (adc_sc1_aien) Conversion Complete Interrupt - Enabled
      \t *   AdcContinuous_Continuous ,       // (adc_sc1_adco) Continuous Conversion Enable - Continuous
      \t *   AdcChannelNum_6 ,                // (adc_sc1_adch) Input Channel Select - Channel 6
      \t *   AdcPretrigger_SoftwareTrigger ,  // (adc_sc2_adtrg) Conversion Trigger Select - Software trigger
      \t *   AdcCompare_LessThan , 1000,      // (adc_sc2_compare) Compare Function Control - ADC value < 1000
      \t *   AdcReferenceSel_VrefhAndVrefl ,  // (adc_sc2_refsel) Voltage Reference Selection - VREFH and VREFL
      \t *   AdcPower_Normal ,                // (adc_sc3_adlpc) Low-Power Configuration - Normal
      \t *   AdcClockDivider_DivBy2 ,         // (adc_sc3_adiv) Clock Divide Select - Divide by 2
      \t *   AdcSample_Long ,                 // (adc_sc3_adlsmp) Sample Time Configuration - Long sample
      \t *   AdcResolution_12bit_se ,         // (adc_sc3_mode) ADC resolution - 12-bit
      \t *   AdcClockSource_BusClockDiv2 ,    // (adc_sc3_adiclk) Input Clock Select - (Bus clock)/2
      \t *   AdcSc4Htrgme_Single ,            // (adc_sc4_htrgme) Hardware Trigger Multiple Conversion Enable - Single conversion
      \t *   AdcSc4Ascane_Enabled ,           // (adc_sc4_ascane) FIFO Scan Mode Enable - Enabled
      \t *   AdcSc4Acfsel_OredTriggers ,      // (adc_sc4_acfsel) Compare function OR/AND selection. - ORed triggers
      \t *   AdcSc4Afdep_8LevelFifo ,         // (adc_sc4_afdep) FIFO Depth - 8-level FIFO
      \t *   AdcChannelMask_PTA0 ,            // (adc_apctl1_adpc) GPIO Pin Disable
      \t *   AdcChannelMask_PTA6 ,            // (adc_apctl1_adpc) GPIO Pin Disable
      \t *   AdcHardwareTriggerMask_Unmasked, // (adc_sc5_htrigger) Hardware Trigger Mask - Masking disabled
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
   ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : adc_sc1_aien,adc_sc1_adco,adc_sc1_adch               :   0      ;
               %baseType   : adc_sc2_adtrg,adc_sc2_compare,
                             adc_sc2_refsel                                       :   0      ;
               %baseType   : adc_sc3_adlpc,adc_sc3_adiv,adc_sc3_adlsmp,
                             adc_sc3_mode,adc_sc3_adiclk                          :   0      ;
               %baseType   : adc_sc4_htrgme,adc_sc4_ascane,adc_sc4_acfsel,
                             adc_sc4_afdep                                        :   0      ;
               %baseType   : adc_cv_cv                                            :   0      ;
               %baseType   : adc_apctl1_adpc                                      :   0      ;
               %baseType   : adc_sc5_htrigger                                     :   0      " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            adc_sc1_aien;adc_sc1_adco;
            adc_sc2_adtrg;
            adc_sc2_refsel;
            adc_sc3_adlpc;adc_sc3_adiv;adc_sc3_adlsmp;
            adc_sc3_mode;adc_sc3_adiclk;
            adc_sc4_htrgme;adc_sc4_ascane;adc_sc4_acfsel;
            adc_sc4_afdep;
            adc_sc5_htrigger" >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%(r))
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" multipleParamsOnNewline="true"
      variables="adc_sc2_compare,adc_cv_cv"
      linePadding="xxx"
      nonDefaultParams="3" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description0, %description1
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName0 =  (%registerName0 & ~%mask0)| %paramName0;
      \t      %registerName1 =  %paramName1;
      \t   }
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_apctl1_adpc"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description using a bit mask
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param value %tooltip
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName |= %paramName0;
      \t   }
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="adc_sc1_adch, adc_apctl1_adpc"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description0
      \t    * This will set the initial channel and also disable the GPIO function on
      \t    * the pin associated with the ADC channel
      \t
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param value %description
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%param0, Types... rest) : Init(rest...) {
      \t
      \t      %registerName1 |= 1<<%paramName0;
      \t      %registerName0 = (%registerName0&~%mask0) | %paramName0;
      \t   }
      \t\n
   ]]>
   </variableTemplate>

   <!-- ____ Init class Configure method ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enable();
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t   // Only set call-backs if feature enabled
      \t   setCallback(init.callbackFunction);
      \t   enableNvicInterrupts(init.irqlevel);
      \t\n
   ]]></template>
   <for keys=
             " var                                                    : statement               "
      values=" adc_sc1_adch                                           : adc->SC1[0] = AdcChannelNum_Disabled  ;
               adc_apctl1_adpc                                        : %configRegAssignment    ;
               adc_sc2_adtrg,adc_sc2_acfe,adc_sc2_acfgt,
               adc_sc2_refsel                                         : %configRegAssignment    ;
               adc_sc3_adlpc,adc_sc3_adiv,adc_sc3_adlsmp,
               adc_sc3_mode,adc_sc3_adiclk                            : %configRegAssignment    ;
               adc_sc4_htrgme,adc_sc4_ascane,adc_sc4_acfsel,
               adc_sc4_afdep                                          : %configRegAssignment    ;
               adc_cv_cv                                              : %configRegAssignment    ;
               adc_sc5_htrgmaske,adc_sc5_htrgmasksel,adc_sc5_htrigger : %configRegAssignment    ;
               adc_sc1_aien,adc_sc1_adco,adc_sc1_adch                 : adc->SC1[0] = init.sc1  " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            adc_sc1_aien,adc_sc1_adco,adc_sc1_adch,
            adc_sc2_adtrg,

            adc_sc2_compare,adc_cv_cv,
            adc_sc2_refsel,

            adc_sc3_adlpc,adc_sc3_adiv,adc_sc3_adlsmp,
            adc_sc3_mode,adc_sc3_adiclk,

            adc_sc4_htrgme,adc_sc4_ascane,adc_sc4_acfsel,
            adc_sc4_afdep,

            adc_apctl1_adpc,
            adc_sc5_htrigger" >
   <![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

<!--  ==========  ADC MISC =============================== -->

   <clockCodeTemplate variable="adc_sc3_adiclk" returnFormat="%s" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
   ><![CDATA[
      \t/** Internal ADC clock */
      \tstatic constexpr unsigned adiclk = $(adc_internal_clock);
      \t
      \t/**
      \t * Set %description
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setClock(%paramType %paramName) {
      \t   %fieldAssignment;
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getClockFrequency(%paramType %paramName) {
      \t
      \t   switch(%paramName) {
      \t      default: return 0;
      %body
      \t   }
      \t}
      \t
      \t/**
      \t * Get clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getClockFrequency() {
      \t   return getClockFrequency((%paramType)(%maskingExpression));
      \t}; \n\n
   ]]></clockCodeTemplate>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Info)> {};
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="adc_files" >
      <copy source="Project_Headers/adc-MKE.h"                target="Project_Headers/adc.h"                    overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-comparison-example.cpp" target="Snippets/analogue-comparison-example.cpp" overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-example.cpp"            target="Snippets/analogue-example.cpp"            overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-diff-example.cpp"       target="Snippets/analogue-diff-example.cpp"       overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-interrupt-example.cpp"  target="Snippets/analogue-interrupt-example.cpp"  overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-joystick-example.cpp"   target="Snippets/analogue-joystick-example.cpp"   overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="Thes settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
