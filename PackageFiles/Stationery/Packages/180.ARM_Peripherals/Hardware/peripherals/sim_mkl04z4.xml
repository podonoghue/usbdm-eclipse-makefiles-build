<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- sim_mkl04z4.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="System Integration Module" >

<!-- ==================== Constants ==================== -->

   <equation key="generateDefault"           value="false"         />
   <equation key="configureInStartupDefault" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- TPM Trigger Sources - value:name:enum -->
   <constant key="/TPM/_trigger_sources"
      value="&quot;
         0b0000 : 'ExternalTrigger'  :  External    ;
         0b0001 : 'CMP0'             :  CMP0        ;
         0b0100 : 'PIT Ch 0'         :  PIT_Ch0     ;
         0b0101 : 'PIT Ch 1'         :  PIT_Ch1     ;
         0b1000 : 'TPM0 overflow'    :  TPM0        ;
         0b1001 : 'TPM1 overflow'    :  TPM1        ;
         0b1100 : 'RTC Alarm'        :  RTC_Alarm   ;
         0b1101 : 'RTC Seconds'      :  RTC_Seconds ;
         0b1110 : 'LPTMR Output'     :  LPTMR       ;
         0b1111 : 'Software Trigger' :  Software    &quot;"
   />

   <!-- Peripheral speeds                  RUN       VLPR     -->
   <constant key="MCGOUTCLK_max"  value="100MHz,     4MHz"   type="Long" />
   <constant key="MCGFLLCLK_max"  value=" 48MHz,     0MHz"   type="Long" />
   <constant key="UART_max"       value=" 48MHz,     4MHz"   type="Long" />
   <constant key="TPM_max"        value=" 48MHz,     4MHz"   type="Long" />

   <!-- LLWU wakeup devices -->
   <constant key="/LLWU/llwu_device_list"
      description="LLWU Wakeup sources"
      type="String"
      value='"LPTMR0;CMP0;;;TSI0;RtcAlarm;;RtcSeconds"' />

   <!-- Clock divider -->
   <constant key="clock_divider_type" type="Long" value="2" />

   <!-- DMA slots -->
   <choiceOption key="/DMAMUX0/dmamux_chcfg_src"
      hidden="true"
      typeName="DmamuxSlot"
      valueFormat="DMAMUX_CHCFG_SOURCE(%s)"
      toolTip="Specifies which DMA source (slot) is routed to a particular DMA channel"
      description="Mapping of DMA slot to DMA channel" >
      <choice value="0"  name="Disabled"           enum="Disabled"         />
      <choice value="2"  name="UART0 Receive"      enum="UART0_Receive"    />
      <choice value="3"  name="UART0 Transmit"     enum="UART0_Transmit"   />
      <choice value="16" name="SPI0 Receive"       enum="SPI0_Receive"     />
      <choice value="17" name="SPI0 Transmit"      enum="SPI0_Transmit"    />
      <choice value="22" name="I2C0"               enum="I2C0"             />
      <choice value="24" name="TPM0 Channel 0"     enum="TPM0_Channel0"    />
      <choice value="25" name="TPM0 Channel 1"     enum="TPM0_Channel1"    />
      <choice value="26" name="TPM0 Channel 2"     enum="TPM0_Channel2"    />
      <choice value="27" name="TPM0 Channel 3"     enum="TPM0_Channel3"    />
      <choice value="28" name="TPM0 Channel 4"     enum="TPM0_Channel4"    />
      <choice value="29" name="TPM0 Channel 5"     enum="TPM0_Channel5"    />
      <choice value="32" name="TPM1 Channel 0"     enum="TPM1_Channel0"    />
      <choice value="33" name="TPM1 Channel 1"     enum="TPM1_Channel1"    />
      <choice value="40" name="ADC0"               enum="ADC0"             />
      <choice value="42" name="CMP0"               enum="CMP0"             />
      <choice value="45" name="DAC0"               enum="DAC0"             />
      <choice value="49" name="Port A"             enum="PortA"            />
      <choice value="50" name="Port B"             enum="PortB"            />
      <choice value="54" name="TPM0 Overflow"      enum="TPM0_Overflow"    />
      <choice value="55" name="TPM1 Overflow"      enum="TPM1_Overflow"    />
      <choice value="60" name="Always Enabled 60"  enum="AlwaysEnabled60"  />
      <choice value="61" name="Always Enabled 61"  enum="AlwaysEnabled61"  />
      <choice value="62" name="Always Enabled 62"  enum="AlwaysEnabled62"  />
      <choice value="63" name="Always Enabled 63"  enum="AlwaysEnabled63"  />
   </choiceOption>

   <!-- Indicate RTC arrangement: OSC0/RTC(OSC1) share XTAL/EXTAL pins -->
   <binaryOption key="RtcForcing"
      locked="true"
      derived="true"
      ref="(/MCG/mcg_c2_oscMode==/OscMode_RTC_Controlled)?1:0"
      description="RTC control of OSC0"
      toolTip="Indicates if OSC0 is being controlled by RTC which shares XTAL/EXTAL pins" >
      <choice value="0" name="OSC0 is independent"        isDefault="true" />
      <choice value="1" name="OSC0 is controlled by RTC"                   />
   </binaryOption>

   <xi:include href="simCommon.xml"/>

   <!-- _____________ Class Declaration __________________ -->
   <constant key="_class_declaration" type="String"
      value='"$(_Info) : public $(_Baseclass)BasicInfo"' />

   <!-- _____________ SOPT1 __________________ -->

   <category name="SOPT1" description="RTC clocks" >

      <aliasOption key="rtc_clkin_clock" optional="true" locked="false" />

      <aliasOption key="sim_sopt1_osc32ksel" locked="false" optional="true" />
      <aliasOption key="system_erclk32k_clock" />

      <choiceOption key="sim_sopt1_usbpower" condition="sim_sopt1_usbregen_present &amp;&amp; sim_sopt1_usbsstby_present &amp;&amp; sim_sopt1_usbvstby_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="SIM_SOPT1_USBREGEN(%s),SIM_SOPT1_USBSSTBY(%s),SIM_SOPT1_USBVSTBY(%s)"
         typeName="SimUsbPower"
         description="USB voltage regulator power control"
         toolTip="Controls when the USB voltage regulator is enabled in\n
                  (RUN), (STOP, VLPS, LLS and VLLS) or (VLPR and VLPW) modes" >
         <choice value="0,0,0"  name="Disabled in all modes"         enum="Disabled"               />
         <choice value="1,0,0"  name="Enabled in all modes"          enum="EnabledInAll"           isDefault="true" />
         <choice value="1,1,0"  name="Enabled in run and low power"  enum="EnabledInRun_LowPower"  />
         <choice value="1,0,1"  name="Enabled in run and stop"       enum="EnabledInRun_Stop"      />
         <choice value="1,1,1"  name="Enabled in run only"           enum="EnabledInRun"           />
      </choiceOption>
   </category>

   <!-- _____________ SOPT2 __________________ -->

   <category name="SOPT2" description="Clock Gating" >

      <template><![CDATA[
         \t/**
         \t * Get Peripheral clock frequency
         \t *
         \t * @return Frequency as a uint32_t in Hz
         \t *
         \t * @note If there is a peripheral clock divider then this is the
         \t *       frequency of the undivided peripheral clock
         \t */
         \tstatic uint32_t getPeripheralClock() {
         \t
         \t   return SystemMcgFllClock;
         \t}\n\n
      ]]></template>

      <aliasOption key="sim_sopt2_rtcclkoutsel"  optional="true" locked="false"/>
      <aliasOption key="rtc_clkout"              optional="true" />

      <aliasOption key="/MCG/system_mcgpclk_clock[]"  optional="true" />
      <aliasOption key="system_peripheral_clock[]"    optional="true" />

      <aliasOption key="/OSC0/oscer_clock"               optional="true" />
      <aliasOption key="/MCG/system_mcgirclk_clock[]"    optional="true" />
   </category>

   <!-- _____________ SOPT4 __________________ -->

   <category name="SOPT4" description="TPM signals" >

      <for keys="n" values="0;1" >
         <intOption key="TpmClkin%(n)"
            addToVar="TpmExternalItems"
            description="TPM External clock input #%(n)"
            toolTip="This input is available as a TPM external clock source"
            value="0"
            units="Hz"
         />
         <variableTemplate variables="TpmClkin%(n)"
            initExpressionOnSameLine="true"
         ><![CDATA[
            \t/// %tooltip
            \tstatic constexpr uint32_t TpmClkin%(n) =  %initExpression;
            \t\n
         ]]></variableTemplate>
      </for>

      <for keys="p" dim="4" >

         <if condition="sim_sopt4_tpm%(p)clksel_present" >
            <binaryOption key="sim_sopt4_tpm%(p)clksel"
               addToVar="Tpm%(p)ExternalItems"
               enabledBy="enablePeripheralSupport"
               target="tpm%(p)ExternalClock"
               typeName="SimTpm%(p)ClkSel"
               description="TPM %(p) External Clock Pin "
               toolTip="External pin used to drive the external clock to TPM%(p) module" >
               <choice value="0"  name="TPM_CLKIN0 pin" enum="0" ref="TpmClkin0" code="TpmClkin0" isDefault="true" />
               <choice value="1"  name="TPM_CLKIN1 pin" enum="1" ref="TpmClkin1" code="TpmClkin1"  />
            </binaryOption>

            <intOption key="tpm%(p)ExternalClock"
               addToVar="Tpm%(p)ExternalItems"
               description="TMP%(p) External clock"
               toolTip="This clock is available as the TPM%(p) external clock source"
               locked="true"
               derived="true"
               units="Hz"
            />

            <clockCodeTemplate variable="sim_sopt4_tpm%(p)clksel"
               returnFormat="%s" >
            <![CDATA[
               \t/**
               \t * Select %description
               \t *
               \t * @param %paramName %tooltip
               \t */
               \tstatic void setTpm%(p)ClockIn(%paramType %paramName) {
               \t   %fieldAssignment;
               \t}
               \t
               \t/**
               \t * Get %description
               \t *
               \t * @return Clock frequency in Hz
               \t */
               \tstatic uint32_t getTpm%(p)ExternalClockFrequency() {
               \t
               \t   switch(%maskingExpression) {
               %body
               \t      default: return 0;
               \t   }
               \t}\n\n
            ]]></clockCodeTemplate>
         </if>
      </for>

      <for keys="p" values="0;1;2" >
         <choiceOption key="sim_sopt4_tpm%(p)ch0src" condition="sim_sopt4_tpm%(p)ch0src_present"
            addToVar="Tpm%(p)ExternalItems"
            enabledBy="enablePeripheralSupport"
            typeName="SimTpm%(p)Ch0Src"
            description="TPM %(p) channel 0 input capture source"
            toolTip="Source for TPM channel input capture\n
               NOTE: When the TPM is not in input capture mode, clear this field" >
            <choice value="0" name="TPM CH0 signal"            enum="IcPin"  isDefault="true" />
            <choice value="1" name="CMP0 output"               enum="Cmp0"   />
         </choiceOption>
      </for>
   </category>
   <!--
   <printVar key="Tpm0ExternalItems"/>
   <printVar key="Tpm1ExternalItems"/>
   <printVar key="Tpm2ExternalItems"/>
   -->

   <!-- _____________ SOPT5 __________________ -->

   <category name="SOPT5" description="UART signals" >

      <for keys="n" values="0;1;2" >
         <for keys   = "name:Name:NAME"
              values = "uart%(n)   : Uart%(n)   : UART%(n);
                        lpuart%(n) : Lpuart%(n) : LPUART%(n)" >
            <binaryOption key="sim_sopt5_%(name)ode" condition="sim_sopt5_%(name)ode_present"
               addToVar="%(Name)ExternalItems"
               enabledBy="enablePeripheralSupport"
               typeName="Sim%(Name)Drive"
               description="%(NAME) Open Drain"
               toolTip="Enables Open Drain output" >
               <choice value="0" name="Push-pull"  enum="PushPull"  />
               <choice value="1" name="Open-drain" enum="OpenDrain" />
            </binaryOption>

            <choiceOption key="sim_sopt5_%(name)rxsrc" condition="sim_sopt5_%(name)rxsrc_present"
               addToVar="%(Name)ExternalItems"
               enabledBy="enablePeripheralSupport"
               typeName="Sim%(Name)RxSrc"
               description="%(NAME) receive data source"
               toolTip="Source for the %(NAME) receive data" >
               <choice value="0" name="Rx pin"        enum="RxPin"  isDefault="true" />
               <choice value="1" name="CMP0 output"   enum="Cmp0"   />
            </choiceOption>

            <choiceOption key="sim_sopt5_%(name)txsrc" condition="sim_sopt5_%(name)txsrc_present"
               addToVar="%(Name)ExternalItems"
               enabledBy="enablePeripheralSupport"
               typeName="Sim%(Name)TxSrc"
               description="%(NAME) transmit data source"
               toolTip="Source for the %(NAME) transmit data" >
               <choice value="0" name="Tx pin" isDefault="true"             enum="Direct" />
               <choice value="1" name="Tx pin modulated by TPM1 channel 0"  enum="ModulatedByTpm1Ch0" />
               <choice value="2" name="Tx pin modulated by TPM2 channel 0"  enum="ModulatedByTpm2Ch0" condition="/TPM2/_present" />
            </choiceOption>
         </for>
      </for>
   </category>

   <!-- _____________ SOPT7 __________________ -->

   <category name="SOPT7" description="ADC signals" >
      <for keys="adc" values="0;1" >
         <choiceOption key="sim_sopt7_adc%(adc)trigger" condition="sim_sopt7_adc%(adc)alttrgen_present"
            addToVar="Adc%(adc)ExternalItems"
            enabledBy="enablePeripheralSupport"
            typeName="SimAdc%(adc)TriggerMode"
            valueFormat="SIM_SOPT7_ADC%(adc)ALTTRGEN(%s),SIM_SOPT7_ADC%(adc)PRETRGSEL(%s)"
            description="ADC%(adc) trigger mode"
            toolTip="Alternative conversion triggers for ADC\n
               _Tpm              - ADC is triggered by TPM. Pre-triggers are TPM channel 0 (A) and channel 1 (B)\n
               _Alt_PreTrigger_0 - ADC is triggered by SimAdc%(adc)Trigger selection and uses pretrigger 0 = A (SC1[0]/R[0])\n
               _Alt_PreTrigger_1 - ADC is triggered by SimAdc%(adc)Trigger selection and uses pretrigger 1 = B (SC1[1]/R[1])" >
            <choice value="0,0"   name="Triggered by TPM Ch0 and Ch1" enum="Tpm"  isDefault="true" />
            <choice value="1,0"   name="External trigger using SC1[0]/R[0]"   enum="Alt_PreTrigger_0" />
            <choice value="1,1"   name="External trigger using SC1[1]/R[1]"   enum="Alt_PreTrigger_1" />
         </choiceOption>

         <choiceOption key="sim_sopt7_adc%(adc)trgsel" condition="sim_sopt7_adc%(adc)pretrgsel_present"
            addToVar="Adc%(adc)ExternalItems"
            enabledBy="enablePeripheralSupport"
            typeName="SimAdc%(adc)TriggerSrc"
            description="ADC%(adc) trigger source"
            toolTip="ADC Trigger source in STOP and VLPS modes, or when ADC Alternative Trigger is active" >
            <choice value="0"  name="External trigger pin input (EXTRG_IN)"   enum="External"     isDefault="true" />
            <choice value="1"  name="CMP 0 output"                            enum="Cmp0"         condition="/CMP0/_present"   />
            <choice value="2"  name="CMP 1 output"                            enum="Cmp1"         condition="/CMP1/_present"   />
            <choice value="3"  name="CMP 2 output"                            enum="Cmp2"         condition="/CMP1/_present"   />
            <choice value="4"  name="PIT trigger 0"                           enum="PitCh0"       condition="/PIT/_present"    />
            <choice value="5"  name="PIT trigger 1"                           enum="PitCh1"       condition="/PIT/_present"    />
            <choice value="8"  name="TPM0 trigger"                            enum="Tpm0"         condition="/TPM0/_present"   />
            <choice value="9"  name="TPM1 trigger"                            enum="Tpm1"         condition="/TPM1/_present"   />
            <choice value="10" name="TPM2 trigger"                            enum="Tpm2"         condition="/TPM2/_present"   />
            <choice value="12" name="RTC alarm"                               enum="RtcAlarm"     condition="/RTC/_present"    />
            <choice value="13" name="RTC seconds"                             enum="RtcSeconds"   condition="/RTC/_present"    />
            <choice value="14" name="LPTMR trigger"                           enum="Lptmr"        condition="/LPTMR0/_present" />
         </choiceOption>
      </for>
   </category>

   <!-- _____________ FCFG1 __________________ -->

   <category name="Flash" description="Flash control" >
      <binaryOption key="sim_fcfg1_flashdoze" condition="sim_fcfg1_flashdoze_present"
         enabledBy="enablePeripheralSupport"
         typeName="SimFlashDoze"
         description="Flash Doze"
         toolTip="Allows flash memory to be disabled in Doze mode. \n
                  This bit should be clear during VLP modes. \n
                  The Flash will be automatically enabled again at the end of Doze mode" >
         <choice name="Flash remains enabled during Wait mode"           value="0" enum="EnabledInDoze"/>
         <choice name="Flash is disabled for the duration of Wait mode"  value="1" enum="DisabledInDoze"/>
      </binaryOption >

      <binaryOption key="sim_fcfg1_flashdis" condition="sim_fcfg1_flashdis_present"
         enabledBy="enablePeripheralSupport"
         typeName="SimFlashEn"
         description="Flash Disable"
         toolTip="Flash accesses are disabled (and generate a bus error).\n
                  Flash memory is placed in a low power state.\n
                  This bit should not be changed during VLP modes"
         >
         <choice name="Flash is enabled"   value="0" enum="Enabled"/>
         <choice name="Flash is disabled"  value="1" enum="Disabled"/>
      </binaryOption >
   </category>

   <!-- _____________ COPC __________________ -->

   <category name="COPC" description="Computer Operating Properly" >

      <choiceOption key="sim_copc_copt"
         target="cop_timeout_period_fixed"
         valueFormat="SIM_COPC_COPCLKS(%s),SIM_COPC_COPT(%s)"
         typeName="SimCopDuration"
         baseType="uint32_t"
         description="COP Watchdog Timeout"
         toolTip="Selects the Computer Operating Properly Timeout\n
                  This is a write-once field" >
         <choice value="0,0" enum="Disabled"          name="Disabled"                             ref="0" />
         <choice value="0,1" enum="32_ms"             name="Timeout after 2^5 LPO (1kHz) cycles"  ref="32.0/(/PMC/system_low_power_clock)"      />
         <choice value="0,2" enum="256_ms"            name="Timeout after 2^8 LPO (1kHz) cycles"  ref="256.0/(/PMC/system_low_power_clock)"     />
         <choice value="0,3" enum="1024_ms"           name="Timeout after 2^10 LPO (1kHz) cycles" ref="1024.0/(/PMC/system_low_power_clock)"    />
         <choice value="1,1" enum="8192_BusCycles"    name="Timeout after 2^13 bus clock cycles"  ref="0"    />
         <choice value="1,2" enum="65536_BusCycles"   name="Timeout after 2^16 bus clock cycles"  ref="0"   />
         <choice value="1,3" enum="262144_BusCycles"  name="Timeout after 2^18 bus clock cycles"  ref="0"  />
      </choiceOption>

      <floatOption key="cop_timeout_period_fixed"
         hiddenBy="sim_copc_copt!=(1,2,3)"
         locked="true"
         derived="true"
         description="Period of COP timer"
         toolTip="Computer Operating Properly Timeout"
         units="s"
      />

      <binaryOption key="sim_copc_copw"
         enabledBy="sim_copc_copt&gt;3"
         typeName="SimCopMode"
         description="COP Windowed Mode"
         toolTip="Windowed mode is only supported when COP is using bus clock\n
                  The COP window is opened three quarters through the timeout period\n
                  This is a write-once field" >
         <choice value="0"  enum="Normal"     name="Normal Mode" isDefault="true" />
         <choice value="1"  enum="WindowMode" name="Windowed Mode" />
      </binaryOption>

   </category>

   <for keys="n" dim="=numberOfClockSettings" >
      <aliasCategoryOption key="/MCG/ClockConfig[%(n)]" derived="true" locked="true" >

         <aliasOption key="/MCG/enableClockConfiguration[%(n)]" locked="false" />
         <aliasOption key="/SMC/smc_pmctrl_runm[%(n)]"          locked="false" />

         <category name="Peripheral Clocks" description="Peripheral Clock Selection" >
            <choiceOption key="sim_sopt2_clkoutsel[%(n)]" condition="sim_sopt2_clkoutsel_present"
               target="clockOut[%(n)]"
               typeName="SimClkoutSel"
               description="CLKOUT pin clock"
               toolTip="Clock to output on the CLKOUT pin" >
               <choice value="0"  name="Disabled0"           ref="disabled"                         enum="Unused0"     />
               <choice value="1"  name="Disabled1"           ref="disabled"                         enum="Unused1"      />
               <choice value="2"  name="Bus clock"           ref="system_bus_clock[%(n)]"           enum="BusClk"       isDefault="true" />
               <choice value="3"  name="LPO clock (1 kHz)"   ref="/PMC/system_low_power_clock"      enum="LpoClk"       />
               <choice value="4"  name="MCGIRCLK"            ref="/MCG/system_mcgirclk_clock[%(n)]" enum="McgIrClk"     condition="!/MCG/mcg_mc_lirc_div2_present" />
               <choice value="4"  name="LIRC_CLK (8/2 MHz)"  ref="/MCG/system_lirc_clock[%(n)]"     enum="McgLirClk"    condition="/MCG/mcg_mc_lirc_div2_present"    />
               <choice value="5"  name="Disabled5"           ref="disabled"                         enum="Unused5"      />
               <choice value="6"  name="OSCERCLK0"           ref="/OSC0/oscer_clock"                enum="OscerClk0"    />
               <choice value="7"  name="IRC 48 MHz clock"    ref="system_irc48m_clock[%(n)]"        enum="Irc48MClk"   condition="system_irc48m_clock[%(n)]"  />
               <choice value="7"  name="Disabled7"           ref="disabled"                         enum="Unused7"     condition="!system_irc48m_clock[%(n)]" />
            </choiceOption>

            <intOption key="clockOut[%(n)]" condition="sim_sopt2_clkoutsel_present"
               derived="true"
               locked="true"
               units="Hz"
               description="Clock out"
               toolTip="Clock available on CLKOUT pin" />

            <intOption key="system_peripheral_clock[%(n)]"
               enabledBy="(%(n)==0)||/MCG/enableClockConfiguration[%(n)]"
               ref="/MCG/system_mcgfllclk_clock[%(n)]"
               derived="true"
               locked="true"
               units="Hz"
               description="Peripheral Clock frequency"
               toolTip="Frequency of Peripheral Clock available to various peripherals"  />

            <choiceOption key="sim_sopt2_usbsrc[%(n)]" condition="sim_sopt2_usbsrc_present"
               addToVar="Usb0ExternalItems"
               target="system_usbfs_clock[%(n)]"
               typeName="SimUsbFullSpeedClockSource"
               description="USB Clock"
               toolTip="Source for the USB clock" >
               <choice value="0"  name="External bypass clock (USB_CLKIN)" enum="External"      ref="system_usb_clkin_clock"           />
               <choice value="1"  name="Peripheral Clock (MCGFLLCLK)"      enum="PeripheralClk" ref="system_peripheral_clock[%(n)]"    isDefault="true" />
            </choiceOption>

            <aliasOption key="system_usb_clkin_clock" locked="false" optional="true" />

            <intOption key="system_usbfs_clock[%(n)]"  condition="sim_sopt2_usbsrc_present"
               addToVar="Usb0ExternalItems"
               errorPropagate="error"
               derived="true"
               locked="true"
               units="Hz"
               description="USB Full Speed Clock"
               toolTip="Frequency of clock to USB full speed controller"
               value="48_MHz" min="48_MHz" max="48_MHz" disabledValue="0" />

            <for keys="p" values=";0;1" >
               <for keys   = "name       : Name       : NAME       : bNAME"
                    values = "uart%(p)   : Uart%(p)   : UART%(p)   : UART   ;
                              lpuart%(p) : Lpuart%(p) : LPUART%(p) : LPUART ;
                              flexio%(p) : Flexio%(p) : FLEXIO%(p) : FLEXIO ;
                              tpm%(p)    : Tpm%(p)    : TPM%(p)    : TPM    " >

                  <choiceOption key="sim_sopt2_%(name)src[%(n)]" condition="sim_sopt2_%(name)src_present"
                     addToVar="%(Name)ExternalItems"
                     typeName="Sim%(Name)ClockSource"
                     target="system_%(name)_clock[%(n)]"
                     description="%(NAME) Clock"
                     toolTip="Clock source for the peripheral" >
                     <choice value="0"  name="Clock Disabled"                ref="disabled"                          enum="Disabled"        code="0"                         />
                     <choice value="1"  name="Peripheral Clock (MCGFLLCLK)"  ref="system_peripheral_clock[%(n)]"     enum="PeripheralClk"   code="getPeripheralClock()"       isDefault="true"/>
                     <choice value="2"  name="OSCERCLK clock"                ref="/OSC0/oscer_clock"                 enum="OscerClk"        code="Osc0Info::getOscerClock()" />
                     <choice value="3"  name="MCGIRCLK clock"                ref="/MCG/system_mcgirclk_clock[%(n)]"  enum="McgIrClk"        code="McgInfo::getMcgIrClock()"  />
                  </choiceOption>

                  <intOption key="system_%(name)_clock[%(n)]" condition="sim_sopt2_%(name)src_present"
                     addToVar="%(Name)ExternalItems"
                     max="%(bNAME)_max[/SMC/smc_pmctrl_runm[%(n)]]"
                     derived="true"
                     locked="true"
                     units="Hz"
                     description="%(NAME) Clock frequency"
                     toolTip="Frequency of clock to %(NAME)"
                     value="0" />
               </for>
            </for>
         </category>

         <choiceOption key="sim_copc_copt_shadow[%(n)]"
            hidden="true"
            derived="true"
            ref="sim_copc_copt"
            target="cop_timeout_period[%(n)]"
            description="COP Watchdog Timeout"
            toolTip="Selects the Computer Operating Properly Timeout\n
                     This is a write-once field" >
            <choice value="0,0" name="Disabled"                             ref="0" />
            <choice value="0,1" name="Timeout after 2^5 LPO (1kHz) cycles"  ref="32.0/(/PMC/system_low_power_clock)"      />
            <choice value="0,2" name="Timeout after 2^8 LPO (1kHz) cycles"  ref="256.0/(/PMC/system_low_power_clock)"     />
            <choice value="0,3" name="Timeout after 2^10 LPO (1kHz) cycles" ref="1024.0/(/PMC/system_low_power_clock)"    />
            <choice value="1,1" name="Timeout after 2^13 bus clock cycles"  ref="8192.0/(/SIM/system_bus_clock[%(n)])"    />
            <choice value="1,2" name="Timeout after 2^16 bus clock cycles"  ref="65536.0/(/SIM/system_bus_clock[%(n)])"   />
            <choice value="1,3" name="Timeout after 2^18 bus clock cycles"  ref="262144.0/(/SIM/system_bus_clock[%(n)])"  />
         </choiceOption>

         <floatOption key="cop_timeout_period[%(n)]"
            locked="true"
            derived="true"
            description="Period of COP timer"
            toolTip="Computer Operating Properly Timeout"
            units="s"
         />

         <aliasOption key="/MCG/system_mcgoutclk_clock[%(n)]" />

         <intOption key="system_core_clock[%(n)]" condition="sim_clkdiv1_outdiv1_present"
            ref="(/MCG/system_mcgoutclk_clock[%(n)])/((sim_clkdiv1_outdiv1[%(n)])+1)"
            enabledBy="(%(n)==0)||/MCG/enableClockConfiguration[%(n)]"
            derived="true"
            isNamedClock="true"
            units="Hz"
            description="System Core Clock"
            toolTip="Clocks the ARM Cortex-M4 core and bus masters"
            value="48_MHz"
            disabledValue="0" />

         <intOption key="system_bus_clock[%(n)]" condition="sim_clkdiv1_outdiv4_present"
            enabledBy="(%(n)==0)||/MCG/enableClockConfiguration[%(n)]"
            ref="(system_core_clock[%(n)])/(sim_clkdiv1_outdiv4[%(n)]+1)"
            derived="true"
            isNamedClock="true"
            units="Hz"
            description="System Bus Clock"
            toolTip="Clocks the bus slaves and peripherals\n
                     Must be &lt;= Core Clock frequency"
            value="24_MHz"
            disabledValue="0" />

   <!-- _____________ CLKDIV1 __________________ -->

         <category name="CLKDIV1" description="System Clock Dividers" >
            <choiceOption key="sim_clkdiv1_outdiv1[%(n)]"  condition="sim_clkdiv1_outdiv1_present"
               enabledBy="(%(n)==0)||/MCG/enableClockConfiguration[%(n)]"
               typeName="SimCoreClkDivider"
               locked="true"
               description="Core &amp; System Clock Divider (OUTDIV1) - Divide by [1-16]"
               toolTip="Clocks the ARM Cortex-M4 core and bus masters\n
                        Divides MCGOUTCLK Clock to generate system_core_clock." >
               <choice value="0"   name="/1"  enum="Direct" />
               <choice value="1"   name="/2"  enum="DivBy2" isDefault="true" />
               <choice value="2"   name="/3"  enum="DivBy3"/>
               <choice value="3"   name="/4"  enum="DivBy4"/>
               <choice value="4"   name="/5"  enum="DivBy5"/>
               <choice value="5"   name="/6"  enum="DivBy6"/>
               <choice value="6"   name="/7"  enum="DivBy7"/>
               <choice value="7"   name="/8"  enum="DivBy8"/>
               <choice value="8"   name="/9"  enum="DivBy9"/>
               <choice value="9"   name="/10" enum="DivBy10"/>
               <choice value="10"  name="/11" enum="DivBy11"/>
               <choice value="11"  name="/12" enum="DivBy12"/>
               <choice value="12"  name="/13" enum="DivBy13"/>
               <choice value="13"  name="/14" enum="DivBy14"/>
               <choice value="14"  name="/15" enum="DivBy15"/>
               <choice value="15"  name="/16" enum="DivBy16"/>
            </choiceOption>

            <choiceOption key="sim_clkdiv1_outdiv4[%(n)]"  condition="sim_clkdiv1_outdiv4_present"
               enabledBy="(%(n)==0)||/MCG/enableClockConfiguration[%(n)]"
               locked="true"
               derivedFrom="sim_clkdiv1_outdiv1[%(n)]"
               typeName="SimFlashClkDivider"
               description="Flash Clock Divider (OUTDIV4) - Divide by [1-16]"
               toolTip="Clocks the flash memory\n
                        Divides Core Clock to generate system_flash_clock." />
         </category>
      </aliasCategoryOption>
   </for>

   <xi:include href="sim_commonTemplates.xml" />

   <template codeGenCondition="/MCG/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Update system clock values
      \t *
      \t * @param systemClock Frequency of clock provided to system clock dividers
      \t */
      \tstatic void updateSystemClocks(unsigned systemClock) {
      \t
      \t   SystemCoreClock    = systemClock/(((SIM->CLKDIV1&SIM_CLKDIV1_OUTDIV1_MASK)>>SIM_CLKDIV1_OUTDIV1_SHIFT)+1);
      \t   SystemBusClock     = SystemCoreClock/(((SIM->CLKDIV1&SIM_CLKDIV1_OUTDIV4_MASK)>>SIM_CLKDIV1_OUTDIV4_SHIFT)+1);
      \t}\n\n
   ]]></template>

   <variableTemplate variables="sim_clkdiv1_outdiv1[0],sim_clkdiv1_outdiv2[0],sim_clkdiv1_outdiv3[0],sim_clkdiv1_outdiv4[0]" ><![CDATA[
      \t/** Reset clock divider value if clock not fully configured */
      \tstatic constexpr uint32_t sim_clkdiv1 = %initExpression;
      \t\n
   ]]></variableTemplate>

   <!-- _____________ Common __________________ -->

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.SimValidateMKL" dim="=numberOfClockSettings" >
      <param type="long" value="48MHz"  />     <!-- RUN Core          -->
      <param type="long" value="24MHz"  />     <!-- RUN Bus           -->

      <param type="long" value="4MHz"   />     <!-- VLPR Core         -->
      <param type="long" value="1MHz"   />     <!-- VLPR Bus          -->
   </validate>

   <!-- _____________ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <xi:include href="simFiles-MKL.xml"/>

</peripheralPage>
