<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- ftm_def.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <xi:include href="_default_instance.xml"/>

   <xi:include href="_irqOption.xml"/>
   
   <binaryOption key="check_minimums" 
      description="Check minimum interval and minimum resolution"
      toolTip="Enables boundary checks of minimum interval and minimum resolution when setting values" >
      <choice value="0" name="No checks done" />
      <choice value="1" name="Do checks"  isDefault="true" />
   </binaryOption>

   <intOption key="minimumInterval" 
      description="Minimum usable interval in ticks"
      toolTip="This value is used as a minimum acceptable value for the timer interval in ticks\n
               when using convertMicrosecondsToTicks() or convertSecondsToTicks()"
      value="20" min="0" max="65535"/>
      
   <intOption key="minimumResolution" 
      description="Minimum resolution for PWM interval"
      toolTip="This value is used as a minimum value for the timer period in ticks \n
         so that a reasonable resolution is available for PWM duty-cycle"
      value="100" min="0" max="65535" />
      
   <intOption key="ftmExternalClock" 
      description="FTM External clock"
      toolTip="Clock frequency of external clock supplied to FTM_CLKIN pin"
      value="0" min="0" units="Hz"/>

   <choiceOption key="ftm_sc_clks" 
      description="Clock Source"
      enumStem="FtmClockSource"
      target="inputClockFrequency"
      toolTip="Selects the clock source for the module">
      <choice value="0" name="Disabled"              ref="disabled"                     code="0"                enum="Disabled"            />
      <choice value="1" name="System clock"          ref="/SIM/system_bus_clock[]"      code="SystemBusClock"   enum="SystemClock"         isDefault="true" />
      <choice value="2" name="Fixed frequency clock" ref="/MCG/system_mcgffclk_clock[]" code="SystemMcgffClock" enum="FixedFrequencyClock" />
      <choice value="3" name="External clock"        ref="ftmExternalClock"             code="ftmExternalClock" enum="ExternalClock"       />
   </choiceOption>
   
   <intOption key="inputClockFrequency" 
      constant="true"
      description="Frequency of input clock to timer"
      derived="true"
      units="Hz"/>
      
   <choiceOption key="ftm_sc_ps" 
   description="Clock prescaler"
      enumStem="FtmPrescale"
      target="clockFrequency"
      toolTip="Selects the prescaler for the module">
      <choice value="0" name="Divide by 1"   ref="inputClockFrequency"          enum="DivBy1"  isDefault="true" />
      <choice value="1" name="Divide by 2"   ref="inputClockFrequency;((inputClockFrequency)/2.)"   enum="DivBy2" />
      <choice value="2" name="Divide by 4"   ref="inputClockFrequency;((inputClockFrequency)/4.)"   enum="DivBy4" />
      <choice value="3" name="Divide by 8"   ref="inputClockFrequency;((inputClockFrequency)/8.)"   enum="DivBy8" />
      <choice value="4" name="Divide by 16"  ref="inputClockFrequency;((inputClockFrequency)/16.)"  enum="DivBy16" />
      <choice value="5" name="Divide by 32"  ref="inputClockFrequency;((inputClockFrequency)/32.)"  enum="DivBy32" />
      <choice value="6" name="Divide by 64"  ref="inputClockFrequency;((inputClockFrequency)/64.)"  enum="DivBy64" />
      <choice value="7" name="Divide by 128" ref="inputClockFrequency;((inputClockFrequency)/128.)" enum="DivBy128" />
   </choiceOption>
      
   <intOption key="clockFrequency" 
      constant="true"
      description="Frequency of timer clock"
      toolTip="Determined from timer clock source and prescaler"
      derived="true"
      units="Hz"/>
   
   <floatOption key="clockPeriod" 
      ref="clockFrequency;(1.0/clockFrequency)"
      constant="true"
      description="Period of timer clock"
      toolTip="Determined from timer clock source and prescaler"
      derived="true"
      units="s"/>
      
   <choiceOption key="ftm_sc_mode"
      valueFormat="FTM_SC_TOF(%s),FTM_SC_CPWMS(%s)"
      enumStem="FtmMode"
      description="Alignment and whether interval or free-running mode"
      toolTip="Left-aligned   (cntin...mod) or\n
               Centre-aligned (cntin...mod...cntin) or\n
               Free-running   (0...maximum_value) mode   ">
      <choice value="0,0" name="Left-aligned (count up)"         enum="Left"    />
      <choice value="0,1" name="Centre-aligned (count up-down)"  enum="Centre"  />
      <choice value="1,0" name="Free-running (count up)"         enum="FreeRunning"  isDefault="true" />
   </choiceOption>
   
   <intOption key="ftm_cntin" description="Start value for counter"
      enabledBy="ftm_sc_mode!=2"
      toolTip="The timer counts from this value to ftm_mod"
      typeName="Ticks"
      valueFormat="%s_ticks"
      value="0" min="0" max="65535" />
           
   <intOption key="ftm_mod" description="End value for counter"
      enabledBy="ftm_sc_mode!=2"
      toolTip="The timer counts from ftm_cntin to this value"
      typeName="Ticks"
      valueFormat="%s_ticks"
      value="0" min="0" max="65535" />
           
   <floatOption key="ftm_modPeriod"
      ref="clockPeriod*((ftm_sc_mode==2)?(65536):((ftm_sc_mode==1)?(2*(ftm_mod-ftm_cntin)):(ftm_mod-ftm_cntin+1)))" 
      typeName="Seconds"     
      valueFormat="%s_s"
      description="Period or minimum interval of timer"
      toolTip="In left-aligned or centre-aligned this is the period of the timer\n
               In free-running mode it is the minimum interval"
      origin="Clock period * ftm_mod"
      derived="true"
      min="0" units="s"/>
      
   <binaryOption key="ftm_sc_toie"
      enumStem="FtmOverflowInterrupt"
      description="Overflow Interrupt"
      toolTip="Enables FTM overflow interrupts">
      <choice value="0" name="Interrupt Disabled" enum="Disabled" />
      <choice value="1" name="Interrupt Enabled"  enum="Enabled"  />
   </binaryOption>
   
   <initialValueTemplate variables="minimumResolution"     
   ><![CDATA[
      \t/// %description
      \tstatic constexpr uint32_t minimumResolution  = $(?check_minimums:$(minimumResolution):0);\n\n
   ]]></initialValueTemplate>
   
   <initialValueTemplate variables="minimumInterval"     
   ><![CDATA[
      \t/// %description
      \tstatic constexpr uint32_t minimumInterval  = $(?check_minimums:$(minimumInterval):0);\n\n
   ]]></initialValueTemplate>
   
   <initialValueTemplate variables="ftmExternalClock"     
   ><![CDATA[
      \t/// %description
      \tstatic constexpr uint32_t ftmExternalClock  = $(ftmExternalClock);\n\n
   ]]></initialValueTemplate>

   <category name="External Triggers" description="External Triggers">
      <bitmaskOption key="ftm_exttrig_trig"   description="External Trigger Enable" 
         toolTip="Enables the generation of the trigger when the FTM counter \n
          is equal to the channel CnV register"
         value="0"
         bitmask="0x3F" 
         bitList="CH2TRIG,CH3TRIG,CH4TRIG,CH5TRIG,CH0TRIG,CH1TRIG," 
         />
      <binaryOption key="ftm_exttrig_inittrigen" description="Initialisation Trigger Enable"
         toolTip="Enables the generation of the trigger when the FTM counter \n
          is equal to the CNTIN register">
         <choice value="0" name="Disabled" />
         <choice value="1" name="Enabled" />
      </binaryOption>
   </category>   
   <template><![CDATA[
      \t/// Default value for EXTTRIG) register
      \tstatic constexpr uint32_t exttrig  = 
      \t    $(ftm_exttrig_trig)|                              // External Trigger Enable
      \t    FTM_EXTTRIG_INITTRIGEN($(ftm_exttrig_inittrigen));    // Initialisation Trigger Enable \n\n
   ]]></template>

   <category name="Advanced" description="Advanced options">
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)clksel"  optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt0"    optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt1"    optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt2"    optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt3"    optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)trg0src" optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)trg1src" optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)ch0src"  optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)ch1src"  optional="true" constant="false" />
   
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och7src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och6src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och5src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och4src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och3src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och2src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och1src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och0src" optional="true" constant="false"/>
   </category>

<!--  ========== Methods =============================== -->
   <for  keys  =" k                    : static    : const" 
         values=" non_static_functions : ''        : ' const';
                  static_functions     : 'static ' : ''     
   ">
      <setTemplate key="/FTM/%(k)" namespace="all"
         discardRepeats="true"
         variables="ftm_sc_clks,ftm_sc_ps"
         nonDefaultParams="2" 
      ><![CDATA[
         \t/**
         \t * Stop timer counter.
         \t * This simply disables the counter clock source. \n
         \t * To restart use setClockSource() or configure();
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note A illegal access trap will occur if the timer has not been enabled
         \t */
         \t%(static)void stopCounter()%(const) {
         \t  %register = (%register&~%mask1);
         \t}
         \t
         \t/**
         \t * Set %description0 and %description1
         \t *
         %comments
         \t */
         \t%(static)void selectClock(
         %params)%(const) {
         \t
         \t   // Calculate new SC value
         \t   uint32_t %registerName = (%register&~%mask)|(%paramExpression);
         
         \t   // Disable timer to change clock (unable to switch directly between clock sources)
         \t   %register=0;
         
         \t   // Make sure write has completed (disabled)
         \t   (void)(%register);
         
         \t   // Write new value
         \t   %register = %registerName;
         \t}\n\n
      ]]></setTemplate>
            
      <for keys="  f           :  n" 
         values=" ftm_sc_clks  : setClockSource;
                  ftm_sc_ps    : setPrescaler;
                  ftm_sc_mode  : setMode">
         <setTemplate key="/FTM/%(k)" namespace="all"
            discardRepeats="true"
            variables="%(f)"
            nonDefaultParams="2" 
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            %comments
            \t *
            \t * @note This function will affect all channels of the timer.
            \t * @note The timer will be disabled while making changes.
            \t */
            \t%(static)void %(n)(%params)%(const) {
            \t
            \t   // Calculate new SC value
            \t   uint32_t %registerName = (%register&~%mask)|(%paramExpression);
            
            \t   // Disable timer to change clock (unable to switch directly between clock sources)
            \t   %register=0;
            
            \t   // Make sure write has completed (disabled)
            \t   (void)(%register);
            
            \t   // Write new value
            \t   %register = %registerName;
            \t}\n\n
         ]]></setTemplate>
      </for>
            
      <setTemplate key="/FTM/%(k)" namespace="all"
         discardRepeats="true"
         variables="ftm_mod,ftm_sc_ps"
      ><![CDATA[
         \t/**
         \t * Set maximum value of timer counter.
         \t *
         \t * @param[in] endValue Modulo value in ticks (<65535), 0 = 65536.
         \t * @param[in] suspend  Whether to suspend timer during change.
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note The timer may be disabled while making changes.
         \t * @note This value is write-buffered and updated by MOD synchronisation
         \t *       unless suspend is true.
         \t */
         \t%(static)void setCounterMaximumValue(Ticks endValue, bool suspend=false)%(const) {
         \t   uint32_t %registerName1;
         \t   if (suspend) {
         \t      // Disable timer so register changes are immediate
         \t      sc = %register1;
         \t      %register1 = 0;
         \t      (void)(%register1);
         \t   }
         \t   %register0 = (unsigned)endValue;
         \t   if (suspend) {
         \t      %register1 = sc;
         \t   }
         \t}
         \t/**
         \t * Get maximum value of timer counter.
         \t *
         \t * @return Counter modulo value in ticks (<65535), 0 = 65536.
         \t */
         \t%(static)Ticks getCounterMaximumValue()%(const) {
         \t   return Ticks((unsigned)(ftm->MOD));
         \t}\n\n
      ]]></setTemplate>
   
      <setTemplate key="/FTM/%(k)" namespace="all"
         discardRepeats="true"
         variables="ftm_cntin"
      ><![CDATA[
         \t/**
         \t * Set starting value for counter (CNTIN)
         \t *
         \t * This value is write-buffered and updated by CNTIN synchronisation unless suspend is true.
         \t *
         \t * @param[in] startValue  Starting value in ticks (<65535)
         \t * @param[in] suspend     Whether to suspend FTM during change.
         \t *
         \t * @note This function will affect all channels of the timer.
         \t */
         \t%(static)void setCounterStartValue(Ticks startValue, bool suspend=false)%(const) {
         \t   uint32_t sc;
         \t   if (suspend) {
         \t      sc = ftm->SC;
         \t      ftm->SC = 0;
         \t   }
         \t   ftm->CNTIN = (unsigned)startValue;
         \t   if (suspend) {
         \t      ftm->SC = sc;
         \t   }
         \t}
         \t
         \t/**
         \t * Get start value of timer counter.
         \t *
         \t * @return Counter start value in ticks
         \t */
         \t%(static)Ticks getCounterStartValue()%(const) {
         \t   return Ticks((unsigned)(ftm->CNTIN));
         \t}\n\n
      ]]></setTemplate>
   </for>

   <clockCodeTemplate variable="ftm_sc_clks"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Get %description
      \t *
      %paramDescription
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getInputClockFrequency(%params) {
      \t   
      \t   switch(%paramExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>
   
<!--  ========== FTM Init class =============================== -->

   <template key="init_description" namespace="all" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of $(_class)
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * @code
      \t * static const Ftm$(_instance)::Init ftmInit {
      \t *
      \t *    // Omitted parameters are take to be zero unless an base value is given
      \t *    FtmMode_Freerunning,           // Alignment and whether interval or free-running mode
      \t *    FtmOverflowInterrupt_Disabled, // Overflow Interrupt
      \t *    NvicPriority_Normal,           // IRQ level for this peripheral
      \t *    FtmClockSource_SystemClock,    // Clock Source
      \t *
      \t *    // Either 
      \t *    FtmPrescale_DivBy16,           // Clock prescaler
      \t *    10_ticks, 3000_ticks,          // Counter start (cntin) and end (mod) values
      \t *    // OR
      \t *    100_ms,                        // Timer period or minimum interval in seconds
      \t *
      \t *    // Optional base value to start with (must be last parameter)
      \t *    $(_class)::DefaultValue
      \t * };
      \t *
      \t * // Initialise FTM from values specified above
      \t * Ftm$(_instance)::configure(ftmInit)
      \t * @endcode
      \t */
   ]]></template>

   <template namespace="usbdm" ><![CDATA[
      class $(_class)BasicInfo {
      \t
      public:\n\n
   ]]></template>

   <setTemplate namespace="usbdm"
       variables="irqHandlingMethod">
   <![CDATA[
      \t/**
      \t * Type definition for $(_class) %description call back.
      \t */
      \ttypedef void (*%enumClass)();\n\n
   ]]></setTemplate>

   <template namespace="usbdm"><![CDATA[
$(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**                               
      \t    * Copy Constructor                  
      \t    */                             
      \t   constexpr Init(const Init &other) = default;
      \t   
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]></template>
   
<!--  Member variables -->
  
   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod" 
      variables="irqHandlingMethod" 
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></setTemplate>
   
   <initialValueTemplate namespace="usbdm"  
      variables="ftm_sc_toie,ftm_sc_cpwms,ftm_sc_clks,ftm_sc_ps,ftm_sc_mode"
   ><![CDATA[
      \t   /// Status And Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>
   
   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod" 
      variables="/PCR/nvic_irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName = %enumClass_Normal;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"  
      variables="ftm_cntin"
   ><![CDATA[
      \t   /// %description
      \t   uint16_t %registerName = 0_ticks;\n\n
   ]]></initialValueTemplate>
   
   <initialValueTemplate namespace="usbdm"  
      variables="ftm_mod"
   ><![CDATA[
      \t   /// %description
      \t   uint16_t %registerName = 0_ticks;\n\n
   ]]></initialValueTemplate>
   
   <initialValueTemplate namespace="usbdm"  
      variables= "ftm_modPeriod"
    ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName = 0_s;\n\n
   ]]></initialValueTemplate >

<!--  Configure method -->
  
   <setTemplate variables="ftm_sc_clks" discardRepeats="true" key="/FTM/InitMethod" namespace="all" ><![CDATA[
      \t/**
      \t * Configure FTM from values specified in init
      \t
      \t * @param init Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const typename Info::Init &init) {
      \t
      \t   // Enable peripheral clock and map pins
      \t   enable();
      \t
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      // Only set call-back if feature enabled and non-null
      \t      if (init.callbackFunction != nullptr) {
      \t         setCallback(init.callbackFunction);
      \t      }
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t   uint8_t  sc    = init.sc;
      \t   uint16_t cntin = init.cntin;
      \t   uint16_t mod   = init.mod;
      \t
      \t   if (init.modperiod != 0) {
      \t
      \t      // Calculate sc.ps, mod (assumes cntin=0)
      \t      ErrorCode rc = calculateTimingParameters(init.modperiod, sc, mod);
      \t      if (rc != E_NO_ERROR) {
      \t         return rc;
      \t      }
      \t      // Configure for modulo operation
      \t      cntin = 0;
      \t   }
      \t   if (init.sc&FtmMode_FreeRunning) {
      \t      // Make free-running
      \t      cntin = 0;
      \t      mod   = 0;
      \t   }
      \t   // Disable timer to change clock (unable to switch directly between clock sources)
      \t   ftm->SC  = 0;
      \t         
      \t   // Start value for counter
      \t   ftm->CNTIN = cntin;
      \t   
      \t   // End value for counter
      \t   ftm->MOD = mod;
      \t   
      \t   // Restart counter
      \t   ftm->CNT = 0;
      \t
      \t   // Configure timer
      \t   ftm->SC  = sc;
      \t
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></setTemplate>

<!--  Constructors -->
  
   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod" 
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%enumParam0 = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>
   
   <setTemplate namespace="usbdm"
      variables="/PCR/nvic_irqLevel" 
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      #if $(irqHandlingMethod)
      \t      %registerName = %paramExpression;
      #else
      \t      (void)%paramExpression;
      #endif
      \t   }\n\n
   ]]></setTemplate>
   
   <for keys="r" values="ftm_sc_toie;ftm_sc_cpwms;ftm_sc_mode;ftm_sc_clks">
      <setTemplate  namespace="usbdm" 
         variables="%(r)"
         linePadding="xxx" 
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %comments
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t   
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]></setTemplate>
   </for>
   
   <setTemplate namespace="usbdm" 
      variables="ftm_sc_ps, ftm_cntin, ftm_mod"
      linePadding="xxx" 
      nonDefaultParams="2"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description0, %description1 and %description2
         \t    *
         \t    * @param %enumParam0 %tooltip0
         \t    * @param %enumParam1_cntin %tooltip1
         \t    * @param %enumParam2_mod   %tooltip2
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(
         \t      %enumClass0 %enumParam0,
         \t      %enumClass1 %enumParam1_cntin,
         \t      %enumClass2 %enumParam2_mod, Types... rest) : Init(rest...) {
         \t   
         \t      %registerName0 = (%registerName0&%mask0) | %enumParam0;
         \t      %registerName1 = %enumParam1_cntin;
         \t      %registerName2 = %enumParam2_mod;
         \t   }
         \t\n
   ]]></setTemplate>
   
   <setTemplate namespace="usbdm" 
      nonDefaultParams="2"
      variables="ftm_modPeriod"
      linePadding="xxx" 
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %comments
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(
         %params, Types... rest) : Init(rest...) {
         \t   
         \t      cntin = 0;
         \t      mod   = 0;
         \t      %registerName = %paramExpression;
         \t   }
         \t\n
   ]]></setTemplate>
   
   <template namespace="usbdm" ><![CDATA[
      \t};\n\n
   ]]></template>

   <template namespace="usbdm" ><![CDATA[
      };\n\n
   ]]></template>

<!--  Default Initialisation value -->
  
   <initialValueTemplate
      separator=","
      terminator=","     
      variables="
         ftm_sc_mode,
         ftm_sc_toie,
         irqLevel,
         ftm_sc_clks,     
         ftm_sc_ps,
         ftm_cntin,     
         ftm_mod"     
   ><![CDATA[
      $(init_description)
      \ttypedef $(_class)BasicInfo::Init Init;
      \t
      \t/**
      \t * $(_class) interrupt call back
      \t */
      \ttypedef $(_class)BasicInfo::CallbackFunction CallbackFunction;
      \t
      \t/**
      \t * Default initialisation value for Ftm$(_instance)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

<!--  ========== Misc =============================== -->
   
   <xi:include href="_clockOption.xml"/>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.FtmValidate">
   </validate>

   <projectActionList id = "ftm_files" >
      <copy source="Project_Headers/ftm.h"                target="Project_Headers/ftm.h"                overwrite="true" derived="true" />
      <copy source="Snippets/ftm-pwm-example.cpp"         target="Snippets/ftm-pwm-example.cpp"         overwrite="true" derived="true" />
      <copy source="Snippets/ftm-ic-example.cpp"          target="Snippets/ftm-ic-example.cpp"          overwrite="true" derived="true" />
      <copy source="Snippets/ftm-oc-example.cpp"          target="Snippets/ftm-oc-example.cpp"          overwrite="true" derived="true" />
      <copy source="Snippets/ftm-servo-example.cpp"       target="Snippets/ftm-servo-example.cpp"       overwrite="true" derived="true" />
      <copy source="Snippets/ftm-quadrature-example.cpp"  target="Snippets/ftm-quadrature-example.cpp"  overwrite="true" derived="true" />
      <copy source="Snippets/neopixel-example.cpp"        target="Snippets/neopixel-example.cpp"        overwrite="true" derived="true" />
   </projectActionList>
         
   <template key="/FTM/declarations" namespace="all" 
   ><![CDATA[
   /**
    * Class representing $(_name)
    */
   class $(_class) : public $(_base_class)Base_T<$(_class)Info> {};\n\n
   ]]></template>

   <template key="/FTM/quadDeclarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_class) as Quadrature decoder
   \t */
   \ttypedef $(_base_class)QuadDecoder_T<$(_class)Info> $(_base_class)QuadDecoder$(_instance);\n
   ]]></template>

   <signals/>

</fragment>
