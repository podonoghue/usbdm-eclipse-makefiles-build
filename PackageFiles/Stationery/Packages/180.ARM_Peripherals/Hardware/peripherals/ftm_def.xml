<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- ftm_def.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <xi:include href="_default_instance.xml"/>

   <binaryOption name="check_minimums" description="Check minimum interval and minimum resolution"
         toolTip="Enables boundary checks of minimum interval and minimum resolution when setting FTM values" >
      <choice value="0" name="No checks done" />
      <choice value="1" name="Do checks"  isDefault="true" />
   </binaryOption>

   <intOption name="minimumInterval" description="Minimum usable interval in ticks"
      toolTip="This value is used as a minimum acceptable value for the timer interval in ticks\n
               when using convertMicrosecondsToTicks() or convertSecondsToTicks()"
      value="20" min="0" max="65535"/>
      
   <intOption name="minimumResolution" description="Minimum resolution for PWM interval"
      toolTip="This value is used as a minimum value for the timer period in ticks \n
         so that a reasonable resolution is available for PWM duty-cycle"
      value="100" min="0" max="65535" />
      
   <intOption name="ftmExternalClock" description="FTM External clock"
      toolTip="Clock frequency of external clock supplied to FTM_CLKIN pin"
      value="0" min="0" units="Hz"/>
   <choiceOption name="ftm_sc_clks" description="Clock Mode Selection"
      toolTip="Selects the clock source for the module">
      <choice value="0" name="Disabled" />
      <choice value="1" name="System clock" isDefault="true" />
      <choice value="2" name="Fixed frequency clock" />
      <choice value="3" name="External clock" />
   </choiceOption>
   <choiceOption name="ftm_sc_ps" description="Clock prescaler"
      toolTip="Selects the prescaler for the module">
      <choice value="0" name="Divide by 1" isDefault="true" />
      <choice value="1" name="Divide by 2" />
      <choice value="2" name="Divide by 4" />
      <choice value="3" name="Divide by 8" />
      <choice value="4" name="Divide by 16" />
      <choice value="5" name="Divide by 32" />
      <choice value="6" name="Divide by 64" />
      <choice value="7" name="Divide by 128" />
   </choiceOption>
      
   <floatOption name="clockFrequency" 
      constant="true"
      description="Frequency of timer clock"
      toolTip="Determined from timer clock source and prescaler"
      derived="true"
      units="Hz"/>
   <floatOption name="clockPeriod" 
      constant="true"
      description="Period of timer clock"
      toolTip="Determined from timer clock source and prescaler"
      derived="true"
      units="s"/>
   <intOption name="ftm_mod" description="Modulo of timer"
      toolTip="Default period of the timer"
      value="10000" min="0" max="65535" />     
   <floatOption name="ftm_mod_period" 
      description="Period of timer"
      toolTip="Period of the timer"
      origin="Clock period * ftm_mod"
      derived="true"
      min="0" units="s"/>
   <binaryOption name="ftm_sc_cpwms" 
      description="Center-Aligned PWM Select"
      toolTip="Selects CPWM mode\n
         This mode configures the FTM to operate in Up-Down Counting mode">
      <choice value="0" name="Left-aligned (count up)" />
      <choice value="1" name="Centre-aligned (count up-down)" />
   </binaryOption>
   <binaryOption name="ftm_sc_toie" description="Timer Overflow Interrupt Enable"
      toolTip="Enables FTM overflow interrupts">
      <choice value="0" name="Disabled" />
      <choice value="1" name="Enabled" />
   </binaryOption>
   <template><![CDATA[
      \t//! Timer external input frequency
      \tstatic constexpr uint32_t ftmExternalClock =  $(ftmExternalClock);
      
      \t//! Default Timer Modulo
      \tstatic constexpr uint32_t modulo = FTM_MOD_MOD($(ftm_mod));

      \t//! Default value for SC register
      \tstatic constexpr uint32_t sc  = 
      \t    FTM_SC_CPWMS($(ftm_sc_cpwms))| // Centre-Aligned PWM Select
      \t    FTM_SC_CLKS($(ftm_sc_clks))|  // Clock Mode Selection
      \t    FTM_SC_TOIE($(ftm_sc_toie))|  // Timer Overflow Interrupt Enable
      \t    FTM_SC_PS($(ftm_sc_ps));    // Prescale Factor Selection \n\n
   ]]></template>

   <category name="External Triggers" description="External Triggers">
      <bitmaskOption name="ftm_exttrig_trig"   description="External Trigger Enable" 
         toolTip="Enables the generation of the trigger when the FTM counter \n
          is equal to the channel CnV register"
         value="0"
         bitmask="0x3F" 
         bitList="CH2TRIG,CH3TRIG,CH4TRIG,CH5TRIG,CH0TRIG,CH1TRIG," 
         />
      <binaryOption name="ftm_exttrig_inittrigen" description="Initialisation Trigger Enable"
         toolTip="Enables the generation of the trigger when the FTM counter \n
          is equal to the CNTIN register">
         <choice value="0" name="Disabled" />
         <choice value="1" name="Enabled" />
      </binaryOption>
   </category>   
   <template><![CDATA[
      \t//! Default value for EXTTRIG) register
      \tstatic constexpr uint32_t exttrig  = 
      \t    $(ftm_exttrig_trig)|                              // External Trigger Enable
      \t    FTM_EXTTRIG_INITTRIGEN($(ftm_exttrig_inittrigen));    // Initialisation Trigger Enable \n\n
   ]]></template>

   <category name="Advanced" description="Advanced options">
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)clksel"  optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt0"    optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt1"    optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt2"    optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)flt3"    optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)trg0src" optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)trg1src" optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)ch0src"  optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt4_ftm$(_instance)ch1src"  optional="true" constant="false" />
   
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och7src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och6src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och5src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och4src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och3src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och2src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och1src" optional="true" constant="false"/>
      <aliasOption key="/SIM/sim_sopt8_ftm$(_instance)och0src" optional="true" constant="false"/>
   </category>

   <xi:include href="_irqOption.xml"/>
   
   <xi:include href="_clockOption.xml"/>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.FtmValidate">
   </validate>

   <projectActionList id = "ftm_files" >
      <copy source="Project_Headers/ftm.h"                target="Project_Headers/ftm.h"                overwrite="true" derived="true" />
      <copy source="Snippets/ftm-pwm-example.cpp"         target="Snippets/ftm-pwm-example.cpp"         overwrite="true" derived="true" />
      <copy source="Snippets/ftm-ic-example.cpp"          target="Snippets/ftm-ic-example.cpp"          overwrite="true" derived="true" />
      <copy source="Snippets/ftm-oc-example.cpp"          target="Snippets/ftm-oc-example.cpp"          overwrite="true" derived="true" />
      <copy source="Snippets/ftm-servo-example.cpp"       target="Snippets/ftm-servo-example.cpp"       overwrite="true" derived="true" />
      <copy source="Snippets/ftm-quadrature-example.cpp"  target="Snippets/ftm-quadrature-example.cpp"  overwrite="true" derived="true" />
      <copy source="Snippets/neopixel-example.cpp"        target="Snippets/neopixel-example.cpp"        overwrite="true" derived="true" />
   </projectActionList>
         
   <template><![CDATA[
      \t/** Minimum resolution for PWM interval */
      \tstatic constexpr uint32_t minimumResolution=$(?check_minimums:$(minimumResolution):0);
      
      \t/** Minimum usable interval in ticks */      
      \tstatic constexpr uint32_t minimumInterval=$(?check_minimums:$(minimumInterval):0);
      
      \t/**
      \t * Get input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getInputClockFrequency() {
      \t
      \t   switch(ftm->SC&FTM_SC_CLKS_MASK) {
      \t   default:
      \t   case FTM_SC_CLKS(0): return 0;
      \t   case FTM_SC_CLKS(1): return SystemBusClock;
      \t   case FTM_SC_CLKS(2): return SystemMcgffClock;
      \t   case FTM_SC_CLKS(3): return ftmExternalClock;
      \t   }
      \t}\n\n
   ]]></template>
   
   <template name="/FTM/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_name)
   \t */
   \ttypedef $(_base_class)Base_T<$(_class)Info> $(_class);\n
   ]]></template>

   <template name="/FTM/quadDeclarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_class) as Quadrature decoder
   \t */
   \ttypedef $(_base_class)QuadDecoder_T<$(_class)Info> $(_base_class)QuadDecoder$(_instance);\n
   ]]></template>

   <signals/>

</fragment>
