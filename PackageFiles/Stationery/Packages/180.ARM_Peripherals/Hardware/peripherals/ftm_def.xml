<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- ftm_def.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

   <constant key="irq_parameters"            type="String"  value='"uint8_t"'  />
   <constant key="irq_call"                  type="String"  value='"0"'  />
   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />

<!-- ____ General substitutions ____
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!-- ____ Template substitutions ________
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%variable[index]            Variable name
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- ____ Constants ____________ -->
   <constant key = "disable_peripheral"      value = '"ftm->SC = FTM_SC_CLKS(0);"' type="String"  />

   <intOption key="NumChannels"
      hidden="true"
      locked="true"
      derived="true"
      description="Number of Channels"
      toolTip="The number of timer channels available"
      value="=_channelCount" />

   <intOption key="NumChannelVectors"
      hidden="true"
      locked="true"
      derived="true"
      description="Number of Channel interrupt vectors"
      toolTip="Number of channel event interrupt vectors - \n
               Multiple Channels may be mapped to the same vector"
      value="=_irqCount" />

   <template><![CDATA[
      \t//! Number of channels implemented
      \tstatic constexpr unsigned NumChannels = $(NumChannels);

      \t//! Number of channel event vectors implemented
      \tstatic constexpr unsigned NumChannelVectors = $(NumChannelVectors);\n\n
   ]]></template>

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String"
      value='"$(_Class)Info : public $(_Structname)BasicInfo"' />

   <!-- ____ Clocking ________ -->
   <title description="Clocking" />

   <choiceOption key="ftm_sc_clks" condition="/MCG/_present"
      enabledBy="enablePeripheralSupport"
      description="Clock Source"
      typeName="FtmClockSource"
      target="inputClockFrequency"
      toolTip="Selects the clock source for the module" >
      <choice value="0" name="Disabled"              enum="Disabled"            ref="disabled"                      code="0"                                       />
      <choice value="1" name="System clock"          enum="SystemClock"         ref="/SIM/system_bus_clock[0]"      code="SystemBusClock"                          isDefault="true" />
      <choice value="2" name="Fixed frequency clock" enum="FixedFrequencyClock" ref="/MCG/system_mcgffclk_clock[0]" code="SystemMcgFFClock"                        />
      <choice value="3" name="External clock"        enum="ExternalClock"       ref="/SIM/$(_name)ExternalClock"    code="SimInfo::get$(_Class)ClockInFrequency()" />
   </choiceOption>

   <choiceOption key="ftm_sc_clks"  condition="/ICS/_present"
      target="inputClockFrequency"
      enabledBy="enablePeripheralSupport"
      description="Clock Source"
      typeName="FtmClockSource"
      toolTip="Selects the clock source for the module" >
      <choice value="0" name="Disabled"              enum="Disabled"            ref="disabled"                      code="0"                                       />
      <choice value="1" name="System timer clock"    enum="SystemTimerClock"    ref="/SIM/system_timer_clock[0]"    code="SystemTimerClock"                        isDefault="true" />
      <choice value="2" name="Fixed frequency clock" enum="FixedFrequencyClock" ref="/ICS/system_icsffclk_clock[0]" code="SystemIcsFFClock"                        />
      <choice value="3" name="External clock"        enum="ExternalClock"       ref="/SIM/$(_name)ExternalClock"    code="SimInfo::get$(_Class)ClockInFrequency()" />
   </choiceOption>

   <binaryOption key="externalClockUsed"
      ref="ftm_sc_clks == 3"
      derived="true"
      locked="true"
      hidden="true" >
      <choice value="0" name="External clock unused" />
      <choice value="1" name="External clock used"   />
   </binaryOption>

   <intOption key="inputClockFrequency"
      enabledBy="enablePeripheralSupport"
      locked="true"
      description="Frequency of input clock to timer"
      derived="true"
      units="Hz"/>

   <!-- ____ Main Configuration ________ -->

   <title description="Main configuration"/>

   <choiceOption key="mode"
      enabledBy="enablePeripheralSupport"
      target="ftm_sc_cpwms"
      description="Main operating mode for FTM"
      toolTip="Main Mode"
      disabledValue="0" >
      <choice value="0" ref="0" name="Disabled"     />
      <choice value="1" ref="0" name="Left aligned"
         toolTip="Left aligned (counter runs [0...mod]),  supports:\n
                 - Input capture\n
                 - Dual-edge capture\n
                 - Output compare\n
                 - Edge-aligned PWM\n
                 - Combined PWM"       />
      <choice value="2" ref="1" name="Centre aligned"
         toolTip="Centre aligned (counter runs [(0...mod...0)]), supports:\n
          - Centre-aligned PWM"
      />
      <choice value="3" ref="0" name="Quadrature decoder" condition="ftm_qdctrl_quaden_present"
         toolTip="Quadrature Decode (counter clocked by decoder), supports:\n
          - Quadrature decode using two channels"
      />
      <choice value="0" ref="0" name="Disabled" enabledBy="false" />
   </choiceOption>

   <constant key="None"    value="0"   type="Long" />
   <constant key="Left"    value="1"   type="Long" />
   <constant key="Centre"  value="2"   type="Long" />
   <constant key="Quad"    value="3"   type="Long" />

   <!-- ____ FTM_SC ________ -->

   <binaryOption key="ftm_sc_cpwms"
      hiddenBy="(mode==(None))"
      locked="true"
      enabledBy="enablePeripheralSupport"
      typeName="FtmCountMode"
      description="Alignment (Count mode)"
      toolTip="Left-aligned   (0...mod) or\n
               Centre-aligned (0...mod...0)" >
      <choice value="0" name="Left-aligned (count up)"         enum="LeftAligned"    />
      <choice value="1" name="Centre-aligned (count up-down)"  enum="CentreAligned"  />
   </binaryOption>

   <choiceOption key="ftm_sc_ps"
      hiddenBy="(mode==(None))"
      enabledBy="enablePeripheralSupport"
      description="Clock prescaler"
      typeName="FtmPrescale"
      target="clock"
      toolTip="Selects the prescaler for the module" >
      <choice value="0" name="Divide by 1"   ref="inputClockFrequency"        enum="DivBy1"  isDefault="true" />
      <choice value="1" name="Divide by 2"   ref="(inputClockFrequency)/2."   enum="DivBy2" />
      <choice value="2" name="Divide by 4"   ref="(inputClockFrequency)/4."   enum="DivBy4" />
      <choice value="3" name="Divide by 8"   ref="(inputClockFrequency)/8."   enum="DivBy8" />
      <choice value="4" name="Divide by 16"  ref="(inputClockFrequency)/16."  enum="DivBy16" />
      <choice value="5" name="Divide by 32"  ref="(inputClockFrequency)/32."  enum="DivBy32" />
      <choice value="6" name="Divide by 64"  ref="(inputClockFrequency)/64."  enum="DivBy64" />
      <choice value="7" name="Divide by 128" ref="(inputClockFrequency)/128." enum="DivBy128" />
   </choiceOption>

   <floatOption key="clock"
      hiddenBy="mode==(None,Quad)"
      description="Counter tick rate"
      toolTip="The tick rate of the main counter"
      derived="true"
      locked="true"
      units="Hz"
    />

   <floatOption key="clockPeriod"
      hidden="true"
      ref="(1.0/clock)"
      locked="true"
      derived="true"
   />

   <binaryOption key="freeRunningCounter"
      hiddenBy="mode!=(Left,Quad)"
      enabledBy="!(mode!=(Left,Quad))"
      description="Counter free-running"
      toolTip="Forces the full range for counter [0..65535]\n
               This is usually convenient for input-capture operations\n
               making use of modulo-16 calculations with counter roll-overs"
      name="freeRunning" >
      <choice value="0" name="Period mode"       />
      <choice value="1" name="Free-running mode" />
   </binaryOption>

   <intOption key="ftm_mod"
      hiddenBy="mode==(None)"
      enabledBy="!freeRunningCounter"
      description="End value for counter"
      toolTip="The timer counts from 0 to this value"
      valueFormat="%s"
      typeName="Ticks &amp;"
      units="ticks"
      value="65535" min="0" max="65535" />

   <floatOption key="ftm_modPeriod"
      enabledBy="inputClockFrequency!=0"
      hiddenBy="mode==(None,Quad)"
      ref="clockPeriod*(ftm_sc_cpwms?(2*(ftm_mod)):(ftm_mod+1))"
      typeName="Seconds &amp;"
      unlockedBy="!freeRunningCounter"
      valueFormat="%s"
      description="Period or minimum interval of timer"
      toolTip="In left-aligned or centre-aligned this is the period of the timer\n
               In free-running mode it is the minimum interval"
      derived="true"
      units="s" />

   <choiceOption key="ftm_sc_action" condition="ftm_sc_toie_present&amp;&amp;ftm_sc_dma_present"
      hiddenBy="mode==(None)"
      valueFormat="FTM_SC_TOIE(%s),FTM_SC_DMA(%s)"
      enumType="uint16_t"
      typeName="FtmOverflowAction"
      description="Action on Counter overflow"
      toolTip="Enable interrupt and/or DMA on counter overflow" >
       <choice value="0,0" name="No action"                    enum="None"             />
       <choice value="0,1" name="DMA request"                  enum="Dma"              />
       <choice value="1,0" name="Interrupt request"            enum="Interrupt"        enabledBy="irqHandlingMethod" />
       <choice value="1,1" name="Interrupt and DMA request"    enum="InterruptAndDma"  enabledBy="irqHandlingMethod" />
   </choiceOption>

   <binaryOption key="ftm_sc_action" condition="ftm_sc_toie_present&amp;&amp;!ftm_sc_dma_present"
      hiddenBy="mode==(None)"
      enabledBy="irqHandlingMethod"
      valueFormat="FTM_SC_TOIE(%s)"
      enumType="uint8_t"
      typeName="FtmOverflowAction"
      description="Action on Counter overflow"
      toolTip="Enable interrupt on counter overflow" >
      <choice value="0" name="No action"          enum="None"       />
      <choice value="1" name="Overflow Interrupt" enum="Interrupt"  />
   </binaryOption>

   <!-- ____ Run-time Checks ____ -->

   <categoryOption description="Run-time checks" key="runtimeChecks"
      hiddenBy="mode!=(Left,Centre)"
   >

      <binaryOption key="check_minimums"
         enabledBy="enablePeripheralSupport"
         description="Check minimum interval and resolution"
         toolTip="Enables boundary checks of minimum interval and minimum resolution when setting values" >
         <choice value="0" name="No checks done" />
         <choice value="1" name="Do checks"  isDefault="true" />
      </binaryOption>

      <intOption key="minimumInterval"
         enabledBy="check_minimums"
         description="Minimum usable interval in ticks"
         toolTip="This value is used as a minimum acceptable value for the timer interval in ticks\n
                  when using convertMicrosecondsToTicks() or convertSecondsToTicks()"
         value="20" min="0" max="65535"/>

      <intOption key="minimumResolution"
         enabledBy="check_minimums"
         description="Minimum resolution for PWM interval"
         toolTip="This value is used as a minimum value for the timer period in ticks \n
            so that a reasonable resolution is available for PWM duty-cycle"
         value="100" min="0" max="65535" />
   </categoryOption>

   <choiceOption key="ftm_channel_number"
      hidden="true"
      derived="true"
      enumType="uint8_t"
      valueFormat="%s"
      typeName="FtmChannelNum"
      description="Channel Number"
      toolTip="Select a channel" >
      <choiceExpansion value="%(ch)" name="Channel %(ch)" enum="%(ch)" keys="ch" dim="8" />
      <choice value="(uint8_t(-1))" name="No Channel"     enum="None" />
   </choiceOption>

   <!--
      COMBINE0+DECAPEN0 controlled by extended mode
      COMP0, DECAP0, DTEN0, SYNCEN0, FAULTEN0  -->

   <!-- ____ INVCTRL __________________ -->

   <choiceOption key="ftm_invctrl_invNen"
      condition="/FTM0/ftm_invctrl_present||/FTM1/ftm_invctrl_present||
                 /FTM2/ftm_invctrl_present||/FTM3/ftm_invctrl_present"
      hidden="true"
      valueFormat="%s"
      enabledBy="enablePeripheralSupport"
      typeName="FtmInvertChannelPair"
      description="Channel Output Control"
      toolTip="Selects the inverting operation for the corresponding paired channels\n
               These bits control the inversion (swapping) of paired channel outputs.\n
               This register has a write buffer. (See INVC,SYNCMODE,SWINVC,HWINVC,SWSYNC,TRIGn)\n
               This bit is updated by the INVCTRL Register Synchronisation." >
      <choice name="No outputs inverted"  value="0" enum="Normal" />
      <choiceExpansion name='="Invert Ch"+ToString(2*%(ch))+"/Ch"+ToString(2*%(ch)+1)+" outputs"'
                        value="FTM_INVCTRL_INV%(ch)EN_MASK" enum='=ToString(2*%(ch))+"_"+ToString(2*%(ch)+1)+"_Inverted"' dim="4" keys="ch" />
   </choiceOption >

   <!--  ____ Hidden info ________________ -->

   <category hidden="true">

   <!-- ____ Independent Channels ________________ -->
   <for keys="ch" dim="=_channelCount" >

      <choiceOption key="ftm_cnsc_mode_independent[%(ch)]"
         enabledBy="enablePeripheralSupport&amp;&amp;!channelPairing[%(ch)&amp;0b1110]"
         valueFormat="FTM_CnSC_MS(%s),FTM_CnSC_ELS(%s)"
         enumType="uint16_t"
         typeName="FtmChannelMode"
         description="Channel %(ch) Mode"
         toolTip="Determines channel operation (PWM/Input capture/Output compare)" >
         <!--              +......... MS(B:A)  -->
         <!--              |    +.... ELS(B:A) -->
         <!--              |    |              -->
         <!--              v    v              -->
          <choice value="0b00,0b00"  name="Channel Disabled"                    enum="Disabled"                 />
          <!-- 1-3 -->
          <choice value="0b00,0b01"  name="Input Capture Rising-edge"           enum="InputCaptureRisingEdge"   />
          <choice value="0b00,0b10"  name="Input Capture Falling-edge"          enum="InputCaptureFallingEdge"  />
          <choice value="0b00,0b11"  name="Input Capture Either-edge"           enum="InputCaptureEitherEdge"   />
          <!-- 4-7 -->
          <choice value="0b01,0b00"  name="Output Compare No action"            enum="OutputCompare"            />
          <choice value="0b01,0b01"  name="Output Compare Toggle"               enum="OutputCompareToggle"      />
          <choice value="0b01,0b10"  name="Output Compare Clear"                enum="OutputCompareClear"       />
          <choice value="0b01,0b11"  name="Output Compare Set"                  enum="OutputCompareSet"         />
          <!-- 8-9 -->
          <choice value="0b10,0b10"  name="Pwm High-true Pulses (Edge/Centre)"  enum="PwmHighTruePulses"        />
          <choice value="0b10,0b01"  name="Pwm Low-true Pulses (Edge/Centre)"   enum="PwmLowTruePulses"         />
      </choiceOption>

      <choiceOption key="ftm_cnsc_action_independent[%(ch)]" condition="ftm_cnsc_chie_present&amp;&amp;ftm_cnsc_dma_present"
         hiddenBy="!(ftm_cnsc_mode_independent[%(ch)]!=0)"
         enabledBy="(ftm_cnsc_mode_independent[%(ch)]!=0)"
         valueFormat="FTM_CnSC_CHIE(%s),FTM_CnSC_DMA(%s)"
         enumType="uint8_t"
         typeName="FtmChannelAction"
         description="Action on Channel %(ch) Event"
         toolTip="Enable interrupt or DMA on channel event" >
          <choice value="0,0" name="No action"          enum="None"      />
          <choice value="1,1" name="DMA request"        enum="Dma"       />
          <choice value="1,0" name="Interrupt Request"  enum="Interrupt" enabledBy="irqHandlingMethod"  />
      </choiceOption>

      <binaryOption key="ftm_cnsc_action_independent[%(ch)]" condition="ftm_cnsc_chie_present&amp;&amp;!ftm_cnsc_dma_present"
         hiddenBy="!(ftm_cnsc_mode_independent[%(ch)]!=0)"
         enabledBy="(ftm_cnsc_mode_independent[%(ch)]!=0)&amp;&amp;irqHandlingMethod"
         valueFormat="FTM_CnSC_CHIE(%s)"
         enumType="uint8_t"
         typeName="FtmChannelAction"
         description="Action on Channel %(ch) Event"
         toolTip="Enable interrupt on channel event" >
          <choice value="0" name="No action"              enum="None"        />
          <choice value="1" name="Interrupt request"      enum="Interrupt"   />
      </binaryOption>

      <choiceOption key="ftm_filter_fval_independent[%(ch)]" condition="ftm_filter_ch%(ch)fval_present"
         hiddenBy="!(ftm_cnsc_mode_independent[%(ch)]==(1,2,3))"
         enabledBy="(ftm_cnsc_mode_independent[%(ch)]==(1,2,3))"
         description="Channel Input Filter"
         typeName="FtmInputFilter"
         valueFormat="(%s)"
         enumType="uint8_t"
         toolTip="Selects the filter value for the channel input" >
         <choice          value="0"         name="Filter Disabled"        enum="Disabled" isDefault="true" />
         <choiceExpansion value="%(cycles)" name='=ToString(4*%(cycles))+" clock cycles"' enum='=ToString(4*%(cycles))+"_clocks"' keys="cycles" dim="1,15" />
      </choiceOption>

      <floatOption key="ftm_filter_fval_delay_independent[%(ch)]" condition="ftm_filter_fval_independent[%(ch)]"
         hiddenBy="!(ftm_filter_fval_independent[%(ch)]>0)"
         enabledBy="(ftm_filter_fval_independent[%(ch)]>0)"
         description="Channel Input Filter Delay"
         toolTip="Calculated delay"
         ref="(4.0*ftm_filter_fval_independent[%(ch)])/inputClockFrequency"
         derived="true"
         locked="true"
         units="s"
         min="0.0"
      />

      <binaryOption key="ftm_cnsc_icrst_independent[%(ch)]" condition="ftm_cnsc_icrst_present"
         hiddenBy="!(ftm_cnsc_mode_independent[%(ch)]==(1,2,3))"
         enabledBy="(ftm_cnsc_mode_independent[%(ch)]==(1,2,3))"
         valueFormat="FTM_CnSC_ICRST(%s)"
         typeName="FtmChannelReset"
         enumType="uint8_t"
         description="Reset counter on channel IC event"
         toolTip="FTM counter reset is driven by the selected event of the channel\n
                  in the Input Capture mode.\n
                  This field is write protected. It can be written only when MODE[WPDIS] = 1." >
         <choice value="0" name="Disabled" enum="Disabled" />
         <choice value="1" name="Enabled"  enum="CounterReset"  />
      </binaryOption>

      <intOption key="ftm_cnv_independent[%(ch)]"
         hiddenBy="!(ftm_cnsc_mode_independent[%(ch)]>=4)"
         enabledBy="(ftm_cnsc_mode_independent[%(ch)]>=4)"
         valueFormat="%s"
         typeName="Ticks &amp;"
         units="ticks"
         description="Output Compare Event time in ticks"
         toolTip="This value is compared against the main counter"
         value="0" min="0" max="ftm_mod" />

      <floatOption key="ftm_cnvEventTime_independent[%(ch)]"
         hiddenBy="!(ftm_cnsc_mode_independent[%(ch)]>=4)"
         enabledBy="(ftm_cnsc_mode_independent[%(ch)]>=4)"
         ref="ftm_cnv_independent[%(ch)]*clockPeriod"
         valueFormat="%s"
         derived="true"
         units="s"
         description="Output Compare Event time in seconds"
         toolTip="This value, converted to ticks, is compared against the main counter"
         value="0" min="0" max="ftm_mod*clockPeriod" />

      <floatOption key="ftm_cnvHighTime_independent[%(ch)]"
         hiddenBy="ftm_cnsc_mode_independent[%(ch)]!=(8,9)"
         locked="true"
         derived="true"
         ref="(ftm_cnsc_mode_independent[%(ch)]==8)?
            (ftm_sc_cpwms?2.0:1.0)*(ftm_cnv_independent[%(ch)])*clockPeriod:
            (ftm_sc_cpwms?2.0:1.0)*(ftm_mod-ftm_cnv_independent[%(ch)])*clockPeriod"
         valueFormat="%s"
         units="s"
         description="Output high-time in seconds"
         toolTip="Calculated high-time" />

      <floatOption key="ftm_cnvDutyCycle_independent[%(ch)]"
         hiddenBy="ftm_cnsc_mode_independent[%(ch)]!=(8,9)"
         locked="true"
         derived="true"
         ref="ftm_cnvHighTime_independent[%(ch)]/ftm_modPeriod"
         valueFormat="%s"
         units="percent"
         description="Output duty cycle as pecentage"
         toolTip="Calculated duty cycle" />
   </for>

   <!-- ____ Paired Channels ________________ -->

   <!-- Odd channels when paired - Dual-edge Capture -->
   <choiceOption key="ftm_cnsc_mode_odd"
      derived="true"
      valueFormat="FTM_CnSC_ELS(%s)"
      description="Odd channel mode"
      typeName="FtmOddChannelMode"
      disabledValue="0b00"
      toolTip="Behaviour of second channel when channels are paired"
      >
      <!--              +...... ELS(B:A)
                        |
                        v                  -->
       <choice value="0b00" name="Pin Disabled"         enum="Disabled"
          toolTip="The pin associated with the second channel is not used by the FTM" />
       <choice value="0b01" name="Capture Rising-edge"   enum="RisingEdge"
         toolTip="Odd channel captures CNV on next rising edge of channel input" />
       <choice value="0b10" name="Capture Falling-edge"  enum="FallingEdge"
         toolTip="Odd channel captures CNV on next falling edge of channel input" />
       <choice value="0b11" name="Capture Either-edge"   enum="EitherEdge"
         toolTip="Odd channel captures CNV on next rising or falling edge of channel input" />
       <choice value="0b01" name="Pin controlled by FTM"  enum="Enabled"
         toolTip="The pin associated with the second channel is controlled by the FTM" />
   </choiceOption>

   <for keys="    Num : evenCh : oddCh"
        values="   0  :   0  :   1;
                   1  :   2  :   3;
                   2  :   4  :   5;
                   3  :   6  :   7" >

      <if condition="=%(evenCh) >=_channelCount">
         <break/>
      </if>

      <!-- Even channels when paired -->
      <choiceOption key="ftm_cnsc_mode_even[%(evenCh)]" condition="ftm_combine_present"
         enabledBy="enablePeripheralSupport&amp;&amp;channelPairing[%(evenCh)]"
         valueFormat="(FTM_COMBINE_DECAPEN0(%s)&lt;&lt;8),(FTM_COMBINE_COMBINE0(%s)&lt;&lt;8),FTM_CnSC_MS(%s),FTM_CnSC_ELS(%s)"
         enumType="uint16_t"
         typeName="FtmEvenChannelMode"
         description="Paired Channel %(evenCh)/%(oddCh) Mode"
         toolTip="Determines channel operation (Combined PWM or Dual-edge capture)"
         >
         <!--            +.............. DECAPEN
                         | +............ COMBINE
                         | |   +........ MS(B:A)
                         | |   |    +... ELS(B:A)
                         | |   |    |
                         v v   v    v                 -->
          <choice value="0,0,0b00,0b00" name="Channel Pair Disabled"                      enum="Disabled"                                />
          <!-- 1-2 ................ -->
          <choice value="0,1,0b00,0b10" name="Combined PWM Positive-pulse"                enum="CombinePositivePulse"                    />
          <choice value="0,1,0b00,0b01" name="Combine PWM Negative-pulse"                 enum="CombineNegativePulse"                    />
          <!-- 3-8 ................ -->
          <choice value="1,0,0b00,0b01" name="Dual-edge Capture One-Shot Rising-edge"     enum="DualEdgeCaptureOneShotRisingEdge"        />
          <choice value="1,0,0b01,0b01" name="Dual-edge Capture Continuous Rising-edge"   enum="DualEdgeCaptureContinuousRisingEdge"     />
          <choice value="1,0,0b00,0b10" name="Dual-edge Capture One-Shot Falling-edge"    enum="DualEdgeCaptureOneShotFallingEdge"       />
          <choice value="1,0,0b01,0b10" name="Dual-edge Capture Continuous Falling-edge"  enum="DualEdgeCaptureContinuousFallingEdge"    />
          <choice value="1,0,0b00,0b11" name="Dual-edge Capture One-Shot Either-edge"     enum="DualEdgeCaptureOneShotEitherEdge"        />
          <choice value="1,0,0b01,0b11" name="Dual-edge Capture Continuous Either-edge"   enum="DualEdgeCaptureContinuousEitherEdge"     />
      </choiceOption>

      <variable key="_combined_pwm%(Num)"          type="Boolean" expression="ftm_cnsc_mode_even[%(evenCh)]==(1,2)"   />
      <variable key="_dual_edge_capture%(Num)"     type="Boolean" expression="ftm_cnsc_mode_even[%(evenCh)]!=(0,1,2)" />
      <variable key="_dual_edge_continuous%(Num)"  type="Boolean" expression="ftm_cnsc_mode_even[%(evenCh)]==(4,6,8)" />

      <!-- Odd channels when paired - Combined PWM -->
      <choiceOption key="ftm_cnsc_secondOutput[%(oddCh)]"
         hiddenBy="!_combined_pwm%(Num)"
         enabledBy="_combined_pwm%(Num)"
         valueFormat="FTM_CnSC_ELS(%s)"
         description="Odd channel (%(oddCh)) Output Control"
         typeName="FtmOddChannelMode"
         disabledValue="0b00"
         toolTip="Controls the functioning of the output of the second channel in a pair"
         >
         <!--              +...... ELS(B:A)
                           |
                           v                  -->
         <choice value="0b00" name="Pin Disabled"           enum="Disabled"
            toolTip="The pin associated with the second channel is not controlled by the FTM"
          />
         <choice value="0b01" name="Pin controlled by FTM"  enum="Enabled"
            toolTip="The pin associated with the second channel is controlled by the FTM"
         />
      </choiceOption>

      <!-- Odd channels when paired - Dual-edge Capture -->
      <choiceOption key="ftm_cnsc_secondEdge[%(oddCh)]"
         hiddenBy="!_dual_edge_capture%(Num)"
         enabledBy="_dual_edge_capture%(Num)"
         valueFormat="FTM_CnSC_ELS(%s)"
         description="Odd channel (%(oddCh)) Capture Polarity"
         typeName="FtmOddChannelMode"
         disabledValue="0b00"
         toolTip="Polarity for capturing the second edge in Dual-edge capture mode (2nd event/channel)"
         >
         <!--              +...... ELS(B:A)
                           |
                           v                  -->
          <choice value="0b00" name="Not used"             enum="Disabled"    />
          <choice value="0b01" name="Capture Rising-edge"  enum="RisingEdge"  />
          <choice value="0b10" name="Capture Falling-edge" enum="FallingEdge" />
          <choice value="0b11" name="Capture Either-edge"  enum="EitherEdge"  />
      </choiceOption>

      <intOption key="ftm_cnv_paired[%(evenCh)]"
         hiddenBy="!(ftm_cnsc_mode_even[%(evenCh)]==(1,2))"
         enabledBy="(ftm_cnsc_mode_even[%(evenCh)]==(1,2))"
         valueFormat="%s"
         typeName="Ticks &amp;"
         units="ticks"
         description="Even channel (%(evenCh)) O/C Event time in ticks"
         toolTip="This value is compared against the main counter"
         value="0" min="0" max="ftm_mod" />

      <intOption key="ftm_cnv_paired[%(oddCh)]"
         hiddenBy="!(ftm_cnsc_mode_even[%(evenCh)]==(1,2))"
         enabledBy="(ftm_cnsc_mode_even[%(evenCh)]==(1,2))"
         valueFormat="%s"
         typeName="Ticks &amp;"
         units="ticks"
         description="Odd channel (%(oddCh)) O/C Event time in ticks"
         toolTip="This value is compared against the main counter"
         value="0" min="0" max="ftm_mod" />

      <floatOption key="ftm_pwmHighTime[%(evenCh)]"
         hiddenBy="!(ftm_cnsc_mode_even[%(evenCh)]==(1,2))"
         enabledBy="(ftm_cnsc_mode_even[%(evenCh)]==(1,2))"
         locked="true"
         derived="true"
         ref="(ftm_cnv_paired[%(oddCh)]-ftm_cnv_paired[%(evenCh)])*clockPeriod"
         valueFormat="%s"
         units="s"
         description="Output high-time in seconds"
         toolTip="Calculated high-time" />

      <floatOption key="ftm_pwmDutyCycle[%(evenCh)]"
         hiddenBy="!(ftm_cnsc_mode_even[%(evenCh)]==(1,2))"
         enabledBy="(ftm_cnsc_mode_even[%(evenCh)]==(1,2))"
         locked="true"
         derived="true"
         ref="ftm_pwmHighTime[%(evenCh)]/ftm_modPeriod"
         valueFormat="%s"
         units="percent"
         description="Output duty cycle as pecentage"
         toolTip="Calculated duty cycle" />

      <!-- COMBINE.DECAP
           Note: Not sensible to initialise when used as a flag for one-shot mode -->
      <binaryOption key="ftm_combine_decap%(Num)"
         hiddenBy="!_dual_edge_continuous%(Num)"
         enabledBy="_dual_edge_continuous%(Num)"
         typeName="FtmSecondEventAction"
         description="Action on Odd channel (Ch%(oddCh)) event"
         toolTip="Enables the capture of the FTM counter value on odd channel events.\n
                  In dual edge capture one-shot mode, this bit is cleared automatically
                  by hardware when the capture occurs." >
         <choice value="0" name="NoCapture"          enum="NoCapture"                  />
         <choice value="1" name="Capture 2nd event"  enum="CaptureOnEvent"   />
      </binaryOption>

      <!-- COMBINE.COMP -->
      <binaryOption key="ftm_combine_comp%(Num)"
         hiddenBy="!_combined_pwm%(Num)"
         enabledBy="_combined_pwm%(Num)"
         typeName="FtmComplementChannel"
         description="Channel %(evenCh)/%(oddCh) Complementary Enable"
         toolTip="Enables Complementary mode for the paired channels.\n
                  In Complementary mode the channel (n+1) output is the inverse of the channel (n) output.\n
                  This field is write protected. It can be written only when MODE[WPDIS] = 1." >
         <choice value="0"  name="Disabled"               enum="Normal" />
         <choice value="1"  name="Complementary outputs"  enum="Complementary" />
      </binaryOption>

      <!-- COMBINE.FAULTEN -->
      <binaryOption key="ftm_combine_faulten%(Num)"
         hiddenBy="!_combined_pwm%(Num)"
         enabledBy="_combined_pwm%(Num)"
         typeName="FtmFaultControl"
         description="Channel %(evenCh)/%(oddCh) Fault Control Enable"
         toolTip="Enables the fault control of the channel pair.\n
                  This field is write protected. It can be written only when MODE[WPDIS] = 1."
         derived="true"
      >
         <choice value="0"  name="Disabled"                  enum="Normal"      />
         <choice value="1"  name="Disable outputs on fault"  enum="DisabledOnFault" />
      </binaryOption>

      <!-- COMBINE.DTEN -->
      <binaryOption key="ftm_combine_dten%(Num)"
         hiddenBy="!_combined_pwm%(Num)"
         enabledBy="_combined_pwm%(Num)"
         typeName="FtmDeadtime"
         description="Channel %(evenCh)/%(oddCh) Deadtime Enable"
         toolTip="Enables the deadtime insertion in the channels (n) and (n+1).\n
                  This field is write protected. It can be written only when MODE[WPDIS] = 1."
         derived="true"
      >
         <choice value="0"  name="Disabled"           enum="Disabled"      />
         <choice value="1"  name="Deadtime inserted"  enum="Inserted" />
      </binaryOption>

      <!-- COMBINE.SYNCEN -->
      <binaryOption key="ftm_combine_syncen%(Num)"
         hiddenBy="!_combined_pwm%(Num)"
         enabledBy="_combined_pwm%(Num)"
         typeName="FtmSyncEnable"
         description="Channel %(evenCh)/%(oddCh) Synchronization Enable"
         toolTip="Enables PWM synchronization of registers C(n)V and C(n+1)V."
         derived="true"
      >
         <choice value="0"  name="Disabled"          enum="Disabled"      />
         <choice value="1"  name="PWM Synchronised"  enum="Synchronised" />
      </binaryOption>

      <!-- ... Calculation of pin use (in independent and paired modes) .... -->

      <!-- Even channel -->
      <variable key="inputModeCh%(evenCh)" type="Boolean"
         expression="(ftm_cnsc_mode_independent[%(evenCh)]==(1,2,3))||(ftm_cnsc_mode_even[%(evenCh)]>=3)" />

      <!-- Odd channel -->
      <variable key="inputModeCh%(oddCh)" type="Boolean"
         expression="(ftm_cnsc_mode_independent[%(oddCh)]==(1,2,3))||(ftm_cnsc_mode_even[%(evenCh)]>=3)" />

      <!-- Even channel -->
      <variable key="outputModeCh%(evenCh)" type="Boolean"
         expression="(ftm_cnsc_mode_independent[%(evenCh)]>=4)||(ftm_cnsc_mode_even[%(evenCh)]==(1,2))" />

      <!-- Odd channel -->
      <variable key="outputModeCh%(oddCh)" type="Boolean"
         expression="(ftm_cnsc_mode_independent[%(oddCh)]>=4)||(ftm_cnsc_secondOutput[%(oddCh)]==1)" />

      <!-- Even channel -->
      <variable key="Ch%(oddCh)PinInUse" type="Boolean"
         expression="outputModeCh%(oddCh)||inputModeCh%(oddCh)" />

      <!-- Odd channel -->
      <variable key="Ch%(evenCh)PinInUse" type="Boolean"
         expression="outputModeCh%(evenCh)||inputModeCh%(evenCh)" />

      <!-- Even channel -->
      <choiceOption key="ftm_cnsc_action_paired[%(evenCh)]" condition="ftm_cnsc_chie_present&amp;&amp;ftm_cnsc_dma_present"
         hiddenBy="!(ftm_cnsc_mode_even[%(evenCh)]!=0)"
         enabledBy="(ftm_cnsc_mode_even[%(evenCh)]!=0)"
         valueFormat="FTM_CnSC_CHIE(%s),FTM_CnSC_DMA(%s)"
         enumType="uint8_t"
         typeName="FtmChannelAction"
         description="Action on First (Ch %(evenCh)) Event"
         toolTip="Enable interrupt or DMA on channel event" >
          <choice value="0,0" name="No action"          enum="None"      />
          <choice value="1,1" name="DMA request"        enum="Dma"       />
          <choice value="1,0" name="Interrupt Request"  enum="Interrupt" enabledBy="irqHandlingMethod"  />
      </choiceOption>

      <binaryOption key="ftm_cnsc_action_paired[%(evenCh)]" condition="ftm_cnsc_chie_present&amp;&amp;!ftm_cnsc_dma_present"
         hiddenBy="!(ftm_cnsc_mode_even[%(evenCh)]!=0)"
         enabledBy="(ftm_cnsc_mode_even[%(evenCh)]!=0)&amp;&amp;irqHandlingMethod"
         valueFormat="FTM_CnSC_CHIE(%s)"
         enumType="uint8_t"
         typeName="FtmChannelAction"
         description="Action on First (Ch %(evenCh)) Event"
         toolTip="Enable interrupt on channel event" >
          <choice value="0" name="No action"              enum="None"        />
          <choice value="1" name="Interrupt request"      enum="Interrupt"   />
      </binaryOption>

      <!-- Odd channel -->
      <choiceOption key="ftm_cnsc_action_paired[%(oddCh)]" condition="ftm_cnsc_chie_present&amp;&amp;ftm_cnsc_dma_present"
         hiddenBy="!(ftm_cnsc_mode_even[%(evenCh)]!=0)"
         enabledBy="(ftm_cnsc_mode_even[%(evenCh)]!=0)"
         valueFormat="FTM_CnSC_CHIE(%s),FTM_CnSC_DMA(%s)"
         enumType="uint8_t"
         typeName="FtmChannelAction"
         description="Action on Second (Ch %(oddCh)) Event"
         toolTip="Enable interrupt or DMA on channel event" >
          <choice value="0,0" name="No action"          enum="None"      />
          <choice value="1,1" name="DMA request"        enum="Dma"       />
          <choice value="1,0" name="Interrupt Request"  enum="Interrupt" enabledBy="irqHandlingMethod"  />
      </choiceOption>

      <binaryOption key="ftm_cnsc_action_paired[%(oddCh)]" condition="ftm_cnsc_chie_present&amp;&amp;!ftm_cnsc_dma_present"
         hiddenBy="!(ftm_cnsc_mode_even[%(evenCh)]!=0)"
         enabledBy="(ftm_cnsc_mode_even[%(evenCh)]!=0)&amp;&amp;irqHandlingMethod"
         valueFormat="FTM_CnSC_CHIE(%s)"
         enumType="uint8_t"
         typeName="FtmChannelAction"
         description="Action on Second (Ch %(oddCh)) Event"
         toolTip="Enable interrupt on channel event" >
          <choice value="0" name="No action"              enum="None"        />
          <choice value="1" name="Interrupt request"      enum="Interrupt"   />
      </binaryOption>

      <choiceOption key="ftm_filter_fval_paired[%(evenCh)]" condition="ftm_filter_ch%(evenCh)fval_present"
         hiddenBy="!(ftm_cnsc_mode_even[%(evenCh)]>=3)"
         enabledBy="ftm_cnsc_mode_even[%(evenCh)]>=3"
         description="Channel %(evenCh) Input Filter"
         typeName="FtmInputFilter"
         valueFormat="(%s)"
         enumType="uint8_t"
         toolTip="Selects the filter value for the channel input" >
         <choice          value="0"         name="Filter Disabled"        enum="Disabled" isDefault="true" />
         <choiceExpansion value="%(cycles)" name='=ToString(4*%(cycles))+" clock cycles"' enum='=ToString(4*%(cycles))+"_clocks"' keys="cycles" dim="2,15" />
      </choiceOption>

      <floatOption key="ftm_filter_fval_delay_paired[%(evenCh)]" condition="ftm_filter_fval_paired[%(evenCh)]"
         hiddenBy="!(ftm_filter_fval_paired[%(evenCh)]>0)"
         enabledBy="ftm_filter_fval_paired[%(evenCh)]>0"
         description="Channel %(evenCh) Input Filter Delay"
         toolTip="Calculated delay"
         ref="(4.0*ftm_filter_fval_paired[%(evenCh)])/inputClockFrequency"
         derived="true"
         locked="true"
         units="s"
         min="0.0"
      />

      <choiceOption key="ftm_filter_fval_paired[%(oddCh)]" condition="ftm_filter_ch%(oddCh)fval_present"
         hiddenBy="!(ftm_cnsc_secondEdge[%(oddCh)]>0)"
         enabledBy="ftm_cnsc_secondEdge[%(oddCh)]>0"
         description="Channel %(oddCh) Input Filter"
         typeName="FtmInputFilter"
         valueFormat="(%s)"
         enumType="uint8_t"
         toolTip="Selects the filter value for the channel input" >
         <choice          value="0"         name="Filter Disabled"        enum="Disabled" isDefault="true" />
         <choiceExpansion value="%(cycles)" name='=ToString(4*%(cycles))+" clock cycles"' enum='=ToString(4*%(cycles))+"_clocks"' keys="cycles" dim="2,15" />
      </choiceOption>

      <floatOption key="ftm_filter_fval_delay_paired[%(oddCh)]" condition="ftm_filter_fval_paired[%(oddCh)]"
         hiddenBy="!(ftm_filter_fval_paired[%(oddCh)]>0)"
         enabledBy="ftm_filter_fval_paired[%(oddCh)]>0"
         description="Channel %(oddCh) Input Filter Delay"
         toolTip="Calculated delay"
         ref="(4.0*ftm_filter_fval_paired[%(oddCh)])/inputClockFrequency"
         derived="true"
         locked="true"
         units="s"
         min="0.0"
      />

      <binaryOption key="ftm_cnsc_icrst_paired[%(oddCh)]" condition="ftm_cnsc_icrst_present"
         hiddenBy="!(ftm_cnsc_mode_even[%(evenCh)]>=3)"
         enabledBy="ftm_cnsc_mode_even[%(evenCh)]>=3"
         valueFormat="FTM_CnSC_ICRST(%s)"
         typeName="FtmChannelReset"
         enumType="uint8_t"
         description="Reset counter on 2nd IC event"
         toolTip="Enables the channel IC event to reset the shared counter" >
         <choice value="0" name="Disabled"                   enum="Disabled" />
         <choice value="1" name="Counter is reset on event"  enum="CounterReset"  />
      </binaryOption>

   </for>



   </category>

<!--  ____  Channel Configuration  ________________ -->

   <categoryOption key="Channels" description="Channel Configuration" hiddenBy="mode==(None,Quad)" >

      <for keys="    Num : evenCh : oddCh"
           values="   0  :   0  :   1;
                      1  :   2  :   3;
                      2  :   4  :   5;
                      3  :   6  :   7" >

         <constant key="channelPairing[%(evenCh)]" value="false" condition="!ftm_combine_combine%(Num)_present" type="Boolean"/>

         <binaryOption key="channelPairing[%(evenCh)]" condition="ftm_combine_combine%(Num)_present"
            enabledBy="mode==Left"
            description="Channel %(evenCh) &amp; %(oddCh) Pairing"
            toolTip="This allows the paired channels to operate in Combine or Dual edge modes" >

            <choice value="0" name="Channels %(evenCh) &amp; %(oddCh) operate independently"
               toolTip="Operation in \n
                  - Input capture\n
                  - Output compare\n
                  - Edge or Centre aligned PWM"
            />
            <choice value="1" name="Channels %(evenCh) &amp; %(oddCh) are paired"
               toolTip="Operation in \n
                  - Dual-edge Input capture\n
                  - Combined PWM"
            />
         </binaryOption>
      </for>

      <for keys="    Num : evenCh : oddCh"
           values="   0  :   0  :   1;
                      1  :   2  :   3;
                      2  :   4  :   5;
                      3  :   6  :   7" >
         <if condition="=%(evenCh) >=_channelCount">
            <break/>
         </if>

         <list name="*" hiddenBy="channelPairing[%(evenCh)]" >
            <!-- Independent channels -->

            <!-- Even channels -->
            <title description="Channel %(evenCh)" />

            <aliasOption key="ftm_cnsc_mode_independent[%(evenCh)]"         locked="false" />
            <aliasOption key="ftm_cnsc_action_independent[%(evenCh)]"       locked="false" />
            <aliasOption key="ftm_filter_fval_independent[%(evenCh)]"       locked="false" optional="discard" />
            <aliasOption key="ftm_filter_fval_delay_independent[%(evenCh)]"                optional="discard" />
            <aliasOption key="ftm_cnsc_icrst_independent[%(evenCh)]"        locked="false" optional="discard" />
            <aliasOption key="ftm_cnv_independent[%(evenCh)]"               locked="false" />
            <aliasOption key="ftm_cnvEventTime_independent[%(evenCh)]"      locked="false" />
            <aliasOption key="ftm_cnvHighTime_independent[%(evenCh)]"       locked="false" />
            <aliasOption key="ftm_cnvDutyCycle_independent[%(evenCh)]"      locked="false" />

            <!-- Odd channels -->
            <title description="Channel %(oddCh)" />

            <aliasOption key="ftm_cnsc_mode_independent[%(oddCh)]"         locked="false" />
            <aliasOption key="ftm_cnsc_action_independent[%(oddCh)]"       locked="false" />
            <aliasOption key="ftm_filter_fval_independent[%(oddCh)]"       locked="false" optional="discard" />
            <aliasOption key="ftm_filter_fval_delay_independent[%(oddCh)]"                optional="discard" />
            <aliasOption key="ftm_cnsc_icrst_independent[%(oddCh)]"        locked="false" optional="discard" />

            <aliasOption key="ftm_cnv_independent[%(oddCh)]"               locked="false" />
            <aliasOption key="ftm_cnvEventTime_independent[%(oddCh)]"      locked="false" />
            <aliasOption key="ftm_cnvHighTime_independent[%(oddCh)]"       locked="false" />
            <aliasOption key="ftm_cnvDutyCycle_independent[%(oddCh)]"      locked="false" />
         </list>
         <list name="*" hiddenBy="!channelPairing[%(evenCh)]" condition="ftm_combine_combine%(Num)_present">

            <!-- Paired channels -->
            <title description="Paired channels %(evenCh) &amp; %(oddCh)" />

            <aliasOption key="ftm_cnsc_mode_even[%(evenCh)]"    locked="false" />
            <aliasOption key="ftm_cnsc_secondEdge[%(oddCh)]"    locked="false" />
            <aliasOption key="ftm_cnsc_secondOutput[%(oddCh)]"  locked="false" />

            <aliasOption key="ftm_cnsc_icrst_paired[%(oddCh)]"  locked="false"  optional="discard" />

            <aliasOption key="ftm_cnv_paired[%(evenCh)]"        locked="false" />
            <aliasOption key="ftm_cnv_paired[%(oddCh)]"         locked="false" />
            <aliasOption key="ftm_pwmHighTime[%(evenCh)]"   />
            <aliasOption key="ftm_pwmDutyCycle[%(evenCh)]"  />

            <!-- Controlled by ftm_cnsc_mode_even
            <aliasOption key="ftm_combine_combine[%(Num)]"  />
            <aliasOption key="ftm_combine_decapen[%(Num)]"  />
            -->
            <aliasOption key="ftm_combine_decap%(Num)"      locked="false" />
            <aliasOption key="ftm_combine_comp%(Num)"       locked="false" />
            <aliasOption key="ftm_combine_faulten%(Num)"    locked="false" />
            <aliasOption key="ftm_combine_dten%(Num)"       locked="false" />
            <aliasOption key="ftm_combine_syncen%(Num)"     locked="false" />

            <aliasOption key="ftm_cnsc_action_paired[%(evenCh)]"  locked="false" />
            <aliasOption key="ftm_cnsc_action_paired[%(oddCh)]"   locked="false" />

            <aliasOption key="ftm_filter_fval_paired[%(evenCh)]"       locked="false" optional="discard" />
            <aliasOption key="ftm_filter_fval_delay_paired[%(evenCh)]"                optional="discard" />
            <aliasOption key="ftm_filter_fval_paired[%(oddCh)]"        locked="false" optional="discard" />
            <aliasOption key="ftm_filter_fval_delay_paired[%(oddCh)]"                 optional="discard" />

            <aliasOption key="ftm_cnsc_icrst_paired[%(ch)]"  locked="false"  optional="discard" />
            <aliasOption key="ftm_cnsc_icrst_paired[%(ch)]"  locked="false"  optional="discard" />
         </list>
      </for>
   </categoryOption>

   <categoryOption key="Miscellaneous" description="Miscellaneous"
      hiddenBy="mode==(None,Quad)"
   >
      <!-- not sensible to initialise these -->
      <!-- binaryOption key="ftm_mode_captest" condition="ftm_mode_captest_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmCaptestMode"
         description="Capture Test Mode Enable" >
         <choice name="Disabled"    value="0" enum="Disabled"/>
         <choice name="Enabled"     value="1" enum="Enabled"/>
      </binaryOption -->

      <binaryOption key="ftm_mode_wpdis" condition="ftm_mode_wpdis_present"
         locked="true"
         enabledBy="enablePeripheralSupport"
         typeName="FtmModeWpdis"
         description="Write Protection Disable"
         toolTip="This value is applied after main FTM configuration" >
         <choice name="Enabled"     value="0" enum="Enabled"  />
         <choice name="Disabled"    value="1" enum="Disabled" />
      </binaryOption >

      <binaryOption key="ftm_mode_ftmen" condition="ftm_mode_ftmen_present"
         locked="true"
         enabledBy="enablePeripheralSupport"
         typeName="FtmModeFtmen"
         description="FTM Mode Enable"
         toolTip="This field is write protected. It can be written only when MODE[WPDIS] = 1" >
         <choice name="TPM registers only"  value="0" enum="TpmRegistersOnly" />
         <choice name="All registers"       value="1" enum="AllRegisters"     isDefault="true" />
      </binaryOption >

      <choiceOption key="ftm_conf_bdmmode" condition="ftm_conf_bdmmode_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmConfBdmmode"
         toolTip="Selects the FTM behavior in Debug mode."
         description="Controls operation in BDM Mode" >
         <choice name="Stopped, outputs functional"            value="0" enum="Stopped_OutputsFunctional"/>
         <choice name="Stopped, outputs forced to safe value"  value="1" enum="Stopped_OutputsForcedToSafeValue"/>
         <choice name="Stopped, outputs frozen"                value="2" enum="Stopped_OutputsFrozen"/>
         <choice name="Functioning"                            value="3" enum="Functioning"/>
      </choiceOption >

      <intOption key="ftm_conf_numtof" condition="ftm_conf_numtof_present"
         enumType="uint8_t"
         enabledBy="enablePeripheralSupport"
         typeName="FtmOverflowDivider"
         description="TOF Frequency"
         toolTip="Selects the ratio between counter overflows and the number of times the TOF bit is set.\n
                  The TOF is set for the 1st overflow and then ignored for N further overflows."
         min="0" max="31"
         value="0"
      />

      <title description="Global timebase" />

      <binaryOption key="ftm_conf_gtbeout" condition="ftm_conf_gtbeout_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmConfGtbeout"
         description="Global Time Base Output"
         toolTip="Enables the global time base signal generation to other FTMs" >
         <choice name="Disabled"    value="0" enum="Disabled"/>
         <choice name="Enabled"     value="1" enum="Enabled"/>
      </binaryOption >

      <binaryOption key="ftm_conf_gtbeen" condition="ftm_conf_gtbeen_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmConfGtbeen"
         description="External Global Time Base Enable"
         toolTip="Configures the FTM to use an external global time base signal that is generated by another FTM." >
         <choice name="Disabled"    value="0" enum="Disabled"/>
         <choice name="Enabled"     value="1" enum="Enabled"/>
      </binaryOption >

   </categoryOption>

    <categoryOption key="load_points" description="Load Points"
      hiddenBy="mode==(None,Quad)" >

      <binaryOption key="ftm_pwmload_ldok" condition="ftm_pwmload_ldok_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmPwmload"
         description="Load Enable"
         toolTip="Enables loading of MOD/CNTIN/CnV from buffers on load points.\n
                  Loading is further qualified as follows:\n
                  - MOD loading is unconditional\n
                  - CNTIN is qualified by CNTINC\n
                  - C(n)/C(n+1) is qualified by SYNCENm" >
         <choice name="Loading disabled"  value="0" enum="Disabled"/>
         <choice name="Loading enabled"   value="1" enum="Enabled"/>
      </binaryOption >

      <bitmaskOption key="ftm_pwmload_chsel" condition="ftm_pwmload_present"
         enabledBy="enablePeripheralSupport"
         enumType="uint16_t"
         typeName="FtmLoad"
         description="Match Channel Select"
         toolTip="Selects which channels trigger loading of MOD/CNTIN/CnV from buffers\n
                  If enabled, the loading occurs when the counter reaches CnV"
         bitmask="0xFF"
         bitList="CH%i"
         bitDescription="Load on channel %i match"
      />

      <binaryOption key="ftm_sync_cntmin" condition="ftm_sync_cntmin_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmSyncCntmin"
         description="Minimum Loading Point Enable"
         toolTip="Selects the minimum loading point for loading of MOD/CNTIN/CnV from buffers. \n
                  If enabled, the loading occurs when the FTM counter reaches CNTIN." >
         <choice name="Disabled"    value="0" enum="Disabled"/>
         <choice name="Enabled"     value="1" enum="Enabled"/>
      </binaryOption >

      <binaryOption key="ftm_sync_cntmax" condition="ftm_sync_cntmax_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmSyncCntmax"
         description="Maximum Loading Point Enable"
         toolTip="Selects the maximum loading point for loading of MOD/CNTIN/CnV from buffers.\n
                  If enabled, the loading occurs when the FTM counter reaches MOD." >
         <choice name="Disabled"    value="0" enum="Disabled"/>
         <choice name="Enabled"     value="1" enum="Enabled"/>
      </binaryOption >
   </categoryOption>

   <categoryOption key="chanelInitialisation" description="Initialisation of Channel Outputs" hiddenBy="mode==(None,Quad)" >

      <binaryOption key="ftm_mode_init" condition="ftm_mode_init_present"
         hiddenBy="mode==Quad"
         enabledBy="enablePeripheralSupport"
         typeName="FtmInitialiseOutputs"
         description="Initialisation of Channel Outputs"
         toolTip="When written to 1 the channels outputs are initialised according to the state of\n
                  their corresponding bit in the OUTINIT register\n
                  This is applied after the main FTM configuration" >
         <choice name="No initialisation" value="0" enum="Unchanged"/>
         <choice name="Initialised"       value="1" enum="Initialised"/>
      </binaryOption >

      <!-- ____ OUTINIT __________________ -->
      <bitmaskOption key="ftm_outinit_choi" condition="ftm_outinit_choi_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="%s"
         typeName="FtmInitialValue"
         enumType="uint8_t"
         enumText="\t   FtmInitialValue_AllLow  = 0x00,\n\t   FtmInitialValue_AllHigh = 0xFF"
         description="Channel Output Initialization Value"
         toolTip="Bitmask defining the value that is forced\n
                  into the channel output when initialisation occurs."
         value="0"
         bitmask="0"
         bitList="CH(0-7)" />

   </categoryOption>

   <!-- ____ SWOCTRL __________________ -->

   <!-- Not sensible to configure statically -->
   <choiceOption key="ftm_swoctrl_chNocv"
      condition="/FTM0/ftm_swoctrl_ch0oc_present||/FTM1/ftm_swoctrl_ch0oc_present||
                 /FTM2/ftm_swoctrl_ch0oc_present||/FTM3/ftm_swoctrl_ch0oc_present"
      hidden="true"
      valueFormat="(%s)"
      enabledBy="enablePeripheralSupport"
      typeName="FtmForceOutput"
      description="Channel Output Control"
      toolTip="Enables and selects value to force to channel output\n
               Each value controls an individual bit\n
               Non-conflicting values may be ORed together to affect multiple bits" >
      <choice name="No outputs forced"  value="0" enum="NotForced" />
      <choiceExpansion name="Force Ch%(ch) output 0" value="(1&lt;&lt;(%(ch)+8))|(0&lt;&lt;%(ch))" enum="Ch%(ch)Force0" dim="8" keys="ch" />
      <choiceExpansion name="Force Ch%(ch) output 1" value="(1&lt;&lt;(%(ch)+8))|(1&lt;&lt;%(ch))" enum="Ch%(ch)Force1" dim="8" keys="ch" />
   </choiceOption >

  <!-- ____ PWM synchronisation ________________ -->

   <categoryOption key="synchronisationConfiguration" description="Synchronisation Configuration"
      hiddenBy="mode!=(Left,Centre)" toolTip="Only applies in combine mode" >

      <binaryOption key="ftm_synconf_syncmode" condition="ftm_synconf_syncmode_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmSyncPwm"
         description="Synchronisation Mode"
         toolTip="Selects the PWM synchronisation mode" >
         <choice name="Legacy PWM synchronisation"    value="0" enum="LegacyPwmSynch"   />
         <choice name="Enhanced PWM synchronisation"  value="1" enum="EnhancedPwmSynch" />
      </binaryOption >

      <binaryOption key="ftm_mode_pwmsync" condition="ftm_mode_pwmsync_present"
         hiddenBy="ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;!ftm_synconf_syncmode"
         typeName="FtmModePwmsync"
         description="PWM Synchronisation Mode"
         toolTip="Selects which triggers can be used by MOD, CnV, OUTMASK, and FTM\n
                  counter synchronisation.\n
                  Only available in legacy PWM synchronisation (SYNCMODE = 0)." >
         <choice name="Unrestricted"  value="0" enum="NoRestrictions"
               toolTip="MOD, CnV, OUTMASK and FTM counter synch may use software or hardware trigger" />
         <choice name="Restricted"    value="1" enum="Restricted"
               toolTip="MOD and CnV use software trigger, OUTMASK and counter synch use hardware trigger" />
      </binaryOption >

      <binaryOption key="ftm_sync_reinit" condition="ftm_sync_reinit_present"
         hiddenBy="ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;!ftm_synconf_syncmode"
         typeName="FtmReinitOnSync"
         description="Counter Reinitialisation"
         toolTip="Determines if the FTM counter is reinitialised when \n
                  the selected synchronisation trigger is detected. \n
                  Only available in legacy PWM synchronisation (SYNCMODE = 0)." >
         <choice name="Counts normally"                        value="0" enum="Disabled"/>
         <choice name="Updated with initial value on trigger"  value="1" enum="Enabled"/>
      </binaryOption >

      <binaryOption key="ftm_sync_swsync" condition="ftm_sync_swsync_present"
         hidden="true"
         derived="true"
         typeName="FtmSyncSwsync"
         description="Software Trigger for PWM synchronisation "
         toolTip="The software trigger happens when a 1 is written to SWSYNC bit.\n
                  This bit will be cleared when the action happens." >
         <choice name="Not selected"  value="0" enum="NotSelected"/>
         <choice name="Selected"      value="1" enum="Selected"/>
      </binaryOption >

      <bitmaskOption key="ftm_sync_trig" condition="hardwareTriggerPinMap"
         enabledBy="enablePeripheralSupport"
         typeName="FtmHardwareTrigger"
         enumType="uint32_t"
         valueFormat="FtmHardwareTrigger(%s)"
         description="Hardware Trigger Inputs"
         toolTip="Enables hardware trigger to the PWM synchronisation.\n
                  Hardware trigger occurs on a rising edge of the corresponding trigger input signal."
         bitmask="0"
         bitList="=hardwareTriggerPinMap"
         pinMap='="FTM$(_instance)_TRIG%i:"+hardwareTriggerPinMap'
         value="0" />

      <binaryOption key="ftm_synconf_hwtrigmode" condition="ftm_synconf_hwtrigmode_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode"
         typeName="FtmTriggerSyncr"
         description="Hardware Trigger Mode"
         toolTip="Controls when hardware triggers are cleared\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="TRIGj cleared on trigger detect"  value="0" enum="OnTrigger"/>
         <choice name="TRIGj unaffected"                 value="1" enum="Unaffected"/>
      </binaryOption >

      <title />

      <!-- .... CNTIN .... -->

      <binaryOption key="ftm_synconf_cntinc" condition="ftm_synconf_cntinc_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode"
         typeName="FtmBufferSyncCounter"
         description="CNTIN Register Synchronisation"
         toolTip="CNTIN Register Synchronisation with buffer\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="On rising edges of system clock"  value="0" enum="OnRisingClockEdge" />
         <choice name="By PWM synchronisation"           value="1" enum="OnPwmSynch"        />
      </binaryOption >

      <!-- .... CNTIN/MOD/CV .... -->

      <binaryOption key="ftm_synconf_swwrbuf" condition="ftm_synconf_swwrbuf_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode"
         typeName="FtmSwSyncRegs"
         description="CNTIN/MOD/CV Software Synchronisation"
         toolTip="Controls MOD/CNTIN/CV synchronisation by software trigger\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="Unaffected"                      value="0" enum="Unaffected"/>
         <choice name="MOD/CNTIN/CV register synched"   value="1" enum="OnSoftwareTrigger"/>
      </binaryOption >

      <binaryOption key="ftm_synconf_hwwrbuf" condition="ftm_synconf_hwwrbuf_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode"
         typeName="FtmHwSyncRegs"
         description="CNTIN/MOD/CV Hardware Synchronisation"
         toolTip="Controls MOD/CNTIN/CV synchronisation by hardware trigger\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="Unaffected"                       value="0" enum="Unaffected"/>
         <choice name="MOD/CNTIN/CV registers synched"   value="1" enum="OnHardwareTrigger"/>
      </binaryOption >

      <!-- .... OUTMASK .... -->

      <binaryOption key="ftm_sync_synchom" condition="ftm_sync_synchom_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmSyncSynchom"
         description="OUTMASK Register Synchronisation"
         toolTip="Selects when the OUTMASK register is updated with the value of its buffer" >
         <choice name="On rising edges of system clock"  value="0" enum="OnRisingClockEdge" />
         <choice name="By PWM synchronisation"           value="1" enum="OnPwmSynch"        />
      </binaryOption >

      <binaryOption key="ftm_synconf_swom" condition="ftm_synconf_swom_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode&amp;&amp;ftm_sync_synchom"
         typeName="FtmSwSyncOutmask"
         description="OUTMASK Software Synchronisation"
         toolTip="Controls OUTMASK synchronisation by software trigger\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="Unaffected"                 value="0" enum="Unaffected"/>
         <choice name="OUTMASK register synched"   value="1" enum="OnSoftwareTrigger"/>
      </binaryOption >

      <binaryOption key="ftm_synconf_hwom" condition="ftm_synconf_hwom_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode&amp;&amp;ftm_sync_synchom"
         typeName="FtmHwSyncOutmask"
         description="OUTMASK Hardware Synchronisation"
         toolTip="Controls OUTMASK synchronisation by hardware trigger\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="Unaffected"                 value="0" enum="Unaffected"/>
         <choice name="OUTMASK register synched"   value="1" enum="OnHardwareTrigger"/>
      </binaryOption >

      <!-- .... INVCTRL .... -->

      <binaryOption key="ftm_synconf_invc" condition="ftm_synconf_invc_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmBufferSyncInvctrl"
         description="INVCTRL Register Synchronisation"
         toolTip="Controls INVCTRL Register Synchronisation with buffer" >
         <choice name="On rising edges of system clock"  value="0" enum="OnRisingClockEdge" />
         <choice name="By PWM synchronisation"           value="1" enum="OnPwmSynch"        />
      </binaryOption >

      <binaryOption key="ftm_synconf_swinvc" condition="ftm_synconf_swinvc_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode&amp;&amp;ftm_synconf_invc"
         typeName="FtmSwSyncInvCtrl"
         description="INVCTRL Software Synchronisation"
         toolTip="Controls INVCTRL synchronisation by software trigger\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="Unaffected"                 value="0" enum="Unaffected"/>
         <choice name="INVCTRL register synched"   value="1" enum="OnSoftwareTrigger"/>
      </binaryOption >

      <binaryOption key="ftm_synconf_hwinvc" condition="ftm_synconf_hwinvc_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode&amp;&amp;ftm_synconf_invc"
         typeName="FtmHwSyncInvctrl"
         description="INVCTRL Hardware Synchronisation"
         toolTip="Controls INVCTRL synchronisation by hardware trigger\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="Unaffected"                 value="0" enum="Unaffected"/>
         <choice name="INVCTRL register synched"   value="1" enum="OnHardwareTrigger"/>
      </binaryOption >

      <!-- .... SWOCTRL .... -->

      <binaryOption key="ftm_synconf_swoc" condition="ftm_synconf_swoc_present"
         enabledBy="enablePeripheralSupport"
         typeName="FtmBufferSyncSwoctrl"
         description="SWOCTRL Register Synchronisation"
         toolTip="Controls SWOCTRL Register Synchronisation with buffer" >
         <choice name="On rising edges of system clock"  value="0" enum="OnRisingClockEdge" />
         <choice name="By PWM synchronisation"           value="1" enum="OnPwmSynch"        />
      </binaryOption >

      <binaryOption key="ftm_synconf_swsoc" condition="ftm_synconf_swsoc_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode&amp;&amp;ftm_synconf_swoc"
         typeName="FtmSwSyncSwoctrl"
         description="SWOCTRL Software Synchronisation"
         toolTip="Controls SWOCTRL synchronisation by software trigger\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="Unaffected"                 value="0" enum="Unaffected"/>
         <choice name="SWOCTRL register synched"   value="1" enum="OnSoftwareTrigger"/>
      </binaryOption >

      <binaryOption key="ftm_synconf_hwsoc" condition="ftm_synconf_hwsoc_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode&amp;&amp;ftm_synconf_swoc"
         typeName="FtmHwSyncSwoctrl"
         description="SWOCTRL Hardware Synchronisation"
         toolTip="Controls SWOCTRL synchronisation by hardware trigger\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="Unaffected"                 value="0" enum="Unaffected"/>
         <choice name="SWOCTRL register synched"   value="1" enum="OnHardwareTrigger"/>
      </binaryOption >

      <!-- .... FTM CNT .... -->

      <binaryOption key="ftm_synconf_swrstcnt" condition="ftm_synconf_swrstcnt_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode"
         typeName="FtmSwSyncCounter"
         description="CNT Software Synchronisation"
         toolTip="Controls counter synchronisation by software trigger\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="Unaffected"                 value="0" enum="Unaffected"/>
         <choice name="Counter register synched"   value="1" enum="OnSoftwareTrigger"/>
      </binaryOption >

      <binaryOption key="ftm_synconf_hwrstcnt" condition="ftm_synconf_hwrstcnt_present"
         hiddenBy="!ftm_synconf_syncmode"
         enabledBy="enablePeripheralSupport&amp;&amp;ftm_synconf_syncmode"
         typeName="FtmHwSyncCounter"
         description="CNT Hardware Synchronisation"
         toolTip="Controls Counter synchronisation by hardware trigger\n
                  Only available in enhanced PWM synchronisation (SYNCMODE = 1)." >
         <choice name="Unaffected"                 value="0" enum="Unaffected"/>
         <choice name="Counter register synched"   value="1" enum="OnHardwareTrigger"/>
      </binaryOption >

      <!-- .... External Triggers .... -->
      <title description="External Trigger" />

      <equation key="triggerChannels" value="" />
      <for keys="ch" values="2;3;4;5;0;1" >
         <equation key="triggerChannels"
            condition="ftm_exttrig_ch%(ch)trig_present"
            value='=triggerChannels+"CH%(ch),"'
          />
         <equation key="triggerChannels"
            condition="!ftm_exttrig_ch%(ch)trig_present"
            value='=triggerChannels+","'
          />
      </for>

      <equation key="triggerChannels"
         condition="ftm_exttrig_inittrigen_present"
         value='=triggerChannels+"CNTIN,"' />

      <bitmaskOption key="ftm_exttrig_trig" condition="ftm_exttrig_inittrigen_present"
         enabledBy="enablePeripheralSupport"
         description="External Trigger Enable"
         toolTip="Bitmask enabling generation of the external trigger when the FTM\n
                  counter is equal to a channel CnV register or CNTIN"
         valueFormat="%s"
         typeName="FtmExternalTrigger"
         enumType="uint8_t"
         value="0"
         bitmask="0"
         bitList="=triggerChannels"
         bitDescription="Trigger on CNV = %n"
         />
      <deleteVariables variables="triggerChannels" />
   </categoryOption>

   <!-- ____ Fault Control __________________ -->
   <constant key="_control" />
   <xi:include href="ftm_fault.xml"/>
   <deleteVariables variables="_control"/>

   <!-- ____ Quadrature decoder __________________ -->
   <constant key="_control" />
   <xi:include href="ftm_quadrature_decoder.xml"/>
   <deleteVariables variables="_control"/>

<!-- Info class members-->

   <variableTemplate variables="minimumResolution"
   ><![CDATA[
      \t// %description
      \tstatic constexpr uint32_t minimumResolution  = $(?check_minimums:$(minimumResolution):0);\n\n
   ]]></variableTemplate>

   <variableTemplate variables="minimumInterval"
   ><![CDATA[
      \t// %description
      \tstatic constexpr uint32_t minimumInterval  = $(?check_minimums:$(minimumInterval):0);\n\n
   ]]></variableTemplate>

   <variableTemplate key="/$(_BASENAME)/static_functions" where="all"
     discardRepeats="true"
      variables="ftm_sc_cpwms,ftm_sc_clks,ftm_sc_ps"
      nonDefaultParams="2"
   ><![CDATA[
      \t/**
      \t * Enables clock to peripheral and configures all pins.
      \t * Configures main operating settings for timer.
      \t *
      %paramDescription
      \t */
      \tstatic void configure(
      %params) {
      \t
      \t   // Enable clock to peripheral
      \t   Info::enable();
      \t
      \t   // Disable timer to change settings
      \t   %register = 0;
      \t
      \t   // Make sure write has completed (disabled)
      \t   (void)(%register);
      \t
      \t   // Write new value
      \t   %register = %paramExpression;
      \t}\n\n
   ]]></variableTemplate>

<!--  ___ Static/Non-Static Methods ______________ -->
   <for  keys="    k                   : static    : const    : getInputClockFrequency         : channel : Ftm       : isStatic : namespace"
         values=" non_static_functions : ''        : ' const' : getInputClockFrequencyVirtual  : CHANNEL : FtmBase   : false    : all;
                  static_functions     : 'static ' : ''       : 'Info::getInputClockFrequency' : channel : OwningFtm : true     : forceInfo
   " >
      <variableTemplate key="/$(_BASENAME)/%(k)" where="all"
         discardRepeats="true"
         variables="ftm_sc_clks,ftm_sc_ps"
         nonDefaultParams="2"
      ><![CDATA[
         \t/**
         \t * Stop timer counter.
         \t * This simply disables the counter clock source. \n
         \t * To restart use setClockSource() or configure();
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note A illegal access trap will occur if the timer has not been enabled
         \t */
         \t%(static)void stopCounter()%(const) {
         \t  %register = (%register&~%mask0);
         \t}
         \t
         \t/**
         \t * Set %description0 and %description1
         \t *
         %paramDescription
         \t */
         \t%(static)void selectClock(
         %params)%(const) {
         \t
         \t   // Calculate new SC value
         \t   uint32_t %registerName = (%register&~%mask)|(%paramExpression);
         \t
         \t   // Disable timer to change clock (unable to switch directly between clock sources)
         \t   %register=0;
         \t
         \t   // Make sure write has completed (disabled)
         \t   (void)(%register);
         \t
         \t   // Write new value
         \t   %register = %registerName;
         \t}\n\n
      ]]></variableTemplate>

      <for keys="  f            :  n"
         values=" ftm_sc_cpwms  : CountMode;
                  ftm_sc_clks   : ClockSource;
                  ftm_sc_ps     : Prescaler" >
         <variableTemplate key="/$(_BASENAME)/%(k)" where="all"
            discardRepeats="true"
            variables="%(f)"
            nonDefaultParams="2"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            %paramDescription
            \t *
            \t * @note This function will affect all channels of the timer.
            \t * @note The timer will be disabled while making changes.
            \t */
            \t%(static)void set%(n)(%params)%(const) {
            \t
            \t   // Calculate new SC value
            \t   uint32_t %registerName = (%register&~%mask)|(%paramExpression);

            \t   // Disable timer to change clock (unable to switch directly between clock sources)
            \t   %register=0;

            \t   // Make sure write has completed (disabled)
            \t   (void)(%register);

            \t   // Write new value
            \t   %register = %registerName;
            \t}
            \t
            \t/**
            \t * Get %description
            \t *
            %paramDescription
            \t */
            \t%(static)%paramType get%(n)()%(const) {
            \t
            \t   return (%paramType)(%register&~%mask);
            \t}\n\n
         ]]></variableTemplate>
      </for>

      <for keys="  f           :  n"
         values=" ftm_mod      : CounterMaximumValue" >
         <variableTemplate key="/$(_BASENAME)/%(k)" where="all"
            discardRepeats="true"
            variables="%(f)"
            nonDefaultParams="2"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t * This value is write-buffered and updated by CNTIN synchronisation
            \t *
            %paramDescription
            \t *
            \t * @note This function will affect all channels of the timer.
            \t */
            \t%(static)void set%(n)(%params)%(const) {
            \t
            \t   // Write new value
            \t   %register = %paramExpression;
            \t}
            \t
            \t/**
            \t * Get %description
            \t *
            %paramDescription
            \t */
            \t%(static)%paramType get%(n)()%(const) {
            \t
            \t   return (%paramType)%register;
            \t}\n\n
         ]]></variableTemplate>
      </for>

      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Calculate FTM timing parameters to achieve a given period
         \t *
         \t * @param[in]    period  Period in seconds
         \t * @param[inout] sc      Proposed FTM.SC value (must include CLKS, CPWMS fields)
         \t *                       PS field is updated
         \t * @param[out]   mod     Calculated FTM.MOD values
         \t *
         \t * @return E_NO_ERROR   Success!!
         \t * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled)
         \t * @return E_TOO_LARGE  Requested period is too large
         \t */
         \t%(static)ErrorCode calculateTimingParameters(Seconds period, uint8_t &sc, uint16_t &mod)%(const) {
         \t
         \t   float inputClock = %(getInputClockFrequency)((FtmClockSource)(sc&FTM_SC_CLKS_MASK));
         \t   unsigned prescaleFactor=1;
         \t   unsigned prescalerValue=0;
         \t
         \t   // Check if CPWMS is set (affects period calculation)
         \t   bool centreAligned = (sc&FTM_SC_CPWMS_MASK);
         \t
         \t   constexpr uint32_t maxModValue = FTM_MOD_MOD_MASK;
         \t
         \t   while (prescalerValue<=7) {
         \t      float clock    = inputClock/prescaleFactor;
         \t      float modValueF = period*clock;
         \t      if (centreAligned) {
         \t         // PeriodInTicks = 2*MOD
         \t         modValueF = modValueF/2;
         \t      }
         \t      else {
         \t         // PeriodInTicks = MOD+1
         \t         modValueF = modValueF - 1;
         \t      }
         \t      unsigned modValue = round(modValueF);\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" codeGenCondition="%(isStatic)" ><![CDATA[
         \t      if constexpr (Info::minimumResolution>0) {
         \t         if (modValue < Info::minimumResolution) {
         \t            usbdm_assert(false, "Interval is too short");
         \t            // Too short a period for minimum resolution
         \t            return setErrorCode(E_TOO_SMALL);
         \t         }
         \t      }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" ><![CDATA[
         \t      if (modValue <= maxModValue) {
         \t         sc   = (sc&~FTM_SC_PS_MASK)|FTM_SC_PS(prescalerValue);
         \t         mod  = modValue;
         \t         return E_NO_ERROR;
         \t      }
         \t      prescalerValue++;
         \t      prescaleFactor <<= 1;
         \t   }
         \t   // Too long a period
         \t   usbdm_assert(false, "Interval is too long");
         \t   return setErrorCode(E_TOO_LARGE);
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Set period
         \t *
         \t * @param[in] period   Period in seconds as a float
         \t *
         \t * @return E_NO_ERROR  => success
         \t * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
         \t * @return E_TOO_LARGE  Requested period is too large.
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note Adjusts Timer pre-scaler to appropriate value.
         \t * @note The counter load value (CNTIN) is cleared
         \t * @note The counter modulo value (MOD) is modified to obtain the requested period
         \t * @note The Timer is stopped while being modified.
         \t * @note The Timer counter is restarted from zero
         \t */
         \t%(static)ErrorCode setPeriod(Seconds period)%(const) {
         \t
         \t   uint16_t modValue = 0;
         \t
         \t   uint8_t sc = ftm->SC;
         \t
         \t   ErrorCode rc = calculateTimingParameters(period, sc, modValue);
         \t
         \t   if (rc != E_NO_ERROR) {
         \t      return rc;
         \t   }
         \t   // Disable timer to change prescaler and period
         \t   ftm->SC  = 0;
         \t
         \t   // Configure for modulo operation
         \t   ftm->MOD = modValue;
         \t
         \t   // Clear counter
         \t   ftm->CNT = 0;
         \t
         \t   // Set prescale and enable timer
         \t   ftm->SC  = sc;
         \t
         \t   return E_NO_ERROR;
         \t}
         \t
         \t/**
         \t * Set maximum interval for input-capture or output compare.
         \t * Input Capture and Output Compare will be able to operate over
         \t * at least this period without overflow.
         \t *
         \t * @param[in] interval Interval in seconds as a float
         \t *
         \t * @return E_NO_ERROR  => success
         \t * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
         \t * @return E_TOO_LARGE  Requested period is too large.
         \t *
         \t * @note This function will affect all channels of the timer.
         \t * @note Adjusts Timer pre-scaler to appropriate value.
         \t * @note Counter is configured for free-running mode i.e. 0-65535
         \t * @note The Timer is stopped while being modified.
         \t * @note The Timer counter is restarted from zero
         \t */
         \t%(static)ErrorCode setMaximumInterval(Seconds interval)%(const) {
         \t
         \t   uint16_t       modValue;
         \t
         \t   uint8_t sc = ftm->SC;
         \t
         \t   ErrorCode rc = calculateTimingParameters(interval, sc, modValue);
         \t   if (rc != E_NO_ERROR) {
         \t      return rc;
         \t   }
         \t
         \t   // Disable timer to change prescaler and period
         \t   ftm->SC  = 0;
         \t
         \t   // Configure for free-running mode
         \t   // This is the usual value for IC or OC set-up
         \t   ftm->MOD = 0_ticks;
         \t
         \t   // Clear counter
         \t   ftm->CNT = 0;
         \t
         \t   // Set prescale and enable timer
         \t   ftm->SC  = sc;
         \t
         \t   return E_NO_ERROR;
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Get frequency of timer tick
         \t *
         \t * @return Timer frequency in Hz
         \t */
         \t%(static)float getTickFrequencyAsFloat()%(const) {
         \t
         \t   // Calculate timer prescale factor
         \t   float prescaleFactor = 1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT);
         \t
         \t   return %(getInputClockFrequency)((FtmClockSource)(ftm->SC&FTM_SC_CLKS_MASK))/prescaleFactor;
         \t}
         \t
         \t/**
         \t * Get clock frequency
         \t *
         \t * @return Frequency as a uint32_t in Hz (may underflow)
         \t */
         \t%(static)uint32_t getTickFrequencyAsInt()%(const) {
         \t
         \t   // Calculate timer prescale factor
         \t   int prescaleFactor = 1<<((ftm->SC&FTM_SC_PS_MASK)>>FTM_SC_PS_SHIFT);
         \t
         \t   return %(getInputClockFrequency)((FtmClockSource)(ftm->SC&FTM_SC_CLKS_MASK))/prescaleFactor;
         \t}\n\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Convert time in microseconds to time in ticks
         \t *
         \t * @param[in] time Time in microseconds
         \t *
         \t * @return Time in ticks
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
         \t * @note Will set error code if calculated value is less the Timer minimum resolution
         \t */
         \t%(static)Ticks convertMicrosecondsToTicks(int time)%(const) {
         \t
         \t   // Calculate period
         \t   uint32_t tickRate = getTickFrequencyAsInt();
         \t   uint64_t rv       = (static_cast<uint64_t>(time)*tickRate)/1000000;
         \t   usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" codeGenCondition="%(isStatic)" ><![CDATA[
         \t   if constexpr (Info::minimumInterval>0) {
         \t      if (rv < Info::minimumInterval) {
         \t         // Attempt to set too short a period
         \t         setErrorCode(E_TOO_SMALL);
         \t      }
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" ><![CDATA[
         \t   return Ticks(uint32_t(rv));
         \t}
         \t
         \t/**
         \t * Converts time in seconds to time in ticks
         \t *
         \t * @param[in] seconds Time interval in seconds
         \t *
         \t * @return Time in ticks
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value (see setMaximumInterval()). \n
         \t * @note Will set error code if calculated value is less the minimum resolution
         \t */
         \t%(static)Ticks convertSecondsToTicks(Seconds seconds)%(const) {
         \t
         \t   // Calculate period
         \t   float    tickRate = getTickFrequencyAsFloat();
         \t   uint64_t rv       = rintf((float)seconds*tickRate);
         \t   usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" codeGenCondition="%(isStatic)" ><![CDATA[
         \t   if (rv < Info::minimumInterval) {
         \t      // Attempt to set too short a period
         \t      setErrorCode(E_TOO_SMALL);
         \t   }\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" ><![CDATA[
         \t   return Ticks(uint32_t(rv));
         \t}
         \t
         \t/**
         \t * Convert time in ticks to time in microseconds
         \t *
         \t * @param[in] timeInTicks Time in ticks
         \t *
         \t * @return Time in microseconds
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
         \t */
         \t%(static)uint32_t convertTicksToMicroseconds(Ticks timeInTicks)%(const) {
         \t
         \t   // Calculate period
         \t   uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000000)/getTickFrequencyAsInt();
         #ifdef DEBUG_BUILD
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }
         \t   if (rv == 0) {
         \t      // Attempt to set too short a period
         \t      setErrorCode(E_TOO_SMALL);
         \t   }
         #endif
         \t   return rv;
         \t}
         \t
         \t/**
         \t * Convert time in ticks to time in milliseconds
         \t *
         \t * @param[in] timeInTicks Time in ticks
         \t *
         \t * @return Time in milliseconds
         \t *
         \t * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
         \t */
         \t%(static)uint32_t convertTicksToMilliseconds(Ticks timeInTicks)%(const) {
         \t
         \t   // Calculate period
         \t   uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000)/getTickFrequencyAsInt();
         #ifdef DEBUG_BUILD
         \t   if (rv > 0xFFFFUL) {
         \t      // Attempt to set too long a period
         \t      setErrorCode(E_TOO_LARGE);
         \t   }
         \t   if (rv == 0) {
         \t      // Attempt to set too short a period
         \t      setErrorCode(E_TOO_SMALL);
         \t   }
         #endif
         \t   return rv;
         \t}
         \t
         \t/**
         \t * Convert time in ticks to time in seconds
         \t *
         \t * @param[in] timeInTicks Time in ticks
         \t *
         \t * @return Time in seconds
         \t */
         \t%(static)Seconds convertTicksToSeconds(Ticks timeInTicks)%(const) {
         \t   return static_cast<float>((unsigned)timeInTicks)/getTickFrequencyAsFloat();
         \t}
         \t/**
         \t * Get Timer count
         \t *
         \t * @return Timer count value
         \t */
         \t%(static)uint16_t getTime()%(const) {
         \t   return ftm->CNT;
         \t}
         \t\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Reset counter to initial value
         \t */
         \t%(static)void resetTime()%(const) {
         \t   // Note: writing ANY value loads CNT from CNTIN
         \t   ftm->CNT = 0;
         \t}
         \t
         \t/**
         \t * Get timer event flags
         \t *
         \t * @return Flags indicating if an event has occurred on a channel
         \t *         There is one bit for each channel
         \t */
         \t%(static)unsigned getInterruptFlags()%(const) {
         \t   return ftm->STATUS;
         \t}
         \t
         \t/**
         \t * Clear selected timer event flags
         \t *
         \t * @param channelMask Mask indicating which channel flags to clear
         \t *                    There is one bit for each channel
         \t *
         \t * @note Flags will not be cleared if the channel is configured for DMA
         \t */
         \t%(static)void clearSelectedInterruptFlags(uint32_t channelMask)%(const) {
         \t   (void)ftm->STATUS;
         \t   ftm->STATUS = ~channelMask;
         \t}
         \t
         \t/**
         \t * Clear timer overflow event flag
         \t */
         \t%(static)void clearOverflowInterruptFlag()%(const) {
         \t   // Clear TOI flag (w0c)
         \t   ftm->SC = ftm->SC & ~FTM_SC_TOF_MASK;
         \t}
         \t
         \t/**
         \t * Get and clear timer event flags
         \t *
         \t * @return Flags indicating if an event has occurred on a channel
         \t *         There is one bit for each channel
         \t *
         \t * @note Only flags captured in the return value are cleared
         \t * @note Flags will not be cleared if the channel is configured for DMA
         \t */
         \t%(static)unsigned getAndClearInterruptFlags()%(const) {
         \t   // Note requires read and write zero to clear flags
         \t   // so only flags captured in status are cleared
         \t   unsigned status = ftm->STATUS;
         \t   ftm->STATUS = ~status;
         \t   return status;
         \t}
         \t\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="%(namespace)" discardRepeats="true" condition="ftm_exttrig_inittrigen_present&amp;&amp;%(isStatic)" ><![CDATA[
         \t/**
         \t * Enables/disable external trigger generation by a channel comparison or initialisation event
         \t *
         \t * @param[in] ftmExternalTrigger Indicates the event to cause the external trigger
         \t * @param[in] enable             Whether to enable/disable the specified trigger
         \t */
         \t%(static)void enableExternalTrigger(FtmExternalTrigger ftmExternalTrigger, bool enable=true)%(const) {
         \t   if (enable) {
         \t      ftm->EXTTRIG = ftm->EXTTRIG | ftmExternalTrigger;
         \t   }
         \t   else {
         \t      ftm->EXTTRIG = ftm->EXTTRIG & ~ftmExternalTrigger;
         \t   }
         \t}
         \t
         \t/**
         \t * Enables multiple external trigger generation on a channel comparison or initialisation event
         \t *
         \t * @param[in] externalTriggers Indicates the events to cause the external trigger. \n
         \t *                             Construct from ORed FtmExternalTrigger flags e.g. FtmExternalTrigger_ch0|FtmExternalTrigger_ch3
         \t * @param[in] enable           Whether to enable/disable the specified triggers
         \t */
         \t%(static)void enableExternalTriggers(int externalTriggers, bool enable=true)%(const) {
         \t   enableExternalTrigger(FtmExternalTrigger(externalTriggers), enable);
         \t}
         \t\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" ><![CDATA[
         \t/**
         \t * Enable/disable Timer Overflow interrupts
         \t */
         \t%(static)void enableTimerOverflowInterrupts()%(const) {
         \t   ftm->SC = ftm->SC | FTM_SC_TOIE_MASK;
         \t}
         \t
         \t/**
         \t * Disable Timer Overflow interrupts
         \t */
         \t%(static)void disableTimerOverflowInterrupts()%(const) {
         \t   ftm->SC = ftm->SC & ~FTM_SC_TOIE_MASK;
         \t}
         \t\n
      ]]></template>

      <template key="/$(_BASENAME)/%(k)" namespace="%(namespace)" discardRepeats="true" condition="ftm_mode_faultie_present" ><![CDATA[
         \t/**
         \t * Enable fault interrupts
         \t */
         \t%(static)void enableFaultInterrupt()%(const) {
         \t   ftm->MODE = ftm->MODE | FTM_MODE_FAULTIE_MASK;
         \t}
         \t
         \t/**
         \t * Disable fault interrupts
         \t */
         \t%(static)void disableFaultInterrupt()%(const) {
         \t   ftm->MODE = ftm->MODE & ~FTM_MODE_FAULTIE_MASK;
         \t}
         \t
         \t/**
         \t *  Disables fault detection input
         \t *
         \t *  @tparam inputNum        Number of fault input to enable (0..3)
         \t */
         \ttemplate<int inputNum>
         \t%(static)void disableFault()%(const) {
         \t   static_assert(inputNum<=4, "Illegal fault channel");
         \t
         \t   // Enable fault on channel
         \t   ftm->FLTCTRL = ftm->FLTCTRL & ~(1<<inputNum);
         \t}
         \t
         \t/**
         \t *  Enables fault detection input
         \t *
         \t *  @tparam inputNum           Number of fault input to enable (0..3)
         \t *
         \t *  @param[in]  polarity       Polarity of fault input
         \t *  @param[in]  filterEnable   Whether to enable filtering on the fault input
         \t *  @param[in]  filterDelay    Delay used by the filter (1..15) - Applies to all channels
         \t *
         \t *  NOTE - the filter delay is shared by all inputs
         \t */
         public:
         \ttemplate<uint8_t inputNum>
         \t%(static)void enableFault(
         \t      Polarity polarity     = ActiveHigh,
         \t      bool     filterEnable = false,
         \t      uint32_t filterDelay  = FTM_FLTCTRL_FFVAL_MASK>>(FTM_FLTCTRL_FFVAL_SHIFT+1))%(const) {
         \t\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="%(namespace)" condition="/PCR/_present&amp;&amp;ftm_mode_faultie_present" codeGenCondition="%(isStatic)" ><![CDATA[
         #ifdef DEBUG_BUILD
         \t   static_assert((inputNum<InfoFAULT::numSignals), "FtmBase_T: Illegal fault channel");
         \t   static_assert((inputNum>=InfoFAULT::numSignals)||(InfoFAULT::info[inputNum].pinIndex != PinIndex::UNMAPPED_PCR), "FtmBase_T: Fault signal is not mapped to a pin - Modify Configure.usbdm");
         \t   static_assert((inputNum>=InfoFAULT::numSignals)||(InfoFAULT::info[inputNum].pinIndex != PinIndex::INVALID_PCR),  "FtmBase_T: Non-existent signal used for fault input");
         \t   static_assert((inputNum>=InfoFAULT::numSignals)||(InfoFAULT::info[inputNum].pinIndex == PinIndex::UNMAPPED_PCR)||(InfoFAULT::info[inputNum].pinIndex == PinIndex::INVALID_PCR)||(InfoFAULT::info[inputNum].pinIndex >= PinIndex::MIN_PIN_INDEX), "Pcr_T: Illegal signal used for fault");
         #endif
         \t\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="%(namespace)" condition="/PCR/_present&amp;&amp;ftm_mode_faultie_present" codeGenCondition="%(isStatic)" ><![CDATA[
         \t   PcrTable_T<InfoFAULT, inputNum>::setPCR();
         \t\n
      ]]></template>
      <template key="/$(_BASENAME)/%(k)" namespace="%(namespace)" discardRepeats="true" condition="ftm_mode_faultie_present" ><![CDATA[
         \t   if (polarity) {
         \t      // Set active high
         \t      ftm->FLTPOL = ftm->FLTPOL & ~(1<<inputNum);
         \t   }
         \t   else {
         \t      // Set active low
         \t      ftm->FLTPOL = ftm->FLTPOL | (1<<inputNum);
         \t   }
         \t   if (filterEnable) {
         \t      // Enable filter & set filter delay
         \t      ftm->FLTCTRL = ((ftm->FLTCTRL) & ~(FTM_FLTCTRL_FFVAL_MASK)) | (1<<(inputNum+FTM_FLTCTRL_FFLTR0EN_SHIFT)) | FTM_FLTCTRL_FFVAL(filterDelay);
         \t   }
         \t   else {
         \t      // Disable filter
         \t      ftm->FLTCTRL = ftm->FLTCTRL & ~(1<<(inputNum+FTM_FLTCTRL_FFLTR0EN_SHIFT));
         \t   }
         \t   // Enable fault input
         \t   ftm->FLTCTRL = ftm->FLTCTRL | (1<<inputNum);
         \t   // Enable fault mode (All channels, manual)
         \t   ftm->MODE    = ftm->MODE | FTM_MODE_FAULTM(2);
         \t}\n\n
      ]]></template>

      <variableTemplate key="/$(_BASENAME)/%(k)" namespace="%(namespace)" discardRepeats="true"
         variables="ftm_pol_pol" ><![CDATA[
         \t/**
         \t * Set polarity of all channels
         \t *
         \t * @param channelMask   Bit mask 0 => active-high, 1 => active-low
         \t */
         \t%(static) void setPolarity(uint32_t channelMask)%(const) {
         \t   ftm->POL = channelMask;
         \t}
         \t
         \t/**
         \t * Set polarity of selected channel
         \t *
         \t * @param ftmPolarity  Channel polarity to set
         \t */
         \t%(static)void setPolarity(FtmPolarity ftmPolarity)%(const) {
         \t      uint8_t temp = ftm->POL;
         \t      temp |= ftmPolarity;
         \t      temp &= ftmPolarity>>8;
         \t      ftm->POL = temp;
         \t}\n\n
      ]]></variableTemplate>
      <template key="/$(_BASENAME)/%(k)" discardRepeats="true" ><![CDATA[
         \t/*
         \t * *****************************************************************
         \t *          Channel functions
         \t * *****************************************************************
         \t */
         \t/**
         \t * Set PWM duty cycle.
         \t * Higher precision float version
         \t *
         \t * @param[in] dutyCycle  Duty-cycle as percentage (float)
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note The actual CnV register update may be delayed by the Register Synchronisation mechanism
         \t */
         \t%(static)void setDutyCycle(float dutyCycle, int channel)%(const) {
         \t   if (ftm->SC&FTM_SC_CPWMS_MASK) {
         \t      ftm->CONTROLS[channel].CnV  = round((dutyCycle*ftm->MOD)/100.0f);
         \t   }
         \t   else {
         \t      ftm->CONTROLS[channel].CnV  = round((dutyCycle*(ftm->MOD+1))/100.0f);
         \t   }
         \t}
         \t
         \t/**
         \t * Set PWM duty cycle
         \t *
         \t * @param[in] dutyCycle  Duty-cycle as percentage
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note The actual CnV register update may be delayed by the Register Synchronisation mechanism
         \t */
         \t%(static)void setDutyCycle(int dutyCycle, int channel)%(const) {
         \t   if (ftm->SC&FTM_SC_CPWMS_MASK) {
         \t      ftm->CONTROLS[channel].CnV  = (dutyCycle*ftm->MOD)/100;
         \t   }
         \t   else {
         \t      ftm->CONTROLS[channel].CnV  = (dutyCycle*(ftm->MOD+1))/100;
         \t   }
         \t}
         \t
         \t/**
         \t * Set PWM high time in ticks
         \t * Assumes value is less than period
         \t *
         \t * @param[in] highTime   PWM high time in ticks
         \t * @param[in] channel    Timer channel
         \t *
         \t * @return E_NO_ERROR on success
         \t * @return E_TOO_LARGE on success
         \t *
         \t * @note The actual CnV register update may be delayed by the Register Synchronisation mechanism
         \t */
         \t%(static)ErrorCode setHighTime(Ticks highTime, int channel)%(const) {
         \t
         \t   if (ftm->SC&FTM_SC_CPWMS_MASK) {
         \t      // In CPWM the pulse width is doubled
         \t      highTime = Ticks((highTime+1_ticks)/2U);
         \t   }
         #ifdef DEBUG_BUILD
         \t   if ((unsigned)highTime > ftm->MOD) {
         \t      return setErrorCode(E_TOO_LARGE);
         \t   }
         #endif
         \t   ftm->CONTROLS[channel].CnV  = (unsigned)highTime;
         \t   return E_NO_ERROR;
         \t}
         \t
         \t/**
         \t * Get Timer event time
         \t *
         \t * @param[in] channel    Timer channel
         \t *
         \t * @return Absolute time of last event in ticks i.e. value from timer event register
         \t */
         \t%(static)Ticks getEventTime(int channel)%(const) {
         \t   return Ticks(ftm->CONTROLS[channel].CnV);
         \t}
         \t
         \t/**
         \t * Set Timer event time
         \t *
         \t * This value is write-buffered and updated by Cnv synchronisation.
         \t *
         \t * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
         \t * @param[in] channel    Timer channel
         \t */
         \t%(static)void setEventTime(Ticks eventTime, int channel)%(const) {
         \t   ftm->CONTROLS[channel].CnV = (unsigned)eventTime;
         \t}
         \t
         \t/**
         \t * Set Timer event time relative to current event time
         \t *
         \t * @param[in] offset     Event time in ticks relative to current event time (i.e. Timer channel CnV value)
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note This value is write-buffered and updated by CnV synchronisation.
         \t */
         \t%(static)void setDeltaEventTime(Ticks offset, int channel)%(const) {
         \t   ftm->CONTROLS[channel].CnV = ftm->CONTROLS[channel].CnV + (unsigned)offset;
         \t}
         \t
         \t/**
         \t * Set Timer event time relative to current timer count value
         \t *
         \t * @param[in] offset     Event time in ticks relative to current time (i.e. Timer CNT value)
         \t * @param[in] channel    Timer channel
         \t *
         \t * @note This value is write-buffered and updated by CnV synchronisation.
         \t */
         \t%(static)void setRelativeEventTime(Ticks offset, int channel)%(const) {
         \t   ftm->CONTROLS[channel].CnV = ftm->CNT + (unsigned)offset;
         \t}
         \t
         \t/**
         \t * Set PWM high time in seconds
         \t *
         \t * @param[in] highTime   PWM high time in seconds
         \t * @param[in] channel    Timer channel
         \t *
         \t * @return E_NO_ERROR on success
         \t *
         \t * @note The actual CnV register update may be delayed by the FTM Register Synchronisation mechanism
         \t */
         \t%(static)ErrorCode setHighTime(Seconds highTime, int channel)%(const) {
         \t   return setHighTime(convertSecondsToTicks(highTime), channel);
         \t}
         \t
         \t/**
         \t * Set initial state for channels outputs
         \t *
         \t * @param initialValue  Bit mask value for channels
         \t */
         \t%(static)void setOutputInitialValue(uint32_t initialValue)%(const) {
         \t   ftm->OUTINIT = initialValue;
         \t}
         \t
         \t/**
         \t * Set output mask for channels outputs
         \t *
         \t * The mask of a channel determines if its output responds, that is,
         \t * it is masked or not, when a match occurs
         \t * This value is write-buffered and updated by PWM synchronisation.
         \t *
         \t * @param maskValue  Bit mask value 0 => not masked, 1 => masked
         \t */
         \t%(static)void setOutputMaskValue(uint32_t maskValue)%(const) {
         \t   ftm->OUTMASK = maskValue;
         \t}
         \t
         \t/**
         \t * Set inverting control
         \t *
         \t * This controls when the channel (n) and (n+1) outputs are exchanged.
         \t * Each bit enables the inverting operation for the corresponding channels pair.
         \t * This value is write-buffered and updated by INVCTRL synchronisation.
         \t *
         \t * @param enableMask  Bit mask for channels (combination of FtmChannelPair)
         \t */
         \t%(static)void setInvertedChannelPairs(uint32_t enableMask)%(const) {
         \t   ftm->INVCTRL = enableMask;
         \t}
         \t
         \t/**
         \t * Force channel outputs
         \t *
         \t * This enables software control of channel output and
         \t * defines the value forced to the channel output.
         \t * This value is write-buffered and updated by SWOCTRL synchronisation.
         \t *
         \t * @param enableMask  Bit mask for channels to be forced: 1 => forced, 0 => released
         \t * @param outputMask  Bit mask for values to be forced to selected channels
         \t */
         \t%(static)void forceChannelOutputs(uint32_t enableMask, uint32_t outputMask)%(const) {
         \t   ftm->SWOCTRL = (enableMask&0xFF)|((outputMask<<8)&0xFF00);
         \t}
         \t
         \t/**
         \t * Force channel output
         \t *
         \t * This enables software control of channel output and
         \t * defines the value forced to the channel output.
         \t * This value is write-buffered and updated by SWOCTRL synchronisation.
         \t *
         \t * @param channel  Number of channel to be forced
         \t * @param value    Value to be forced on that channel
         \t */
         \t%(static)void forceChannelOutput(uint32_t channel, bool value)%(const) {
         \t   static constexpr unsigned FTM_SWOCTRL_CHxOC_SHIFT   = 0;
         \t   static constexpr unsigned FTM_SWOCTRL_CHxOCV_SHIFT  = 8;
         \t
         \t   uint32_t channelMask = 1<<(channel+FTM_SWOCTRL_CHxOC_SHIFT);
         \t   uint32_t valueMask   = 1<<(channel+FTM_SWOCTRL_CHxOCV_SHIFT);
         \t
         \t   // Set control bit + insert control value
         \t   ftm->SWOCTRL = (ftm->SWOCTRL&~valueMask) | (channelMask | (value?valueMask:0));
         \t}
         \t
         \t/**
         \t * Release forced channel output
         \t *
         \t * This enables software control of channel output and
         \t * defines the value forced to the channel output.
         \t * This value is write-buffered and updated by SWOCTRL synchronisation.
         \t *
         \t * @param channel  Number of channel to be released
         \t */
         \t%(static)void releaseChannelOutput(uint32_t channel)%(const) {
         \t   static constexpr unsigned FTM_SWOCTRL_CHxOC_SHIFT   = 0;
         \t
         \t   uint32_t channelMask = 1<<(channel+FTM_SWOCTRL_CHxOC_SHIFT);
         \t
         \t   // Release control bit
         \t   ftm->SWOCTRL = ftm->SWOCTRL & ~channelMask;
         \t}
         \t
         \t/**
         \t * Set current value of channel outputs.\n
         \t * This value is overwritten by the next channel action.
         \t *
         \t * @param channelValueMask Mask indicating desired channel outputs
         \t */
         \t%(static)void setChanelOutputs(uint32_t channelValueMask)%(const) {
         \t   ftm->OUTINIT = channelValueMask;
         \t   ftm->MODE    = ftm->MODE | FTM_MODE_INIT_MASK;
         \t}\n
      ]]></template>

<!-- ___ Channel Functions __________________ -->

   <variableTemplate key="/$(_BASENAME)_CHANNEL/%(k)" discardRepeats="true"
      variables="ftm_cnsc_action[]"
      linePadding="xxx"
   ><![CDATA[
      \t
      \t   /**
      \t    * Set %description
      \t    *
      %paramDescription
      \t    *
      \t    * @note This method has the side-effect of clearing the register update synchronisation i.e.
      \t    *       pending CnV register updates are discarded.
      \t    */
      \t   %(static) void setAction(%params)%(const) {
      \t      ftm->CONTROLS[%(channel)].CnSC =
      \t           (ftm->CONTROLS[%(channel)].CnSC & ~%mask) | %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <template key="/$(_BASENAME)_CHANNEL/%(k)" discardRepeats="true" ><![CDATA[
      \t   /**
      \t    * Configure channel.
      \t    * No affect on shared settings of owning Timer
      \t    *
      \t    * @param[in] ftmChannelMode    Mode of operation for channel
      \t    * @param[in] ftmChannelAction  Whether to enable the interrupt or DMA function on this channel
      \t    *
      \t    * @note This method has the side-effect of clearing the register update synchronisation i.e.
      \t    *       pending CnV register updates are discarded.
      \t    */
      \t   %(static) void configure(
      \t         FtmChannelMode    ftmChannelMode,
      \t         FtmChannelAction  ftmChannelAction = FtmChannelAction_None)%(const) {
      \t
      \t      ftm->CONTROLS[%(channel)].CnSC = ftmChannelMode|ftmChannelAction;
      \t   }
      \t
      \t   /**
      \t    * Disables timer channel (sets mode to FtmChannelMode_Disabled)
      \t    */
      \t   %(static) void disable()%(const) {
      \t      setMode(FtmChannelMode_Disabled);
      \t   }
      \t
      \t   /**
      \t    * Get channel mode.
      \t    *
      \t    * @return Current mode of operation for the channel
      \t    */
      \t   %(static) FtmChannelMode getMode()%(const) {
      \t      return static_cast<FtmChannelMode>(ftm->CONTROLS[%(channel)].CnSC &
      \t            (FTM_CnSC_MS_MASK|FTM_CnSC_ELS_MASK));
      \t   }
      \t
      \t   /**
      \t    * Set channel mode
      \t    *
      \t    * @param[in] ftmChannelMode      Mode of operation for channel
      \t    *
      \t    * @note This method has the side-effect of clearing the register update synchronisation i.e.
      \t    *       pending CnV register updates are discarded.
      \t    */
      \t   %(static) void setMode(FtmChannelMode ftmChannelMode)%(const) {
      \t      ftm->CONTROLS[%(channel)].CnSC =
      \t            (ftm->CONTROLS[%(channel)].CnSC & ~(FTM_CnSC_MS_MASK|FTM_CnSC_ELS_MASK))|ftmChannelMode;
      \t   }
      \t
      \t   /**
      \t    * Set PWM high time in ticks.
      \t    * Assumes value is less than period
      \t    *
      \t    * @param[in] highTime   PWM high time in ticks
      \t    *
      \t    * @return E_NO_ERROR on success
      \t    *
      \t    * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
      \t    */
      \t   %(static) ErrorCode setHighTime(Ticks highTime)%(const) {
      \t      return %(Ftm)::setHighTime(highTime, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set PWM high time in seconds.
      \t    * Higher precision float version
      \t    *
      \t    * @param[in] highTime   PWM high time in seconds
      \t    *
      \t    * @return E_NO_ERROR on success
      \t    *
      \t    * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
      \t    */
      \t   %(static) ErrorCode setHighTime(Seconds highTime)%(const) {
      \t      return %(Ftm)::setHighTime(highTime, %(channel));
      \t   }
      \t   /**
      \t    * Set PWM duty cycle.
      \t    *
      \t    * @param[in] dutyCycle  Duty-cycle as percentage
      \t    *
      \t    * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
      \t    */
      \t   %(static) void setDutyCycle(int dutyCycle)%(const) {
      \t      %(Ftm)::setDutyCycle(dutyCycle, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set PWM duty cycle
      \t    *
      \t    * @param[in] dutyCycle  Duty-cycle as percentage
      \t    *
      \t    * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
      \t    */
      \t   %(static) void setDutyCycle(float dutyCycle)%(const) {
      \t      %(Ftm)::setDutyCycle(dutyCycle, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set Timer event time.
      \t    *
      \t    * @param[in] offset  Event time in ticks relative to current event time (i.e. Timer channel CnV value)
      \t    *
      \t    * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
      \t    */
      \t   %(static) void setDeltaEventTime(Ticks offset)%(const) {
      \t      %(Ftm)::setDeltaEventTime(offset, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set Timer event time relative to current timer count value.
      \t    *
      \t    * @param[in] offset  Event time in ticks relative to current time (i.e. Timer CNT value)
      \t    *
      \t    * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
      \t    */
      \t   %(static) void setRelativeEventTime(Ticks offset)%(const) {
      \t      %(Ftm)::setRelativeEventTime(offset, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Set Absolute Timer event time.
      \t    *
      \t    * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
      \t    *
      \t    * @note The actual CnV register update will be delayed by the Register Synchronisation mechanism
      \t    */
      \t   %(static) void setEventTime(Ticks eventTime)%(const) {
      \t      %(Ftm)::setEventTime(eventTime, %(channel));
      \t   }
      \t
      \t   /**
      \t    * Get Absolute Timer event time.
      \t    *
      \t    * @return Absolute time of last event in ticks i.e. value from timer event register
      \t    */
      \t   %(static) Ticks getEventTime()%(const) {
      \t      return %(Ftm)::getEventTime(%(channel));
      \t   }
      \t
      \t   /**
      \t    * Get Timer interrupt/event flag.
      \t    *
      \t    * @return true  Indicates an event has occurred on a channel
      \t    * @return false Indicates no event has occurred on a channel since last polled
      \t    */
      \t   %(static) bool getInterruptFlag()%(const) {
      \t      return (ftm->STATUS&CHANNEL_MASK) != 0;
      \t   }
      \t
      \t   /**
      \t    * Get and Clear Timer channel interrupt flag.
      \t    *
      \t    * @return true  Indicates an event has occurred on a channel
      \t    * @return false Indicates no event has occurred on a channel since last polled
      \t    *
      \t    * @note Only flags captured in the return value are cleared
      \t    */
      \t   %(static) bool getAndClearInterruptFlag()%(const) {
      \t      // Note - requires read and write zero to clear flags
      \t      // so only flags captured in status are cleared
      \t      bool status = (ftm->STATUS&CHANNEL_MASK) != 0;
      \t      ftm->STATUS = ~CHANNEL_MASK;
      \t      return status;
      \t   }
      \t
      \t   /**
      \t    * Clear interrupt flag on channel.
      \t    */
      \t   %(static) void clearInterruptFlag()%(const) {
      \t      // Note - requires read and write zero to clear flag
      \t      ftm->CONTROLS[CHANNEL].CnSC = ftm->CONTROLS[CHANNEL].CnSC & ~FTM_CnSC_CHF_MASK;
      \t   }
      \t
      \t   /**
      \t    * Force channel output.
      \t    *
      \t    * This enables software control of channel output and
      \t    * defines the value forced to the channel output.
      \t    * This value is write-buffered and updated by SWOCTRL synchronisation.
      \t    *
      \t    * @param ftmChannelForce  Select control of pin. One of FtmChannelForce_Low/High/Release
      \t    */
      \t   %(static) void forceChannelOutput(FtmChannelForce ftmChannelForce)%(const) {
      \t      static const uint32_t MASK = ((1<<%(channel))|(1<<(%(channel)+8)));
      \t      ftm->SWOCTRL = ((ftm->SWOCTRL & ~MASK)) | (ftmChannelForce & MASK);
      \t   }\n\n
   ]]></template>
   <variableTemplate key="/$(_BASENAME)_CHANNEL/%(k)" discardRepeats="true"
      variables="ftm_pol_pol0" ><![CDATA[
      \t   /**
      \t    * Set polarity of channels.
      \t    *
      \t    * @param polarity Polarity to set
      \t    */
      \t   %(static) void setPolarity(Polarity polarity)%(const) {
      \t      if (polarity == ActiveHigh) {
      \t         ftm->POL = ftm->POL & ~CHANNEL_MASK;
      \t      }
      \t      else {
      \t         ftm->POL = ftm->POL | CHANNEL_MASK;
      \t      }
      \t   }\n\n
      ]]></variableTemplate>
   </for>

   <clockCodeTemplate variable="ftm_sc_clks"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Get %description
      \t *
      %paramDescription
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getInputClockFrequency(%params) {
      \t
      \t   switch(%paramExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>

<!-- ___ CommonInfo class ______________ -->

   <template where="commonInfo" condition="!/$(_basename)_common_info_done" ><![CDATA[
      class $(_Baseclass)CommonInfo {
      \t
      public:
      \t\n
   ]]></template>

   <template where="commonInfo" codeGenCondition="/$(_BASENAME)/irqHandlingMethod" condition="!/$(_basename)_common_info_done" ><![CDATA[
      \t/**
      \t * Type definition for overflow and fault call-back.
      \t */
      \ttypedef void (*CallbackFunction)();
      \t
      \t/**
      \t * Callback to catch unhandled overflow and fault call-back.
      \t */
      \tstatic void unhandledCallback() {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t
      \t/**
      \t * Type definition for channel event call-back
      \t *
      \t * @param mask Mask identifying channel
      \t */
      \ttypedef void (*ChannelCallbackFunction)($(irq_parameters));
      \t
      \t/**
      \t * Callback to catch unhandled channel event call-back
      \t *
      \t * @param mask Mask identifying channel
      \t */
      \tstatic void unhandledChannelCallback(uint8_t mask) {
      \t   (void)mask;
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}\n\n
   ]]></template>

   <template where="commonInfo" condition="!/$(_basename)_common_info_done" ><![CDATA[
      }; // $(_Baseclass)CommonInfo
      \t\n
   ]]></template>

   <constant key="/$(_basename)_common_info_done" condition="!/$(_basename)_common_info_done" />

<!-- ___ BasicInfo class ______________ -->

   <template where="basicInfo" ><![CDATA[
      class $(_Structname)BasicInfo : public $(_Baseclass)CommonInfo {
      \t
      public:
      \t\n
   ]]></template>

   <variableTemplate where="basicInfo" codeGenCondition="enablePeripheralSupport"
      variables="irqHandlingMethod"
   ><![CDATA[
       \t//! Common class based callback code has been generated for this class of peripheral
       \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
       \t\n
   ]]></variableTemplate>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for Channel Fault and timer overflow */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Overflow IRQ handler (if individually available)
      \t */
      \tstatic void overflowIrqHandler() {
      \t   // Clear TOI flag
      \t   ftm->SC = ftm->SC & ~FTM_SC_TOF_MASK;
      \t   sCallback();
      \t}
      \t\n
   ]]></template>

   <template codeGenCondition="irqHandlingMethod" condition="ftm_fms_faultf_present" >
   <![CDATA[
      \t/**
      \t * Fault IRQ handler (if individually available)
      \t */
      \tstatic void faultIrqHandler() {
      \t   ftm->FMS = ftm->FMS & ~FTM_FMS_FAULTF_MASK;
      \t   sCallback();
      \t}
      \t\n
   ]]></template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for Channel Fault and timer overflow */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Class)Info::unhandledCallback;
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/**
      \t * Callback table for programmatically set channel call-backs
      \t */
      \tstatic ChannelCallbackFunction channelCallbacks[irqCount];
      \t
      \t/**
      \t * Common IRQ handler
      \t */
      \tstatic void irqHandler() {
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" condition="ftm_fms_faultf_present" >
   <![CDATA[
      \t   if ((ftm->MODE&FTM_MODE_FAULTIE_MASK) && (ftm->FMS&FTM_FMS_FAULTF_MASK)) {
      \t      ftm->FMS = ftm->FMS & ~FTM_FMS_FAULTF_MASK;
      \t      sCallback();
      \t      return;
      \t   }\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" condition="!ftm_status_ch0f_present" >
   <![CDATA[
      \t   if ((ftm->SC&(FTM_SC_TOF_MASK|FTM_SC_TOIE_MASK)) == (FTM_SC_TOF_MASK|FTM_SC_TOIE_MASK)) {
      \t      // Clear TOI flag
      \t      ftm->SC = ftm->SC & ~FTM_SC_TOF_MASK;
      \t      sCallback();
      \t      return;
      \t   }
      \t   // Call shared handler (0 param indicates polling required as no shared status register)
      \t   channelCallbacks[0](0);
      \t
      \t   // Get status from channels
      \t   //uint32_t status = 0;
      \t   //uint32_t mask   = 0b01;
      \t   //for (unsigned channel=0; channel<NumChannels; channel++) {
      \t   //   if ((ftm->CONTROLS[channel].CnSC&FTM_CnSC_CHF_MASK)!=0) {
      \t   //      status |= mask;
      \t   //      // Clear channel flag (w0c register if read first)
      \t   //      ftm->CONTROLS[channel].CnSC = ftm->CONTROLS[channel].CnSC & ~FTM_CnSC_CHF_MASK;
      \t   //   }
      \t   //   mask <<= 1;
      \t   //}
      \t   //if (status) {
      \t   //   // Call shared handler
      \t   //   channelCallbacks[0](0);
      \t   //}
      \t}
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" condition="ftm_status_ch0f_present" >
   <![CDATA[
      \t   if ((ftm->SC&(FTM_SC_TOF_MASK|FTM_SC_TOIE_MASK)) == (FTM_SC_TOF_MASK|FTM_SC_TOIE_MASK)) {
      \t      // Clear TOI flag
      \t      ftm->SC = ftm->SC & ~FTM_SC_TOF_MASK;
      \t      sCallback();
      \t      return;
      \t   }
      \t   // Get status for channels
      \t   uint32_t status = ftm->STATUS;
      \t   if (status) {
      \t      // Call shared handler
      \t      channelCallbacks[0](status);
      \t      // Clear flags for channel events being handled (w0c register if read first)
      \t      ftm->STATUS = ~status;
      \t   }
      \t}
      \t\n
   ]]></template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" ><![CDATA[
      \t/**
      \t * Callback table for programmatically set handlers for $(_Class)
      \t */
      \t$(_Class)Info::ChannelCallbackFunction $(_Class)Info::channelCallbacks[] = {\n\n
   ]]></template>
   <for keys="ch" dim="=NumChannelVectors" >
      <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" ><![CDATA[
         \t   $(_Class)Info::unhandledChannelCallback,\n
      ]]></template>
   </for>
   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" ><![CDATA[
      \t};\n\n
   ]]></template>

<!--  ___ Init class ______________ -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * //
      \t * // $(_BASENAME) call-back
      \t * //
      \t * // @param status  Status reflecting active inputs
      \t * //
      \t * void $(_basename)Callback() {
      \t *    ...
      \t * }
      \t *
      \t * @code
      \t * static const $(_Class)::Init $(_Baseclass)Init {
      \t *
      \t *    // Omitted parameters are taken to be zero unless a base value is given
      \t *    FtmMode_Freerunning,           // Alignment and whether interval or free-running mode
      \t *    FtmOverflowInterrupt_Disabled, // Overflow Interrupt
      \t *    NvicPriority_Normal,           // IRQ level for this peripheral
      \t *    FtmClockSource_SystemClock,    // Clock Source
      \t *
      \t *    // Either
      \t *    FtmPrescale_DivBy16,           // Clock prescaler
      \t *    3000_ticks,                    // Counter modulo (mod) value
      \t *    // OR
      \t *    100_ms,                        // Timer period or minimum interval in seconds
      \t *
      \t *    FtmInitialValue(0xf),          // Channel Output Initialization Value
      \t *    FtmPolarity_Ch0_ActiveLow,     // Channel polarity - Make channel 0 active-low
      \t *    FtmPolarity_Ch3_ActiveLow,     // Channel polarity - Make channel 3 active-low
      \t *
      \t *    $(_name)Callback,              // Call-back to execute on event - call-back function name
      \t *    NvicPriority_Low,              // Priority for interrupt - Low
      \t *
      \t *    // Optional base value to start with (must be last parameter)
      \t *    $(_Class)::DefaultValue
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_Baseclass)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]></template>

<!--   Init class Member variables -->

   <variableTemplate where="basicInfo" variables="irqHandlingMethod" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
    ><![CDATA[
      \t   // Shared overflow or fault interrupt call-back
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   // Shared channel interrupt call-back
      \t   ChannelCallbackFunction channelCallbackFunction = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_sc_action,ftm_sc_cpwms,ftm_sc_clks,ftm_sc_ps"
   ><![CDATA[
      \t   // Status And Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel"
   ><![CDATA[
      \t   // %description
      \t   %paramType %registerName = %paramType_Normal;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_mod"
   ><![CDATA[
      \t   // %description
      \t   uint16_t %registerName = 0_ticks;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables= "ftm_modPeriod"
    ><![CDATA[
      \t   // %description
      \t   %paramType %registerName = 0_s;\n\n
   ]]></variableTemplate >

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_mode_pwmsync,ftm_mode_wpdis,ftm_mode_ftmen"
   ><![CDATA[
      \t   // Mode register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables= "ftm_deadtime_dtps,ftm_deadtime_dtval"
    ><![CDATA[
      \t   // %description0 and %description1
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate >

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables= "ftm_outinit_choi"
    ><![CDATA[
      \t   // %description
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate >

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables= "ftm_pol_pol"
    ><![CDATA[
      \t   // %description
      \t   uint16_t %registerName = 0;\n\n
   ]]></variableTemplate >

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables= "ftm_exttrig_trig"
    ><![CDATA[
      \t   // %description
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate >

<!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for shared channel interrupt call-back
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param callback Shared channel interrupt call-back to set
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(ChannelCallbackFunction %paramExpression, Types... rest) : Init(rest...) {
      \t
      \t      this->channelCallbackFunction = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for overflow and fault interrupt call-back
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param callback Overflow and fault interrupt call-back to set
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(CallbackFunction %paramExpression, Types... rest) : Init(rest...) {
      \t
      \t      this->callbackFunction = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t   %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_pol_pol"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      // Mark channels as active-low
      \t      %registerName |= %paramExpression;
      \t      %registerName &= ~(%paramExpression>>8);
      \t   }
      \t\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_outinit_choi"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }
      \t\n
   ]]></variableTemplate>

   <for keys="r" values="ftm_sc_action;ftm_sc_cpwms;ftm_sc_clks;
                         ftm_mode_pwmsync;ftm_mode_wpdis;ftm_mode_init;ftm_mode_ftmen" >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_deadtime_dtps, ftm_deadtime_dtval"
      linePadding="xxx"
      params=",ticks"
      nonDefaultParams="2"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description0 and %description1
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(
         %params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_exttrig_trig"
      linePadding="xxx"
      nonDefaultParams="2"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName |= %paramExpression;
         \t   }
         \t\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_sc_ps, ftm_mod"
      params=",mod_ticks"
      linePadding="xxx"
      nonDefaultParams="2"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description0 and %description1
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      %params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName0    = (%registerName0&~%mask0) | %paramName0;
      \t      %registerName1   = %paramName1;
      \t   }
      \t\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      nonDefaultParams="2"
      variables="ftm_modPeriod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      mod   = 0;
      \t      %registerName = %paramExpression;
      \t   }
      \t\n
   ]]></variableTemplate>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init\n\n
   ]]></template>

<!--  Init class Configure method -->

   <template key="/$(_BASENAME)/InitMethod" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" discardRepeats="true" ><![CDATA[
      \t/**
      \t * Configure FTM from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const typename Info::Init &init) {
      \t
      \t   return Info::template configure<FtmBase_T<Info>>(init);
      \t}\n\n
   ]]></template>

   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure FTM from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \ttemplate <class $(_BASENAME)>
      \tstatic ErrorCode configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enableClock();\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" ><![CDATA[
      \t
      \t   setCallbacks(init);\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t
      \t   uint8_t  sc    = init.sc;
      \t   uint16_t mod   = init.mod;
      \t
      \t   if (init.modperiod != 0) {
      \t
      \t      // Calculate sc.ps, mod (assumes cntin=0 or non-existent)
      \t      ErrorCode rc = $(_BASENAME)::calculateTimingParameters(init.modperiod, sc, mod);
      \t      if (rc != E_NO_ERROR) {
      \t         return rc;
      \t      }\n
      \t   }
      \t   // Disable timer to change clock (unable to switch directly between clock sources)
      \t   ftm->SC  = 0;
      \t
      \t   // End value for counter
      \t   ftm->MOD = mod;
      \t
      \t   // Restart counter
      \t   ftm->CNT = 0;
      \t
      \t   // Configure timer
      \t   ftm->SC  = sc;\n
   ]]></template>
   <for keys="var" values="ftm_mode_faultie;ftm_outinit_choi;ftm_pol_pol;ftm_deadtime;ftm_exttrig_trig" >
      <variableTemplate variables="%(var)" codeGenCondition="enablePeripheralSupport" ><![CDATA[
         \t
         \t   // %description (%(var))
         \t   ftm->%registerNAME = init.%registerName;\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></template>

<!-- ____ Default Initialisation value ________ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)"
      separator=","
      terminator=","
      variables="
         ftm_sc_cpwms,
         ftm_sc_action,
         ftm_sc_clks,
         ftm_sc_ps,
         ftm_mod,
         ftm_mode_wpdis,
         ftm_mode_init,
         ftm_outinit_choi,
         ftm_exttrig_trig"
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression\n
      \t};
      \t\n
   ]]>
   </variableTemplate>

<!-- ___ ChannelInit class ______________ -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of $(_Baseclass)Channel
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::ChannelInit channelInit {
      \t *
      \t *    // Omitted parameters are taken to be zero unless a base value is given
      \t *    FtmChannelNum_3,            // Channel to initialise (may be unused if specifically provided as parameter)
      \t *    FtmChannelMode_Disabled ,   // Channel Mode - Disabled
      \t *    FtmChannelAction_None ,     // Action on Channel Event - No action
      \t *    FtmChannelReset_Disabled ,  // Reset counter on channel IC event - Disabled
      \t *    0_ticks,                    // Output Compare Event time
      \t *
      \t *    // Optional base value to start with (must be last parameter)
      \t *    $(_Class)::DefaultChannelInitValues[FtmChannelNum_3]
      \t * };
      \t *
      \t * // Initialise $(_NAME) from values specified above
      \t * $(_Class)::configure(channelInit)
      \t * @endcode
      \t */
      \tclass ChannelInit {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr ChannelInit(const ChannelInit &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr ChannelInit() = default;
      \t\n
   ]]></template>

   <!-- ____ ChannelInit Class Member variables ________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_cnv_independent[]"
   ><![CDATA[
      \t   // %description
      \t   uint16_t %registerName = 0_ticks;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_cnsc_mode_independent[],ftm_cnsc_action_independent[],ftm_cnsc_icrst_independent[]"
   ><![CDATA[
      \t   // Channel Status And Control Register
      \t   uint8_t cnsc = 0;
      \t\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_channel_number"
   ><![CDATA[
      \t   // %description
      \t   %paramType %registerName = %paramType_None;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_filter_fval_independent[]"
   ><![CDATA[
      \t   // %description
      \t   %paramType %registerName = %paramType_Disabled;\n\n
   ]]></variableTemplate>

   <!-- ____ ChannelInit Constructors ____________ -->

   <for keys="   r                              :  c    "
      values=" ftm_cnsc_mode_independent[]      : true ;
               ftm_cnsc_action_independent[]    : true  ;
               ftm_cnsc_icrst_independent[]     : true  " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx"
         condition="%(c)"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr ChannelInit(%params, Types... rest) : ChannelInit(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>

   <for keys="r" values="
      ftm_channel_number;
      ftm_filter_fval_independent[];
      ftm_cnv_independent[]" >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr ChannelInit(%params, Types... rest) : ChannelInit(rest...) {
         \t
         \t      %registerName = %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>
   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t}; // class  $(_Structname)BasicInfo::ChannelInit\n\n
   ]]></template>

   <!-- ____ ChannelInit Configure methods ____________ -->

    <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure Channel from values specified in channelInit
      \t *
      \t * @param channelInit Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const ChannelInit &channelInit) {
      \t   return configure(channelInit.channel, channelInit);
      \t}
      \t
      \t/**
      \t * Configure Channel from values specified in channelInit
      \t *
      \t * @param channelNum  Select channel to initialise.
      \t *                    This allows applying channelInit to arbitrary channel
      \t * @param channelInit Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(FtmChannelNum channelNum, const ChannelInit &channelInit) {
      \t\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t   // Configure timer channel
      \t   ftm->CONTROLS[channelNum].CnSC = channelInit.cnsc;
      \t   ftm->CONTROLS[channelNum].CnV  = channelInit.cnv;\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" condition="ftm_filter_fval_independent[]" ><![CDATA[
      \t   ftm->FILTER = (ftm->FILTER & (FTM_FILTER_CH0FVAL_MASK<<(channelNum*4)))|(channelInit.filter<<(channelNum*4));\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></template>

   <!-- ____ ChannelInit Default Initialisation value ____________ -->

  <template codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)" ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)ChannelInit
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr ChannelInit DefaultChannelInitValues[] = {\n
  ]]></template>
   <for keys="ch" dim="=_channelCount" >
      <variableTemplate
         codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)&amp;&amp;(ftm_cnsc_mode_independent[%(ch)]!=0)"
         separator=","
         terminator=","
         variables="
            ftm_cnsc_mode_independent[%(ch)],
            ftm_cnsc_action_independent[%(ch)],
            fftm_cnsc_icrst_independent[%(ch)],
            ftm_cnv_independent[%(ch)],
            ftm_filter_fval_independent[%(ch)]"
      ><![CDATA[
         \t{
         \t   FtmChannelNum_%(ch),
         %initExpression\n\t},\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)" ><![CDATA[
      \n\t};\n\n
  ]]></template>

<!--   ___ DualChannelInit class ______________ -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of a pair of $(_Baseclass)Channels operating in Paired mode
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::DualChannelInit channelInit {
      \t *
      \t *    // Omitted parameters are taken to be zero unless a base value is given
      \t *    // Paired values (i.e. corresponding values for both channels) must be present as pairs
      \t *    FtmChannelNum_0, // and FtmChannelNum_1
      \t *
      \t *    FtmEvenChannelMode_CombinePositivePulse ,   // Even Channel Mode - Combined PWM Positive-pulse
      \t *    FtmOddChannelMode_Enabled ,                 // Odd channel Output Control - Pin controlled by FTM
      \t *    FtmSecondEdge_Disabled ,                    // Odd channel Capture Polarity - Not used
      \t *    100_ticks ,                                 // Even channel O/C Event time in ticks
      \t *    200_ticks ,                                 // Odd channel O/C Event time in ticks
      \t *    FtmChannelAction_None ,                     // Action on First Event - No action
      \t *    FtmChannelAction_None ,                     // Action on Second Event - No action
      \t *    FtmInputFilter_Disabled ,                   // Channel 0 Input Filter - Filter Disabled
      \t *    FtmInputFilter_Disabled ,                   // Channel 1 Input Filter - Filter Disabled
      \t *    FtmSecondEventAction_NoCapture ,            // Action on Odd channel event - NoCapture
      \t *    FtmComplementChannel_Complementary ,        // Channel 0/1 Complementary Enable - Complementary outputs
      \t *    FtmFaultControl_Normal ,                    // Channel 0/1 Fault Control Enable - Disabled
      \t *    FtmDeadtime_Disabled ,                      // Channel 0/1 Dead-time Enable - Disabled
      \t *    FtmSyncEnable_Disabled,                     // Channel 0/1 Synchronization Enable - Disabled
      \t *
      \t *    // Optional base value to start with (must be last parameter)
      \t *    $(_Class)::DefaultChannelInitValues[FtmChannelNum_3]
      \t * };
      \t *
      \t * // Initialise $(_NAME) from values specified above
      \t * $(_Class)::configure(channelInit)
      \t * @endcode
      \t */
      \tclass DualChannelInit {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr DualChannelInit(const DualChannelInit &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr DualChannelInit() = default;
      \t\n
   ]]></template>

   <!-- DualChannelInit Class Member variables -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_cnv_paired[]"
   ><![CDATA[
      \t   // %description
      \t   uint16_t %registerName[2] = {0,0};
      \t\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_cnsc_mode_even[],ftm_cnsc_mode_odd"
   ><![CDATA[
      \t   // Channel Status And Control Register
      \t   uint8_t %registerName[2] = {0,0};
      \t\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_combine_decap0,ftm_combine_comp0,ftm_combine_faulten0,ftm_combine_dten0,ftm_combine_syncen0"
   ><![CDATA[
      \t   // Function For Linked Channels
      \t   uint8_t %registerName = 0;
      \t\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_channel_number"
   ><![CDATA[
      \t   // %description
      \t   %paramType %registerName = %paramType_None;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_filter_fval_paired[]"
   ><![CDATA[
      \t   // %description
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <!-- ____ DualChannelInit Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ftm_cnsc_mode_even[0]"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr DualChannelInit(%params, Types... rest) : DualChannelInit(rest...) {
      \t
      \t      %registerName[0] = %paramExpression;
      \t
      \t      // %paramExpression also includes COMBINEx and DECAPENx
      \t      combine = %paramExpression>>8;
      \t   }
      \t\n
   ]]></variableTemplate>

   <for keys="    r                       : index "
      values="    ftm_channel_number      :       ;
                  ftm_cnsc_mode_odd       : [1]   "    >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr DualChannelInit(%params, Types... rest) : DualChannelInit(rest...) {
         \t
         \t      %registerName%(index) = %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>

   <for keys="   reg                       : param  "
      values=" ftm_cnsc_action_paired[]    : action " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         params="%(param)Even, %(param)Odd"
         variables="%(reg),%(reg)"
         nonDefaultParams="2"
         linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr DualChannelInit(
      %params, Types... rest) : DualChannelInit(rest...) {
      \t
      \t      %registerName[0]    = (%registerName[0]&~%mask0) | %paramName0;
      \t      %registerName[0]    = (%registerName[1]&~%mask0) | %paramName1;
      \t   }
      \t\n
      ]]></variableTemplate>
   </for>

   <for keys="   reg                     : param  "
      values=" ftm_cnv_paired[]          : eventTime  " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         params="%(param)Even, %(param)Odd"
         variables="%(reg),%(reg)"
         nonDefaultParams="2"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr DualChannelInit(
         %params, Types... rest) : DualChannelInit(rest...) {
         \t
         \t      %registerName[0] = %paramName0;
         \t      %registerName[1] = %paramName1;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      params="filterEven, filterOdd"
      variables="ftm_filter_fval_paired[],ftm_filter_fval_paired[]"
      nonDefaultParams="2"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr DualChannelInit(
      %params, Types... rest) : DualChannelInit(rest...) {
      \t
      \t      %registerName = %paramName0 | (%paramName1<<4);
      \t   }
      \t\n
   ]]></variableTemplate>

   <for keys="   var                      : index "
      values=" ftm_combine_decap0         :       ;
               ftm_combine_comp0          :       ;
               ftm_combine_faulten0       :       ;
               ftm_combine_dten0          :       ;
               ftm_combine_syncen0        :       ;
               ftm_cnsc_icrst_paired[1]   : [1]   " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(var)"
         linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr DualChannelInit(%params, Types... rest) : DualChannelInit(rest...) {
      \t
      \t      %registerName%(index) = (%registerName%(index)&~%mask) | %paramName;
      \t   }
      \t\n
      ]]></variableTemplate>
   </for>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t}; // class  $(_Structname)BasicInfo::DualChannelInit\n\n
   ]]></template>

   <!-- ____ DualChannelInit Configure methods ____________ -->

    <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure a pair of channels from values specified in dualChannelInit
      \t *
      \t * @param dualChannelInit Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const DualChannelInit &dualChannelInit) {
      \t   return configure(dualChannelInit.channel, dualChannelInit);
      \t}
      \t
      \t/**
      \t * Configure a pair of channels from values specified in dualChannelInit
      \t *
      \t * @param channelNum      Select channel to initialise.
      \t *                        This allows applying channelInit to arbitrary channel
      \t * @param dualChannelInit Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(FtmChannelNum channelNum, const DualChannelInit &dualChannelInit) {
      \t
      \t   // Configure timer paired channel modes
      \t
      \t   // Even channel value controls paired channels n,n+1
      \t   const unsigned offset = 4*channelNum;
      \t   const uint32_t mask = 0xFF<<offset;
      \t   ftm->COMBINE = (ftm->COMBINE & ~mask) | (uint32_t(dualChannelInit.combine)<<offset);
      \t
      \t   // Configure timer channel
      \t   ftm->CONTROLS[channelNum].CnV    = dualChannelInit.cnv[0];
      \t   ftm->CONTROLS[channelNum+1].CnV  = dualChannelInit.cnv[1];
      \t   ftm->CONTROLS[channelNum].CnSC   = dualChannelInit.cnsc[0];
      \t   ftm->CONTROLS[channelNum+1].CnSC = dualChannelInit.cnsc[1];
      \t\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" condition="ftm_filter_fval_independent[]" ><![CDATA[
      \t   ftm->FILTER = (ftm->FILTER & ((FTM_FILTER_CH1FVAL_MASK|FTM_FILTER_CH0FVAL_MASK)<<(channelNum*4)))|
      \t                  (dualChannelInit.filter<<(channelNum*4));
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></template>

   <!--  DualChannelInit Default Initialisation value -->

  <template codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)" ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)DualChannelInit
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr DualChannelInit DefaultDualChannelInitValues[] = {\n
  ]]></template>
   <for keys=   "evenCh : oddCh "
        values= "0      : 1    ;
                 2      : 3    ;
                 4      : 5    ;
                 6      : 7    " >
      <if condition="=%(evenCh)>=_channelCount">
         <break/>
      </if>
      <variableTemplate
         codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)&amp;&amp;(ftm_cnsc_mode_even[%(evenCh)]!=0)"
         separator=","
         terminator=","
         variables="
            ftm_cnsc_mode_even[%(evenCh)]"
      ><![CDATA[
         \t{
         \t   FtmChannelNum_%(evenCh), // and FtmChannelNum_%(oddCh)
         %initExpression\n
      ]]></variableTemplate>

      <!-- Combined PWM  -->
      <variableTemplate
         codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)&amp;&amp;(ftm_cnsc_mode_even[%(evenCh)]==(1,2))"
         separator=","
         terminator=","
         variables="
            ftm_cnsc_secondOutput[%(oddCh)],
            ftm_cnv_paired[%(evenCh)],
            ftm_cnv_paired[%(oddCh)],

            ftm_combine_decap%(evenCh),
            ftm_combine_comp%(evenCh),
            ftm_combine_faulten%(evenCh),
            ftm_combine_dten%(evenCh),
            ftm_combine_syncen%(evenCh)"
      ><![CDATA[
         %initExpression\n
      ]]></variableTemplate>

      <!-- Dual capture -->
      <variableTemplate
         codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)&amp;&amp;(ftm_cnsc_mode_even[%(evenCh)]>=3)"
         separator=","
         terminator=","
         variables="
            ftm_cnsc_secondEdge[%(oddCh)],
            ftm_filter_fval_paired[%(evenCh)],
            ftm_filter_fval_paired[%(oddCh)],
            ftm_cnsc_icrst_paired[%(oddCh)]"
      ><![CDATA[
         %initExpression\n
      ]]></variableTemplate>

      <variableTemplate
         codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)&amp;&amp;(ftm_cnsc_mode_even[%(evenCh)]!=0)"
         separator=","
         terminator=","
         variables="

            ftm_cnsc_action_paired[%(evenCh)],
            ftm_cnsc_action_paired[%(oddCh)]"
      ><![CDATA[
         %initExpression\n\t},\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)" ><![CDATA[
      \n\t};\n\n
  ]]></template>



   <!-- ____ Fault __________________ -->
   <constant key="_code" />
   <xi:include href="ftm_fault.xml"/>
   <deleteVariables variables="_code"/>

   <!-- ____ Quadrature decoder __________________ -->
   <constant key="_code" />
   <xi:include href="ftm_quadrature_decoder.xml"/>
   <deleteVariables variables="_code"/>

<!--  ___ End of class  $(_Structname)BasicInfo ______________ -->

   <template where="basicInfo" ><![CDATA[
      }; // class  $(_Structname)BasicInfo\n\n
   ]]></template>

<!-- ___ Set interrupt handlers ___________ -->

   <template  codeGenCondition="irqHandlingMethod" ><![CDATA[
      \t/**
      \t * Set overflow and fault interrupt call-back
      \t *
      \t * @param[in] newCallback Callback function to execute on interrupt.
      \t *                        Use nullptr to remove callback.
      \t *
      \t * @return E_NO_ERROR            No error
      \t * @return E_HANDLER_ALREADY_SET Handler already set
      \t */
      \tstatic ErrorCode setCallback(CallbackFunction newCallback) {
      \t
      \t   if (newCallback == nullptr) {
      \t      newCallback = unhandledCallback;
      \t   }
      \t   sCallback = newCallback;
      \t   return E_NO_ERROR;
      \t}
      \t\n
   ]]></template>

   <template  codeGenCondition="!irqHandlingMethod&amp;&amp;enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Set callbacks and IRQ priority from Init structure
      \t *
      \t * @note Dummy routine
      \t */
      \tstatic void setCallbacks(const Init &) {
      \t}
      \t
      \t/**
      \t * Set channel callbacks from DualChannelInit structure
      \t *
      \t * @note Dummy routine
      \t */
      \tstatic void setChannelCallback(const DualChannelInit &) {
      \t}
      \t\n
   ]]></template>

   <template  codeGenCondition="irqHandlingMethod&amp;&amp;(NumChannelVectors==1)" ><![CDATA[
      \t/**
      \t * Set channel call-back function
      \t * Configured for shared channel call-backs i.e. all channels use same call-back
      \t *
      \t * @param[in] callback Callback function to execute on channel interrupt.
      \t *                     Use nullptr to remove callback.
      \t *
      \t * @return E_NO_ERROR            No error
      \t * @return E_HANDLER_ALREADY_SET Handler already set
      \t *
      \t * @note The channel callback is shared by all channels of the timer.
      \t *       It is necessary to identify the originating channel in the callback
      \t */
      \tstatic ErrorCode setChannelCallback(ChannelCallbackFunction callback) {
      \t   if (callback == nullptr) {
      \t      channelCallbacks[0] = unhandledChannelCallback;
      \t      return E_NO_ERROR;
      \t   }
      #ifdef DEBUG_BUILD
      \t   // Callback is shared across all channels. Check if callback already assigned
      \t   if ((channelCallbacks[0] != unhandledChannelCallback) &&
      \t       (channelCallbacks[0] != callback)) {
      \t      return setErrorCode(ErrorCode::E_HANDLER_ALREADY_SET);
      \t   }
      #endif
      \t   channelCallbacks[0] = callback;
      \t   return E_NO_ERROR;
      \t}
      \t
      \t/**
      \t * Set callbacks and IRQ priority from Init structure
      \t *
      \t * @param init Class containing initialisation values
      \t *
      \t * @note Channel callback is shared by all channels of the timer.
      \t *       It is necessary to identify the originating channel in the callback
      \t */
      \tstatic void setCallbacks(const Init &init) {
      \t
      \t   setCallback(init.callbackFunction);
      \t   setChannelCallback(init.channelCallbackFunction);
      \t   enableNvicInterrupt(irqNums[0], init.irqlevel);
      \t}
      \t\n
   ]]></template>

   <template  codeGenCondition="irqHandlingMethod&amp;&amp;(NumChannelVectors>1)" ><![CDATA[
      \t/**
      \t * Set channel call-back function
      \t * Configured for individual channel call-backs
      \t *
      \t * @param[in] irqNum     Index of handler to set call-back for
      \t * @param[in] callback   Callback function to execute on channel interrupt.
      \t *                       Use nullptr to remove callback.
      \t *
      \t * @return E_NO_ERROR            No error
      \t * @return E_HANDLER_ALREADY_SET Handler already set
      \t *
      \t * @note Sevral channel call-backs are provided
      \t */
      \tstatic ErrorCode setChannelCallback(unsigned irqNum, ChannelCallbackFunction callback) {
      \t
      \t   if (irqNum>=irqCount) {
      \t      return setErrorCode(ErrorCode::E_ILLEGAL_PARAM);
      \t   }
      \t   if (callback == nullptr) {
      \t      channelCallbacks[irqNum] = unhandledChannelCallback;
      \t      return ErrorCode::E_NO_ERROR;
      \t   }
      \t   channelCallbacks[irqNum] = callback;
      \t   return ErrorCode::E_NO_ERROR;
      \t}
      \t
      \t/**
      \t * Set callbacks and IRQ priority from Init structure
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \t static void setCallbacks(const Init &init) {
      \t
      \t   setCallback(init.callbackFunction);
      \t   enableNvicInterrupt(irqNums[0], init.irqlevel);
      \t}
      \t\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.FtmValidate" >
   </validate>

   <projectActionList id = "ftm_common_files" >
      <copy source="Project_Headers/ftm.h"                target="Project_Headers/ftm.h"                overwrite="true" derived="true" />
      <copy source="Snippets/ftm-pwm-example.cpp"         target="Snippets/ftm-pwm-example.cpp"         overwrite="true" derived="true" />
      <copy source="Snippets/ftm-ic-example.cpp"          target="Snippets/ftm-ic-example.cpp"          overwrite="true" derived="true" />
      <copy source="Snippets/ftm-oc-example.cpp"          target="Snippets/ftm-oc-example.cpp"          overwrite="true" derived="true" />
      <copy source="Snippets/ftm-oc-init-example.cpp"     target="Snippets/ftm-oc-init-example.cpp"     overwrite="true" derived="true" />
      <copy source="Snippets/ftm-servo-example.cpp"       target="Snippets/ftm-servo-example.cpp"       overwrite="true" derived="true" />
      <copy source="Snippets/ftm-quadrature-example.cpp"  target="Snippets/ftm-quadrature-example.cpp"  overwrite="true" derived="true" />
      <copy source="Snippets/neopixel-example.cpp"        target="Snippets/neopixel-example.cpp"        overwrite="true" derived="true" />
   </projectActionList>

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \ttypedef $(_Baseclass)Base_T<$(_Class)Info> $(_Class);\n
   ]]></template>

   <!-- ____ Quadrature decoder __________________ -->
   <constant key="_declaration" />
   <xi:include href="ftm_quadrature_decoder.xml"/>
   <deleteVariables variables="_declaration"/>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="Thes settings only have effect if the SIM configuration is enabled" >
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>
   <deleteVariables variables="_scgc_clock"  mustExist="false" />

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</fragment>
