<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- fmc_def.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

   <equation key="irq_parameters"            type="String"  value='""'  />
   <equation key="irq_dummy_parameters"      type="String"  value='""'  />
   <equation key="irq_call"                  type="String"  value='""'  />
   <equation key="generateDefault"           type="Boolean" value="false"         />
   <equation key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- ************* PFAPR ****************** -->

   <binaryOption key="fmc_pfapr_mpfd" condition="fmc_pfapr_m0pfd_present"
      valueFormat="FMC_PFAPR_M0PFD(%s)"
      hidden="true"
      typeName="FmcPrefetch"
      toolTip="These bits control whether prefetching is enabled based on the logical number\n
               of the requesting crossbar switch master. \n
               This field is further qualified by the PFBnCR[BxDPE,BxIPE] bits."
      description="Master N Prefetch Disable" >
      <choice name="Prefetching enabled"      value="0" enum="Enabled" />
      <choice name="Prefetching is disabled"  value="1" enum="Disabled" />
   </binaryOption >

   <variableTemplate codeGenCondition="enableGettersAndSetters"
      variables="fmc_pfapr_mpfd"
   > <![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param master      Number of master to modify
      %paramDescription
      \t */
      \tstatic void setPrefetch(int master, %params) {
      \t   const uint32_t mask = %mask<<master;
      \t   %register = (%register&~mask) | (%paramExpression<<master);
      \t}\n\n
   ]]></variableTemplate>

   <choiceOption key="fmc_pfapr_map" condition="fmc_pfapr_m0ap_present"
      valueFormat="FMC_PFAPR_M0AP(%s)"
      hidden="true"
      typeName="FmcAccessProtection"
      toolTip="This field controls whether read and write access to the flash are allowed\n
               based on the logical master number of the requesting crossbar switch master"
      description="Master N Access Protection" >
      <choice name="No access allowed"        value="0" enum="NoAccessAllowed" />
      <choice name="Only read accesses"       value="1" enum="OnlyReadAccesses" />
      <choice name="Only write accesses"      value="2" enum="OnlyWriteAccesses" />
      <choice name="Read and write accesses"  value="3" enum="ReadAndWriteAccesses" />
   </choiceOption >

   <variableTemplate codeGenCondition="enableGettersAndSetters"
      variables="fmc_pfapr_map"
   > <![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param master              Number of master to modify
      %paramDescription
      \t */
      \tstatic void setProtection(int master, %params) {
      \t   const uint32_t mask = %mask<<master;
      \t   %register = (%register&~mask) | (%paramExpression<<master);
      \t}\n\n
   ]]></variableTemplate>

   <!-- ************* PFBxCR ****************** -->

   <for keys="b" values="0;01" >
	   <binaryOption key="fmc_pfb%(b)cr_clck_way" condition="fmc_pfb%(b)cr_clck_way_present"
	      hidden="true"
	      typeName="FmcCacheWayLock"
	      toolTip="Determine if the given cache way is locked such that its contents will not be displaced by future misses"
	      description="Cache Lock Way N" >
	      <choice name="Cache way is unlocked"  value="0" enum="CacheWayIsUnlocked" />
	      <choice name="Cache way is locked"    value="1" enum="CacheWayIsLocked" />
	   </binaryOption >

	   <variableTemplate codeGenCondition="enableGettersAndSetters"
	      variables="fmc_pfb%(b)cr_clck_way"
	   > <![CDATA[
	      \t/**
	      \t * Set %description
	      \t *
	      \t * @param way         Cache way to modify
	      %paramDescription
	      \t */
	      \tstatic void setCacheWayLock(int way, %params) {
	      \t   const uint32_t mask = %mask<<way;
	      \t   %register = (%register&~mask) | (%paramExpression<<way);
	      \t}\n\n
	   ]]></variableTemplate>

	   <choiceOption key="fmc_pfb%(b)cr_cinv_way" condition="fmc_pfb%(b)cr_cinv_way_present"
	      hidden="true"
	      typeName="FmcWayInvalidate"
	      toolTip="Selects a cache Way to immediately invalidate.\n
	               The tag, data, and valid contents are cleared."
	      description="Cache Invalidate Way N" >
	      <choiceExpansion keys="w" dim="4" value="1&lt;&lt;%(w)" name="Invalidate Way %(w)" enum="Way%(w)" />
	      <choice name="Invalidate all Ways"  value="-1" enum="AllWays" />
	   </choiceOption >

	   <variableTemplate codeGenCondition="enableGettersAndSetters"
	      variables="fmc_pfb%(b)cr_cinv_way"
	   > <![CDATA[
	      \t/**
	      \t * %description
	      \t *
	      %paramDescription
	      \t */
	      \tstatic void cacheWayInvalidate(%params) {
	      \t   %register = %register | %paramExpression;
	      \t}\n\n
	   ]]></variableTemplate>

	   <choiceOption key="fmc_pfb%(b)cr_s_b_inv" condition="fmc_pfb%(b)cr_s_b_inv_present"
	      hidden="true"
	      typeName="FmcSpeculationBuffer"
	      toolTip="When this bit is written, the prefetch speculation buffer and single entry buffer are immediately cleared"
	      description="Invalidate Prefetch Speculation Buffer" >
	      <choice name="Write 1 to invalidate"  value="1" enum="Invalidate" />
	   </choiceOption >

	   <variableTemplate codeGenCondition="enableGettersAndSetters"
	      variables="fmc_pfb%(b)cr_s_b_inv"
	   > <![CDATA[
	      \t/**
	      \t * %description
	      \t */
	      \tstatic void speculationBufferInvalidate() {
	      \t   %register = %register | %mask;
	      \t}\n\n
	   ]]></variableTemplate>

	   <choiceOption key="fmc_pfb%(b)cr_crc" condition="fmc_pfb%(b)cr_crc_present"
	      hidden="true"
	      typeName="FmcReplacementPolicy"
	      toolTip="This field defines the replacement algorithm for accesses that are cached"
	      description="Cache Replacement Policy" >
	      <choice name="LRU across all ways"                              value="0" enum="LruAllWays" />
	      <choice name="Independent LRU ways [0-1] ifetches, [2-3] data"  value="2" enum="LruWays_01Instruction_23Data" />
	      <choice name="Independent LRU ways [0-2] ifetches, [3] data"    value="3" enum="LruWays_012Instruction_3Data" />
	   </choiceOption >

	   <variableTemplate codeGenCondition="enableGettersAndSetters"
	      variables="fmc_pfb%(b)cr_crc"
	   > <![CDATA[
	      \t/**
	      \t * Set %description
	      \t *
	      %paramDescription
	      \t */
	      \tstatic void setReplacementPolicy(%params) {
	      \t   %register = (%register&~%mask) | %paramExpression;
	      \t}\n\n
	   ]]></variableTemplate>
   </for>

   <!--
      ******************** Flash Controller  ********************
   -->
   <for keys="n:m" values ="0:0; 1:1; 01:0; 23:1" >
      <choiceOption key="fmc_pfb%(n)cr_flash_speculation" condition="fmc_pfb%(n)cr_b%(m)dpe_present||fmc_pfb%(n)cr_b%(m)ipe_present"
         typeName="FmcFlashSpeculation"
         valueFormat="FMC_PFB%(n)CR_B%(m)DPE(%s),FMC_PFB%(n)CR_B%(m)IPE(%s)"
         description="Bank %(n) Flash Controller Speculation Buffer"
         toolTip="Controls the operation of the Speculation Buffer for each Flash Controller bank"
         >
         <choice value="0,0" name="Disabled"              enum="Disabled"               />
         <choice value="1,0" name="Data Only"             enum="DataOnly"               />
         <choice value="0,1" name="Instructions Only"     enum="InstructionsOnly"       />
         <choice value="1,1" name="Instructions and Data" enum="InstructionsAndData"    isDefault="true" />
      </choiceOption>

      <variableTemplate
         variables="fmc_pfb%(n)cr_flash_speculation"
      > <![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void setFlashBank%(n)Speculation(%params) {

         \t   %register = (%register&~(%mask)) | %paramExpression;
         \t}\n\n
      ]]></variableTemplate>

      <choiceOption key="fmc_pfb%(n)cr_flash_cache" condition="fmc_pfb%(n)cr_b%(m)dce_present||fmc_pfb%(n)cr_b%(m)ice_present"
         typeName="FmcFlashCache"
         valueFormat="FMC_PFB%(n)CR_B%(m)DCE(%s),FMC_PFB%(n)CR_B%(m)ICE(%s)"
         description="Bank %(n) Flash Controller Cache"
         toolTip="Controls the operation of the Cache for each Flash Controller bank"
         >
         <choice value="0,0" name="Disabled"              enum="Disabled"               />
         <choice value="1,0" name="Data Only"             enum="DataOnly"               />
         <choice value="0,1" name="Instructions Only"     enum="InstructionsOnly"       />
         <choice value="1,1" name="Instructions and Data" enum="InstructionsAndData"    isDefault="true" />
      </choiceOption>

      <variableTemplate codeGenCondition="enableGettersAndSetters"
         variables="fmc_pfb%(n)cr_flash_cache"
      > <![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void setFlashBank%(n)Cache(%params) {

         \t   %register = (%register&~(%mask)) | %paramExpression;
         \t}\n\n
      ]]></variableTemplate>

      <binaryOption key="fmc_pfb%(n)cr_b%(n)sebe" condition="fmc_pfb%(n)cr_b%(n)sebe_present"
         enabledBy="enablePeripheralSupport"
         typeName="FmcPageBuffer"
         toolTip="Controls whether the single entry page buffer is enabled in response to flash read accesses.\n
                  A disabled-to-enabled transition forces the page buffer to be invalidated"
         description="Bank %(n) Single Entry Buffer Enable" >
         <choice name="Buffer is disabled"  value="0" enum="Disabled" />
         <choice name="Buffer is enabled"   value="1" enum="Enabled"  isDefault="true" />
      </binaryOption >

      <variableTemplate codeGenCondition="enableGettersAndSetters"
         variables="fmc_pfb%(n)cr_b%(n)sebe"
      > <![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void setFlashBank%(n)PageBuffer(%params) {
         \t   %register = (%register&~%mask) | %paramExpression;
         \t}\n\n
      ]]></variableTemplate>

      <variableTemplate
         variables="fmc_pfb%(n)cr_flash_speculation,fmc_pfb%(n)cr_flash_cache,fmc_pfb%(n)cr_b%(n)sebe"
         ><![CDATA[
         \t/**
         \t **
         \t * Class used to do initialisation of Flash bank %(n) controller
         \t * Options not explicitly mentioned are cleared to 0.
         \t *
         \t * This class has a templated constructor that accepts a range of options
         \t *
         \t * @note This constructor may be used to create a const instance in ROM
         \t *
         \t * Example1:
         \t * @code
         \t * const Fmc::FlashBank%(n)Init flashInit {
         \t *    // List of options
         \t *    FmcFlashCache_Disabled,
         \t *    FmcFlashSpeculation_InstructionsAndData,
         \t * };
         \t *
         \t * flashInit.configure();  // Configure selected options
         \t * @endcode
         \t */
         \tclass FlashBank%(n)Init {
         \t
         \tprivate:
         \t   /// Value for %registerName register
         \t   uint32_t %registerName = 0;
         \t
         \tpublic:
         \t   /**
         \t    * Empty Constructor
         \t    */
         \t   constexpr FlashBank%(n)Init() = default;
         \t
         \t   /**
         \t    * Copy Constructor
         \t    */
         \t   constexpr FlashBank%(n)Init(const FlashBank%(n)Init &other) = default;
         \t
         \t   /**
         \t    * Read the current settings from hardware registers
         \t    */
         \t   void readConfig() {
         \t      %registerName = %register & %mask;
         \t   }
         \t
         \t   /**
         \t    * Configure Flash options as specified in the constructor
         \t    */
         \t   void configure() const {
         \t      %register = (%register & ~%mask)|
         \t                   %registerName;
         \t   }
         \t\n
      ]]></variableTemplate>

      <for keys="v" values="fmc_pfb%(n)cr_flash_speculation;fmc_pfb%(n)cr_b%(n)sebe;fmc_pfb%(n)cr_flash_cache" >
         <variableTemplate
            variables="%(v)"
         ><![CDATA[
            \t   /**
            \t    * Constructor
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            \t    *
            \t    * @param %paramName %description
            \t    */
            \t   template <typename... Types>
            \t   constexpr FlashBank%(n)Init(%paramType %paramName, Types... rest) : FlashBank%(n)Init(rest...)  {
            \t
            \t      %registerName = (%registerName&~%mask) | %paramName;
            \t   }\n\n
      ]]></variableTemplate>
      </for>

      <template condition="fmc_pfb%(n)cr_flash_speculation||fmc_pfb%(n)cr_b%(n)sebe||fmc_pfb%(n)cr_flash_cache" ><![CDATA[
         \t}; // FlashBank%(n)Init\n\n
      ]]></template>

      <variableTemplate key="/FMC/DefaultFlashInitValue" where="all"
         variables="fmc_pfb%(n)cr_flash_speculation;fmc_pfb%(n)cr_flash_cache,fmc_pfb%(n)cr_b%(n)sebe"
         terminator=","
         separator=","
      ><![CDATA[
         \t/**
         \t * Default value for FMC::FlashBank%(n)Init
         \t * This value is created from Configure.usbdmProject settings (Peripheral Parameters->FMC)
         \t */
         \tstatic constexpr FmcInfo::FlashBank%(n)Init DefaultFlashBank%(n)InitValue {%initExpression
         \t};
         \t\n
      ]]></variableTemplate>

      <variableTemplate key="/SMC/preEnterStopMode" variables="fmc_pfb%(n)cr_flash_cache,fmc_pfb%(n)cr_flash_speculation" ><![CDATA[
      \t   // Save current Flash Bank%(n) settings
      \t   FmcInfo::FlashBank%(n)Init savedFlashBank%(n)Settings;
      \t   savedFlashBank%(n)Settings.readConfig();
      \t   // Disable Flash Bank%(n) prefetch
      \t   FmcInfo::setFlashBank%(n)Speculation(FmcFlashSpeculation_Disabled);\n
      ]]></variableTemplate>

      <variableTemplate key="/SMC/postExitStopMode" variables="fmc_pfb%(n)cr_flash_cache,fmc_pfb%(n)cr_flash_speculation" ><![CDATA[
      \t   // Restore flash Bank%(n) settings
      \t   savedFlashBank%(n)Settings.configure();\n
      ]]></variableTemplate>

   </for> <!-- keys="n:m" values ="0:0; 1:1; 01:0; 23:1" -->

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */\n
   ]]></template>
   <template key="/$(_BASENAME)/declarations" condition="irqOption_present" ><![CDATA[
      \tclass $(_Class) : public $(_Baseclass)Base, public $(_Baseclass)Interrupt_T<$(_Class)Info> {};\n
   ]]></template>
   <template key="/$(_BASENAME)/declarations" condition="!irqOption_present" ><![CDATA[
      \tclass $(_Class) : public $(_Baseclass)Base {};\n
   ]]></template>


   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="fmc_files" >
      <copy source="Project_Headers/fmc.h"         target="Project_Headers/fmc.h"          overwrite="true" derived="true" />
   </projectActionList>

</fragment>
