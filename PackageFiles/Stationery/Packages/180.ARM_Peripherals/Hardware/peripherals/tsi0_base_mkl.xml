<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- tsi0_mkl.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <constant key="irq_dummy_parameters"      type="String"  value="&quot;uint8_t&quot;"  />
   <constant key="irq_call"                  type="String"  value="&quot;status&quot;"  />
   <constant key="irq_parameters"            type="String"  value="&quot;uint8_t status&quot;"  />
   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%variable[index]            Variable name
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Baseclass)BasicInfo&quot;" />

   <template ><![CDATA[
      \t//! Base value for PCR (excluding MUX value)
      \tstatic constexpr uint32_t defaultPcrValue  = 0;\n\n
   ]]></template>

   <!-- ************* GENCS ****************** -->

   <binaryOption key="tsi_gencs_cursw" condition="tsi_gencs_cursw_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiCurrentSource"
      description="Electrode/Reference OSC swap"
      toolTip="This bit specifies if the current sources of electrode oscillator and reference oscillator are swapped" >
      <choice name="Not swapped" value="0" enum="NotSwapped" isDefault="true" />
      <choice name="Swapped"     value="1" enum="Swapped"  />
   </binaryOption >

   <binaryOption key="tsi_gencs_stm" condition="tsi_gencs_stm_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiScanTrigger"
      description="Scan Trigger Mode"
      toolTip="Selects between software and hardware triggers" >
      <choice name="Software trigger"  value="0" enum="SoftwareTrigger"/>
      <choice name="Hardware trigger"  value="1" enum="HardwareTrigger"/>
   </binaryOption >

   <binaryOption key="tsi_gencs_stpe" condition="tsi_gencs_stpe_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiLowPower"
      description="TSI STOP Enable"
      toolTip="Controls operation while in Low Power Modes (STOP, VLPS, LLS and VLLS{3,2,1})" >
      <choice name="Disabled in low power"  value="0" enum="Disabled"/>
      <choice name="Enabled in low power"   value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="tsi_gencs_tsien" condition="tsi_gencs_tsien_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiEnable"
      description="Module Enable" >
      <choice name="Module disabled"  value="0" enum="ModuleDisabled"/>
      <choice name="Module enabled"   value="1" enum="ModuleEnabled"/>
   </binaryOption >

   <choiceOption key="tsi_gencs_interrupt" condition="tsi_gencs_tsiien_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="TSI_GENCS_TSIIEN(%s),TSI_GENCS_ESOR(%s)"
      typeName="TsiInterrupt"
      description="Touch Sensing Input Interrupt Enable" >
      <choice name="Interrupt disabled"  value="0,0" enum="Disabled"/>
      <choice name="Interrupt enabled"   value="1,0" enum="OnOutOfRange"/>
      <choice name="Interrupt enabled"   value="1,1" enum="OnEndOfScan"/>
   </choiceOption>

   <intOption key="tsi_gencs_nscn" condition="tsi_gencs_nscn_present"
      enabledBy="enablePeripheralSupport"
      enumType="uint8_t"
      typeName="TsiConsecutiveScan"
      description="Consecutive Scan number"
      toolTip="Number of Consecutive Scans Per Electrode"
      value="8"
      min="1" max="32" />

   <choiceOption key="tsi_gencs_ps" condition="tsi_gencs_ps_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiElectrodePrescaler"
      description="Prescaler for Electrode Oscillator Frequency" >
      <choice name="Divided by 1"    value="0" enum="DivBy1"  />
      <choice name="Divided by 2"    value="1" enum="DivBy2"  />
      <choice name="Divided by 4"    value="2" enum="DivBy4"  />
      <choice name="Divided by 8"    value="3" enum="DivBy8" isDefault="true"/>
      <choice name="Divided by 16"   value="4" enum="DivBy16" />
      <choice name="Divided by 32"   value="5" enum="DivBy32" />
      <choice name="Divided by 64"   value="6" enum="DivBy64" />
      <choice name="Divided by 128"  value="7" enum="DivBy128"/>
   </choiceOption >

   <choiceOption key="tsi_gencs_extchrg" condition="tsi_gencs_extchrg_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiExternalCharge"
      description="External Oscillator Charge Current select"
      toolTip="Control the electrode oscillator charge and discharge current value" >
      <choice name="500 nA"      value="0" enum="500na"/>
      <choice name="1 uA"        value="1" enum="1uA"/>
      <choice name="2 uA"        value="2" enum="2uA"/>
      <choice name="4 uA"        value="3" enum="4uA"/>
      <choice name="8 uA"        value="4" enum="8uA"/>
      <choice name="16 uA"       value="5" enum="16uA"/>
      <choice name="32 uA"       value="6" enum="32uA"/>
      <choice name="64 uA"       value="7" enum="64uA"/>
   </choiceOption >

   <aliasOption key="tsi_gencs_dvolt" locked="false" />

   <choiceOption key="tsi_gencs_refchrg" condition="tsi_gencs_refchrg_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiReferenceCurrent"
      description="Reference Oscillator Charge Current select"
      toolTip="Controls the reference oscillator charge and discharge current value" >
      <choice name="500 nA"      value="0" enum="500nA"/>
      <choice name="1 uA"        value="1" enum="1uA"/>
      <choice name="2 uA"        value="2" enum="2uA"/>
      <choice name="4 uA"        value="3" enum="4uA"/>
      <choice name="8 uA"        value="4" enum="8uA"/>
      <choice name="16 uA"       value="5" enum="16uA"/>
      <choice name="32 uA"       value="6" enum="32uA"/>
      <choice name="64 uA"       value="7" enum="64uA"/>
   </choiceOption >

   <choiceOption key="tsi_gencs_mode" condition="tsi_gencs_mode_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiMode"
      description="TSI analog modes setup and status bits"
      toolTip="Set up TSI analog modes\n
      Mode[3..2] == 00 => Capacitive sensing mode\n
      Mode[3..2] != 00 => Noise detection mode\n
      When reading this field will return the analog status">
      <choice name="Capacitive sensing"                       value="0b0000"  enum="Capacitive"                />
      <choice name="Noise detection without freq limitation"  value="0b0100"  enum="NoiseDetect_NoFreqLimit"   />
      <choice name="Noise detection with freq limitation"     value="0b1000"  enum="NoiseDetect_FreqLimit"     />
      <choice name="Automatic noise detection mode"           value="0b1100"  enum="NoiseDetect_Automatic"     />
   </choiceOption >

   <!--
   <binaryOption key="tsi_gencs_outrgf" condition="tsi_gencs_outrgf_present"
      hidden="true"
      enabledBy="enablePeripheralSupport"
      typeName="TsiOutOfRange"
      description="Out of Range Flag" >
      <choice name="Not Out-of-range"  value="0" enum="NotOutOfRange"/>
      <choice name="Out-of-range"      value="1" enum="OutOfRange"/>
   </binaryOption >

   <choiceOption key="tsi_gencs_filter" condition="tsi_gencs_filter_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiFilter"
      description="Filter" >
      <choice name="8 peak increments the count"  value="0" enum="8Peaks" />
      <choice name="4 peak increments the count"  value="1" enum="4Peaks" />
      <choice name="2 peak increments the count"  value="2" enum="2Peaks" />
      <choice name="1 peak increments the count"  value="3" enum="1Peak"  />
   </choiceOption >

   <choiceOption key="tsi_gencs_noise_threshold" condition="tsi_gencs_noise_threshold_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiGencsNoiseThreshold"
      description="Threholds or noise measurement \tValues vary with device" >
      <choice name="DVpm = 0.038 V, Vp = 0.834 V, Vm = 0.796 V"  value="0" enum="Dvpm0038V_Vp0834V_Vm0796V"/>
      <choice name="DVpm = 0.050 V, Vp = 0.830 V, Vm = 0.790 V"  value="1" enum="Dvpm0050V_Vp0830V_Vm0790V"/>
      <choice name="DVpm = 0.066 V, Vp = 0.848 V, Vm = 0.782 V"  value="2" enum="Dvpm0066V_Vp0848V_Vm0782V"/>
      <choice name="DVpm = 0.087 V, Vp = 0.858 V, Vm = 0.772 V"  value="3" enum="Dvpm0087V_Vp0858V_Vm0772V"/>
      <choice name="DVpm = 0.114 V, Vp = 0.872 V, Vm = 0.758 V"  value="4" enum="Dvpm0114V_Vp0872V_Vm0758V"/>
      <choice name="DVpm = 0.150 V, Vp = 0.890 V, Vm = 0.740 V"  value="5" enum="Dvpm0150V_Vp0890V_Vm0740V"/>
      <choice name="DVpm = 0.197 V, Vp = 0.914 V, Vm = 0.716 V"  value="6" enum="Dvpm0197V_Vp0914V_Vm0716V"/>
      <choice name="DVpm = 0.260 V, Vp = 0.945 V, Vm = 0.685 V"  value="7" enum="Dvpm0260V_Vp0945V_Vm0685V"/>
      <choice name="DVpm = 0.342 V, Vp = 0.986 V, Vm = 0.644 V"  value="8" enum="Dvpm0342V_Vp0986V_Vm0644V"/>
      <choice name="DVpm = 0.450 V, Vp = 1.040 V, Vm = 0.590 V"  value="9" enum="Dvpm0450V_Vp1040V_Vm0590V"/>
      <choice name="DVpm = 0.592 V, Vp = 1.111 V, Vm = 0.519 V" value="10" enum="Dvpm0592V_Vp1111V_Vm0519V"/>
      <choice name="DVpm = 0.780 V, Vp = 1.205 V, Vm = 0.425 V" value="11" enum="Dvpm0780V_Vp1205V_Vm0425V"/>
      <choice name="DVpm = 1.026 V, Vp = 1.328 V, Vm = 0.302 V" value="12" enum="Dvpm1026V_Vp1328V_Vm0302V"/>
      <choice name="DVpm = 1.350 V, Vp = 1.490 V, Vm = 0.140 V" value="13" enum="Dvpm1350V_Vp1490V_Vm0140V"/>
      <choice name="DVpm = 1.630 V, Vp = 1.630 V, Vm = 0 V"     value="14" enum="Dvpm1630V_Vp1630V_Vm0V"/>
      <choice name="DVpm = 1.630 V, Vp = 1.630 V, Vm = 0 V"     value="15" enum="Dvpm1630V_Vp1630V_Vm0V"/>
   </choiceOption >

   <binaryOption key="tsi_gencs_resistor" condition="tsi_gencs_resistor_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiGencsResistor"
      description="Filter" >
      <choice name="32K Series resistor"   value="0" enum="32kSeriesResistor"/>
      <choice name="187K Series resistor"  value="1" enum="187kSeriesResistor"/>
   </binaryOption >

   <choiceOption key="tsi_gencs_rs" condition="tsi_gencs_rs_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiGencsRs"
      description="Rs Series resistor for noise mode" >
      <choice name="Reserved"    value="0" enum="Reserved"/>
      <choice name="Reserved"    value="1" enum="Reserved"/>
      <choice name="Reserved"    value="2" enum="Reserved"/>
      <choice name="184kR"       value="3" enum="184kr"/>
      <choice name="77kR"        value="4" enum="77kr"/>
      <choice name="32kR"        value="5" enum="32kr"/>
      <choice name="14kR"        value="6" enum="14kr"/>
      <choice name="5k5R"        value="7" enum="5k5r"/>
   </choiceOption >

   <binaryOption key="tsi_gencs_eosf" condition="tsi_gencs_eosf_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiGencsEosf"
      description="End of Scan Flag" >
      <choice name="Scan not complete"  value="0" enum="ScanNotComplete"/>
      <choice name="Scan complete"      value="1" enum="ScanComplete"/>
   </binaryOption >
   -->

   <!-- ************* TSHD ****************** -->

   <intOption key="tsi_tshd_thresl" condition="tsi_tshd_thresl_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiHighThreshold"
      enumType="uint16_t"
      description="Wake-up Channel High Threshold value"
      toolTip="Determines the high threshold for the wakeup channel active in low power mode"
      min="0" max="65535" value="65535" />

   <intOption key="tsi_tshd_thresh" condition="tsi_tshd_thresh_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiLowThreshold"
      enumType="uint16_t"
      description="Wake-up Channel Low Threshold value"
      toolTip="Determines the low threshold for the wakeup channel active in low power mode"
      min="0" max="65535" value="0" />

   <intOption key="defaultPinThreshold" condition="tsi_tshd_thresl_present"
      description="Default input threshold"
      toolTip="Threshold to use as default when creating single inputs (buttons)"
      min="0" max="65535" value="4000" />

   <!-- ************* DATA ****************** -->
   <!--
   <choiceOption key="tsi_data_tsich" condition="tsi_data_tsich_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiDataTsich"
      description="TSICH" >
      <choice name="Channel #"   value="0" enum="Channel"/>
   </choiceOption >

   <binaryOption key="tsi_data_dmaen" condition="tsi_data_dmaen_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiDataDmaen"
      description="DMA Transfer Enabled" >
      toolTip="Select between DMA and Interrupt request"
      <choice name="Interrupt request"     value="0" enum="InterruptRequest"/>
      <choice name="DMA transfer request"  value="1" enum="DmaTransferRequest"/>
   </binaryOption >

   <binaryOption key="tsi_data_swts" condition="tsi_data_swts_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiDataSwts"
      description="Software Trigger Start" >
      toolTip="Used to start a scan to determine which channel is specified by TSI_DATA.TSICH"
      <choice name="No effect"   value="0" enum="NoEffect"/>
      <choice name="Start scan"  value="1" enum="StartScan"/>
   </binaryOption >
   -->

   <for keys="field:name"
        values="
         tsi_gencs_outrgf           : GencsOutrgf;
         tsi_gencs_esor             : GencsEsor;
         tsi_gencs_mode             : GencsMode;
         tsi_gencs_refchrg          : GencsRefchrg;
         tsi_gencs_dvolt            : GencsDvolt;
         tsi_gencs_filter           : GencsFilter;
         tsi_gencs_noise_threshold  : GencsNoiseThreshold;
         tsi_gencs_resistor         : GencsResistor;
         tsi_gencs_rs               : GencsRs;
         tsi_gencs_extchrg          : GencsExtchrg;
         tsi_gencs_ps               : GencsPs;
         tsi_gencs_nscn             : GencsNscn;
         tsi_gencs_tsien            : GencsTsien;
         tsi_gencs_tsiien           : GencsTsiien;
         tsi_gencs_stpe             : GencsStpe;
         tsi_gencs_stm              : GencsStm;
         tsi_gencs_scnip            : GencsScnip;
         tsi_gencs_eosf             : GencsEosf;
         tsi_gencs_cursw            : GencsCursw;
         tsi_data_tsich             : DataTsich;
         tsi_data_dmaen             : DataDmaen;
         tsi_data_swts              : DataSwts;
         tsi_data_tsicnt            : DataTsicnt;
         tsi_tshd_thresh            : TshdThresh;
         tsi_tshd_thresl            : TshdThresl" >
      <variableTemplate variables="%(field)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %defaultFieldExpression
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

<!--   ========== TSI Init class =============================== -->

   <template namespace="usbdm" discardRepeats="true" >
   <![CDATA[
      class $(_Baseclass)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="/$(_BASENAME)/irqHandlingMethod"
   ><![CDATA[
       \t//! Common class based callback code has been generated for this class of peripheral
       \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
       \t\n
   ]]></variableTemplate>

   <template namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Baseclass) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="/$(_BASENAME)/irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  $(_basename)Callback Callback function to execute on interrupt
      \t *                             Use nullptr to remove callback.
      \t */
      \tstatic void setCallback(CallbackFunction $(_basename)Callback) {
      \t   if ($(_basename)Callback == nullptr) {
      \t      $(_basename)Callback = unhandledCallback;
      \t   }
      \t   // Allow either no handler set yet or removing handler
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || ($(_basename)Callback == unhandledCallback),
      \t         "Handler already set");
      \t   sCallback = $(_basename)Callback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   uint8_t status = tsi->GENCS&(TSI_GENCS_OUTRGF_MASK|TSI_GENCS_EOSF_MASK);
      \t   tsi->GENCS = tsi->GENCS | status;
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t}
      \t\n
   ]]>
   </template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/**
      \t * Callback for programmatically set handler for $(_Class)
      \t */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Class)Info::unhandledCallback;
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   TsiGencsOutrgf_NotOutOfRange              // Out of Range Flag,
      \t *   TsiGencsEsor_OutOfRangeInterrupt          // End-of-scan or Out-of-Range Interrupt Selection,
      \t *   TsiGencsMode_CapacitiveSensing            // analogue modes setup and status bits,
      \t *   TsiGencsRefchrg_500Na                     // REFCHRG,
      \t *   TsiGencsDvolt_Dv103vVp133vVm030v          // DVOLT - delta voltage \tValues vary with device,
      \t *   TsiGencsFilter_8PeakIncrementsTheCount    // Filter,
      \t *   TsiGencsNoiseThreshold_Dvpm0038V_Vp0834V_Vm0796V    // Threholds or noise measurement \tValues vary with device,
      \t *   TsiGencsResistor_32kSeriesResistor        // Filter,
      \t *   TsiGencsRs_Reserved                       // Rs Series resistor for noise mode,
      \t *   TsiGencsExtchrg_500Na                     // EXTCHRG,
      \t *   TsiGencsPs_DivBy1                         // Prescaler for Electrode Oscillator Frequency,
      \t *   TsiGencsNscn_N1PerElectrode               // Consecutive Scan number,
      \t *   TsiGencsTsien_ModuleDisabled              // Module Enable,
      \t *   TsiGencsTsiien_InterruptDisabled          // Interrupt Enable,
      \t *   TsiGencsStpe_DisabledInLowPower           // STOP Enable,
      \t *   TsiGencsStm_SoftwareTrigger               // Scan Trigger Mode,
      \t *   TsiGencsEosf_ScanNotComplete              // End of Scan Flag,
      \t *   TsiCurrentSource_NotSwapped                  // Swap Current Sources,
      \t *   TsiDataTsich_Channel                      // TSICH,
      \t *   TsiDataDmaen_InterruptRequest             // DMA Transfer Enabled,
      \t *   TsiDataSwts_NoEffect                      // Software Trigger Start,
      \t *   0,                                        // Wake-up Channel High-threshold,
      \t *   0,                                        // Wake-up Channel Low-threshold,
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate namespace="usbdm" discardRepeats="true" variables="irqHandlingMethod" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="tsi_gencs_outrgf,tsi_gencs_esor,tsi_gencs_mode,tsi_gencs_refchrg,tsi_gencs_dvolt,tsi_gencs_filter,tsi_gencs_noise_threshold,tsi_gencs_resistor,tsi_gencs_rs,tsi_gencs_extchrg,tsi_gencs_ps,tsi_gencs_nscn,tsi_gencs_tsien,tsi_gencs_tsiien,tsi_gencs_stpe,tsi_gencs_stm,tsi_gencs_eosf,tsi_gencs_cursw"
   ><![CDATA[
      \t   /// General Control and Status Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="tsi_data_tsich,tsi_data_dmaen,tsi_data_swts"
   ><![CDATA[
      \t   /// DATA Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="tsi_tshd_thresh,tsi_tshd_thresl"
   ><![CDATA[
      \t   /// Threshold Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType1 %registerName0 = %symbolicExpression1;
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enableClock();
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" >   <![CDATA[
      \t   // Only set call-backs if feature enabled
      \t   setCallback(init.callbackFunction);
      \t   enableNvicInterrupt(irqNums[0], init.irqlevel);
      \t\n
   ]]></template>
   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t   // ..........  Regs to init .......... ;
      \t   tsi->GENCS    = init.gencs;
      \t   tsi->TSHD    = init.tshd;
      \t}
      \t\n
   ]]>
   </template>

   <!--   Constructors -->

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            tsi_gencs_outrgf;
            tsi_gencs_esor;
            tsi_gencs_mode;
            tsi_gencs_refchrg;
            tsi_gencs_dvolt;
            tsi_gencs_filter;
            tsi_gencs_noise_threshold;
            tsi_gencs_resistor;
            tsi_gencs_rs;
            tsi_gencs_extchrg;
            tsi_gencs_ps;
            tsi_gencs_nscn;
            tsi_gencs_tsien;
            tsi_gencs_tsiien;
            tsi_gencs_stpe;
            tsi_gencs_stm;
            tsi_gencs_eosf;
            tsi_gencs_cursw;
            tsi_data_tsich;
            tsi_data_dmaen;
            tsi_data_swts
            " >
      <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <for keys="r"
      values="
            tsi_tshd_thresh;
            tsi_tshd_thresl
            " >
      <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%paramType0 value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask0) | %macro0(value);
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <template namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
      <![CDATA[
      \t}; // class $(_Baseclass)BasicInfo::Init
      \t\n
   ]]>
   </template>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            tsi_gencs_outrgf,
            tsi_gencs_esor,
            tsi_gencs_mode,
            tsi_gencs_refchrg,
            tsi_gencs_dvolt,
            tsi_gencs_filter,
            tsi_gencs_noise_threshold,
            tsi_gencs_resistor,
            tsi_gencs_rs,
            tsi_gencs_extchrg,
            tsi_gencs_ps,
            tsi_gencs_nscn,
            tsi_gencs_tsien,
            tsi_gencs_tsiien,
            tsi_gencs_stpe,
            tsi_gencs_stm,
            tsi_gencs_eosf,
            tsi_gencs_cursw,
            tsi_data_tsich,
            tsi_data_dmaen,
            tsi_data_swts,
            tsi_tshd_thresh,
            tsi_tshd_thresl
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

   <template namespace="usbdm" discardRepeats="true" >
      <![CDATA[
      }; // class $(_Baseclass)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \t//class $(_Class) : public $(_Baseclass)_T<$(_Class)Info> {};
      \ttypedef $(_Baseclass)_T<$(_Class)Info> $(_Class);
      \t\n
   ]]>
   </template>

   <template><![CDATA[
      \tstatic constexpr uint32_t tsi_tshd =
      \t   TSI_TSHD_THRESH($(tsi_tshd_thresh)) |   // Low Power Channel Low Threshold value
      \t   TSI_TSHD_THRESL($(tsi_tshd_thresl));    // Low Power Channel High Threshold value\n\n

      \tstatic constexpr uint32_t defaultThreshold = $(defaultPinThreshold);

   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="tsi_files">
      <copy source="Project_Headers/tsi-MKL.h"     target="Project_Headers/tsi.h"         overwrite="true"  derived="true" />
      <copy source="Snippets/tsi-mkl-example.cpp"  target="Snippets/tsi-mkl-example.cpp"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <signals enabledBy="enablePeripheralSupport" />

</fragment>
