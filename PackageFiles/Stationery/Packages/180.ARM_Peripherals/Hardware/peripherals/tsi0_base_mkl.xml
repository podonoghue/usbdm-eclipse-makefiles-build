<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- tsi0_mkl.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <constant key="irq_parameters"            type="String"  value='"uint8_t status"'  />
   <constant key="irq_dummy_parameters"      type="String"  value='"uint8_t"'  />
   <constant key="irq_call"                  type="String"  value='"status"'  />
   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!-- ____ General substitutions ____
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!-- ____ Template substitutions ________
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%variable[index]            Variable name
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String"
      value='"$(_Class)Info : public $(_Structname)BasicInfo"' />

   <template ><![CDATA[
      \t//! Base value for PCR (excluding MUX value)
      \tstatic constexpr uint32_t defaultPcrValue  = 0;\n\n
   ]]></template>

   <!-- ____ GENCS ____ -->

   <binaryOption key="tsi_gencs_tsien" condition="tsi_gencs_tsien_present"
      hidden="true"
      derived="true"
      typeName="TsiEnable"
      baseType="uint32_t"
      description="Module Enable" >
      <choice name="Module disabled"  value="0" enum="ModuleDisabled" />
      <choice name="Module enabled"   value="1" enum="ModuleEnabled"  isDefault="true" />
   </binaryOption >

   <binaryOption key="tsi_gencs_outrgf" condition="tsi_gencs_outrgf_present"
      hidden="true"
      derived="true"
      typeName="TsiOutOfRangeFlag"
      baseType="uint32_t"
      description="Out of Range Flag"
      toolTip="This flag is set if the result register of the enabled electrode is out\n
               of the range defined by the TSI_THRESHOLD register. \n
               This flag is set only when TSI is configured in non-noise detection mode.\n
               It can be read once the CPU wakes. \n
               Write 1 , when this flag is set, to clear it." >
      <choice name="Not Out-of-range"  value="0" enum="NotOutOfRange"/>
      <choice name="Out-of-range"      value="1" enum="OutOfRange"/>
   </binaryOption >
   <binaryOption key="tsi_gencs_cursw" condition="tsi_gencs_cursw_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiCurrentSource"
      baseType="uint32_t"
      description="Electrode/Reference OSC swap"
      toolTip="This bit specifies if the current sources of electrode oscillator and reference oscillator are swapped" >
      <choice name="Not swapped" value="0" enum="NotSwapped" isDefault="true" />
      <choice name="Swapped"     value="1" enum="Swapped"  />
   </binaryOption >

   <binaryOption key="tsi_gencs_stm" condition="tsi_gencs_stm_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiScanTrigger"
      baseType="uint32_t"
      description="Scan Trigger Mode"
      toolTip="Selects between software and hardware triggers" >
      <choice name="Software trigger"  value="0" enum="SoftwareTrigger"/>
      <choice name="Hardware trigger"  value="1" enum="HardwareTrigger"/>
   </binaryOption >

   <binaryOption key="tsi_gencs_stpe" condition="tsi_gencs_stpe_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiLowPower"
      baseType="uint32_t"
      description="TSI STOP Enable"
      toolTip="Controls operation while in Low Power Modes (STOP, VLPS, LLS and VLLS{3,2,1})" >
      <choice name="Disabled in low power"  value="0" enum="Disabled"/>
      <choice name="Enabled in low power"   value="1" enum="Enabled"/>
   </binaryOption >

   <choiceOption key="tsi_gencs_action" condition="tsi_gencs_tsiien_present&amp;&amp;tsi_gencs_esor_present&amp;&amp;!tsi_gencs_eosdmeo_present"
      enabledBy="irqHandlingMethod"
      valueFormat="TSI_GENCS_TSIIEN(%s),TSI_GENCS_ESOR(%s)"
      typeName="TsiAction"
      baseType="uint32_t"
      description="Touch Sensing Input Event Enable"
      toolTip="Enables events from Out-of-Range and End-of-Scan conditions" >
      <choice name="Interrupt/DMA disabled"                value="0,0" enum="Disabled"/>
      <choice name="Interrupt/DMA enabled on Out of Range" value="1,0" enum="IrqOrDmaOnOutOfRange"/>
      <choice name="Interrupt/DMA enabled on End of Scan"  value="1,1" enum="IrqOrDmaOnEndOfScan"/>
   </choiceOption>

   <choiceOption key="tsi_gencs_action" condition="tsi_gencs_tsiien_present&amp;&amp;tsi_gencs_esor_present&amp;&amp;tsi_gencs_eosdmeo_present"
      enabledBy="irqHandlingMethod"
      valueFormat="TSI_GENCS_TSIIEN(%s),TSI_GENCS_EOSDMEO(%s),TSI_GENCS_ESOR(%s)"
      typeName="TsiAction"
      baseType="uint32_t"
      description="Touch Sensing Input Event Enable" 
      toolTip="Enables events from Out-of-Range and End-of-Scan conditions\n
               It may also be used to direct OOR events to generate interrupts rather than DMA requests.\n
               DMAEN may still be used to direct EOS to interrupt or DMA requests." >
      <choice name="Interrupt/DMA disabled"                value="0,0,0" enum="Disabled"/>
      <choice name="Interrupt/DMA enabled on Out of Range" value="1,0,0" enum="IrqOrDmaOnOutOfRange"/>
      <choice name="Interrupt/DMA enabled on End of Scan"  value="1,0,1" enum="IrqOrDmaOnEndOfScan"/>
      <choice name="Interrupt on OOR, DMA on EOS"          value="1,1,0" enum="DmaOnEndOfScanIrqOnOverrun"   />
   </choiceOption>

   <binaryOption key="tsi_data_dmaen" condition="tsi_data_dmaen_present"
      enabledBy="tsi_gencs_action>0"
      typeName="TsiEventAction"
      baseType="uint32_t"
      description="Interrupt/DMA Selection"
      toolTip="Select between DMA and Interrupt request\n
               This bit is used together with the TSI interrupt enable bits(TSIIE, ESOR, EOSDMEO)\n
               to generate a DMA transfer request instead of an interrupt." >
      <choice name="Interrupt request"     value="0" enum="InterruptRequest"/>
      <choice name="DMA transfer request"  value="1" enum="DmaTransferRequest"/>
   </binaryOption >

   <choiceOption key="tsi_gencs_nscn" condition="tsi_gencs_nscn_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiConsecutiveScan"
      baseType="uint32_t"
      description="Consecutive Scan number"
      toolTip="Number of Consecutive Scans Per Electrode" >
      <choice          name="Scan Electrode 1 time"     enum="1Time"      value="0"   />
      <choiceExpansion name="Scan Electrode %(n) times" enum="%(n)Times" value="=ToString(%(n)-1)" keys="n" dim="2,32" />
   </choiceOption>

   <choiceOption key="tsi_gencs_ps" condition="tsi_gencs_ps_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiElectrodePrescaler"
      baseType="uint32_t"
      description="Prescaler for Electrode Oscillator Frequency" >
      <choice name="Divided by 1"    value="0" enum="DivBy1"  />
      <choice name="Divided by 2"    value="1" enum="DivBy2"  />
      <choice name="Divided by 4"    value="2" enum="DivBy4"  />
      <choice name="Divided by 8"    value="3" enum="DivBy8" isDefault="true"/>
      <choice name="Divided by 16"   value="4" enum="DivBy16" />
      <choice name="Divided by 32"   value="5" enum="DivBy32" />
      <choice name="Divided by 64"   value="6" enum="DivBy64" />
      <choice name="Divided by 128"  value="7" enum="DivBy128"/>
   </choiceOption >

   <choiceOption key="tsi_gencs_extchrg" condition="tsi_gencs_extchrg_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiExternalCharge"
      baseType="uint32_t"
      description="External Oscillator Charge Current select"
      toolTip="Control the electrode oscillator charge and discharge current value" >
      <choice name="500 nA"      value="0" enum="500na"/>
      <choice name="1 uA"        value="1" enum="1uA"/>
      <choice name="2 uA"        value="2" enum="2uA"/>
      <choice name="4 uA"        value="3" enum="4uA"/>
      <choice name="8 uA"        value="4" enum="8uA"/>
      <choice name="16 uA"       value="5" enum="16uA"/>
      <choice name="32 uA"       value="6" enum="32uA"/>
      <choice name="64 uA"       value="7" enum="64uA"/>
   </choiceOption >

   <aliasOption key="tsi_gencs_dvolt" locked="false" />

   <choiceOption key="tsi_gencs_refchrg" condition="tsi_gencs_refchrg_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiReferenceCurrent"
      baseType="uint32_t"
      description="Reference Oscillator Charge Current select"
      toolTip="Controls the reference oscillator charge and discharge current value" >
      <choice name="500 nA"      value="0" enum="500nA"/>
      <choice name="1 uA"        value="1" enum="1uA"/>
      <choice name="2 uA"        value="2" enum="2uA"/>
      <choice name="4 uA"        value="3" enum="4uA"/>
      <choice name="8 uA"        value="4" enum="8uA"/>
      <choice name="16 uA"       value="5" enum="16uA"/>
      <choice name="32 uA"       value="6" enum="32uA"/>
      <choice name="64 uA"       value="7" enum="64uA"/>
   </choiceOption >

   <choiceOption key="tsi_gencs_mode" condition="tsi_gencs_mode_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiMode"
      baseType="uint32_t"
      description="TSI analogue modes setup and status bits"
      toolTip="Set up TSI analogue modes\n
      Mode[3..2] == 00 => Capacitive sensing mode\n
      Mode[3..2] != 00 => Noise detection mode\n
      When reading this field will return the analogue status">
      <choice name="Capacitive sensing"                       value="0b0000"  enum="Capacitive"                />
      <choice name="Noise detection without freq limitation"  value="0b0100"  enum="NoiseDetect_NoFreqLimit"   />
      <choice name="Noise detection with freq limitation"     value="0b1000"  enum="NoiseDetect_FreqLimit"     />
      <choice name="Automatic noise detection mode"           value="0b1100"  enum="NoiseDetect_Automatic"     />
   </choiceOption >

   <binaryOption key="tsi_gencs_eosf" condition="tsi_gencs_eosf_present"
      hidden="true"
      derived="true"
      typeName="TsiEndOfScanFlag"
      baseType="uint32_t"
      description="End of Scan Flag"
      toolTip="This flag is set when all active electrodes are finished scanning\n
               after a scan trigger.\n
               Write 1 , when this flag is set, to clear it."
      >
      <choice name="Scan not complete"  value="0" enum="ScanNotComplete"/>
      <choice name="Scan complete"      value="1" enum="ScanComplete"/>
   </binaryOption >
   
   <binaryOption key="tsi_gencs_scnip" condition="tsi_gencs_scnip_present"
      hidden="true"
      derived="true"
      typeName="TsiStatus"
      baseType="uint32_t"
      description="Scan In Progress Status"
      toolTip="This read-only bit indicates if scan is in progress.\n
               This bit will get asserted after the analogue bias circuit is\n
               stable after a trigger and it changes automatically by the TSI." >
      <choice name="Idle - No scan in progress"  value="0" enum="NoScanInProgress"/>
      <choice name="Busy - Scan in progress"     value="1" enum="ScanInProgress"/>
   </binaryOption >

   <!--
   <choiceOption key="tsi_gencs_filter" condition="tsi_gencs_filter_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiFilter"
      baseType="uint32_t"
      description="Filter" >
      <choice name="8 peak increments the count"  value="0" enum="8Peaks" />
      <choice name="4 peak increments the count"  value="1" enum="4Peaks" />
      <choice name="2 peak increments the count"  value="2" enum="2Peaks" />
      <choice name="1 peak increments the count"  value="3" enum="1Peak"  />
   </choiceOption >

   <choiceOption key="tsi_gencs_noise_threshold" condition="tsi_gencs_noise_threshold_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiGencsNoiseThreshold"
      baseType="uint32_t"
      description="Threholds or noise measurement \tValues vary with device" >
      <choice name="DVpm = 0.038 V, Vp = 0.834 V, Vm = 0.796 V"  value="0" enum="Dvpm0038V_Vp0834V_Vm0796V"/>
      <choice name="DVpm = 0.050 V, Vp = 0.830 V, Vm = 0.790 V"  value="1" enum="Dvpm0050V_Vp0830V_Vm0790V"/>
      <choice name="DVpm = 0.066 V, Vp = 0.848 V, Vm = 0.782 V"  value="2" enum="Dvpm0066V_Vp0848V_Vm0782V"/>
      <choice name="DVpm = 0.087 V, Vp = 0.858 V, Vm = 0.772 V"  value="3" enum="Dvpm0087V_Vp0858V_Vm0772V"/>
      <choice name="DVpm = 0.114 V, Vp = 0.872 V, Vm = 0.758 V"  value="4" enum="Dvpm0114V_Vp0872V_Vm0758V"/>
      <choice name="DVpm = 0.150 V, Vp = 0.890 V, Vm = 0.740 V"  value="5" enum="Dvpm0150V_Vp0890V_Vm0740V"/>
      <choice name="DVpm = 0.197 V, Vp = 0.914 V, Vm = 0.716 V"  value="6" enum="Dvpm0197V_Vp0914V_Vm0716V"/>
      <choice name="DVpm = 0.260 V, Vp = 0.945 V, Vm = 0.685 V"  value="7" enum="Dvpm0260V_Vp0945V_Vm0685V"/>
      <choice name="DVpm = 0.342 V, Vp = 0.986 V, Vm = 0.644 V"  value="8" enum="Dvpm0342V_Vp0986V_Vm0644V"/>
      <choice name="DVpm = 0.450 V, Vp = 1.040 V, Vm = 0.590 V"  value="9" enum="Dvpm0450V_Vp1040V_Vm0590V"/>
      <choice name="DVpm = 0.592 V, Vp = 1.111 V, Vm = 0.519 V" value="10" enum="Dvpm0592V_Vp1111V_Vm0519V"/>
      <choice name="DVpm = 0.780 V, Vp = 1.205 V, Vm = 0.425 V" value="11" enum="Dvpm0780V_Vp1205V_Vm0425V"/>
      <choice name="DVpm = 1.026 V, Vp = 1.328 V, Vm = 0.302 V" value="12" enum="Dvpm1026V_Vp1328V_Vm0302V"/>
      <choice name="DVpm = 1.350 V, Vp = 1.490 V, Vm = 0.140 V" value="13" enum="Dvpm1350V_Vp1490V_Vm0140V"/>
      <choice name="DVpm = 1.630 V, Vp = 1.630 V, Vm = 0 V"     value="14" enum="Dvpm1630V_Vp1630V_Vm0V"/>
      <choice name="DVpm = 1.630 V, Vp = 1.630 V, Vm = 0 V"     value="15" enum="Dvpm1630V_Vp1630V_Vm0V"/>
   </choiceOption >

   <binaryOption key="tsi_gencs_resistor" condition="tsi_gencs_resistor_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiGencsResistor"
      baseType="uint32_t"
      description="Filter" >
      <choice name="32K Series resistor"   value="0" enum="32kSeriesResistor"/>
      <choice name="187K Series resistor"  value="1" enum="187kSeriesResistor"/>
   </binaryOption >

   <choiceOption key="tsi_gencs_rs" condition="tsi_gencs_rs_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiGencsRs"
      baseType="uint32_t"
      description="Rs Series resistor for noise mode" >
      <choice name="Reserved"    value="0" enum="Reserved"/>
      <choice name="Reserved"    value="1" enum="Reserved"/>
      <choice name="Reserved"    value="2" enum="Reserved"/>
      <choice name="184kR"       value="3" enum="184kr"/>
      <choice name="77kR"        value="4" enum="77kr"/>
      <choice name="32kR"        value="5" enum="32kr"/>
      <choice name="14kR"        value="6" enum="14kr"/>
      <choice name="5k5R"        value="7" enum="5k5r"/>
   </choiceOption >

   -->

   <!-- ************* TSHD ****************** -->

   <intOption key="tsi_tshd_thresl" condition="tsi_tshd_thresl_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiHighThreshold"
      baseType="uint32_t"
      description="Wake-up Channel High Threshold value"
      toolTip="Determines the high threshold for the wakeup channel active in low power mode"
      min="0" max="65535" value="65535" />

   <intOption key="tsi_tshd_thresh" condition="tsi_tshd_thresh_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiLowThreshold"
      baseType="uint32_t"
      description="Wake-up Channel Low Threshold value"
      toolTip="Determines the low threshold for the wakeup channel active in low power mode"
      min="0" max="65535" value="0" />

   <intOption key="defaultPinThreshold" condition="tsi_tshd_thresl_present"
      description="Default input threshold"
      toolTip="Threshold to use as default when creating single inputs (buttons)"
      min="0" max="65535" value="4000" />

   <choiceOption key="tsi_data_tsich" condition="tsi_data_tsich_present"
      hidden="true"
      derived="true"
      typeName="TsiChannel"
      baseType="uint32_t"
      description="Tsi Channel"
      toolTip="These bits specify channel to be measured.\n
               In hardware trigger mode (TSI_GENCS[STM] = 1), the scan will not start\n
               until the hardware trigger occurs.\n
               In software trigger mode (TSI_GENCS[STM] = 0), the scan starts immediately\n
               when TSI_DATA[SWTS] bit is written by 1.">
      <choiceExpansion name="Channel Number %(ch)" value="%(ch)" enum="%(ch)" keys="ch" dim="16" />
   </choiceOption >

   <constant key="/TSI/tsiEnumType" type="String" value='"TsiChannel"'/>

   <binaryOption key="tsi_data_swts" condition="tsi_data_swts_present"
      hidden="true"
      typeName="TsiSoftwareTrigger"
      baseType="uint32_t"
      description="Software Trigger Start"
      toolTip="Used to start a scan when sowftare trigger mode is selected (STM=0)" >
      <choice name="No effect"   value="0" enum="NoEffect"/>
      <choice name="Start scan"  value="1" enum="StartScan"/>
   </binaryOption >

   <intOption key="tsi_data_tsicnt" condition="tsi_data_tsicnt_present"
      hidden="true"
      derived="true"
      typeName="TsiConversionCount"
      baseType="uint32_t"
      description="TSI Conversion Counter Value"
      toolTip="These read-only bits record the accumulated scan counter value ticked by the reference oscillator."   />

   <!-- ____ Setters and Getters ____________ -->

   <for keys="field                 : set   : get   : clear : genCode                 : name"
     values="
         tsi_gencs_outrgf           : false : true  : true  : enableGettersAndSetters : OutOfRangeFlag;
         tsi_gencs_action           : true  : true  : false : enableGettersAndSetters : Action;
         tsi_gencs_mode             : true  : true  : false : enableGettersAndSetters : Mode;
         tsi_gencs_refchrg          : true  : true  : false : enableGettersAndSetters : ReferenceChargeCurrent;
         tsi_gencs_dvolt            : true  : true  : false : enableGettersAndSetters : OscVolts;
         tsi_gencs_extchrg          : true  : true  : false : enableGettersAndSetters : ExternalChargeCurrent;
         tsi_gencs_ps               : true  : true  : false : enableGettersAndSetters : ElectrodePrescaler;
         tsi_gencs_nscn             : true  : true  : false : enableGettersAndSetters : ScanNumber;
         tsi_gencs_tsien            : true  : true  : false : enableGettersAndSetters : Enable;
         tsi_gencs_stpe             : true  : true  : false : enableGettersAndSetters : StopMode;
         tsi_gencs_stm              : true  : true  : false : enableGettersAndSetters : TriggerMode;
         tsi_gencs_scnip            : false : true  : false : enableGettersAndSetters : Status;
         tsi_gencs_eosf             : false : true  : true  : enableGettersAndSetters : EndOfScanFlag;
         tsi_gencs_cursw            : true  : true  : false : enableGettersAndSetters : CurrentSourceSwap;

         tsi_data_tsich             : true  : true  : false : enableGettersAndSetters : ScanChannel;
         tsi_data_dmaen             : true  : true  : false : enableGettersAndSetters : DmaEnable;
         tsi_data_swts              : true  : false : false : enableGettersAndSetters : SoftwareReset;
         tsi_data_tsicnt            : false : true  : false : enableGettersAndSetters : ConversionCounter;

         tsi_tshd_thresh            : true  : true  : false : enableGettersAndSetters : HighThreshold;
         tsi_tshd_thresl            : true  : true  : false : enableGettersAndSetters : LowThreshold;

         tsi_gencs_filter           : true  : true  : false : enableGettersAndSetters : GencsFilter;
         tsi_gencs_noise_threshold  : true  : true  : false : enableGettersAndSetters : GencsNoiseThreshold;
         tsi_gencs_resistor         : true  : true  : false : enableGettersAndSetters : GencsResistor;
         tsi_gencs_rs               : true  : true  : false : enableGettersAndSetters : GencsRs" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Clear %description
         \t *
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!-- ____ class $(_Structname)BasicInfo ____________ -->

   <template where="basicInfo" ><![CDATA[
      class $(_Structname)BasicInfo {
      \t
      public:\n
   ]]></template>

   <!-- ____ Interrupt handling _____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="/$(_BASENAME)/irqHandlingMethod"
   ><![CDATA[
       \t//! Common class based callback code has been generated for this class of peripheral
       \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
       \t\n
   ]]></variableTemplate>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo" >
   <![CDATA[
      \t/**
      \t * Type for Touch sense input call back function.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for Touch sense input */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Touch sense input interrupt handler
      \t * Passes control to call-back function
      \t */
      \tstatic void irqHandler() {
      \t
      \t   uint8_t status = tsi->GENCS&(TSI_GENCS_OUTRGF_MASK|TSI_GENCS_EOSF_MASK);
      \t   tsi->GENCS = tsi->GENCS | status;
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t}
      \t
      \t/**
      \t * Set Touch sense input callback function.
      \t *
      \t * @param $(_basename)Callback Callback function to execute on interrupt
      \t *                        Use nullptr to remove callback.
      \t */
      \tstatic void setCallback(CallbackFunction $(_basename)Callback) {
      \t   if ($(_basename)Callback == nullptr) {
      \t      $(_basename)Callback = (CallbackFunction)unhandledCallback;
      \t   }
      \t   // Allow either no handler set yet or removing handler
      \t   usbdm_assert(
      \t         ((void*)sCallback == (void*)unhandledCallback) ||
      \t         ((void*)$(_basename)Callback == (void*)unhandledCallback),
      \t         "Handler already set");
      \t   sCallback = $(_basename)Callback;
      \t}
      \t
      \t\n
   ]]>
   </template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/**
      \t * Callback function for Touch sense input
      \t */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = (CallbackFunction)$(_Class)Info::unhandledCallback;
      \t
      \t\n
   ]]>
   </template>

   <!-- ________ TSI Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   TsiAction_Disabled ,              // (tsi_gencs_action)  Touch Sensing Input Interrupt Enable - Interrupt/DMA disabled
      \t *   TsiMode_Capacitive ,              // (tsi_gencs_mode)    TSI analogue modes setup and status bits - Capacitive sensing
      \t *   TsiReferenceCurrent_500nA ,       // (tsi_gencs_refchrg) Reference Oscillator Charge Current select - 500 nA
      \t *   TsiDeltaVoltage_High ,            // (tsi_gencs_dvolt)   Oscillator voltage rails - dV = 1.026 V; Vp = 1.328 V; Vm = 0.302 V
      \t *   TsiExternalCharge_500na ,         // (tsi_gencs_extchrg) External Oscillator Charge Current select - 500 nA
      \t *   TsiElectrodePrescaler_DivBy8 ,    // (tsi_gencs_ps)      Prescaler for Electrode Oscillator Frequency - Divided by 8
      \t *   TsiConsecutiveScan_1Time ,        // (tsi_gencs_nscn)    Consecutive Scan number - Scan Electrode 1 time
      \t *   TsiLowPower_Disabled ,            // (tsi_gencs_stpe)    TSI STOP Enable - Disabled in low power
      \t *   TsiScanTrigger_SoftwareTrigger ,  // (tsi_gencs_stm)     Scan Trigger Mode - Software trigger
      \t *   TsiCurrentSource_NotSwapped ,     // (tsi_gencs_cursw)   Electrode/Reference OSC swap - Not swapped
      \t *   TsiChannel_0 ,                    // (tsi_data_tsich)    Tsi Channel - Channel Number 0
      \t *   TsiEventAction_InterruptRequest , // (tsi_data_dmaen)    DMA Transfer Enabled - Interrupt request
      \t *   TsiLowThreshold(0) ,              // (tsi_tshd_thresh)   Wake-up Channel Low Threshold value
      \t *   TsiHighThreshold(65535),          // (tsi_tshd_thresl)   Wake-up Channel High Threshold value
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
   ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : tsi_gencs_action,tsi_gencs_mode,
                             tsi_gencs_refchrg,tsi_gencs_dvolt,tsi_gencs_extchrg,
                             tsi_gencs_ps,tsi_gencs_nscn,tsi_gencs_stpe,
                             tsi_gencs_stm,tsi_gencs_cursw,
                             tsi_gencs_eosdmeo,

                             tsi_gencs_filter,tsi_gencs_noise_threshold,
                             tsi_gencs_resistor,tsi_gencs_rs                      : 0        ;
               %baseType   : tsi_data_tsich,tsi_data_dmaen                        : 0        ;
               %baseType   : tsi_tshd_thresh,tsi_tshd_thresl                      : 0        " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            tsi_gencs_action;tsi_gencs_mode;
            tsi_gencs_refchrg;tsi_gencs_dvolt;tsi_gencs_extchrg;
            tsi_gencs_ps;tsi_gencs_nscn;tsi_gencs_stpe;
            tsi_gencs_stm;tsi_gencs_cursw;
            tsi_gencs_eosdmeo;
            tsi_data_tsich;tsi_data_dmaen;
            tsi_tshd_thresh;tsi_tshd_thresl" >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%(r))
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <!-- ____ Init class Configure method ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enable();
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t   // Only set call-backs if feature enabled
      \t   setCallback(init.callbackFunction);
      \t   enableNvicInterrupts(init.irqlevel);
      \t\n
   ]]></template>
   <for keys=
             " var                                                    : statement            "
      values=" tsi_gencs_action,tsi_gencs_mode,
               tsi_gencs_refchrg,tsi_gencs_dvolt,tsi_gencs_extchrg,
               tsi_gencs_ps,tsi_gencs_nscn,tsi_gencs_stpe,
               tsi_gencs_stm,tsi_gencs_cursw,
               tsi_gencs_eosdmeo                                      : %configRegAssignment|TsiEnable_ModuleEnabled ;
               tsi_data_tsich,tsi_data_dmaen                          : %configRegAssignment ;
               tsi_tshd_thresh,tsi_tshd_thresl                        : %configRegAssignment " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            tsi_gencs_action,tsi_gencs_mode,
            tsi_gencs_refchrg,tsi_gencs_dvolt,tsi_gencs_extchrg,
            tsi_gencs_ps,tsi_gencs_nscn,tsi_gencs_stpe,
            tsi_gencs_stm,tsi_gencs_cursw,
            tsi_data_tsich,tsi_data_dmaen,
            tsi_tshd_thresh,tsi_tshd_thresl" >
   <![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <template where="basicInfo" >
   <![CDATA[
      }; // class $(_Structname)BasicInfo
      \t\n
   ]]>
   </template>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \t//class $(_Class) : public $(_Baseclass)_T<$(_Class)Info> {};
      \ttypedef $(_Baseclass)_T<$(_Class)Info> $(_Class);
      \t\n
   ]]>
   </template>

   <variableTemplate
      variables="defaultPinThreshold"
   ><![CDATA[
      \t/// %description
      \tstatic constexpr uint32_t defaultThreshold = %initExpression;
      \t\n
   ]]></variableTemplate>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="tsi_files" >
      <copy source="Project_Headers/tsi-MKL.h"     target="Project_Headers/tsi.h"         overwrite="true"  derived="true" />
      <copy source="Snippets/tsi-mkl-example.cpp"  target="Snippets/tsi-mkl-example.cpp"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="Thes settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <signals enabledBy="enablePeripheralSupport" />

</fragment>
