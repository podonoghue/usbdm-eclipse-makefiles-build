<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- uart0_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Universal Asynchronous Receiver/Transmitter" >

   <constant key="suppressInstance"         type="Boolean" value="false"         />
   <constant key="peripheralUsesInterrupts" type="Boolean" value="true"          />
   <constant key="irq_parameters"           type="String"  value="&quot;&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;&quot;"  />
   <constant key="isGeneratedByDefault"     type="Boolean" value="false"         />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="_enablePeripheral.xml"  />
   <title description="------------------------------------------" />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2                    (fProvider.getName())
    *  $(_Baseclass)   => e.g FTM0 => Ftm             (fPeripheral.getClassBaseName())
    *  $(_instance)     => e.g FTM0 => 0, PTA => A     (fPeripheral.getInstance())
    *  $(_Class)        => e.g FTM2 => Ftm2            (fPeripheral.getClassName())
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT  (fPeripheral.getBaseName())
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicValueExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %enumClass[index]               As for %paramType
    * %enumParam[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicValueExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %defaultClockExpression         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %defaultMaskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->
   <!-- ************* BDH ****************** -->

   <binaryOption key="uart_bdh_lbkdie" condition="uart_bdh_lbkdie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartBreakInterrupt"
      description="LIN Break Detect Interrupt Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_bdh_rxedgie" condition="uart_bdh_rxedgie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartRxdEdgeInterrupt"
      description="RxD Input Active Edge Interrupt Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_bdh_sbns" condition="uart_bdh_sbns_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartStop"
      toolTip="SBNS selects the number of stop bits present in a data frame"
      description="Stop Bit Number Select" >
      <choice name="One stop bit"  value="0" enum="OneBit"/>
      <choice name="Two stop bit"  value="1" enum="TwoBits"/>
   </binaryOption >

   <intOption key="uart_baudrate" condition="uart_bdh_sbr_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      typeName="uint8_t"
      description="Baud Rate Divisor"
      toolTip="The 13 bits in SBR[12:0] are referred to collectively as BR. They set the modulo divide rate for the\n
               UART baud rate generator. When BR is cleared, the UART baud rate generator is disabled to reduce\n
               supply current. When BR is 1 - 8191, the UART baud rate equals BUSCLK/(16xBR)"
   />

   <!-- ************* C1 ****************** -->

   <choiceOption key="uart_c1_mode" condition="uart_c1_loops_present&amp;&amp;uart_c1_rsrc_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      valueFormat="UART_C1_LOOPS(%s),UART_C1_RSRC(%s)"
      enumStem="UartMode"
      toolTip="Controls UART loop mode (Transmitter output is internally connected to receiver input)"
      description="Loop Mode Select" >
      <choice value="0,0" name="Normal"      enum="Normal"     />
      <choice value="1,0" name="Loop"        enum="Loop"       />
      <choice value="1,0" name="SingleWire"  enum="SingleWire" />
   </choiceOption>

   <binaryOption key="uart_c1_uartswai" condition="uart_c1_uartswai_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartWaitAction"
      toolTip="Controls action in Wait Mode"
      description="Stops in Wait Mode" >
      <choice name="Enable in Wait mode"  value="0" enum="Enable"/>
      <choice name="Freeze in Wait mode"  value="1" enum="Freeze"/>
   </binaryOption >

   <binaryOption key="uart_c1_m" condition="uart_c1_m_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartNumBits"
      description="9-Bit or 8-Bit Mode Select" >
      <choice name="8-bit"       value="0" enum="8Bit"/>
      <choice name="9-bit"       value="1" enum="9Bit"/>
   </binaryOption >

   <binaryOption key="uart_c1_wake" condition="uart_c1_wake_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartWakeOn"
      description="Receiver Wakeup Method Select" >
      <choice name="Idle-line wakeup"     value="0" enum="IdleLine"/>
      <choice name="Address-mark wakeup"  value="1" enum="AddressMark"/>
   </binaryOption >

   <binaryOption key="uart_c1_ilt" condition="uart_c1_ilt_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartIdleStart"
      toolTip="Determines if idle character bit count starts after start bit or stop bit"
      description="Idle Line Type Select" >
      <choice name="After start bit"  value="0" enum="AfterStartBit"/>
      <choice name="After stop bit"   value="1" enum="AfterStopBit"/>
   </binaryOption >

   <choiceOption key="uart_c1_parity" condition="uart_c1_pe_present&amp;&amp;uart_c1_pt_present"
      valueFormat="UART_C1_PE(%s),UART_C1_PT(%s)"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartParity"
      description="Parity" >
      <choice value="0,0" name="No parity"   enum="None" />
      <choice value="1,0" name="Even parity" enum="Even" />
      <choice value="1,1" name="Odd parity"  enum="Odd"  />
   </choiceOption>

   <!-- ************* C2 ****************** -->

   <binaryOption key="uart_c2_tie" condition="uart_c2_tie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartC2Tie"
      description="Transmitter Interrupt/DMA Transfer Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_c2_tcie" condition="uart_c2_tcie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartC2Tcie"
      toolTip="Allows interrupt or DMA requests triggered by TDRE"
      description="Transmission Complete Interrupt/DMA requests" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_c2_rie" condition="uart_c2_rie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartC2Rie"
      toolTip="Allows interrupt or DMA requests triggered by RDRF"
      description="Receiver Full Interrupt/DMA requests" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_c2_ilie" condition="uart_c2_ilie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartIdleInterrupt"
      toolTip="Enables the idle line flag, S1[IDLE], to generate interrupt requests , based on the state of C5[ILDMAS]"
      description="Idle Line Interrupt Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_c2_te" condition="uart_c2_te_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartTransmitInterrupt"
      description="Transmitter Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_c2_re" condition="uart_c2_re_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartReceive"
      description="Receiver Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_c2_rwu" condition="uart_c2_rwu_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartWakeUp"
      toolTip="Setting RWU enables the wakeup function and inhibits further receiver interrupt requests.\n
               Normally, hardware wakes the receiver by automatically clearing RWU"
      description="Receiver Wakeup Control" >
      <choice name="Normal operation"         value="0" enum="NormalOperation"/>
      <choice name="Wakeup function enabled"  value="1" enum="WakeupFunctionEnabled"/>
   </binaryOption >

   <!-- ************* S2 ****************** -->

   <binaryOption key="uart_s2_rxinv" condition="uart_s2_rxinv_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartRxdInvert"
      toolTip="Setting this field reverses the polarity of the received data input"
      description="Receive Data Inversion" >
      <choice name="RxD not inverted"  value="0" enum="Normal"/>
      <choice name="RxD inverted"      value="1" enum="Inverted"/>
   </binaryOption >

   <binaryOption key="uart_s2_rwuid" condition="uart_s2_rwuid_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartWakeupRecord"
      toolTip="When RWU is set and WAKE is cleared, this field controls whether the idle character that wakes the
receiver sets S1[IDLE]. This field must be cleared when C7816[ISO7816E] is set/enabled"
      description="Receive Wakeup Idle Detect" >
      <choice name="Idle chars ignored"        value="0" enum="IdleCharsIgnored"/>
      <choice name="Idle detect sets S1.IDLE"  value="1" enum="IdleDetectSetsS1Idle"/>
   </binaryOption >

   <binaryOption key="uart_s2_brk13" condition="uart_s2_brk13_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartBreakLength"
      toolTip="Determines whether the transmit break character is 10, 11, or 12 bits long, or 13 or 14 bits long"
      description="Break Transmit Character Length" >
      <choice name="Short"       value="0" enum="Short"/>
      <choice name="Long"        value="1" enum="Long"/>
   </binaryOption >

   <binaryOption key="uart_s2_lbkde" condition="uart_s2_lbkde_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartBreakDetect"
      toolTip="Enables LIN break character detection.\n
               While LBKDE is set, S1[RDRF], S1[NF], S1[FE], and S1[PF] are prevented from setting"
      description="LIN Break Detection Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <!-- ************* C3 ****************** -->

   <binaryOption key="uart_c3_txdir" condition="uart_c3_txdir_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartTxdDirection"
      description="Transmitter Pin Direction in Single-Wire mode" >
      <choice name="TxD pin is input"   value="0" enum="Input"/>
      <choice name="TxD pin is output"  value="1" enum="Output"/>
   </binaryOption >

   <binaryOption key="uart_c3_txinv" condition="uart_c3_txinv_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartTxdInvert"
      description="Transmit Data Inversion" >
      <choice name="TxD not inverted"  value="0" enum="Normal"/>
      <choice name="TxD inverted"      value="1" enum="Inverted"/>
   </binaryOption >

   <binaryOption key="uart_c3_orie" condition="uart_c3_orie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartOverrunErrorInterrupt"
      description="Overrun Error Interrupt Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_c3_neie" condition="uart_c3_neie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartNoiseErrorInterrupt"
      description="Noise Error Interrupt Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_c3_feie" condition="uart_c3_feie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartFrameErrorInterrupt"
      description="Framing Error Interrupt Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="uart_c3_peie" condition="uart_c3_peie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="UartParityErrorInterrupt"
      description="Parity Error Interrupt Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

<!-- Graphic here -->

   <for keys="field:name"
        values="
      uart_bdh_lbkdie:BdhLbkdie;
      uart_bdh_rxedgie:BdhRxedgie;
      uart_bdh_sbns:BdhSbns;
      uart_c1_loops:C1Loops;
      uart_c1_uartswai:C1Uartswai;
      uart_c1_rsrc:C1Rsrc;
      uart_c1_m:C1M;
      uart_c1_wake:C1Wake;
      uart_c1_ilt:C1Ilt;
      uart_c1_parity:C1Pe;
      uart_c2_tie:C2Tie;
      uart_c2_tcie:C2Tcie;
      uart_c2_rie:C2Rie;
      uart_c2_ilie:C2Ilie;
      uart_c2_te:C2Te;
      uart_c2_re:C2Re;
      uart_c2_rwu:C2Rwu;
      uart_c2_sbk:C2Sbk;
      uart_s2_lbkdif:S2Lbkdif;
      uart_s2_rxedgif:S2Rxedgif;
      uart_s2_rxinv:S2Rxinv;
      uart_s2_rwuid:S2Rwuid;
      uart_s2_brk13:S2Brk13;
      uart_s2_lbkde:S2Lbkde;
      uart_c3_txdir:C3Txdir;
      uart_c3_txinv:C3Txinv;
      uart_c3_orie:C3Orie;
      uart_c3_neie:C3Neie;
      uart_c3_feie:C3Feie;
      uart_c3_peie:C3Peie" >
      <setTemplate variables="%(field)" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %defaultFieldExpression
         \t}\n\n
      ]]></setTemplate>
   </for>

<!--   ========== UART Init class =============================== -->

   <template key="init_description" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init init {
      \t *
      \t *   // Setup values
      \t *   UartBdhLbkdie_Disabled                    // LIN Break Detect Interrupt Enable,
      \t *   UartBdhRxedgie_Disabled                   // RxD Input Active Edge Interrupt Enable,
      \t *   UartBdhSbns_OneStopBit                    // Stop Bit Number Select,
      \t *   0,                                        // Baud Rate Modulo Divisor,
      \t *   0,                                        // Baud Rate Bits,
      \t *   UartC1Loops_NormalOperation               // Loop Mode Select,
      \t *   UartC1Uartswai_EnableInWaitMode           // Stops in Wait Mode,
      \t *   UartC1Rsrc_InternalLoopBackMode           // Receiver Source Select,
      \t *   UartC1M_8Bit                              // 9-Bit or 8-Bit Mode Select,
      \t *   UartC1Wake_IdleLineWakeup                 // Receiver Wakeup Method Select,
      \t *   UartC1Ilt_AfterStartBit                   // Idle Line Type Select,
      \t *   UartC1Pe_Disabled                         // Parity Enable,
      \t *   UartC1Pt_EvenParity                       // Parity Type,
      \t *   UartC2Tie_Disabled                        // Transmitter Interrupt/DMA Transfer Enable,
      \t *   UartC2Tcie_Disabled                       // Transmission Complete Interrupt/DMA requests,
      \t *   UartC2Rie_Disabled                        // Receiver Full Interrupt/DMA requests,
      \t *   UartC2Ilie_Disabled                       // Idle Line Interrupt Enable,
      \t *   UartC2Te_Disabled                         // Transmitter Enable,
      \t *   UartC2Re_Disabled                         // Receiver Enable,
      \t *   UartC2Rwu_NormalOperation                 // Receiver Wakeup Control,
      \t *   UartC2Sbk_NormalOperation                 // Send Break,
      \t *   UartS2Lbkdif_NoInterrupt                  // LIN Break Detect Interrupt Flag,
      \t *   UartS2Rxedgif_NoInterrupt                 // RxD Pin Active Edge Interrupt Flag,
      \t *   UartS2Rxinv_RxdNotInverted                // Receive Data Inversion,
      \t *   UartS2Rwuid_IdleCharsIgnored              // Receive Wakeup Idle Detect,
      \t *   UartS2Brk13_Short                         // Break Transmit Character Length,
      \t *   UartS2Lbkde_Disabled                      // LIN Break Detection Enable,
      \t *   0,                                        // Transmit Bit 8,
      \t *   UartC3Txdir_TxdPinIsInput                 // Transmitter Pin Direction in Single-Wire mode,
      \t *   UartC3Txinv_TxdNotInverted                // Transmit Data Inversion,
      \t *   UartC3Orie_Disabled                       // Overrun Error Interrupt Enable,
      \t *   UartC3Neie_Disabled                       // Noise Error Interrupt Enable,
      \t *   UartC3Feie_Disabled                       // Framing Error Interrupt Enable,
      \t *   UartC3Peie_Disabled                       // Parity Error Interrupt Enable,
      \t *   0,                                        // Read receive data or write transmit data,
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure(init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      class $(_Class)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) interrupt call back.
      \t */
      \ttypedef $(_Class)BasicInfo::CallbackFunction CallbackFunction;
      \t
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  uartCallback Callback function to execute on interrupt
      \t */
      \tstatic void setCallback(CallbackFunction uartCallback) {
      \t   if (uartCallback == nullptr) {
      \t      uartCallback = unhandledCallback;
      \t   }
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || (sCallback == uartCallback),
      \t         "Handler already set");
      \t   sCallback = uartCallback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   //.....IRQ handler code here..........
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t   return;
      \t}
      \t\n
   ]]>
   </template>

   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/** Callback for programmatically set handler */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Class)Info::unhandledCallback;
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <setTemplate namespace="usbdm" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></setTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="uart_bdh_lbkdie,uart_bdh_rxedgie,uart_bdh_sbns,uart_bdh_sbr"
   ><![CDATA[
      \t   /// Baud Rate Register: High
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="uart_bdl_sbr"
   ><![CDATA[
      \t   /// Baud Rate Register: Low
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="uart_c1_loops,uart_c1_uartswai,uart_c1_rsrc,uart_c1_m,uart_c1_wake,uart_c1_ilt,uart_c1_parity"
   ><![CDATA[
      \t   /// Control Register 1
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="uart_c2_tie,uart_c2_tcie,uart_c2_rie,uart_c2_ilie,uart_c2_te,uart_c2_re,uart_c2_rwu,uart_c2_sbk"
   ><![CDATA[
      \t   /// Control Register 2
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="uart_s2_lbkdif,uart_s2_rxedgif,uart_s2_rxinv,uart_s2_rwuid,uart_s2_brk13,uart_s2_lbkde"
   ><![CDATA[
      \t   /// Status Register 2
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="uart_c3_t8,uart_c3_txdir,uart_c3_txinv,uart_c3_orie,uart_c3_neie,uart_c3_feie,uart_c3_peie"
   ><![CDATA[
      \t   /// Control Register 3
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="uart_d_rt"
   ><![CDATA[
      \t   /// Data Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName0 = %symbolicValueExpression1;
      \t\n
   ]]></initialValueTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t   // ..........  Configure ...........
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
             condition="irqHandlingMethod" ><![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      Info::setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t   // ..........  Regs to init .......... ;
      \t   uart->BDH    = init.bdh;
      \t   uart->BDL    = init.bdl;
      \t   uart->C1    = init.c1;
      \t   uart->C2    = init.c2;
      \t   uart->S2    = init.s2;
      \t   uart->C3    = init.c3;
      \t   uart->D    = init.d;
      \t}
      \t\n
   ]]></template>

<!--   Constructors -->

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t   %registerName = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <for keys="r"
      values="
            uart_bdh_lbkdie;
            uart_bdh_rxedgie;
            uart_bdh_sbns;
            uart_c1_loops;
            uart_c1_uartswai;
            uart_c1_rsrc;
            uart_c1_m;
            uart_c1_wake;
            uart_c1_ilt;
            uart_c1_parity;
            uart_c2_tie;
            uart_c2_tcie;
            uart_c2_rie;
            uart_c2_ilie;
            uart_c2_te;
            uart_c2_re;
            uart_c2_rwu;
            uart_c2_sbk;
            uart_s2_lbkdif;
            uart_s2_rxedgif;
            uart_s2_rxinv;
            uart_s2_rwuid;
            uart_s2_brk13;
            uart_s2_lbkde;
            uart_c3_txdir;
            uart_c3_txinv;
            uart_c3_orie;
            uart_c3_neie;
            uart_c3_feie;
            uart_c3_peie
            " >
      <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

   <for keys="r"
      values="
            uart_bdh_sbr;
            uart_bdl_sbr;
            uart_c3_t8;
            uart_d_rt
            " >
      <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%paramType0 value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask0) | %macro0(value);
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>


<!--   Default Initialisation value -->

   <initialValueTemplate codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            uart_bdh_lbkdie,
            uart_bdh_rxedgie,
            uart_bdh_sbns,
            uart_bdh_sbr,
            uart_bdl_sbr,
            uart_c1_loops,
            uart_c1_uartswai,
            uart_c1_rsrc,
            uart_c1_m,
            uart_c1_wake,
            uart_c1_ilt,
            uart_c1_parity,
            uart_c2_tie,
            uart_c2_tcie,
            uart_c2_rie,
            uart_c2_ilie,
            uart_c2_te,
            uart_c2_re,
            uart_c2_rwu,
            uart_c2_sbk,
            uart_s2_lbkdif,
            uart_s2_rxedgif,
            uart_s2_rxinv,
            uart_s2_rwuid,
            uart_s2_brk13,
            uart_s2_lbkde,
            uart_c3_t8,
            uart_c3_txdir,
            uart_c3_txinv,
            uart_c3_orie,
            uart_c3_neie,
            uart_c3_feie,
            uart_c3_peie,
            uart_d_rt
         "
   ><![CDATA[
      $(init_description)
      \ttypedef $(_Class)BasicInfo::Init Init;
      \t
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
      <![CDATA[
      \t}; // $(_Class)BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
      <![CDATA[
      }; // $(_Class)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <signals />

</peripheralPage>
