<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- tpm_quadrature_decoder.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

<!--  ____ TPM QUAD Controls ____________________________ -->

   <list key="quadDecoder" condition="tpm_qdctrl_quadmode_present&amp;&amp;_control"
      description="Quadrature decoder"
      hiddenBy="mode!=Quad" >

      <title description="Quadrature Decoder" />

      <binaryOption key="tpm_qdctrl_quadmode"
         enabledBy="enablePeripheralSupport"
         typeName="TpmQuadratureMode"
         baseType="uint8_t"
         description="Quadrature decoding mode"
         toolTip="Determines how the inputs control the counting sequence" >
         <choice value="0" name="Phase-AB Mode"         enum="Phase_AB_Mode" />
         <choice value="1" name="Count-Direction Mode"  enum="Count_Direction_Mode"  />
      </binaryOption>

      <!-- ___ Phase A ___ -->

      <title name="Channel A" description="Channel A" condition="tpm_pol_pol0_present||tpm_filter_ch0fval_present" />

      <binaryOption key="tpm_pol_pol0" condition="tpm_pol_pol0_present"
         enabledBy="enablePeripheralSupport"
         typeName="TpmPhaseAPolarity"
         baseType="uint8_t"
         description="Polarity of Phase A input"
         toolTip="Polarity of Phase A input" >
         <choice value="0" name="Active High" enum="ActiveHigh" />
         <choice value="1" name="Active Low"  enum="ActiveLow"  />
      </binaryOption>

      <choiceOption key="tpm_filter_ch0" condition="tpm_filter_ch0fval_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="TPM_FILTER_CH0FVAL(%s)"
         typeName="TpmFilterPhaseA"
         baseType="uint8_t"
         description="Channel Filter for Phase A input"
         toolTip="Selects the filter value for the A channel used by the Quad-decoder.\n
                  On input capture this acts as a filter\n
                  On output compare this delays the output to provide dead-time between outputs" >
         <choice          value="0"         name="Filter Disabled"                        enum="Disabled" isDefault="true" />
         <choiceExpansion value="%(cycles)" name='=ToString(4*%(cycles))+" clock cycles"' enum='=ToString(4*%(cycles))+"_clocks"' keys="cycles" dim="1,15" />
      </choiceOption>

      <floatOption key="tpm_filter_ch0_delay" condition="tpm_filter_ch0"
         description="Channel Filter Delay"
         toolTip="Calculated delay"
         ref="(4.0*tpm_filter_ch0)/inputClockFrequency"
         derived="true"
         locked="true"
         units="s"
         min="0.0"
      />

      <!-- ___ Phase B ___ -->

      <title name="Channel B" description="Channel B" condition="tpm_pol_pol1_present||tpm_filter_ch1fval_present" />

      <binaryOption key="tpm_pol_pol1" condition="tpm_pol_pol1_present"
         enabledBy="enablePeripheralSupport"
         typeName="TpmPhaseBPolarity"
         description="Polarity of Phase B input"
         toolTip="Polarity of Phase B input" >
         <choice value="0" name="Active High" enum="ActiveHigh" />
         <choice value="1" name="Active Low"  enum="ActiveLow"  />
      </binaryOption>

      <choiceOption key="tpm_filter_ch1" condition="tpm_filter_ch1fval_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="TPM_FILTER_CH1FVAL(%s)"
         typeName="TpmFilterPhaseB"
         baseType="uint8_t"
         description="Channel Filter for Phase B input"
         toolTip="Selects the filter value for the B channel used by the Quad-decoder.\n
                  On input capture this acts as a filter\n
                  On output compare this delays the output to provide dead-time between outputs" >
         <choice          value="0"         name="Filter Disabled"                        enum="Disabled" isDefault="true" />
         <choiceExpansion value="%(cycles)" name='=ToString(4*%(cycles))+" clock cycles"' enum='=ToString(4*%(cycles))+"_clocks"' keys="cycles" dim="1,15" />
      </choiceOption>

      <floatOption key="tpm_filter_ch1_delay" condition="tpm_filter_ch1"
         description="Channel Filter Delay"
         toolTip="Calculated delay"
         ref="(4.0*tpm_filter_ch1)/inputClockFrequency"
         derived="true"
         locked="true"
         units="s"
         min="0.0"
      />

   </list>

<!-- ___ TPM QUAD Init class _______________ -->

   <if condition="tpm_qdctrl_present&amp;&amp;_code" >

      <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" ><![CDATA[
         \t/**
         \t * Class used to do initialisation of Tpm QuadDecoder
         \t *
         \t * This class has a templated constructor that accepts various values:
         \t *
         \t * @note This constructor may be used to create a const instance in ROM
         \t *
         \t * Example:
         \t * @code
         \t * static const TpmQuadDecoder$(_instance)::QuadInit quadInit {
         \t *
         \t *    // Omitted parameters are taken to be zero unless a base value is given
         \t *    TpmQuadratureMode_Phase_AB_Mode , // Quadrature decoding mode
         \t *    TpmOverflowInterrupt_Enabled ,    // Overflow Interrupt
         \t *    TpmPrescale_DivBy32,              // Clock prescaler
         \t *    30000_ticks,                      // End value for counter
         \t *    TpmPhaseAPolarity_ActiveHigh ,    // Polarity of Phase A input
         \t *    TpmPhaseBPolarity_ActiveHigh ,    // Polarity of Phase B input
         \t *    TpmPhaseAFilter_Disabled ,        // Filtering on Phase A input
         \t *    TpmPhaseBFilter_Disabled ,        // Filtering on Phase B input
         \t *
         \t *    NvicPriority_Normal ,             // IRQ level for this peripheral
         \t *    tpmCallbak,                       // Timer overflow call-back
         \t *
         \t *    // Optional base value to start with (must be last parameter)
         \t *    TpmQuadDecoder$(_instance)::DefaultQuadInitValue
         \t * };
         \t *
         \t * // Initialise TPM from values specified above
         \t * TpmQuadDecoder$(_instance)::configure(quadInit)
         \t * @endcode
         \t */
         \tclass QuadInit {
         \t
         \tpublic:
         \t   /**
         \t    * Copy Constructor
         \t    */
         \t   constexpr QuadInit(const QuadInit &other) = default;
         \t
         \t   /**
         \t    * Default Constructor
         \t    */
         \t   constexpr QuadInit() = default;
         \t\n
      ]]></template>

      <!-- ____ QUAD Init class Member variables ____ -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
         variables="irqHandlingMethod"
       ><![CDATA[
         %multilineDescription
         \t   %params = nullptr;\n\n
      ]]></variableTemplate>

      <for keys=" type        : variables                        : init    "
          values="%baseType   : tpm_filter_ch0,tpm_filter_ch1    : 0       ;
                  %baseType   : tpm_qdctrl_quadmode              : 0       ;
                  %baseType   : tpm_sc_action,tpm_sc_ps          : 0       ;
                  %baseType   : tpm_pol_pol0,tpm_pol_pol1        : 0       ;
                  %baseType   : tpm_mod_mod                      : 0       ">
         <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
            variables="%(variables)"
         ><![CDATA[
            %multilineDescription
            \t   %(type) %registerName = %(init);\n\n
         ]]></variableTemplate>
      </for>

      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
         variables="/PCR/nvic_irqLevel"
      ><![CDATA[
         %multilineDescription
         \t   %paramType %registerName = %paramType_Normal;\n\n
      ]]></variableTemplate>

      <!-- ____ QUAD Init class Constructors ____ -->

      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
         variables="irqHandlingMethod"
         linePadding="xxx"
       ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
         \t
         \t      this->%paramName0 = %paramExpression;
         \t   }\n\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
         variables="/PCR/nvic_irqLevel"
         linePadding="xxx"
       ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
         \t
         \t      %registerName = %paramExpression;
         \t   }\n\n
      ]]></variableTemplate>

      <for keys="r" values="
         tpm_qdctrl_quadmode;
         tpm_sc_action;tpm_sc_ps;
         tpm_pol_pol0;tpm_pol_pol1;
         tpm_filter_ch0;tpm_filter_ch1;
         tpm_mod_mod" >
         <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
            variables="%(r)"
            linePadding="xxx"
         ><![CDATA[
            \t   /**
            \t    * Constructor for %description
            \t    * (%(r))
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            %paramDescription
            \t    */
            \t   template <typename... Types>
            \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
            \t
            \t      %constructorFieldAssignment;
            \t   }
            \t\n
         ]]></variableTemplate>
      </for>

      <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" ><![CDATA[
         \t};
         \t\n
      ]]></template>

      <!-- ____ QUAD Init class Configure method ____ -->

      <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
         \t/**
         \t * Configure QuadDecoder from values specified in init
         \t
         \t * @param quadInit Class containing initialisation values
         \t */
         \tstatic ErrorCode configure(const QuadInit &init) {
         \t
         \t   // Configure pins as needed
         \t   configureAllPins();
         \t
         \t   // Enable peripheral clock
         \t   enableClock();\n\n
      ]]></template>
      <template codeGenCondition="irqHandlingMethod" ><![CDATA[
         \t   // Set call-back
         \t   setCallback(init.callbackFunction);
         \t   enableNvicInterrupt(irqNums[0], init.irqlevel);\n
      ]]></template>
      <for keys=
             " var                           : statement                                   "
      values=" tpm_sc_action,tpm_sc_ps       : %register = 0                               ;
               tpm_qdctrl_quadmode           : %register = 0                               ;
               tpm_filter_ch0,tpm_filter_ch1 : %configRegAssignment                        ;
               tpm_mod_mod                   : %configRegAssignment                        ;
               tpm_cnt_count                 : %register = 0                               ;
               tpm_sc_action,tpm_sc_ps       : %configRegAssignment                        ;
               tpm_pol_pol0,tpm_pol_pol1     : %configRegAssignment                        ;
               tpm_qdctrl_quadmode           : %configRegAssignment|TPM_QDCTRL_QUADEN_MASK " >
         <variableTemplate variables="%(var)" codeGenCondition="enablePeripheralSupport" ><![CDATA[
            \t
            %multilineDescription
            \t   %(statement);\n
         ]]></variableTemplate>
      </for>
      <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
         \t
         \t   return E_NO_ERROR;
         \t}\n\n
      ]]></template>

      <!--  ____ Default QuadInitValue value ____ -->

      <variableTemplate codeGenCondition="enablePeripheralSupport&amp;&amp;(mode==Quad)"
         separator=","
         terminator=","
         padToComments="40"
         variables="
            tpm_qdctrl_quadmode,
            tpm_sc_action,
            tpm_sc_ps,
            tpm_mod_mod,
            tpm_pol_pol0,
            tpm_pol_pol1,
            tpm_filter_ch0,
            tpm_filter_ch1"
      ><![CDATA[
         \t/**
         \t * Default initialisation value for $(_Class)QuadDecoder
         \t * This value is created from Configure.usbdmProject settings
         \t */
         \tstatic constexpr QuadInit DefaultQuadInitValue = {%initNonZeroValues
         \t};\n\n
      ]]></variableTemplate>

   </if> <!-- condition="tpm_qdctrl_quadmode_present" -->

<!--  ____ TPM QUAD Declarations ____________________________ -->

   <template key="/$(_BASENAME)/declarations"  condition="_declaration&amp;&amp;tpm_qdctrl_present"
      codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * Class representing $(_NAME) as Quadrature decoder
      \t */
   \ttypedef $(_Baseclass)QuadDecoder_T<$(_Info)> $(_Baseclass)QuadDecoder$(_instance);\n
   ]]></template>

</fragment>
