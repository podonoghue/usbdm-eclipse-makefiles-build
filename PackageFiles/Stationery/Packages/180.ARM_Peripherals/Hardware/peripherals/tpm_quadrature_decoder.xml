<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- tpm_quadrature_decoder.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

<!--
    * General substitutions
    *  $(_NAME)         => e.g TPM2 => TPM2
    *  $(_name)         => e.g TPM2 => tpm2
    *  $(_BASENAME)     => e.g TPM0 => TPM, PTA => PT
    *  $(_basename)     => e.g TPM0 => tpm, PTA => pt
    *  $(_Class)        => e.g TPM2 => Tpm2
    *  $(_Baseclass)    => e.g TPM0 => Tpm
    *  $(_instance)     => e.g TPM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%variable[index]            Variable name
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

<!--  ==== TPM QUAD Controls =============================== -->

   <list key="quadDecoder" condition="tpm_qdctrl_quadmode_present&amp;&amp;_control"
      description="Quadrature decoder"
      hiddenBy="mode!=Quad" >

      <title description="Quadrature Decoder" />

      <binaryOption key="tpm_qdctrl_quadmode"
         enabledBy="enablePeripheralSupport"
         typeName="TpmQuadratureMode"
         description="Quadrature decoding mode"
         toolTip="Determines how the inputs control the counting sequence" >
         <choice value="0" name="Phase-AB Mode"         enum="Phase_AB_Mode" />
         <choice value="1" name="Count-Direction Mode"  enum="Count_Direction_Mode"  />
      </binaryOption>

      <!-- ___ Phase A ___ -->

      <title name="Channel A" description="Channel A" condition="tpm_pol_pol0_present||tpm_filter_ch0fval_present" />

      <binaryOption key="tpm_pol_pol0" condition="tpm_pol_pol0_present"
         enabledBy="enablePeripheralSupport"
         typeName="TpmPolarityPhaseA"
         description="Polarity of Phase A input"
         toolTip="Polarity of Phase A input" >
         <choice value="0" name="Active High" enum="ActiveHigh" />
         <choice value="1" name="Active Low"  enum="ActiveLow"  />
      </binaryOption>

      <choiceOption key="tpm_filter_ch0" condition="tpm_filter_ch0fval_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="TPM_FILTER_CH0FVAL(%s)"
         description="Channel Filter for Phase A input"
         typeName="TpmFilterPhaseA"
         enumType="uint8_t"
         toolTip="Selects the filter value for the A channel used by the Quad-decoder.\n
                  On input capture this acts as a filter\n
                  On output compare this delays the output to provide dead-time between outputs" >
         <choice          value="0"         name="Filter Disabled"                        enum="Disabled" isDefault="true" />
         <choiceExpansion value="%(cycles)" name='=ToString(4*%(cycles))+" clock cycles"' enum='=ToString(4*%(cycles))+"_clocks"' keys="cycles" dim="1,15" />
      </choiceOption>

      <floatOption key="tpm_filter_ch0_delay" condition="tpm_filter_ch0"
         description="Channel Filter Delay"
         toolTip="Calculated delay"
         ref="(4.0*tpm_filter_ch0)/inputClockFrequency"
         derived="true"
         locked="true"
         units="s"
         min="0.0"
      />

      <!-- ___ Phase B ___ -->

      <title name="Channel B" description="Channel B" condition="tpm_pol_pol1_present||tpm_filter_ch1fval_present" />

      <binaryOption key="tpm_pol_pol1" condition="tpm_pol_pol1_present"
         enabledBy="enablePeripheralSupport"
         typeName="TpmPolarityPhaseB"
         description="Polarity of Phase B input"
         toolTip="Polarity of Phase B input" >
         <choice value="0" name="Active High" enum="ActiveHigh" />
         <choice value="1" name="Active Low"  enum="ActiveLow"  />
      </binaryOption>

      <choiceOption key="tpm_filter_ch1" condition="tpm_filter_ch1fval_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="TPM_FILTER_CH1FVAL(%s)"
         description="Channel Filter for Phase B input"
         typeName="TpmFilterPhaseB"
         enumType="uint8_t"
         toolTip="Selects the filter value for the B channel used by the Quad-decoder.\n
                  On input capture this acts as a filter\n
                  On output compare this delays the output to provide dead-time between outputs" >
         <choice          value="0"         name="Filter Disabled"                        enum="Disabled" isDefault="true" />
         <choiceExpansion value="%(cycles)" name='=ToString(4*%(cycles))+" clock cycles"' enum='=ToString(4*%(cycles))+"_clocks"' keys="cycles" dim="1,15" />
      </choiceOption>

      <floatOption key="tpm_filter_ch1_delay" condition="tpm_filter_ch1"
         description="Channel Filter Delay"
         toolTip="Calculated delay"
         ref="(4.0*tpm_filter_ch1)/inputClockFrequency"
         derived="true"
         locked="true"
         units="s"
         min="0.0"
      />

   </list>

<!--  ==== TPM QUAD Init class =============================== -->

   <if condition="tpm_qdctrl_quadmode_present&amp;&amp;_code" >

      <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
         \t/**
         \t * Class used to do initialisation of Tpm QuadDecoder
         \t *
         \t * This class has a templated constructor that accepts various values:
         \t *
         \t * @note This constructor may be used to create a const instance in ROM
         \t *
         \t * Example:
         \t * @code
         \t * static const TpmQuadDecoder$(_instance)::QuadInit quadInit {
         \t *
         \t *    // Omitted parameters are taken to be zero unless a base value is given
         \t *    TpmQuadratureMode_Phase_AB_Mode , // Quadrature decoding mode
         \t *    TpmOverflowInterrupt_Enabled ,    // Overflow Interrupt
         \t *    TpmPrescale_DivBy32,              // Clock prescaler
         \t *    30000_ticks,                      // End value for counter
         \t *    TpmPhaseAPolarity_ActiveHigh ,    // Polarity of Phase A input
         \t *    TpmPhaseBPolarity_ActiveHigh ,    // Polarity of Phase B input
         \t *    TpmPhaseAFilter_Disabled ,        // Filtering on Phase A input
         \t *    TpmPhaseBFilter_Disabled ,        // Filtering on Phase B input
         \t *
         \t *    NvicPriority_Normal ,             // IRQ level for this peripheral
         \t *    tpmCallbak,                       // Timer overflow call-back
         \t *
         \t *    // Optional base value to start with (must be last parameter)
         \t *    TpmQuadDecoder$(_instance)::DefaultQuadInitValue
         \t * };
         \t *
         \t * // Initialise TPM from values specified above
         \t * TpmQuadDecoder$(_instance)::configure(quadInit)
         \t * @endcode
         \t */
         \tclass QuadInit {
         \t
         \tpublic:
         \t   /**
         \t    * Copy Constructor
         \t    */
         \t   constexpr QuadInit(const QuadInit &other) = default;
         \t
         \t   /**
         \t    * Default Constructor
         \t    */
         \t   constexpr QuadInit() = default;
         \t\n
      ]]></template>

      <!-- QUAD Init class Member variables -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
         variables="irqHandlingMethod"
       ><![CDATA[
         \t   // %description
         \t   %params = nullptr;\n\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="tpm_filter_ch0,tpm_filter_ch1"
      ><![CDATA[
         \t   // Quad input filter control
         \t   uint16_t %registerName = 0;\n\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="tpm_qdctrl_quadmode"
      ><![CDATA[
         \t   // Quadrature Decoder Control And Status Register
         \t   uint8_t %registerName = TPM_QDCTRL_QUADEN_MASK;\n\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="tpm_sc_action,tpm_sc_ps"
      ><![CDATA[
         \t   // Status And Control Register
         \t   uint8_t %registerName = 0;\n\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="tpm_mod"
      ><![CDATA[
         \t   // %description
         \t   uint16_t %registerName = 0_ticks;\n\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
         variables="/PCR/nvic_irqLevel"
      ><![CDATA[
         \t   // %description
         \t   %paramType %registerName = %paramType_Normal;\n\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables= "tpm_pol_pol0,tpm_pol_pol1"
       ><![CDATA[
         \t   // %description
         \t   uint8_t %registerName = 0;\n\n
      ]]></variableTemplate >

      <!-- QUAD Init class Constructors -->

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
         variables="irqHandlingMethod"
         linePadding="xxx"
       ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
         \t
         \t      this->%paramName0 = %paramExpression;
         \t   }\n\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
         variables="/PCR/nvic_irqLevel"
         linePadding="xxx"
       ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
         \t
         \t      %registerName = %paramExpression;
         \t   }\n\n
      ]]></variableTemplate>

      <for keys="r" values="
         tpm_qdctrl_quadmode;
         tpm_sc_action;
         tpm_sc_ps;
         tpm_pol_pol0;
         tpm_pol_pol1;
         tpm_filter_ch0;
         tpm_filter_ch1" >
         <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
            variables="%(r)"
            linePadding="xxx"
         ><![CDATA[
            \t   /**
            \t    * Constructor for %description
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            %paramDescription
            \t    */
            \t   template <typename... Types>
            \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
            \t
            \t      %registerName = (%registerName&~%mask) | %paramExpression;
            \t   }
            \t\n
         ]]></variableTemplate>
      </for>

      <for keys="r" values="
         tpm_mod" >
         <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
            variables="%(r)"
            linePadding="xxx"
         ><![CDATA[
            \t   /**
            \t    * Constructor for %description
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            %paramDescription
            \t    */
            \t   template <typename... Types>
            \t   constexpr QuadInit(%params, Types... rest) : QuadInit(rest...) {
            \t
            \t      %registerName = %paramExpression;
            \t   }
            \t\n
         ]]></variableTemplate>
      </for>

      <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
         \t};
         \t\n
      ]]></template>

   <!--  Default QuadInitValue value -->

      <variableTemplate codeGenCondition="enablePeripheralSupport&amp;&amp;(mode==Quad)"
         separator=","
         terminator=","
         variables="
            tpm_qdctrl_quadmode,
            tpm_sc_action,
            tpm_sc_ps,
            tpm_mod,
            tpm_pol_pol0,
            tpm_pol_pol1,
            tpm_filter_ch0,
            tpm_filter_ch1"
      ><![CDATA[
         \t/**
         \t * Default initialisation value for $(_Class)QuadDecoder
         \t * This value is created from Configure.usbdmProject settings
         \t */
         \tstatic constexpr QuadInit DefaultQuadInitValue = {%initExpression
         \t};\n\n
      ]]></variableTemplate>

      <!-- QUAD Init class Configure method -->

      <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
         \t/**
         \t * Configure QuadDecoder from values specified in init
         \t
         \t * @param quadInit Class containing initialisation values
         \t */
         \tstatic ErrorCode configure(const QuadInit &quadInit) {
         \t
         \t   // Configure pins as needed
         \t   configureAllPins();
         \t
         \t   // Enable peripheral clock
         \t   enableClock();\n\n
      ]]></template>
      <template codeGenCondition="irqHandlingMethod" ><![CDATA[
         \t   // Set call-back
         \t   setCallback(quadInit.callbackFunction);
         \t   enableNvicInterrupt(irqNums[0], quadInit.irqlevel);\n
      ]]></template>
      <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
         \t
         \t   // Disable timer to change clock (unable to switch directly between clock sources)
         \t   tpm->SC     = 0;
         \t   tpm->QDCTRL = 0;
         \t
         \t   // Restart counter
         \t   tpm->CNT = 0;
         \t
      ]]></template>
      <for keys="var" values="
            tpm_pol_pol0,tpm_pol_pol1;
            tpm_filter_ch0,tpm_filter_ch1;
            tpm_mod;
            tpm_sc_action,tpm_sc_ps" >
         <variableTemplate variables="%(var)" codeGenCondition="enablePeripheralSupport" ><![CDATA[
            \t
            \t   // %(var)
            \t   tpm->%registerNAME = quadInit.%registerName;\n
         ]]></variableTemplate>
      </for>
      <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
         \t
         \t   tpm->QDCTRL = quadInit.qdctrl | TPM_QDCTRL_QUADEN_MASK;
         \t
         \t   return E_NO_ERROR;
         \t}\n\n
      ]]></template>

   </if> <!-- condition="tpm_qdctrl_quadmode_present" -->

<!--  ==== TPM QUAD Declarations =============================== -->

   <template key="/$(_BASENAME)/declarations"  condition="_declaration&amp;&amp;tpm_qdctrl_present"
      codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * Class representing $(_NAME) as Quadrature decoder
      \t */
   \ttypedef $(_Baseclass)QuadDecoder_T<$(_Class)Info> $(_Baseclass)QuadDecoder$(_instance);\n
   ]]></template>

</fragment>
