<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- kbi0_mke06.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Keyboard interrupts" >

   <constant key="suppressInstance"         type="Boolean" value="false"         />
   <constant key="peripheralUsesInterrupts" type="Boolean" value="true"          />
   <constant key="irq_parameters"           type="String"  value="&quot;uint32_t kbi_sp&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;uint32_t&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;kbi_sp&quot;"    />
   <constant key="isGeneratedByDefault"     type="Boolean" value="false"         />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="_enablePeripheral.xml"  />
   <title description="------------------------------------------" />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicValueExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %enumClass[index]               As for %paramType
    * %enumParam[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicValueExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %defaultClockExpression         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %defaultMaskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Class)BasicInfo&quot;" />

   <!-- ************* PE ****************** -->

   <bitmaskOption key="kbi_pe_kbipe" condition="kbi_pe_kbipe_present&amp;&amp;($(_instance)==0)"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      typeName="KbiEnableMask"
      enumType="uint32_t"
      valueFormat="KbiEnableMask(%s)"
      defaultValue="0"
      description="KBI Pin Enables"
      toolTip="Bitmask selecting enabled pins"
      bitmask="0xFFFFFFFF"
      bitList="PT(A-D)(0-7);"
      pinMap="KBI$(_instance)_P%i,PT(A-D)(0-7);"
      value="0"
   />

   <bitmaskOption key="kbi_pe_kbipe" condition="kbi_pe_kbipe_present&amp;&amp;($(_instance)==1)"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      typeName="KbiEnableMask"
      enumType="uint32_t"
      valueFormat="KbiEnableMask(%s)"
      defaultValue="0"
      description="KBI Pin Enables"
      toolTip="Bitmask selecting enabled pins"
      bitmask="0xFFFFFFFF"
      bitList="PT(E-H)(0-7);"
      pinMap="KBI$(_instance)_P%i,PT(E-H)(0-7);"
      value="0"
   />


   <!-- ************* ES ****************** -->

   <bitmaskOption key="kbi_es_kbedg" condition="kbi_es_kbedg_present&amp;&amp;($(_instance)==0)"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      typeName="KbiPolarityMask"
      enumType="uint32_t"
      valueFormat="KbiPolarityMask(%s)"
      defaultValue="0"
      description="KBI Edge Selects"
      toolTip="Bitmask selecting polarity : 0=Falling edge/low level; 1=Rising edge/high level"
      bitmask="0xFFFFFFFF"
      bitList="PT(A-D)(0-7);"
      value="0"
   />

   <bitmaskOption key="kbi_es_kbedg" condition="kbi_es_kbedg_present&amp;&amp;($(_instance)==1)"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      typeName="KbiPolarityMask"
      enumType="uint32_t"
      valueFormat="KbiPolarityMask(%s)"
      defaultValue="0"
      description="KBI Edge Selects"
      toolTip="Bitmask selecting polarity : 0=Falling edge/low level; 1=Rising edge/high level"
      bitmask="0xFFFFFFFF"
      bitList="PT(E-H)(0-7);"
      value="0"
   />

   <!-- ************* SC ****************** -->

   <binaryOption key="kbi_sc_kbspen" condition="kbi_sc_kbspen_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="KbiStatusReflects"
      description="Real KBI_SP register enable"
      toolTip="The SP register may show either the current KBI pin values or\n
               the value captured when interrupt flag was set" >
      <choice name="Current value"  value="0" enum="CurrentValue"/>
      <choice name="Latched value"  value="1" enum="LatchedValue"/>
   </binaryOption >

   <binaryOption key="kbi_sc_kbf" condition="kbi_sc_kbf_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      hidden="true"
      enumStem="KbiEvent"
      description="KBI Interrupt Flag" >
      <choice name="Not detected"  value="0" enum="None"/>
      <choice name="Detected"      value="1" enum="InterruptDetected"/>
   </binaryOption >

   <binaryOption key="kbi_sc_kback" condition="kbi_sc_kback_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      hidden="true"
      enumStem="KbiAck"
      description="KBI Acknowledge"
      toolTip="Writing a 1 to KBACK is part of the flag clearing mechanism" >
      <choice name="Clear"      value="1" enum="Write1ToClear"/>
   </binaryOption >

   <binaryOption key="kbi_sc_rstkbsp" condition="kbi_sc_kbie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      hidden="true"
      description="Reset KBI_SP register"
      enumStem="KbiRst"
      toolTip="Writing a 1 to RSTKBSP is to clear the KBIxSP Register. This bit always reads as 0" >
      <choice name="Clear"      value="1" enum="Write1ToClear"/>
   </binaryOption >

   <binaryOption key="kbi_sc_kbie" condition="kbi_sc_kbie_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="KbiInterrupt"
      description="KBI Interrupt Enable" >
      <choice name="Interrupt disabled"  value="0" enum="Disabled"/>
      <choice name="Interrupt enabled"   value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="kbi_sc_kbmod" condition="kbi_sc_kbmod_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="KbiDetectionMode"
      description="KBI Detection Mode" >
      <choice name="Edges only"       value="0" enum="EdgesOnly"/>
      <choice name="Edges or levels"  value="1" enum="EdgesOrLevels"/>
   </binaryOption >

<!-- Graphic here -->

   <for keys="field:name"
        values="
      kbi_pe_kbipe:EnabledPins;
      kbi_es_kbedg:PinPolarity" >
      <setTemplate variables="%(field)" codeGenCondition="/$(_BASENAME)/enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %register = %paramName0;
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register);
         \t}
         \t\n
      ]]></setTemplate>
   </for>

   <setTemplate codeGenCondition="/$(_BASENAME)/enableGettersAndSetters"
      variables="/PORT/pin_index,kbi_pe_kbipe,kbi_es_kbedg"
      params=",polarity" >
   <![CDATA[
      \t/**
      \t * Enable input with polarity selection
      \t *
      %paramDescription0
      \t * @param polarity        Polarity of the input
      \t */
      \tstatic void enablePin(%param0, Polarity polarity) {
      \t
      \t   const uint32_t index = (%paramName0-(32*$(_instance)));
      \t   const uint32_t mask = 1<<index;
      \t
      \t   usbdm_assert(pinIndex<32, "Illegal pin index");
      \t
      \t   %register1 = %register1 | mask;
      \t   %register2 = (%register2&~mask) | (~polarity&mask);
      \t}
      \t
      \t/**
      \t * Disable input
      \t *
      %paramDescription0
      \t */
      \tstatic void disablePin(%param0) {
      \t
      \t   const uint32_t index = (%paramName0-(32*$(_instance)));
      \t   const uint32_t mask = 1<<index;
      \t
      \t   usbdm_assert(pinIndex<32, "Illegal pin index");
      \t
      \t   %register1 = %register1 & ~mask;
      \t}
      \t\n
   ]]>
   </setTemplate>


   <setTemplate variables="kbi_sc_kback" codeGenCondition="/$(_BASENAME)/enableGettersAndSetters"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tstatic void clearInteruptFlag() {
      \t   %register = %register|%mask;
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \tstatic %paramType getInteruptFlag() {
      \t   return %paramType(%register&%mask);
      \t}
      \t\n
   ]]></setTemplate>

   <for keys="field:name"
        values="
      kbi_sc_kbspen:Status;
      kbi_sc_kbie:EnabledInterrupts;
      kbi_sc_kbmod:DetectionMode" >
      <setTemplate variables="%(field)" codeGenCondition="/$(_BASENAME)/enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %defaultFieldExpression
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></setTemplate>
   </for>

<!--   ========== KBI Init class =============================== -->

   <template key="init_description" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t status) {
      \t *    (void) status;
      \t * }
      \t *
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *    // Setup values
      \t *    3, ActiveHigh,                   // Enabled pin and associated polarity - 3, Rising-edge/High-level
      \t *    5, ActiveLow,                    // Enabled pin and associated polarity - 5, Falling-edge/Low-level
      \t *    KbiStatusReflects_CurrentValue , // Real KBI_SP register enable - Current value
      \t *    KbiInterrupt_Disabled ,          // KBI Interrupt Enable - Disabled
      \t *    KbiDetectionMode_EdgesOnly,      // KBI Detection Mode - Edges only
      \t *
      \t *    $(_name)Callback,                // Call-back to execute on event - call-back function name
      \t *    NvicPriority_Low,                // Priority for interrupt - Low
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" >
   <![CDATA[
      class $(_Class)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  kbiCallback Callback function to execute on interrupt
      \t */
      \tstatic void setCallback(CallbackFunction kbiCallback) {
      \t   if (kbiCallback == nullptr) {
      \t      kbiCallback = unhandledCallback;
      \t   }
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || (sCallback == kbiCallback),
      \t         "Handler already set");
      \t   sCallback = kbiCallback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   // Get pin capture value and mask for valid bits only
      \t   uint32_t kbi_sp = kbi->SP & kbi->ES;
      \t
      \t   // Clear status
      \t   kbi->SC = kbi->SC|KBI_SC_KBACK_MASK|KBI_SC_RSTKBSP_MASK;
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t   return;
      \t}
      \t\n
   ]]>
   </template>

   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/** Callback for programmatically set handler */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Class)Info::unhandledCallback;
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <initialValueTemplate namespace="usbdm" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="kbi_pe_kbipe"
   ><![CDATA[
      \t   /// KBI Pin Enables
      \t   uint32_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="kbi_es_kbedg"
   ><![CDATA[
      \t   /// KBI Edge Selects
      \t   uint32_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="kbi_sc_rstkbsp,kbi_sc_kbspen,kbi_sc_kbf,kbi_sc_kback,kbi_sc_kbie,kbi_sc_kbmod"
   ><![CDATA[
      \t   /// KBI Status and Control Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName0 = %symbolicValueExpression1;
      \t\n
   ]]></initialValueTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t   // ..........  Configure ...........
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
             condition="irqHandlingMethod" ><![CDATA[
      \t   Info::setCallback(init.callbackFunction);
      \t   enableNvicInterrupts(init.irqlevel);
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t   // ..........  Regs to init .......... ;
      \t   kbi->SC    = KBI_SC_KBACK_MASK;
      \t   kbi->SC    = KBI_SC_RSTKBSP_MASK;
      \t   kbi->PE    = init.pe;
      \t   kbi->ES    = init.es;
      \t   kbi->SC    = init.sc;
      \t}
      \t\n
   ]]></template>

<!--   Constructors -->

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="kbi_pe_kbipe"
      params="enableMask"
      nonDefaultParams="2"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramName;
      \t   }
      \t\n
   ]]>
   </setTemplate>

   <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="kbi_es_kbedg"
      params="polarityMask"
      nonDefaultParams="2"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramName;
      \t   }
      \t\n
   ]]>
   </setTemplate>

   <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="/PORT/pin_index,kbi_pe_kbipe,kbi_es_kbedg"
      params=",polarity"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for Input with polarity selection
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @paramDescription0
      \t    * @param polarity    Polarity of the input
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      \t          %param0,
      \t          Polarity %paramName1, Types... rest) : Init(rest...) {
      \t
      \t   const uint32_t index = (%paramName0-(32*$(_instance)));
      \t   const uint32_t mask = 1<<index;
      \t
      \t      // usbdm_assert(pinIndex<32, "Illegal pin index");
      \t
      \t      %registerName1 |= mask;
      \t      %registerName2 |= mask&~%paramName1;
      \t   }
      \t\n
   ]]>
   </setTemplate>

   <for keys="r"
      values="
            kbi_sc_kbspen;
            kbi_sc_kbie;
            kbi_sc_kbmod
            " >
      <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

<!--   Default Initialisation value -->

   <initialValueTemplate codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            kbi_pe_kbipe,
            kbi_es_kbedg,
            kbi_sc_kbspen,
            kbi_sc_kbie,
            kbi_sc_kbmod
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
      <![CDATA[
      \t}; // $(_Class)BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm" >
      <![CDATA[
      }; // $(_Class)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Signal mapping ****************** -->
   <category name="SIM" description="Pin mapping">
      <aliasOption key="/SIM/sim_scgc_$(_name)"     constant="false" optional="true" />
   </category>

   <signals enabledBy="/$(_BASENAME)/enablePeripheralSupport" />

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id = "kbi_files" >
      <copy source="Project_Headers/kbi-MKE.h"  target="Project_Headers/kbi.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

</peripheralPage>
