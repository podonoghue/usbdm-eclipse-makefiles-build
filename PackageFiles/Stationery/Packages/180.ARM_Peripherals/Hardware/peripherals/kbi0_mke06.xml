<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- kbi0_mke06.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Keyboard interrupts">

   <xi:include href="_default_instance.xml"/>

   <xi:include href="_mapPinsOption.xml"/>

   <xi:include href="_irqOption.xml"/>

   <binaryOption key="kbi_pe_kbipe" condition="kbi_pe_kbipe_present"
      enumStem="KbiPeKbipe"
      description="KBI Pin Enables" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="kbi_es_kbedg" condition="kbi_es_kbedg_present"
      enumStem="KbiEsKbedg"
      description="KBI Edge Selects" >
      <choice name="Falling edge/low level"  value="0" enum="FallingEdgeLowLevel"/>
      <choice name="Rising edge/high level"  value="1" enum="RisingEdgeHighLevel"/>
   </binaryOption>

   <intOption key="kbi_sc_rstkbsp" condition="kbi_sc_rstkbsp_present"
      description="Reset KBI_SP register"
      toolTip="Writing a 1 to RSTKBSP is to clear the KBIxSP Register. This bit always reads as 0"
   />

   <binaryOption key="kbi_sc_kbspen" condition="kbi_sc_kbspen_present"
      enumStem="KbiScKbspen"
      description="Real KBI_SP register enable" >
      <choice name="Current value"  value="0" enum="CurrentValue"/>
      <choice name="Latched value"  value="1" enum="LatchedValue"/>
   </binaryOption>

   <binaryOption key="kbi_sc_kbf" condition="kbi_sc_kbf_present"
      enumStem="KbiScKbf"
      description="KBI Interrupt Flag" >
      <choice name="Not detected"  value="0" enum="NotDetected"/>
      <choice name="Detected"      value="1" enum="Detected"/>
   </binaryOption>

   <intOption key="kbi_sc_kback" condition="kbi_sc_kback_present"
      description="KBI Acknowledge - Writing a 1 to KBACK is part of the flag clearing mechanism"
   />

   <binaryOption key="kbi_sc_kbie" condition="kbi_sc_kbie_present"
      enumStem="KbiScKbie"
      description="KBI Interrupt Enable" >
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="kbi_sc_kbmod" condition="kbi_sc_kbmod_present"
      enumStem="KbiScKbmod"
      description="KBI Detection Mode" >
      <choice name="Edges only"       value="0" enum="EdgesOnly"/>
      <choice name="Edges or levels"  value="1" enum="EdgesOrLevels"/>
   </binaryOption>

<!-- Grahic here -->  

   <for keys="field:name"
        values="
      kbi_pe_kbipe:PeKbipe;
      kbi_es_kbedg:EsKbedg;
      kbi_sc_kbspen:ScKbspen;
      kbi_sc_kbf:ScKbf;
      kbi_sc_kbie:ScKbie;
      kbi_sc_kbmod:ScKbmod">
      <setTemplate variables="%(field)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %defaultFieldExpression
         \t}\n\n
      ]]></setTemplate>
   </for>

<!--   ========== KBI Init class =============================== -->

   <template key="init_description" namespace="all">
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_class)::Init init {
      \t *
      \t *   // Setup values
      \t *   KbiPeKbipe_Disabled                       // KBI Pin Enables,
      \t *   KbiEsKbedg_FallingEdgeLowLevel            // KBI Edge Selects,
      \t *   0,                                        // Reset KBI_SP register,
      \t *   KbiScKbspen_CurrentValue                  // Real KBI_SP register enable,
      \t *   KbiScKbf_NotDetected                      // KBI Interrupt Flag,
      \t *   0,                                        // KBI Acknowledge - Writing a 1 to KBACK is part of the flag clearing mechanism,
      \t *   KbiScKbie_Disabled                        // KBI Interrupt Enable,
      \t *   KbiScKbmod_EdgesOnly                      // KBI Detection Mode,
      \t * };
      \t *
      \t * // Initialise $(_class) from values specified above
      \t * $(_class)::configure(init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm">
   <![CDATA[
      class $(_class)BasicInfo {
      \t
      public:
      \t
      \t/**
      \t * Type definition for $(_class) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)(const uint32_t &);
      \t\n
   ]]>
   </template>

   <template namespace="usbdm">
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <setTemplate namespace="usbdm" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></setTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="kbi_pe_kbipe"
   ><![CDATA[
      \t   /// KBI Pin Enables
      \t   uint32_t pe = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="kbi_es_kbedg"
   ><![CDATA[
      \t   /// KBI Edge Selects
      \t   uint32_t es = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="kbi_sc_rstkbsp,kbi_sc_kbspen,kbi_sc_kbf,kbi_sc_kback,kbi_sc_kbie,kbi_sc_kbmod"
   ><![CDATA[
      \t   /// KBI Status and Control Register
      \t   uint32_t sc = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName = %enumClass_Normal;\n\n
   ]]></initialValueTemplate>

<!--   Configure methods -->

   <template discardRepeats="true" key="/KBI/InitMethod" namespace="all" ><![CDATA[
      \t/**
      \t * Configure KBI from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      // Only set call-back if feature enabled
      \t      setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t   enable();
      \t
      \t   kbi->PE    = init.pe;
      \t   kbi->ES    = init.es;
      \t   kbi->SC    = init.sc;
      \t   kbi->SP    = init.sp;
      \t
      \t   calibrate();
      \t}
      \t
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}\n
   ]]></template>

<!--   Constructors -->

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%enumParam0 = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <setTemplate namespace="usbdm"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      #if $(irqHandlingMethod)
      \t      %registerName = %paramExpression;
      #else
      \t      (void)%paramExpression;
      #endif
      \t   }\n\n
   ]]></setTemplate>

   <for keys="r"
      values="
            kbi_pe_kbipe;
            kbi_es_kbedg;
            kbi_sc_kbspen;
            kbi_sc_kbf;
            kbi_sc_kbie;
            kbi_sc_kbmod
            ">
      <setTemplate namespace="usbdm"
         variables="%(r)"
         linePadding="xxx">
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %comments
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

   <for keys="r"
      values="
            kbi_sc_rstkbsp;
            kbi_sc_kback
            ">
      <setTemplate namespace="usbdm"
         variables="%(r)"
         linePadding="xxx">
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(unsigned value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | value;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

<!--   Default Initialisation value -->

   <initialValueTemplate
      separator=","
      terminator=","
      variables="
            kbi_pe_kbipe,
            kbi_es_kbedg,
            kbi_sc_kbspen,
            kbi_sc_kbf,
            kbi_sc_kbie,
            kbi_sc_kbmod,
            irqLevel
         "
   ><![CDATA[
      $(init_description)
      \ttypedef $(_class)BasicInfo::Init Init;
      \t
      \t/**
      \t * Default initialisation value for $(_class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <template namespace="usbdm">
      <![CDATA[
      \t}; // $(_class)::BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm">
      <![CDATA[
      }; // $(_class)::BasicInfo\n\n
   ]]>
   </template>

<signals />

</peripheralPage>
