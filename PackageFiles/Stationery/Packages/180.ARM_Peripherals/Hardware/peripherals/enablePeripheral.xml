<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- mapPinsOption.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

<!-- GENERAL SETTINGS -->

   <equation key="_debugcode" value="false" />

   <title description="General Settings" toolTip="" />

   <!-- _________ Peripheral support _________________  -->

   <!--
      Generates:
         enablePeripheralSupport               = enable support for this instance
         /$(_STRUCTNAME)/generateSharedInfo    = OR of enablePeripheralSupport for instances using same _STRUCTNAME
         /$(_BASENAME)/enablePeripheralSupport = OR of enablePeripheralSupport for all instances
   -->

   <!-- Enable for this peripheral -->
   <binaryOption key="enablePeripheralSupport" condition="!enablePeripheralSupport"
      hidden="true"
      description="Enable peripheral support"
      toolTip="Even if disabled, some code may still be generated but will \n
               be removed by linker if not used" >
      <choice value="false" name="Minimal code for $(_NAME)"  />
      <choice value="true"  name="Generate code for $(_NAME)" isDefault="=generateDefault" />
   </binaryOption>

   <!-- If not already generated -->
   <if condition="!/$(_STRUCTNAME)/generateSharedInfo" >

      <!-- Construct equation to check if any instance sharing the same struct is enabled -->
      <equation key="_enable" value='="false"' />
      <for keys="instance" values="=_instanceList" >
         <equation
            key="_enable"
            condition='="$(_STRUCTNAME)"==/%(instance)/structName'
            value='=_enable+"||/%(instance)/enablePeripheralSupport"'
         />
      </for>
      <!-- stringOption key="yyy" value="=_enable"/ -->

      <!-- Enable for shared code needed by all instances of peripheral -->
      <binaryOption key="/$(_STRUCTNAME)/generateSharedInfo"
         ref="=_enable"
         description="=_enable"
         hidden="true"
         locked="true"
         derived="true" >
         <choice value="false" name="Minimal shared code for structName=$(_STRUCTNAME)"  />
         <choice value="true"  name="All shared code for structName=$(_STRUCTNAME)"      />
      </binaryOption>
   </if>

   <!-- If not already generated -->
   <if condition="!/$(_BASENAME)/enablePeripheralSupport" >

      <!-- Construct equation to check if any instance sharing the same struct is enabled -->
      <equation key="_enable" value='="false"' />
      <for keys="instance" values="=_instanceList" >
         <equation
            key="_enable"
            value='=_enable+"||/%(instance)/enablePeripheralSupport"'
         />
      </for>
      <!-- stringOption key="yyy" value="=_enable"/ -->

      <!-- Enable for shared code needed by all instances of peripheral -->
      <binaryOption key="/$(_BASENAME)/enablePeripheralSupport"
         ref="=_enable"
         description="=_enable"
         hidden="true"
         locked="true"
         derived="true" >
         <choice value="false" name="Minimal shared code for basename=$(_BASENAME)"  />
         <choice value="true"  name="All shared code for basename=$(_BASENAME)"      />
      </binaryOption>
   </if>

   <aliasOption key="enablePeripheralSupport" locked="false" />
   <aliasOption name="/$(_BASENAME)/enablePeripheralSupport" key="/$(_BASENAME)/enablePeripheralSupport" optional="true"  condition="=_debugcode" />
   <aliasOption name="/$(_STRUCTNAME)/generateSharedInfo"    key="/$(_STRUCTNAME)/generateSharedInfo"    optional="true"  condition="=_debugcode" />

   <!-- _______ Getters and Setters __________  -->

   <!-- Enable for generation of getters and setters -->
   <binaryOption key="enableGettersAndSetters" condition="!enableGettersAndSetters"
      enabledBy="enablePeripheralSupport"
      description="Enable Getters and Setters"
      toolTip="Even if disabled, some code may still be generated" >
      <choice value="false" name="Minimal Get and Set methods"        isDefault="true" />
      <choice value="true"  name="All Get and Set methods"  />
   </binaryOption>

    <!-- Configure peripheral instance in startup -->
   <binaryOption key="configurePeripheralInStartUp" condition="!configurePeripheralInStartUp&amp;&amp;configureInStartupDefault"
      enabledBy="enablePeripheralSupport"
      description="Configure this peripheral"
      toolTip="Configure this peripheral in startup code before main() is entered\n
               Even if disabled, some minimal code may still be executed" >
      <choice value="false" name="Not Configured"              />
      <choice value="true"  name="Configured in startup code"  isDefault="=configureInStartupDefault" />
   </binaryOption>

   <!-- Pin mapping and enables -->

   <if condition="/PCR/mux_present&amp;&amp;_hasPcrTable" >

      <binaryOption key="mapPinsOnEnable"
         enabledBy="enablePeripheralSupport"
         description="Map pins when configured"
         toolTip="Map all allocated pins on a peripheral when the\n
                  peripheral is enabled by configure() method etc" >
         <choice value="false" name="Don't map pins"  />
         <choice value="true"  name="Map pins when configured"  isDefault="true"/>
      </binaryOption>

      <template><![CDATA[
         \t//! Map all allocated pins on a peripheral when enabled
         \tstatic constexpr bool mapPinsOnEnable = $(mapPinsOnEnable);\n\n
         \t
         \t/**
         \t * Configures all mapped pins associated with $(_NAME)
         \t *
         \t * @note Locked pins will be unaffected
         \t */
         \tstatic void configureAllPins() {
         \t
         \t   // Configure pins if selected and not already locked
         \t   if constexpr (mapPinsOnEnable) {
         \t      initPCRs();
         \t   }
         \t}
         \t
         \t/**
         \t * Disabled all mapped pins associated with $(_NAME)
         \t *
         \t * @note Only the lower 16-bits of the PCR registers are modified
         \t *
         \t * @note Locked pins will be unaffected
         \t */
         \tstatic void disableAllPins() {
         \t
         \t   // Disable pins if selected and not already locked
         \t   if constexpr (mapPinsOnEnable) {
         \t      clearPCRs();
         \t   }
         \t}
         \t\n
      ]]></template>
   </if>

<!-- ___________ INTERRUPTS ____________________ -->

   <!-- Only create if device has interrupts -->
   <if condition="_hardwareIrqCount" >

      <!--
      Patterns for pattern and classHandler
        -  %i replaced with peripheral instance e.g. FTM1 => 1, PTA => A          Use $(_instance) instead
        -  %b replaced with peripheral base name e.g. FTM1 => FTM                 Use $(_BASENAME) instead
        -  %c replaced with peripheral C++ base class name e.g. FTM1 => Ftm       Use $(_Baseclass) instead
        -  _IRQHandler is appended to the pattern (only)
      Multiple patterns and classsHandlers may be used separated by ';'
      -->

      <!--
         Generates:
            irqHandlingMethod                     = Interrupts enabled for this instance
            /$(_STRUCTNAME)/generateSharedIrqInfo = OR of irqHandlingMethod using same _STRUCTNAME
            /$(_BASENAME)/irqHandlingMethod       = OR of all irqHandlingMethod
      -->

      <title description="Interrupts" />

      <equation key="_userIrqCount" value="=_hardwareIrqCount" condition="!_userIrqCount" />

      <!-- If not explicitly controlled, IRQ options are always enabled -->
      <constant key="irqEnable"        type="Boolean" value="true"  condition="!irqEnable"/>

      <!-- Default IRQ vector patterns if none specified -->
      <equation key="irq_pattern"       value="^$(_NAME)_(.+)$;^$(_NAME)$"                                            condition="!irq_pattern" />
      <equation key="irq_ClassHandler"  value="$(_Class)::irqHandler&lt;$(_Class)IrqNum_$1&gt;;$(_Class)::irqHandler" condition="!irq_ClassHandler" />

      <!-- Interrupt control for this peripheral -->
      <irqOption key="irqHandlingMethod" condition="!irqHandlingMethod"
         hidden="true"
         valueFormat="%s"
         enabledBy="enablePeripheralSupport&amp;&amp;irqEnable"
         typeName="CallbackFunction"
         description="Peripheral interrupt handling"
         toolTip="If enabled, the handler may be set using the setCallback() function or\n
                  by overriding the interrupt handler method in the peripheral class\n
                  If not enabled, then interrupt handlers may be installed by naming them \n
                  (see weak names used in vector table)."
         pattern="=irq_pattern"
         classHandler="=irq_ClassHandler" />

      <if condition="!/$(_STRUCTNAME)/generateSharedIrqInfo" >

         <!-- Construct equation to check if interrupts are enabled on any instance sharing the same struct -->
         <equation key="_enable" value='="false"' />
         <for keys="instance" values="=_instanceList" >
            <if condition="/%(instance)/_hardwareIrqCount" >
               <equation
                  key="_enable"
                  condition='="$(_STRUCTNAME)"==/%(instance)/structName'
                  value='=_enable+"||/%(instance)/irqHandlingMethod"'
               />
            </if>
         </for>
         <!-- printVar key="_enable"/ -->

         <!-- Enable for shared code needed by all instances of peripheral using same _STRUCTNAME -->
         <binaryOption key="/$(_STRUCTNAME)/generateSharedIrqInfo" name="/$(_STRUCTNAME)/generateSharedIrqInfo"
            ref="=_enable"
            description="=_enable"
            hidden="true"
            locked="true"
            derived="true" >
            <choice value="false" name="No shared interrupt code for $(_STRUCTNAME)"  />
            <choice value="true"  name="Shared interrupt code for $(_STRUCTNAME)"      />
         </binaryOption>
      </if>

      <if condition="!/$(_BASENAME)/irqHandlingMethod" >

         <!-- Construct equation to check if interrupts are enabled on any instance -->
         <equation key="_enable" value='="false"' />
         <for keys="instance" values="=_instanceList" >
            <if condition="/%(instance)/_hardwareIrqCount" >
               <equation
                  key="_enable"
                  value='=_enable+"||/%(instance)/irqHandlingMethod"'
               />
            </if>
         </for>
         <!-- stringOption key="yyy" value="=_enable"/ -->

         <!-- Enable for shared code needed by all instances of peripheral -->
         <binaryOption key="/$(_BASENAME)/irqHandlingMethod"  name="/$(_BASENAME)/irqHandlingMethod"
            ref="=_enable"
            description="=_enable"
            hidden="true"
            locked="true"
            derived="true" >
            <choice value="false" name="No shared interrupt code for $(_BASENAME)"  />
            <choice value="true"  name="Shared interrupt code for $(_BASENAME)"      />
         </binaryOption>
      </if>

      <!-- Display here -->
      <aliasOption key="irqHandlingMethod" locked="false" optional="true"  />

      <aliasOption key="/$(_STRUCTNAME)/generateSharedIrqInfo" optional="true"  condition="=_debugcode" />
      <aliasOption key="/$(_BASENAME)/irqHandlingMethod"       optional="true"  condition="=_debugcode"/>
   </if>

   <if condition="_hardwareIrqCount&amp;&amp;!suppressIrqArray" >

      <!-- Create only if needed -->

      <for keys="irqNum" values="=_hardwareIrqNums" iterationVar="ch" condition='=(_hardwareIrqCount>1)' >
         <equation key="irqmodifier" value='=ReplaceAll("%(irqNum)","^(.+)_(.+)_IRQn$","$2")' />

         <equation key="handlerName"  value='="handler_template_"+irqmodifier' />
         <clipboard key='=handlerName' condition='=!Exists(handlerName)'
            hiddenBy="irqHandlingMethod||!enablePeripheralSupport"
            description='="Interrupt handler template for "+irqmodifier'
            toolTip='Interrupt handler example'>
            <![CDATA[="
               \t/**
               \t * Handler for $(_NAME) "+irqmodifier+" interrupt
               \t */
               \tstatic void "+irqmodifier+"_IRQHandler() {
               \t   ...
               \t};
               \t"
            ]]>
         </clipboard>

         <equation key="irqLevelName" value='="irqLevel_"+irqmodifier'         />
         <choiceOption key='=irqLevelName' condition='=!Exists(irqLevelName)'
            enabledBy="enablePeripheralSupport"
            description='="IRQ priority level for "+irqmodifier'
            toolTip='="Priority level used to configure the NVIC for "+irqmodifier+"\n
                     Selecting -Interrupts Disabled- will disable interrupts in the NVIC when configured"'
            valueFormat="%s"
            disabledValue="Interrupts disabled"
            derivedFrom="/PCR/nvic_irqLevel"
            >
         </choiceOption>
      </for>

      <for keys="irqNum" values="=_hardwareIrqNums" iterationVar="ch" condition='=_hardwareIrqCount==1' >
         <equation key="irqmodifier" value='=ReplaceAll("%(irqNum)","^(.+)_IRQn$","$1")'/>
         <clipboard key='="handler_template"' condition="!handler_template"
            hiddenBy="irqHandlingMethod||!enablePeripheralSupport"
            description="Interrupt handler template"
            toolTip='Interrupt handler example'>
            <![CDATA[="
               \t/**
               \t * Handler for $(_NAME) interrupt
               \t */
               \tstatic void "+irqmodifier+"_IRQHandler() {
               \t   ...
               \t};
               \t"
            ]]>
         </clipboard>
         <equation key="irqLevelName" value='="irqLevel_"+irqmodifier'         />
         <choiceOption key="irqLevel" condition="!irqLevel"
            hidden="true"
            enabledBy="enablePeripheralSupport"
            description="IRQ priority level"
            toolTip="Priority level used to configure the NVIC.\n
                     Selecting -Interrupts Disabled- will disable interrupts in the NVIC when configured"
            valueFormat="%s"
            disabledValue="Interrupts disabled"
            derivedFrom="/PCR/nvic_irqLevel"
            >
         </choiceOption>
      </for>

      <!-- Display here (wherever the original) -->
      <aliasOption key="irqLevel"       locked="false" optional="true" />
      <!--  aliasOption key="irqHandlerName" locked="false" / -->

      <variableTemplate codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="irqHandlingMethod"
      ><![CDATA[
          \t//! Class based callback handler has been installed in vector table for this instance
          \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
          \t\n
      ]]></variableTemplate>

      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" condition="!suppressIrqArray"
         variables="irqHandlingMethod"
      ><![CDATA[
          \t//! Common class based callback code has been generated for this class of peripheral
          \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
          \t\n
      ]]></variableTemplate>

      <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"  condition="!suppressIrqArray"
         immediateVariables="irq_parameters,irq_dummy_parameters" >
      <![CDATA[
         \t/**
         \t * Type definition for $(_Baseclass) interrupt call back.
         \t */
         \ttypedef void (*CallbackFunction)($(irq_parameters));
         \t
         \t/**
         \t * Callback to catch unhandled interrupt
         \t */
         \tstatic void unhandledCallback($(irq_dummy_parameters)) {
         \t   setAndCheckErrorCode(E_NO_HANDLER);
         \t}
         \t\n
      ]]>
      </template>

      <variableTemplate
         variables="/$(_BASENAME)/irqHandlingMethod,irqLevel" condition="!suppressIrqArray"
      ><![CDATA[
         \t//! IRQ numbers for hardware
         \tstatic constexpr IRQn_Type irqNums[]  = $(_NAME)_IRQS;
         \t
         \t//! Number of IRQs for hardware
         \tstatic constexpr uint32_t irqCount  = sizeofArray(irqNums);
         \t\n
      ]]></variableTemplate>

      <variableTemplate variables="irqLevel" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t//! Default IRQ level
         \tstatic constexpr NvicPriority irqLevel =  %symbolicExpression;
         \t\n
      ]]></variableTemplate>

      <!-- enum for IRQ indices into irqNums[]  -->
      <choiceOption key="irq_enum" condition="!irq_enum&amp;&amp;(@_userIrqCount>1)"
         hidden="true"
         description="IRQ entry"
         toolTip="Select amongst interrupts associated with the peripheral"
         typeName="$(_Class)IrqNum"
         valueFormat="%s"
         >
         <choiceExpansion keys="irq" values="=_hardwareIrqNums"
            value="%(i)" name="Maps to %(irq)" enum='=Prettify(ReplaceAll("%(irq)", "$(_NAME)_([a-z|A-Z|0-9_]+)_IRQn", "$1"))' />
      </choiceOption>

      <!-- IRQ enable/disable when single hardware IRQ is available  -->
      <template condition="=(_hardwareIrqCount==1)" ><![CDATA[
         \t/**
         \t * Enable interrupts in NVIC
         \t */
         \tstatic void enableNvicInterrupts() {
         \t   NVIC_EnableIRQ(irqNums[0]);
         \t}
         \t
         \t/**
         \t * Enable and set priority of interrupts in NVIC
         \t * Any pending NVIC interrupts are first cleared.
         \t *
         \t * @param[in]  nvicPriority  Interrupt priority
         \t */
         \tstatic void enableNvicInterrupts(NvicPriority nvicPriority) {
         \t   enableNvicInterrupt(irqNums[0], nvicPriority);
         \t}
         \t
         \t/**
         \t * Disable interrupts in NVIC
         \t */
         \tstatic void disableNvicInterrupts() {
         \t   NVIC_DisableIRQ(irqNums[0]);
         \t}
         \t\n
      ]]></template>

      <!-- IRQ enable/disable when multiple hardware IRQs available  -->
      <variableTemplate condition="=(_hardwareIrqCount>1)"
         variables="irq_enum"
      ><![CDATA[
         \t/**
         \t * Enable interrupts in NVIC
         %paramDescription
         \t */
         \tstatic void enableNvicInterrupts(%params) {
         \t   NVIC_EnableIRQ(irqNums[%paramName0]);
         \t}
         \t
         \t/**
         \t * Enable and set priority of interrupts in NVIC
         \t * Any pending NVIC interrupts are first cleared.
         \t *
         \t * @param[in]  nvicPriority  Interrupt priority
         %paramDescription
         \t */
         \tstatic void enableNvicInterrupts(%params, NvicPriority nvicPriority) {
         \t   enableNvicInterrupt(irqNums[%paramName0], nvicPriority);
         \t}
         \t
         \t/**
         \t * Disable interrupts in NVIC
         %paramDescription
         \t */
         \tstatic void disableNvicInterrupts(%params) {
         \t   NVIC_DisableIRQ(irqNums[%paramName0]);
         \t}
         \t\n
      ]]></variableTemplate>

      <!-- ____ Single user/hardware handler _____________ -->

      <!--  Interrupt handler -->
      <template codeGenCondition="irqHandlingMethod" condition="!irq_enum&amp;&amp;!suppressIrqHandler" >
      <![CDATA[
         \t/**
         \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
         \t */
         \tstatic void irqHandler() {
         \t
         \t   // Execute call-back
         \t   sCallback($(irq_call));
         \t}
         \t\n
      ]]>
      </template>

      <!--  Set callback -->
      <template codeGenCondition="irqHandlingMethod" condition="!irq_enum" >
      <![CDATA[
         \t/** Callback function for $(_Class) */
         \tstatic inline CallbackFunction sCallback = $(_Class)Info::unhandledCallback; // $(_hardwareIrqNums);
         \t
         \t/**
         \t * Set interrupt callback function.
         \t *
         \t * @param  $(_basename)Callback Callback function to execute on interrupt
         \t *                             Use nullptr to remove callback.
         \t */
         \tstatic void setCallback(CallbackFunction $(_basename)Callback) {
         \t   if ($(_basename)Callback == nullptr) {
         \t      $(_basename)Callback = unhandledCallback;
         \t   }
         \t   // Allow either no handler set yet or removing handler
         \t   usbdm_assert(
         \t         (sCallback == unhandledCallback) || ($(_basename)Callback == unhandledCallback),
         \t         "Handler already set");
         \t   sCallback = $(_basename)Callback;
         \t}
         \t\n
      ]]>
      </template>

      <!-- ____ Multiple user/hardware handlers _____________ -->

      <!--  Interrupt handler -->
      <variableTemplate codeGenCondition="irqHandlingMethod" variables="irq_enum" condition="!suppressIrqHandler" >
      <![CDATA[
         \t/**
         \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
         \t *
         \t * @tparam %paramName0 %tooltip
         \t */
         \ttemplate<%params>
         \tstatic void irqHandler() {
         \t
         \t   // Execute call-back
         \t   sCallbacks[%paramName0]($(irq_call));
         \t}
         \t\n
      ]]>
      </variableTemplate>

      <!--  Set callback -->
      <variableTemplate codeGenCondition="irqHandlingMethod" variables="irq_enum"
         immediateVariables="_userIrqCount" >
      <![CDATA[
         \t/** Callback function for $(_Class) */
         \tstatic inline CallbackFunction sCallbacks[$(_userIrqCount)] = {\n
      ]]></variableTemplate>
      <for keys="irqName" values="=_hardwareIrqNums" >
         <template codeGenCondition="irqHandlingMethod" condition="irq_enum" ><![CDATA[
            \t   $(_Class)Info::unhandledCallback,  // %(irqName) \n
         ]]></template>
      </for>
      <variableTemplate codeGenCondition="irqHandlingMethod" variables="irq_enum"
         immediateVariables="_userIrqCount" >
      <![CDATA[
         \t};
         \t
         \t/**
         \t * Set interrupt callback function.
         \t *
         %paramDescription0
         \t * @param  $(_basename)Callback Callback function to execute on interrupt
         \t *                             Use nullptr to remove callback.
         \t */
         \tstatic void setCallback(%param0, CallbackFunction $(_basename)Callback) {
         \t   if ($(_basename)Callback == nullptr) {
         \t      $(_basename)Callback = unhandledCallback;
         \t   }
         \t   // Allow either no handler set yet or removing handler
         \t   usbdm_assert(
         \t         (sCallbacks[%paramName0] == unhandledCallback) || ($(_basename)Callback == unhandledCallback),
         \t         "Handler already set");
         \t   sCallbacks[%paramName0] = $(_basename)Callback;
         \t}
         \t\n
      ]]>
      </variableTemplate>

   </if> <!-- condition="_hardwareIrqCount&amp;&amp;!suppressHardwareIrq" -->

<!-- ___________ Peripheral clock ____________________ -->

   <!-- Try both e.g. /CMP/_clockMask and /CMP1/_clockMask - prefer latter -->
   <equation key="clock_data"  value="=/$(_BASENAME)/_clockInfo" condition="/$(_BASENAME)/_clockInfo" />
   <equation key="clock_data"  value="=_clockInfo"               condition="_clockInfo" />

   <!-- SIM clock control register e.g. SCGC3 -->
   <equation key="clock_reg"   value='=ReplaceAll(clock_data, "^(.+?),(.+?)$", "$1")' condition="clock_data" />

   <!-- SIM clock control register mask (partial) e.g. CMP3 -->
   <equation key="clock_mask"  value='=ReplaceAll(clock_data, "^(.+?),(.+?)$", "$2")' condition="clock_data" />

   <!-- SIM clock control in GUI -->
   <equation key="_scgc_clock" value='="/SIM/"+ToLowerCase("sim_"+clock_reg+"_"+clock_mask)' condition="clock_data" />

   <template condition="clock_data"
      immediateVariables="clock_reg,clock_mask"
   ><![CDATA[
      \t/**
      \t *  Enable clock to $(_Class)
      \t */
      \tstatic void enableClock() {
      \t   SIM->$(clock_reg) = SIM->$(clock_reg) | SIM_$(clock_reg)_$(clock_mask)_MASK;
      \t}
      \t
      \t/**
      \t *  Disable clock to $(_Class)
      \t */
      \tstatic void disableClock() {
      \t   SIM->$(clock_reg) = SIM->$(clock_reg) & ~SIM_$(clock_reg)_$(clock_mask)_MASK;
      \t}
      \t\n
   ]]></template>

   <!-- _____________ enable/disable __________________ -->

   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Basic enable of $(_Class)
      \t * Includes enabling clock and configuring all mapped pins if mapPinsOnEnable is selected in configuration
      \t */
      \tstatic void enable() {\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" condition="clock_data" ><![CDATA[
      \t   enableClock();\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" condition="/PCR/mux_present&amp;&amp;_hasPcrTable" ><![CDATA[
      \t   configureAllPins();\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t}
      \t
      \t/**
      \t * Disables $(_Class)
      \t */
      \tstatic void disable() {
      \t   $(disable_peripheral: )\n
   ]]></template>
   <if condition="_hardwareIrqCount&amp;&amp;!suppressIrqArray" >

      <for keys="irqName" values="=_hardwareIrqNums" condition="!suppressHardwareIrq&amp;&amp;(@_hardwareIrqCount>1)" >
         <equation key="prettyIrqNum" value='=Prettify(ReplaceAll("%(irqName)", "$(_NAME)_([a-z|A-Z|0-9_]+)_IRQn", "$1"))' />
         <!--
         <printVar key="prettyIrqNum" />
          -->

         <template codeGenCondition="enablePeripheralSupport"
            immediateVariables="prettyIrqNum" >
         <![CDATA[
            \t   disableNvicInterrupts($(_Class)IrqNum_$(prettyIrqNum));\n
         ]]></template>
      </for>

      <template codeGenCondition="enablePeripheralSupport" condition="!suppressHardwareIrq&amp;&amp;(@_hardwareIrqCount==1)" >
      <![CDATA[
         \t   disableNvicInterrupts();\n
      ]]></template>
   </if>
   <template codeGenCondition="enablePeripheralSupport" condition="/PCR/mux_present&amp;&amp;_hasPcrTable" ><![CDATA[
      \t   disableAllPins();\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" condition="clock_data" ><![CDATA[
      \t   disableClock();\n
   ]]></template>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t}
      \t\n
   ]]></template>

   <!-- template key="/$(_BASENAME)/publicMethods" condition="/$(_BASENAME)/irqHandlingMethod" codeGenCondition="/$(_BASENAME)/irqHandlingMethod" discardRepeats="true" >
   <![CDATA[
      \t/**
      \t * Wrapper to allow the use of a class member as a callback function
      \t * @note Only usable with static objects.
      \t *
      \t * @tparam T         Type of the object containing the callback member function
      \t * @tparam callback  Member function pointer
      \t * @tparam object    Object containing the member function
      \t *
      \t * @return  Pointer to a function suitable for the use as a callback
      \t *
      \t * @code
      \t * class $(_Baseclass)CallbackClass {
      \t * public:
      \t *    int y;
      \t *
      \t *    // Member function used as callback
      \t *    // This function must match $(_Baseclass)::CallbackFunction
      \t *    void callback($(irq_parameters)) {
      \t *       ...;
      \t *    }
      \t * };
      \t * ...
      \t * // Instance of class containing callback member function
      \t * static $(_Baseclass)CallbackClass $(_Baseclass)CallbackClassInstance;
      \t * ...
      \t * // Wrap member function
      \t * auto $(_Baseclass)cbfn = $(_Baseclass)::wrapCallback<$(_Baseclass)CallbackClass, &$(_Baseclass)CallbackClass::callback, $(_Baseclass)CallbackClassInstance>();
      \t *
      \t * // Use as callback
      \t * $(_Baseclass)::Channel<0>::setCallback($(_Baseclass)cbfn);
      \t * @endcode
      \t */
      \ttemplate<class T, void(T::*callback)($(irq_parameters)), T &object>
      \tstatic CallbackFunction wrapCallback() {
      \t   static CallbackFunction fn = []($(irq_parameters)) {
      \t      (object.*callback)($(irq_call));
      \t   };
      \t   return fn;
      \t}
      \t
      \t/**
      \t * Wrapper to allow the use of a class member as a callback function
      \t * @note There is a considerable space and time overhead to using this method
      \t *
      \t * @tparam T         Type of the object containing the callback member function
      \t * @tparam callback  Member function pointer
      \t * @tparam object    Object containing the member function
      \t *
      \t * @return  Pointer to a function suitable for the use as a callback
      \t *
      \t * @code
      \t * class $(_Baseclass)CallbackClass {
      \t * public:
      \t *    int y;
      \t *
      \t *    // Member function used as callback
      \t *    // This function must match $(_Baseclass)::CallbackFunction
      \t *    void callback($(irq_parameters)) {
      \t *       ...;
      \t *    }
      \t * };
      \t * ...
      \t * // Instance of class containing callback member function
      \t * $(_Baseclass)CallbackClass $(_Baseclass)CallbackClassInstance;
      \t * ...
      \t * // Wrap member function
      \t * auto $(_Baseclass)cbfn = $(_Baseclass)::wrapCallback<$(_Baseclass)CallbackClass, &$(_Baseclass)CallbackClass::callback>($(_Baseclass)CallbackClassInstance);
      \t *
      \t * // Use as callback
      \t * $(_Baseclass)::Channel<0>::setCallback($(_Baseclass)cbfn);
      \t * @endcode
      \t */
      \ttemplate<class T, void(T::*callback)($(irq_parameters))>
      \tstatic CallbackFunction wrapCallback(T &object) {
      \t   static T &obj = object;
      \t   static CallbackFunction fn = []($(irq_parameters)) {
      \t      (obj.*callback)($(irq_call));
      \t   };
      \t   return fn;
      \t}
      \t\n
   ]]>
   </template -->

   <template><![CDATA[
      \t//! Hardware base address as uint32_t
      \tstatic constexpr uint32_t baseAddress = $(_NAME)_BasePtr;
      \t
      \t//! Hardware base pointer
      \tstatic constexpr HardwarePtr<$(structName)_Type> $(_basename) = baseAddress;
      \t\n
   ]]></template>

   <!-- Don't generate instance if suppressed or empty -->
   <template condition='!suppressInstance&amp;&amp;"$(_instance)"!=""' ><![CDATA[
      \t//! Peripheral instance number
      \tstatic constexpr unsigned instance = $(_instance);
      \t\n
   ]]></template>

   <constant key="class_present" type="Boolean"  value = "true"   />

   <template where="definitions" codeGenCondition="enablePeripheralSupport&amp;&amp;/HARDWARE/generateDebugDefinitions" ><![CDATA[
      \t//! Indicates $(_NAME) is available
      \t#define USBDM_$(_NAME)_AVAILABLE
      \t\n
   ]]></template>

   <!-- _____________ Base pin mapping __________________ -->

   <binaryOption key="$(_name)_pin_map" condition="pinMap"
      description="$(_NAME) Pin mapping"
      toolTip="Pin mapping used when $(_NAME) enabled"
      disabledPinMap="#enablePeripheralSupport"
      locked="true"
      derived="true" >
      <choice name="Pin mapping" value="0" pinMap="=pinMap" />
   </binaryOption>

</fragment>
