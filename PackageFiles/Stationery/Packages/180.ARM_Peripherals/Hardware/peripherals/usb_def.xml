<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- usb0_otg_clkrcv_c.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="USB OTG Controller with clock recovery" >

   <constant key="enableGettersAndSetters"  value="false" type="Boolean" />

   <!-- Interrupt control for this peripheral -->
   <equation key="irq_pattern"      value="^$(_NAME)$"           />
   <equation key="irq_ClassHandler" value="$(_Class)::irqHandler" />
   <irqOption key="irqHandlingMethod"
      hidden="true"
      valueFormat="%s"
      modify="true"
      enabledBy="enablePeripheralSupport"
      typeName="CallbackFunction"
      description="Peripheral interrupt handling"
      toolTip="Interrupts always required."
      pattern="=irq_pattern"
      classHandler="=irq_ClassHandler"
      value="true"
      locked="true"
      derived="true"
      disabledValue="0"
      />

   <equation key="irq_parameters"            value=""     />
   <equation key="irq_dummy_parameters"      value=""     />
   <equation key="irq_call"                  value=""     />
   <equation key="generateDefault"           value="false"         />
   <equation key="configureInStartupDefault" value="false"         />
   <xi:include href="enablePeripheral.xml"  />

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <title description="Clocks" />

   <aliasOption key="/SIM/system_usb_clkin_clock"     locked="false" optional="true" />

   <for keys="n" dim="=/SIM/numberOfClockSettings" >
      <aliasCategoryOption key="/MCG/ClockConfig[%(n)]" >
         <aliasOption key="/SIM/system_peripheral_clock[%(n)]"    optional="true"/>
         <aliasOption key="/SIM/sim_sopt2_usbsrc[%(n)]"           locked="false" optional="true"/>
         <aliasOption key="/SIM/sim_clkdiv2_usb[%(n)]"            locked="false" optional="true"/>
         <aliasOption key="/SIM/system_usbfs_clock[%(n)]"         optional="true"/>
      </aliasCategoryOption>
   </for>

   <title description="Clock Recovery" />

   <!-- ************* CLK_RECOVER_IRC_EN ****************** -->

   <choiceOption key="usb_clk_recover_irc_en_irc_en"
      condition="usb_clk_recover_irc_en_irc_en_present&amp;&amp;usb_clk_recover_irc_en_reg_en_present"
      enabledBy="enablePeripheralSupport"
      register="clk_recover_irc_en"
      typeName="UsbIrc48mClockEnable"
      valueFormat="USB_CLK_RECOVER_IRC_EN_IRC_EN(%s),USB_CLK_RECOVER_IRC_EN_REG_EN(%s)"
      description="IRC48M enable"
      toolTip="This is used to control when the the on-chip IRC48M module is enabled\n
               It will also be enabled if selected as a peripheral clock or MCG clock source if powered\n
               It can be used as a clock source for FS USB device mode operation">
      <choice value="0,0"  enum="Disabled"         name="Power disabled - not available at all"     />
      <choice value="0,1"  enum="Peripheral"       name="Available as general clock source"         isDefault="true"  />
      <choice value="1,1"  enum="PeripheralAndUsb" name="Available as general and USB clock source" />
   </choiceOption>

   <choiceOption key="usb_clk_recover_irc_en_irc_en"
      condition="usb_clk_recover_irc_en_irc_en_present&amp;&amp;!usb_clk_recover_irc_en_reg_en_present"
      enabledBy="enablePeripheralSupport"
      register="clk_recover_irc_en"
      typeName="UsbIrc48mClockEnable"
      description="IRC48M enable"
      toolTip="This is used to control when the the on-chip IRC48M module is enabled\n
               It will also be enabled if selected as a peripheral clock or MCG clock source if powered\n
               It can be used as a clock source for FS USB device mode operation">
      <choice value="0"  enum="Peripheral"       name="Available as general clock source"         isDefault="true"  />
      <choice value="1"  enum="PeripheralAndUsb" name="Available as general and USB clock source" />
   </choiceOption>

   <variable key="usb_clk_recovery_enabled" type="Boolean" condition="usb_clk_recover_irc_en_irc_en"
      expression='Exists("usb_clk_recover_irc_en_reg_en_present")?
                  (usb_clk_recover_irc_en_irc_en&gt;1):(usb_clk_recover_irc_en_irc_en&gt;0)' />

   <!-- ************* CLK_RECOVER_CTRL ****************** -->

   <choiceOption key="usb_clk_recover_ctrl_tracking_mode" condition="usb_clk_recover_ctrl_clock_recover_en_present"
      enabledBy="usb_clk_recovery_enabled"
      register="clk_recover_ctrl"
      typeName="UsbIrc48mClockTrackingMode"
      valueFormat="USB_CLK_RECOVER_CTRL_CLOCK_RECOVER_EN(%s),USB_CLK_RECOVER_CTRL_RESET_RESUME_ROUGH_EN(%s)"
      description="IRC48M mode for USB operation"
      toolTip="This controls the mode of clock recovery when IRC48M is used as a crystal-less USB clock\n
               The clock recovery block trims the IRC48M against USB bus transitions to get an accurate 48Mhz clock\n
               It has two phases after being initially enabled: rough phase and tracking phase\n
               The steps used to tune the IRC48M are different during these two phases\n
               The step in rough phase is larger than that in tracking phase">
      <choice value="0,0"  enum="Disabled"              name="Tracking disabled"                               />
      <choice value="1,0"  enum="AlwaysFineTracking"    name="Always fine after initial rough tracking"        />
      <choice value="1,1"  enum="RoughAndFineTracking"  name="Revert to rough tracking on USB reset or resume" />
   </choiceOption>

   <binaryOption key="usb_clk_recover_ctrl_restart_ifrtrim_en" condition="usb_clk_recover_ctrl_restart_ifrtrim_en_present"
      enabledBy="usb_clk_recovery_enabled"
      register="clk_recover_ctrl"
      typeName="UsbIrc48mClockResetTrim"
      description="Restart from IFR trim value"
      toolTip="IRC48 has a default trim fine value whose default value is factory trimmed (the IFR trim value)\n
               The clock recover block tracks the accuracy of the clock 48Mhz and keeps updating the trim fine value accordingly\n
               This action controls when the trim value is reset to the IFR value">
      <choice value="0"  enum="Keep"    name="Start from last trim value" isDefault="true" />
      <choice value="1"  enum="Restart" name="Restart from factory trim value" />
   </binaryOption>

   <for keys="field                                : set   : get   : clear : genCode                 : name"
        values="
         usb_clk_recover_ctrl_tracking_mode        : true  : true  : false : enableGettersAndSetters : TrackingMode;
         usb_clk_recover_ctrl_restart_ifrtrim_en   : true  : true  : false : enableGettersAndSetters : TrackingTrim;
         usb_clk_recover_irc_en_irc_en             : true  : true  : false : enableGettersAndSetters : Irc48MzEnable" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!--   ========== USB ClockRecoveryInit class =============================== -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass) Clock Recovery
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultClockRecovery for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::ClockRecoveryInit $(_name)ClockRecoveryInit {
      \t *
      \t *   // Setup values
      \t * UsbIrc48mClockTrackingMode_Disabled , // IRC48M mode for USB operation - Tracking disabled
      \t * UsbIrc48mClockResetTrim_Keep , // Restart from IFR trim value - Start from last trim value
      \t * UsbIrc48MHzEnable_Disabled,  // IRC48M enable - Disable the IRC48M module (default)
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultClockRecovery   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)ClockRecoveryInit)
      \t * @endcode
      \t */
      \tclass ClockRecoveryInit {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr ClockRecoveryInit(const ClockRecoveryInit &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr ClockRecoveryInit() = default;
      \t\n
   ]]>
   </template>

   <!--   Member variables -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="usb_clk_recover_ctrl_tracking_mode,usb_clk_recover_ctrl_restart_ifrtrim_en"
   ><![CDATA[
      \t   /// USB Clock recovery control
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="usb_clk_recover_irc_en_irc_en"
   ><![CDATA[
      \t   /// IRC48M oscillator enable register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <!--   Constructors -->

   <for keys="r"
      values="
            usb_clk_recover_ctrl_tracking_mode;
            usb_clk_recover_ctrl_restart_ifrtrim_en;
            usb_clk_recover_irc_en_irc_en
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr ClockRecoveryInit(%params, Types... rest) : ClockRecoveryInit(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      padToComments="35"
      variables="
            usb_clk_recover_ctrl_tracking_mode,
            usb_clk_recover_ctrl_restart_ifrtrim_en,
            usb_clk_recover_irc_en_irc_en
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr ClockRecoveryInit DefaultClockRecovery = {%initNonZeroValues
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultClockRecovery);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::ClockRecoveryInit &init) {
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
      \t   usb->CLK_RECOVER_CTRL          = init.clk_recover_ctrl;
      \t   usb->CLK_RECOVER_IRC_EN        = init.clk_recover_irc_en;
      \t   usb->CLK_RECOVER_INT_STATUS    = init.clk_recover_int_status;
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::ClockRecoveryInit
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Info), 64> {};
      \t//typedef $(_Baseclass)Base_T<$(_Info),64> $(_Class);
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="usb_files" >
      <copy source="Snippets/usb.cpp"                             target="Snippets/usb.cpp"                             overwrite="true"  derived="true" />
      <copy source="Project_Headers/usb.h"                        target="Project_Headers/usb.h"                        overwrite="true"  derived="true" />
      <copy source="Project_Headers/usb_defs.h"                   target="Project_Headers/usb_defs.h"                   overwrite="true"  derived="true" />
      <copy source="Project_Headers/usb_endpoint.h"               target="Project_Headers/usb_endpoint.h"               overwrite="true"  derived="true" />
      <copy source="Snippets/usb_cdc_interface.cpp"               target="Snippets/usb_cdc_interface.cpp"               overwrite="true"  derived="true" />
      <copy source="Snippets/usb_cdc_interface.h"                 target="Snippets/usb_cdc_interface.h"                 overwrite="true"  derived="true" />
      <copy source="Snippets/usb_implementation_bulk.cpp"         target="Snippets/usb_implementation_bulk.cpp"         overwrite="true"  derived="true" />
      <copy source="Snippets/usb_implementation_bulk.h"           target="Snippets/usb_implementation_bulk.h"           overwrite="true"  derived="true" />
      <copy source="Snippets/usb_implementation_cdc.cpp"          target="Snippets/usb_implementation_cdc.cpp"          overwrite="true"  derived="true" />
      <copy source="Snippets/usb_implementation_cdc.h"            target="Snippets/usb_implementation_cdc.h"            overwrite="true"  derived="true" />
      <copy source="Snippets/usb_implementation_composite.cpp"    target="Snippets/usb_implementation_composite.cpp"    overwrite="true"  derived="true" />
      <copy source="Snippets/usb_implementation_composite.h"      target="Snippets/usb_implementation_composite.h"      overwrite="true"  derived="true" />
      <copy source="Snippets/usb_implementation.h"                target="Snippets/usb_implementation.h"                overwrite="true"  derived="true" />
      <copy source="Snippets/usb_TestBulkLoopback.cpp"            target="Snippets/usb_TestBulkLoopback.cpp"            overwrite="true"  derived="true" />
      <copy source="Snippets/usb_TestCdcLoopback.cpp"             target="Snippets/usb_TestCdcLoopback.cpp"             overwrite="true"  derived="true" />
      <copy source="Snippets/usb_TestCompositeBulkLoopback.cpp"   target="Snippets/usb_TestCompositeBulkLoopback.cpp"   overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="These settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <aliasOption key="/SIM/sim_sopt1_usbregen"   locked="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt1_usbsstby"   locked="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt1_usbvstby"   locked="false" optional="true" />
   </category>

   <!--  ____ Signal mapping __________________ -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
