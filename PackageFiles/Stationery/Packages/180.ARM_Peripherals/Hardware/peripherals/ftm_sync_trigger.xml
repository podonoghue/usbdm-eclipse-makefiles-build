<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- ftm_fault.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

<!--  ___ SyncAndTriggerInit class ______________ -->

<if condition="ftm_pwmload_present||ftm_sync_present||ftm_synconf_present">

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass) Synchronisation and Trigger settings
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * //
      \t * // $(_BASENAME) call-back
      \t * //
      \t * // @param status  Status reflecting active inputs
      \t * //
      \t * void $(_basename)Callback() {
      \t *    ...
      \t * }
      \t *
      \t * @code
      \t * static const $(_Class)::SyncAndTriggerInit $(_Baseclass)SyncAndTriggerInit {
      \t *
      \t *    // Omitted parameters are taken to be zero unless a base value is given
      \t *    FtmPwmload_Enabled ,                     // Load Enable - Loading enabled
      \t *    FtmLoad_Ch0,                             // Load on Channel 0 match
      \t *    FtmLoad_Ch4,                             // Load on Channel 4 match
      \t *    FtmSyncCntmin_Disabled ,                 // Minimum Loading Point Enable - Disabled
      \t *    FtmSyncCntmax_Enabled ,                  // Maximum Loading Point Enable - Enabled
      \t *    FtmReinitOnSync_Disabled ,               // Counter Reinitialisation - Counts normally
      \t *    FtmHardwareTrigger_FTM0_FLT0_CMP0 ,      // Hardware Trigger Inputs
      \t *    FtmSyncSynchom_OnRisingClockEdge ,       // OUTMASK Register Synchronisation - On rising edges of system clock
      \t *    FtmSyncPwm_LegacyPwmSynch ,              // Synchronisation Mode - Legacy PWM synchronisation
      \t *    FtmTriggerSyncr_OnTrigger ,              // Hardware Trigger Mode - TRIGj cleared on trigger detect
      \t *    FtmBufferSyncCounter_OnRisingClockEdge , // CNTIN Register Synchronisation - On rising edges of system clock
      \t *    FtmSwSyncRegs_Unaffected ,               // CNTIN/MOD/CV Software Synchronisation - Unaffected
      \t *    FtmHwSyncRegs_Unaffected ,               // CNTIN/MOD/CV Hardware Synchronisation - Unaffected
      \t *    FtmSwSyncOutmask_Unaffected ,            // OUTMASK Software Synchronisation - Unaffected
      \t *    FtmHwSyncOutmask_Unaffected ,            // OUTMASK Hardware Synchronisation - Unaffected
      \t *    FtmBufferSyncInvctrl_OnRisingClockEdge , // INVCTRL Register Synchronisation - On rising edges of system clock
      \t *    FtmSwSyncInvCtrl_Unaffected ,            // INVCTRL Software Synchronisation - Unaffected
      \t *    FtmHwSyncInvctrl_Unaffected ,            // INVCTRL Hardware Synchronisation - Unaffected
      \t *    FtmBufferSyncSwoctrl_OnRisingClockEdge , // SWOCTRL Register Synchronisation - On rising edges of system clock
      \t *    FtmHwSyncSwoctrl_Unaffected ,            // SWOCTRL Hardware Synchronisation - Unaffected
      \t *    FtmSwSyncCounter_Unaffected ,            // CNT Software Synchronisation - Unaffected
      \t *    FtmHwSyncCounter_Unaffected,             // CNT Hardware Synchronisation - Unaffected
      \t *
      \t *    // Optional base value to start with (must be last parameter)
      \t *    $(_Class)::DefaultValue
      \t * };
      \t *
      \t * @endcode
      \t */
      \tclass SyncAndTriggerInit {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr SyncAndTriggerInit(const SyncAndTriggerInit &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr SyncAndTriggerInit() = default;
      \t\n
   ]]></template>

   <!-- ____ SyncAndTriggerInit class Member variables ________ -->

   <for keys=" type        : variables                                                 : init    "
       values="%baseType   : ftm_pwmload_ldok, ftm_pwmload_chsel                       : 0       ;
               %baseType   : ftm_sync_cntmin, ftm_sync_cntmax, ftm_sync_reinit,
                             ftm_sync_trig, ftm_sync_synchom                           : 0       ;
               %baseType   : ftm_synconf_syncmode,
                             ftm_synconf_hwtrigmode,
                             ftm_synconf_cntinc,
                             ftm_synconf_swwrbuf, ftm_synconf_hwwrbuf,
                             ftm_synconf_swom, ftm_synconf_hwom,
                             ftm_synconf_invc, ftm_synconf_swinvc, ftm_synconf_hwinvc,
                             ftm_synconf_swoc, ftm_synconf_hwsoc
                             ftm_synconf_swrstcnt, ftm_synconf_hwrstcnt                : 0       ">
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

<!-- ____ SyncAndTriggerInit class Constructors ____________ -->

   <for keys="r" values="ftm_pwmload_ldok;ftm_pwmload_chsel;
                         ftm_sync_cntmin;ftm_sync_cntmax;ftm_sync_reinit;ftm_sync_trig;ftm_sync_synchom;
                         ftm_synconf_syncmode;
                         ftm_synconf_hwtrigmode;
                         ftm_synconf_cntinc;
                         ftm_synconf_swwrbuf;ftm_synconf_hwwrbuf;
                         ftm_synconf_swom;ftm_synconf_hwom;
                         ftm_synconf_invc;ftm_synconf_swinvc;ftm_synconf_hwinvc;
                         ftm_synconf_swoc;ftm_synconf_hwsoc;
                         ftm_synconf_swrstcnt;ftm_synconf_hwrstcnt" >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%(r))
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr SyncAndTriggerInit(%params, Types... rest) : SyncAndTriggerInit(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t}; // class $(_Structname)BasicInfo::SyncAndTriggerInit\n\n
   ]]></template>

<!--  SyncAndTriggerInit class Configure method -->

   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure FTM synchronisation from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic ErrorCode configure(const SyncAndTriggerInit &init) {
      \t
   ]]></template>
   <for keys=
            "var                                               : statement"
   values="
            ftm_pwmload_ldok,ftm_pwmload_chsel                 : %configRegAssignment  ;
            ftm_sync_cntmin,ftm_sync_cntmax,
            ftm_sync_reinit,ftm_sync_trig,ftm_sync_synchom     : %configRegAssignment  ;
            ftm_synconf_syncmode,
            ftm_synconf_hwtrigmode,
            ftm_synconf_cntinc,
            ftm_synconf_swwrbuf,ftm_synconf_hwwrbuf,
            ftm_synconf_swom,ftm_synconf_hwom,
            ftm_synconf_invc,ftm_synconf_swinvc,
            ftm_synconf_hwinvc,
            ftm_synconf_swoc,ftm_synconf_hwsoc,
            ftm_synconf_swrstcnt,ftm_synconf_hwrstcnt         : %configRegAssignment  " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
         variables="%(var)" 
         linePadding="xxx"
       ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t
      \t   return E_NO_ERROR;
      \t}\n\n
   ]]></template>

<!-- ____ Default Initialisation value ________ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport&amp;&amp;(mode!=Quad)"
      separator=","
      terminator=","
      variables="ftm_pwmload_ldok,ftm_pwmload_chsel,
                 ftm_sync_cntmin,ftm_sync_cntmax,ftm_sync_reinit,(ftm_sync_reinit),ftm_sync_trig,ftm_sync_synchom,
                 ftm_synconf_syncmode,
                 ftm_synconf_hwtrigmode,
                 ftm_synconf_cntinc,
                 ftm_synconf_swwrbuf,ftm_synconf_hwwrbuf,
                 ftm_synconf_swom,ftm_synconf_hwom,
                 ftm_synconf_invc,ftm_synconf_swinvc,ftm_synconf_hwinvc,
                 ftm_synconf_swoc,ftm_synconf_hwsoc,
                 ftm_synconf_swrstcnt,ftm_synconf_hwrstcnt"
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr SyncAndTriggerInit DefaultSyncAndTriggerInitValue = {%initExpression\n
      \t};
      \t\n
   ]]>
   </variableTemplate>

</if>

</fragment>
