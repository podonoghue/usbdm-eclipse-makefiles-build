<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- crc_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Cyclic Redundancy Check" >

   <equation key="irq_parameters"            value=""        />
   <equation key="irq_dummy_parameters"      value=""        />
   <equation key="irq_call"                  value=""        />
   <equation key="generateDefault"           value="false"     />
   <equation key="configureInStartupDefault" value="false"     />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <!-- _____________ GPOLY __________________ -->

   <intOption key="crc_gpoly_gpoly" condition="crc_gpoly_gpoly_present"
      enabledBy="enablePeripheralSupport"
      baseType="uint32_t"
      typeName="CrcPolynomial"
      description="CRC Polynomial"
      toolTip="Polynomial used for the CRC calculation"
      value="0x000000"
      radix="16"
      />

   <intOption key="crc_data_data" condition="crc_data_data_present"
      enabledBy="enablePeripheralSupport"
      baseType="uint32_t"
      typeName="CrcSeed"
      description="CRC Seed"
      toolTip="Seed value used for the CRC calculation"
      value="0x000000"
      radix="16"
      />

   <!-- ____ CTRL ____ -->

   <choiceOption key="crc_ctrl_tot" condition="crc_ctrl_tot_present"
      enabledBy="enablePeripheralSupport"
      typeName="CrcWriteTranspose"
      baseType="uint32_t"
      toolTip="Define the transpose configuration for values written to the CRC data register\n
               Controls transposition of bits within the bytes and bytes within the whole value"
      description="Type of Transpose For Writes" >
      <choice name="No transposition"           value="0" enum="NoTransposition"/>
      <choice name="Bits transposed"            value="1" enum="BitsTransposed"/>
      <choice name="Bits and bytes transposed"  value="2" enum="BitsAndBytesTransposed"/>
      <choice name="Bytes transposed"           value="3" enum="BytesTransposed"/>
   </choiceOption >

   <choiceOption key="crc_ctrl_totr" condition="crc_ctrl_totr_present"
      enabledBy="enablePeripheralSupport"
      typeName="CrcReadTranspose"
      baseType="uint32_t"
      toolTip="Identify the transpose configuration of values read from the CRC Data register.\n
               Controls transposition of bits within the bytes and bytes within the whole value"
      description="Type of Transpose For Read" >
      <choice name="No transposition"           value="0" enum="NoTransposition"/>
      <choice name="Bits transposed"            value="1" enum="BitsTransposed"/>
      <choice name="Bits and bytes transposed"  value="2" enum="BitsAndBytesTransposed"/>
      <choice name="Bytes transposed"           value="3" enum="BytesTransposed"/>
   </choiceOption >

   <binaryOption key="crc_ctrl_fxor" condition="crc_ctrl_fxor_present"
      enabledBy="enablePeripheralSupport"
      typeName="CrcReadComplement"
      baseType="uint32_t"
      toolTip="Some CRC protocols require the final checksum to be XORed with 0xFFFFFFFF or 0xFFFF.\n
               Asserting this bit enables on the fly complementing of read data"
      description="Complement Read Of CRC Data Register" >
      <choice name="No inversion"                  value="0" enum="Normal"/>
      <choice name="Invert read of data register"  value="1" enum="Inverted"/>
   </binaryOption >

   <binaryOption key="crc_ctrl_was" condition="crc_ctrl_was_present"
      hidden="true"
      typeName="CrcWriteMode"
      baseType="uint32_t"
      toolTip="Selects between seed or data value when a value is written to the CRC data register"
      description="Write CRC Data Register As Seed" >
      <choice name="Writes are data values"  value="0" enum="WritesData"/>
      <choice name="Writes are seed values"  value="1" enum="WritesSeed"/>
   </binaryOption >

   <binaryOption key="crc_ctrl_tcrc" condition="crc_ctrl_tcrc_present"
      enabledBy="enablePeripheralSupport"
      typeName="CrcWidth"
      baseType="uint32_t"
      toolTip="Width used in CC calculation"
      description="Width of CRC protocol" >
      <choice name="16-bit CRC"  value="0" enum="16BitCrc"/>
      <choice name="32-bit CRC"  value="1" enum="32BitCrc"/>
   </binaryOption >

   <!-- ____ Setters and Getters ____________ -->

   <for keys="   field         : set   : get   : clear : genCode                 : name"
        values="crc_ctrl_tot   : true  : true  : false : enableGettersAndSetters : WriteTranspose   ;
                crc_ctrl_totr  : true  : true  : false : enableGettersAndSetters : ReadTranspose    ;
                crc_ctrl_fxor  : true  : true  : false : enableGettersAndSetters : ReadComplement   ;
                crc_ctrl_was   : true  : true  : false : enableGettersAndSetters : WriteMode        ;
                crc_ctrl_tcrc  : true  : true  : false : enableGettersAndSetters : Width            " >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %returnType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Clear %description
         \t *
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!-- ________ CRC Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   CrcPolynomial(0x0) ,                // CRC Polynomial
      \t *   CrcSeed(0x0) ,                      // CRC Seed
      \t *   CrcWriteTranspose_NoTransposition , // Type of Transpose For Writes - No transposition
      \t *   CrcReadTranspose_NoTransposition ,  // Type of Transpose For Read - No transposition
      \t *   CrcReadComplement_Normal ,          // Complement Read Of CRC Data Register - No inversion
      \t *   CrcWidth_16BitCrc,                  // Width of CRC protocol - 16-bit CRC
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <for keys=" type        : variables                             : init    "
       values="%baseType   : crc_gpoly_gpoly                       :   0      ;
               %baseType   : crc_data_data                         :   0      ;
               %baseType   : crc_ctrl_tot,crc_ctrl_totr,
                             crc_ctrl_fxor,crc_ctrl_tcrc           :   0      " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>
   <for keys="r"
      values="
            crc_ctrl_tot;
            crc_ctrl_totr;
            crc_ctrl_fxor;
            crc_ctrl_tcrc;
            crc_gpoly_gpoly;
            crc_data_data
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%(r))
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <!-- ____ Init class Configure method ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enable();
      \t\n
   ]]></template>
   <for keys=
             " var                                                    : statement            "
      values="
            crc_ctrl_tot,crc_ctrl_totr,crc_ctrl_fxor,crc_ctrl_tcrc    : %configRegAssignment|CRC_CTRL_WAS_MASK ;
            crc_data_data                                             : %configRegAssignment ;
            crc_gpoly_gpoly                                           : %configRegAssignment ;
            crc_ctrl_tot,crc_ctrl_totr,crc_ctrl_fxor,crc_ctrl_tcrc    : %configRegAssignment " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            crc_gpoly_gpoly,
            crc_data_data,
            crc_ctrl_tot,
            crc_ctrl_totr,
            crc_ctrl_fxor,
            crc_ctrl_tcrc,
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Info)> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="crc_files" >
      <copy source="Project_Headers/crc.h"         target="Project_Headers/crc.h"          overwrite="true" derived="true" />
      <copy source="Snippets/crc-example.cpp"      target="Snippets/crc-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="These settings only have effect if the SIM configuration is enabled" >
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

</peripheralPage>
