<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- crc_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Cyclic Redundancy Check (CRC)">

   <constant key="suppressInstance"         type="Boolean" value="false"         />
   <constant key="peripheralUsesInterrupts" type="Boolean" value="false"          />
   <constant key="irq_parameters"           type="String"  value="&quot;&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;&quot;"  />
   <constant key="isGeneratedByDefault"     type="Boolean" value="false"         />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="_enablePeripheral.xml"  />
   <title description="------------------------------------------" />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicValueExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %enumClass[index]               As for %paramType
    * %enumParam[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicValueExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %defaultClockExpression         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %defaultMaskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Baseclass)BasicInfo&quot;" />

   <!-- ************* GPOLY ****************** -->

   <intOption key="crc_gpoly_gpoly" condition="crc_gpoly_gpoly_present"
      enabledBy="enablePeripheralSupport"
      typeName="uint32_t"
      description="CRC Polynomial"
      toolTip="Polynomial used for the CRC calculation"
      value="0x000000"
      radix="16"
      />

   <intOption key="crc_data_data" condition="crc_data_data_present"
      enabledBy="enablePeripheralSupport"
      typeName="uint32_t"
      description="CRC Seed"
      toolTip="Seed value used for the CRC calculation"
      value="0x000000"
      radix="16"
      />

   <!-- ************* CTRL ****************** -->

   <choiceOption key="crc_ctrl_tot" condition="crc_ctrl_tot_present"
      enabledBy="enablePeripheralSupport"
      enumStem="CrcWriteTranspose"
      toolTip="Define the transpose configuration for values written to the CRC data register\n
               Controls transposition of bits within the bytes and bytes within the whole value"
      description="Type of Transpose For Writes" >
      <choice name="No transposition"           value="0" enum="NoTransposition"/>
      <choice name="Bits transposed"            value="1" enum="BitsTransposed"/>
      <choice name="Bits and bytes transposed"  value="2" enum="BitsAndBytesTransposed"/>
      <choice name="Bytes transposed"           value="3" enum="BytesTransposed"/>
   </choiceOption >

   <choiceOption key="crc_ctrl_totr" condition="crc_ctrl_totr_present"
      enabledBy="enablePeripheralSupport"
      enumStem="CrcReadTranspose"
      toolTip="Identify the transpose configuration of values read from the CRC Data register.\n
               Controls transposition of bits within the bytes and bytes within the whole value"
      description="Type of Transpose For Read" >
      <choice name="No transposition"           value="0" enum="NoTransposition"/>
      <choice name="Bits transposed"            value="1" enum="BitsTransposed"/>
      <choice name="Bits and bytes transposed"  value="2" enum="BitsAndBytesTransposed"/>
      <choice name="Bytes transposed"           value="3" enum="BytesTransposed"/>
   </choiceOption >

   <binaryOption key="crc_ctrl_fxor" condition="crc_ctrl_fxor_present"
      enabledBy="enablePeripheralSupport"
      enumStem="CrcReadComplement"
      toolTip="Some CRC protocols require the final checksum to be XORed with 0xFFFFFFFF or 0xFFFF.\n
               Asserting this bit enables on the fly complementing of read data"
      description="Complement Read Of CRC Data Register" >
      <choice name="No inversion"                  value="0" enum="Normal"/>
      <choice name="Invert read of data register"  value="1" enum="Inverted"/>
   </binaryOption >

   <binaryOption key="crc_ctrl_was" condition="crc_ctrl_was_present"
      hidden="true"
      enumStem="CrcWriteMode"
      toolTip="Selects between seed or data value when a value is written to the CRC data register"
      description="Write CRC Data Register As Seed" >
      <choice name="Writes are data values"  value="0" enum="WritesData"/>
      <choice name="Writes are seed values"  value="1" enum="WritesSeed"/>
   </binaryOption >

   <binaryOption key="crc_ctrl_tcrc" condition="crc_ctrl_tcrc_present"
      enabledBy="enablePeripheralSupport"
      enumStem="CrcWidth"
      description="Width of CRC protocol" >
      <choice name="16-bit CRC"  value="0" enum="16BitCrc"/>
      <choice name="32-bit CRC"  value="1" enum="32BitCrc"/>
   </binaryOption >


<!-- Graphic here -->

   <for keys="field:name"
        values="
      crc_ctrl_tot   : WriteTranspose;
      crc_ctrl_totr  : ReadTranspose;
      crc_ctrl_fxor  : ReadComplement;
      crc_ctrl_was   : WriteMode;
      crc_ctrl_tcrc  : Width" >
      <setTemplate variables="%(field)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %defaultFieldExpression
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></setTemplate>
   </for>

<!--   ========== CRC Init class =============================== -->

   <template key="init_description" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t *
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   uint32_t(0x4567) ,                         // CRC Polynomial
      \t *   uint32_t(0x12345678) ,                     // CRC Seed value
      \t *   CrcWriteTranspose_BitsAndBytesTransposed , // Type of Transpose For Writes - Bits and bytes transposed
      \t *   CrcReadTranspose_BytesTransposed ,         // Type of Transpose For Read - Bytes transposed
      \t *   CrcReadComplement_Normal ,                 // Complement Read Of CRC Data Register - No inversion
      \t *   CrcWidth_16BitCrc,                         // Width of CRC protocol - 16-bit CRC
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" >
   <![CDATA[
      class $(_Baseclass)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->


   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="crc_gpoly_gpoly"
   ><![CDATA[
      \t   /// Polynomial register
      \t   uint32_t %registerName = 0;
      \t\n
   ]]></initialValueTemplate>
   
   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="crc_data_data"
   ><![CDATA[
      \t   /// Data register (used as seed value)
      \t   uint32_t %registerName = 0;
      \t\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="crc_ctrl_tot,crc_ctrl_totr,crc_ctrl_fxor,crc_ctrl_tcrc"
   ><![CDATA[
      \t   /// Control register
      \t   uint32_t %registerName = 0;
      \t\n
   ]]></initialValueTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t
      \t   // Initialise registers
      \t   crc->GPOLY = init.gpoly;
      \t   crc->CTRL  = init.ctrl|CRC_CTRL_WAS_MASK;
      \t   crc->DATA  = init.data;
      \t   crc->CTRL  = init.ctrl;
      \t}
      \t\n
   ]]></template>

<!--   Constructors -->

   <for keys="r"
      values="
            crc_ctrl_tot;
            crc_ctrl_totr;
            crc_ctrl_fxor;
            crc_ctrl_tcrc;
            " >
      <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

<!--   Constructors -->

   <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="crc_gpoly_gpoly,crc_data_data"
      params="polynomial, seed"
      nonDefaultParams="2"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description0 and %description1 
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      %params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName0 = %paramName0;
      \t      %registerName1  = %paramName1;
      \t   }
      \t\n
   ]]>
   </setTemplate>

<!--   Default Initialisation value -->

   <initialValueTemplate codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            crc_gpoly_gpoly,
            crc_data_data,
            crc_ctrl_tot,
            crc_ctrl_totr,
            crc_ctrl_fxor,
            crc_ctrl_tcrc,
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
      <![CDATA[
      \t}; // $(_Baseclass)BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm" >
      <![CDATA[
      }; // $(_Baseclass)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" namespace="all" codeGenCondition="enablePeripheralSupport" ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id = "crc_files" >
      <copy source="Project_Headers/crc.h"         target="Project_Headers/crc.h"          overwrite="true" derived="true" />
      <copy source="Snippets/crc-example.cpp"      target="Snippets/crc-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* Signal mapping ****************** -->
   <category name="SIM" description="Pin mapping and clock enables">
      <aliasOption key="/SIM/sim_scgc_$(_name)"         locked="false" optional="true" />
      <aliasOption key="/SIM/sim_scgc_$(_basename)"     locked="false" optional="true" />
   </category>

</peripheralPage>
