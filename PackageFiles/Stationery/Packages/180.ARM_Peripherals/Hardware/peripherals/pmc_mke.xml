<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pmc_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Power Management Controller" >

   <constant key="suppressInstance"         type="Boolean" value="false"         />
   <constant key="peripheralUsesInterrupts" type="Boolean" value="true"          />
   <constant key="irq_parameters"           type="String"  value="&quot;PmcInterruptReason reason&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;PmcInterruptReason&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;PmcInterruptReason_LowVoltageWarning&quot;"  />
   <constant key="isGeneratedByDefault"     type="Boolean" value="false"         />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="_enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicValueExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %enumClass[index]               As for %paramType
    * %enumParam[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicValueExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %defaultClockExpression         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %defaultMaskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Baseclass)BasicInfo&quot;" />

   <intOption key="system_low_power_clock"
      constant="true"
      derived="true"
      origin="LPO Clock"
      units="Hz"
      description="Frequency of Internal Low Power Oscillator [LPO] Clock"
      toolTip="Dependent on device. [Typically ~1kHz]"
      value="1000"/>

   <template><![CDATA[
      \t//! Frequency of Low Power Oscillator (LPO) Clock [~1kHz]
      \tstatic constexpr uint32_t system_low_power_clock = $(system_low_power_clock)UL;

      \t/**
      \t * Get LPO clock
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic constexpr uint32_t getLpoClock() {
      \t   return system_low_power_clock;
      \t}\n\n
   ]]></template>

   <!-- ************* SPMSC1 & SPMSC2 ****************** -->
   <binaryOption key="pmc_spmsc1_lvde" condition="pmc_spmsc1_lvde_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="PmcLowVoltageDetect"
      description="Low-Voltage Detect Enable"
      toolTip="This write-once bit enables low-voltage detect logic" >
      <choice name="LVD logic disabled"  value="0" enum="Disabled"/>
      <choice name="LVD logic enabled"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_lvwie" condition="pmc_spmsc1_lvwie_present"
      enabledBy="pmc_spmsc1_lvde&amp;&amp;irqHandlingMethod"
      enumStem="PmcLowVoltageWarningInterrupt"
      toolTip="Enables hardware interrupt requests for LVWF"
      description="Low-Voltage Warning Interrupt Enable" >
      <choice name="Interrupt disabled"  value="0" enum="Disabled"/>
      <choice name="Interrupt enabled"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_lvdre" condition="pmc_spmsc1_lvdre_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcLowVoltageReset"
      description="Low-Voltage Detect Reset Enable" >
      <choice name="LVD events do not generate hardware resets"                          value="0" enum="Disabled"/>
      <choice name="Force an MCU reset when an enabled low-voltage detect event occurs"  value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_lvdse" condition="pmc_spmsc1_lvdse_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcLowVoltageDetectInStop"
      description="Low-Voltage Detect Stop Enable" >
      <choice name="LVD events disabled during stop mode"  value="0" enum="Disabled"/>
      <choice name="LVD events enabled during stop mode"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_bgbe" condition="pmc_spmsc1_bgbe_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcBandgapBuffer"
      description="Bandgap Buffer Enable"
      toolTip="Enables an internal buffer for the bandgap voltage reference for use\n
               as a ADC internal channel or ACMP reference" >
      <choice name="Bandgap buffer is disabled"  value="0" enum="Disabled"/>
      <choice name="Bandgap buffer is enabled"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc2_lvdv" condition="pmc_spmsc2_lvdv_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcLowVoltageDetectLevel"
      description="Low-Voltage Detect Level Select"
      toolTip="Write-once bit" >
      <choice name="Low trip point (VLVD = VLVDL)"   value="0" enum="LowTripPoint"/>
      <choice name="High trip point (VLVD = VLVDH)"  value="1" enum="HighTripPoint"/>
   </binaryOption>

   <choiceOption key="pmc_spmsc2_lvwv" condition="pmc_spmsc2_lvwv_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcLowVoltageWarningLevel"
      description="Low-Voltage Warning Level Select" >
      <choice name="Low trip point (VLVW = VLVW1)"    value="0" enum="LowTripPoint"/>
      <choice name="Mid 1 trip point (VLVW = VLVW2)"  value="1" enum="Mid1TripPoint"/>
      <choice name="Mid 2 trip point (VLVW = VLVW3)"  value="2" enum="Mid2TripPoint"/>
      <choice name="High trip point (VLVW = VLVW4)"   value="3" enum="HighTripPoint"/>
   </choiceOption>

<!-- Graphic here -->

   <for keys="field:name"
        values="
      pmc_spmsc1_lvwie:Spmsc1Lvwie;
      pmc_spmsc1_lvdre:Spmsc1Lvdre;
      pmc_spmsc1_lvdse:Spmsc1Lvdse;
      pmc_spmsc1_lvde:Spmsc1Lvde;
      pmc_spmsc1_bgbe:Spmsc1Bgbe;
      pmc_spmsc2_lvdv:Spmsc2Lvdv;
      pmc_spmsc2_lvwv:Spmsc2Lvwv" >
      <setTemplate variables="%(field)" codeGenCondition="/$(_BASENAME)/enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %defaultFieldExpression
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></setTemplate>
   </for>

<!--   ========== PMC Init class =============================== -->

   <template key="init_description" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t status) {
      \t *    (void) status;
      \t * }
      \t *
      \t * @code
      \t * static const $(_Class)::Init init {
      \t *
      \t *   // Setup values
      \t *   PmcLowVoltageDetect_Enabled ,             // Low-Voltage Detect Enable - LVD logic enabled
      \t *   PmcLowVoltageWarningInterrupt_Disabled ,  // Low-Voltage Warning Interrupt Enable - Interrupt disabled
      \t *   PmcLowVoltageReset_Disabled ,             // Low-Voltage Detect Reset Enable - LVD events do not generate hardware resets
      \t *   PmcLowVoltageDetectInStop_Disabled ,      // Low-Voltage Detect Stop Enable - LVD events disabled during stop mode
      \t *   PmcBandgapBuffer_Disabled ,               // Bandgap Buffer Enable - Bandgap buffer is disabled
      \t *   PmcLowVoltageLevel_HighTripPoint ,        // Low-Voltage Detect Level Select - High trip point (VLVD = VLVDH)
      \t *   PmcLowVoltageWarningLevel_LowTripPoint,   // Low-Voltage Warning Level Select - Low trip point (VLVW = VLVW1)
      \t *
      \t *    $(_name)Callback,                // Call-back to execute on event - call-back function name
      \t *    NvicPriority_Low,                // Priority for interrupt - Low
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" >
   <![CDATA[
      \t/**
      \t * Indicates reason for execution of call-back
      \t*/
      \tenum PmcInterruptReason {
      \t   PmcInterruptReason_LowVoltageDetect,//!< Low Voltage Detect
      \t   PmcInterruptReason_LowVoltageWarning//!< Low Voltage Warning
      \t};
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" >
   <![CDATA[
      class $(_Baseclass)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  pmcCallback Callback function to execute on interrupt
      \t */
      \tstatic void setCallback(CallbackFunction pmcCallback) {
      \t   if (pmcCallback == nullptr) {
      \t      pmcCallback = unhandledCallback;
      \t   }
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || (sCallback == pmcCallback),
      \t         "Handler already set");
      \t   sCallback = pmcCallback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   pmc->SPMSC1 = pmc->SPMSC1 | PMC_SPMSC1_LVWACK_MASK;
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t   return;
      \t}
      \t\n
   ]]>
   </template>

   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/** Callback for programmatically set handler */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Class)Info::unhandledCallback;
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <initialValueTemplate namespace="usbdm" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="pmc_spmsc1_lvwack,pmc_spmsc1_lvwie,pmc_spmsc1_lvdre,pmc_spmsc1_lvdse,pmc_spmsc1_lvde,pmc_spmsc1_bgbe"
   ><![CDATA[
      \t   /// System Power Management Status and Control 1 Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="pmc_spmsc2_lvdv,pmc_spmsc2_lvwv"
   ><![CDATA[
      \t   /// System Power Management Status and Control 2 Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName0 = %symbolicValueExpression1;
      \t\n
   ]]></initialValueTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t   // ..........  Configure ...........
      \t
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
             condition="irqHandlingMethod" ><![CDATA[
      \t   if constexpr (irqHandlerInstalled) {
      \t      setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t   // ..........  Regs to init .......... ;
      \t   pmc->SPMSC1    = init.spmsc1;
      \t   pmc->SPMSC2    = init.spmsc2;
      \t}
      \t\n
   ]]></template>

<!--   Constructors -->

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <for keys="r"
      values="
            pmc_spmsc1_lvwack;
            pmc_spmsc1_lvwie;
            pmc_spmsc1_lvdre;
            pmc_spmsc1_lvdse;
            pmc_spmsc1_lvde;
            pmc_spmsc1_bgbe;
            pmc_spmsc2_lvdv;
            pmc_spmsc2_lvwv
            " >
      <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

<!--   Default Initialisation value -->

   <initialValueTemplate codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            pmc_spmsc1_lvde,
            pmc_spmsc1_lvwack,
            pmc_spmsc1_lvwie,
            pmc_spmsc1_lvdre,
            pmc_spmsc1_lvdse,
            pmc_spmsc1_bgbe,
            pmc_spmsc2_lvdv,
            pmc_spmsc2_lvwv
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
      <![CDATA[
      \t}; // $(_Baseclass)BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm" >
      <![CDATA[
      }; // $(_Baseclass)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base {};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id = "pmc_files" >
      <copy source="Project_Headers/pmc-MKE.h"  target="Project_Headers/pmc.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

</peripheralPage>
