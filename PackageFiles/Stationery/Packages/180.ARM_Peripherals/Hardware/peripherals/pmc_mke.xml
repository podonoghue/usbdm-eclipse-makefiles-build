<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pmc_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Power Management Controller">

   <xi:include href="_default_instance.xml"/>

   <intOption key="system_low_power_clock"
      constant="true"
      derived="true"
      origin="LPO Clock"
      units="Hz"
      description="Frequency of Internal Low Power Oscillator [LPO] Clock"
      toolTip="Dependent on device. [Typically ~1kHz]"
      value="1000"/>

   <template><![CDATA[
      \t//! Frequency of Low Power Oscillator (LPO) Clock [~1kHz]
      \tstatic constexpr uint32_t system_low_power_clock = $(system_low_power_clock)UL;

      \t/**
      \t * Get LPO clock
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic constexpr uint32_t getLpoClock() {
      \t   return system_low_power_clock;
      \t}\n\n
   ]]></template>

   <!-- ************* SPMSC1 & SPMSC2 ****************** -->
   <binaryOption key="pmc_spmsc1_lvde" condition="pmc_spmsc1_lvde_present"
      enumStem="PmcLowVoltageDetect"
      description="Low-Voltage Detect Enable"
      toolTip="This write-once bit enables low-voltage detect logic">
      <choice name="LVD logic disabled"  value="0" enum="Disabled"/>
      <choice name="LVD logic enabled"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_lvwie" condition="pmc_spmsc1_lvwie_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcLowVoltageWarningInterrupt"
      toolTip="Enables hardware interrupt requests for LVWF"
      description="Low-Voltage Warning Interrupt Enable" >
      <choice name="Interrupt disabled"  value="0" enum="Disabled"/>
      <choice name="Interrupt enabled"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_lvdre" condition="pmc_spmsc1_lvdre_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcLowVoltageReset"
      description="Low-Voltage Detect Reset Enable" >
      <choice name="LVD events do not generate hardware resets"                          value="0" enum="Disabled"/>
      <choice name="Force an MCU reset when an enabled low-voltage detect event occurs"  value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_lvdse" condition="pmc_spmsc1_lvdse_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcLowVoltageDetectInStop"
      description="Low-Voltage Detect Stop Enable" >
      <choice name="LVD events disabled during stop mode"  value="0" enum="Disabled"/>
      <choice name="LVD events enabled during stop mode"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_bgbe" condition="pmc_spmsc1_bgbe_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcBandgapBuffer"
      description="Bandgap Buffer Enable"
      toolTip="Enables an internal buffer for the bandgap voltage reference for use\n
as a ADC internal channel or ACMP reference">
      <choice name="Bandgap buffer is disabled"  value="0" enum="Disabled"/>
      <choice name="Bandgap buffer is enabled"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc2_lvdv" condition="pmc_spmsc2_lvdv_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcLowVoltageDetectLevel"
      description="Low-Voltage Detect Level Select"
      toolTip="Write-once bit" >
      <choice name="Low trip point (VLVD = VLVDL)"   value="0" enum="LowTripPoint"/>
      <choice name="High trip point (VLVD = VLVDH)"  value="1" enum="HighTripPoint"/>
   </binaryOption>

   <choiceOption key="pmc_spmsc2_lvwv" condition="pmc_spmsc2_lvwv_present"
      enabledBy="pmc_spmsc1_lvde"
      enumStem="PmcLowVoltageWarningLevel"
      description="Low-Voltage Warning Level Select" >
      <choice name="Low trip point (VLVW = VLVW1)"    value="0" enum="LowTripPoint"/>
      <choice name="Mid 1 trip point (VLVW = VLVW2)"  value="1" enum="Mid1TripPoint"/>
      <choice name="Mid 2 trip point (VLVW = VLVW3)"  value="2" enum="Mid2TripPoint"/>
      <choice name="High trip point (VLVW = VLVW4)"   value="3" enum="HighTripPoint"/>
   </choiceOption>

<!-- Grahic here -->

   <for keys="field:name"
        values="
      pmc_spmsc1_lvwie:Spmsc1Lvwie;
      pmc_spmsc1_lvdre:Spmsc1Lvdre;
      pmc_spmsc1_lvdse:Spmsc1Lvdse;
      pmc_spmsc1_lvde:Spmsc1Lvde;
      pmc_spmsc1_bgbe:Spmsc1Bgbe;
      pmc_spmsc2_lvdv:Spmsc2Lvdv;
      pmc_spmsc2_lvwv:Spmsc2Lvwv">
      <setTemplate variables="%(field)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %defaultFieldExpression
         \t}\n\n
      ]]></setTemplate>
   </for>

<!--   ========== PMC Init class =============================== -->

   <template key="init_description" namespace="all">
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_class)::Init init {
      \t *
      \t *   // Setup values
      \t * PmcLowVoltageDetect_Enabled ,             // Low-Voltage Detect Enable - LVD logic enabled
      \t * PmcLowVoltageWarningInterrupt_Disabled ,  // Low-Voltage Warning Interrupt Enable - Interrupt disabled
      \t * PmcLowVoltageReset_Disabled ,             // Low-Voltage Detect Reset Enable - LVD events do not generate hardware resets
      \t * PmcLowVoltageDetectInStop_Disabled ,      // Low-Voltage Detect Stop Enable - LVD events disabled during stop mode
      \t * PmcBandgapBuffer_Disabled ,               // Bandgap Buffer Enable - Bandgap buffer is disabled
      \t * PmcLowVoltageLevel_HighTripPoint ,        // Low-Voltage Detect Level Select - High trip point (VLVD = VLVDH)
      \t * PmcLowVoltageWarningLevel_LowTripPoint,   // Low-Voltage Warning Level Select - Low trip point (VLVW = VLVW1)
      \t * };
      \t *
      \t * // Initialise $(_class) from values specified above
      \t * $(_class)::configure(init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm">
   <![CDATA[
      class $(_class)BasicInfo {
      \t
      public:
      \t
      \t/**
      \t * Type definition for $(_class) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)(const uint32_t &);
      \t\n
   ]]>
   </template>

   <template namespace="usbdm">
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <setTemplate namespace="usbdm" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></setTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="pmc_spmsc1_lvwack,pmc_spmsc1_lvwie,pmc_spmsc1_lvdre,pmc_spmsc1_lvdse,pmc_spmsc1_lvde,pmc_spmsc1_bgbe"
   ><![CDATA[
      \t   /// System Power Management Status and Control 1 Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm"
      variables="pmc_spmsc2_lvdv,pmc_spmsc2_lvwv"
   ><![CDATA[
      \t   /// System Power Management Status and Control 2 Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName = %enumClass_Normal;\n\n
   ]]></initialValueTemplate>

<!--   Configure methods -->

   <template discardRepeats="true" key="/PMC/InitMethod" namespace="all" ><![CDATA[
      \t/**
      \t * Configure PMC from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      // Only set call-back if feature enabled
      \t      setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t   enable();
      \t
      \t   pmc->SPMSC1    = init.spmsc1;
      \t   pmc->SPMSC2    = init.spmsc2;
      \t}
      \t
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}\n
   ]]></template>

<!--   Constructors -->

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%enumParam0 = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <setTemplate namespace="usbdm"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      #if $(irqHandlingMethod)
      \t      %registerName = %paramExpression;
      #else
      \t      (void)%paramExpression;
      #endif
      \t   }\n\n
   ]]></setTemplate>

   <for keys="r"
      values="
            pmc_spmsc1_lvwack;
            pmc_spmsc1_lvwie;
            pmc_spmsc1_lvdre;
            pmc_spmsc1_lvdse;
            pmc_spmsc1_lvde;
            pmc_spmsc1_bgbe;
            pmc_spmsc2_lvdv;
            pmc_spmsc2_lvwv
            ">
      <setTemplate namespace="usbdm"
         variables="%(r)"
         linePadding="xxx">
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %comments
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>
<!--   Default Initialisation value -->

   <initialValueTemplate
      separator=","
      terminator=","
      variables="
            pmc_spmsc1_lvde,
            pmc_spmsc1_lvwack,
            pmc_spmsc1_lvwie,
            pmc_spmsc1_lvdre,
            pmc_spmsc1_lvdse,
            pmc_spmsc1_bgbe,
            pmc_spmsc2_lvdv,
            pmc_spmsc2_lvwv,
            irqLevel
         "
   ><![CDATA[
      $(init_description)
      \ttypedef $(_class)BasicInfo::Init Init;
      \t
      \t/**
      \t * Default initialisation value for $(_class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <template namespace="usbdm">
      <![CDATA[
      \t}; // $(_class)::BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm">
      <![CDATA[
      }; // $(_class)::BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/PMC/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_name)
   \t */
   \tclass $(_class) : public $(_base_class)Base_T<$(_class)Info> {};\n
   ]]></template>

   <xi:include href="_irqOption.xml"/>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator">
   </validate>

   <projectActionList id = "pmc_files" >
      <copy source="Project_Headers/pmc_mke.h"  target="Project_Headers/pmc.h"  overwrite="true"  derived="true" />
   </projectActionList>


<signals />

</peripheralPage>
