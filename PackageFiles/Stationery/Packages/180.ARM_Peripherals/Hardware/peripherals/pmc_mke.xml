<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pmc_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Power Management Controller" >

   <equation key="suppressIrqHandler"        value="" />
   <equation key="irq_parameters"            value="PmcInterruptReason pmcInterruptReason" />
   <equation key="irq_dummy_parameters"      value="PmcInterruptReason" />
   <equation key="irq_call_parameters"       value="PmcInterruptReason_LowVoltageWarning" />
   <equation key="generateDefault"           value="false" />
   <equation key="configureInStartupDefault" value="false" />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- ************* Class Declaration ****************** -->

   <constant key="_class_declaration" value='"$(_Info) : public $(_BasicInfo)"' />

   <intOption key="system_low_power_clock"
      locked="true"
      derived="true"
      origin="LPO Clock"
      units="Hz"
      description="Frequency of Internal Low Power Oscillator [LPO] Clock"
      toolTip="Dependent on device. [Typically ~1kHz]"
      value="1000"/>

   <template><![CDATA[
      \t//! Frequency of Low Power Oscillator (LPO) Clock [~1kHz]
      \tstatic constexpr uint32_t system_low_power_clock = $(system_low_power_clock)UL;

      \t/**
      \t * Get LPO clock
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic constexpr uint32_t getLpoClock() {
      \t   return system_low_power_clock;
      \t}\n\n
   ]]></template>

   <!-- ************* SPMSC1 & SPMSC2 ****************** -->
   <binaryOption key="pmc_spmsc1_lvde" condition="pmc_spmsc1_lvde_present"
      enabledBy="$(_BasicInfoGuard)"
      typeName="PmcLowVoltageDetect"
      description="Low-Voltage Detect Enable"
      toolTip="This write-once bit enables low-voltage detect logic" >
      <choice name="LVD logic disabled"  value="0" enum="Disabled"/>
      <choice name="LVD logic enabled"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_lvwie" condition="pmc_spmsc1_lvwie_present"
      enabledBy="pmc_spmsc1_lvde&amp;&amp;irqHandlingMethod"
      typeName="PmcLowVoltageWarningInterrupt"
      toolTip="Enables hardware interrupt requests for LVWF"
      description="Low-Voltage Warning Interrupt Enable" >
      <choice name="Interrupt disabled"  value="0" enum="Disabled"/>
      <choice name="Interrupt enabled"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_lvdre" condition="pmc_spmsc1_lvdre_present"
      enabledBy="pmc_spmsc1_lvde"
      typeName="PmcLowVoltageReset"
      description="Low-Voltage Detect Reset Enable" >
      <choice name="LVD events do not generate hardware resets"                          value="0" enum="Disabled"/>
      <choice name="Force an MCU reset when an enabled low-voltage detect event occurs"  value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_lvdse" condition="pmc_spmsc1_lvdse_present"
      enabledBy="pmc_spmsc1_lvde"
      typeName="PmcLowVoltageDetectInStop"
      description="Low-Voltage Detect Stop Enable" >
      <choice name="LVD events disabled during stop mode"  value="0" enum="Disabled"/>
      <choice name="LVD events enabled during stop mode"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc1_bgbe" condition="pmc_spmsc1_bgbe_present"
      enabledBy="pmc_spmsc1_lvde"
      typeName="PmcBandgapBuffer"
      description="Bandgap Buffer Enable"
      toolTip="Enables an internal buffer for the bandgap voltage reference for use\n
               as a ADC internal channel or ACMP reference" >
      <choice name="Bandgap buffer is disabled"  value="0" enum="Disabled"/>
      <choice name="Bandgap buffer is enabled"   value="1" enum="Enabled"/>
   </binaryOption>

   <binaryOption key="pmc_spmsc2_lvdv" condition="pmc_spmsc2_lvdv_present"
      enabledBy="pmc_spmsc1_lvde"
      typeName="PmcLowVoltageDetectLevel"
      description="Low-Voltage Detect Level Select"
      toolTip="Write-once bit" >
      <choice name="Low trip point (VLVD = VLVDL)"   value="0" enum="LowTripPoint"/>
      <choice name="High trip point (VLVD = VLVDH)"  value="1" enum="HighTripPoint"/>
   </binaryOption>

   <choiceOption key="pmc_spmsc2_lvwv" condition="pmc_spmsc2_lvwv_present"
      enabledBy="pmc_spmsc1_lvde"
      typeName="PmcLowVoltageWarningLevel"
      description="Low-Voltage Warning Level Select" >
      <choice name="Low trip point (VLVW = VLVW1)"    value="0" enum="LowTripPoint"/>
      <choice name="Mid 1 trip point (VLVW = VLVW2)"  value="1" enum="Mid1TripPoint"/>
      <choice name="Mid 2 trip point (VLVW = VLVW3)"  value="2" enum="Mid2TripPoint"/>
      <choice name="High trip point (VLVW = VLVW4)"   value="3" enum="HighTripPoint"/>
   </choiceOption>

<!-- Setters and getters -->

   <for keys="field           : get   : set   : clear : genCode                 : name"
        values="
      pmc_spmsc1_lvwie : true  : false : false : enableGettersAndSetters : Spmsc1Lvwie;
      pmc_spmsc1_lvdre : true  : false : false : enableGettersAndSetters : Spmsc1Lvdre;
      pmc_spmsc1_lvdse : true  : false : false : enableGettersAndSetters : Spmsc1Lvdse;
      pmc_spmsc1_lvde  : true  : false : false : enableGettersAndSetters : Spmsc1Lvde;
      pmc_spmsc1_bgbe  : true  : false : false : enableGettersAndSetters : Spmsc1Bgbe;
      pmc_spmsc2_lvdv  : true  : false : false : enableGettersAndSetters : Spmsc2Lvdv;
      pmc_spmsc2_lvwv  : true  : false : false : enableGettersAndSetters : Spmsc2Lvwv" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!--   __________ class $(_BasicInfo) _______________________________ -->

   <template where="definitions" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
   \t/**
   \t * Indicates reason for execution of PMC call-back
   \t */
   \tenum PmcInterruptReason {
   \t   PmcInterruptReason_LowVoltageDetect,//!< Low Voltage Detect
   \t   PmcInterruptReason_LowVoltageWarning//!< Low Voltage Warning
   \t};
   \t\n
   ]]>
   </template>

   <!--   __________ Interrupt handling _______________________________ -->

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   pmc->SPMSC1 = pmc->SPMSC1 | PMC_SPMSC1_LVWACK_MASK;
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call_parameters));
      \t   return;
      \t}
      \t\n
   ]]>
   </template>

<!--   __________ PMC Init class _______________________________ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t status) {
      \t *    (void) status;
      \t * }
      \t *
      \t * @code
      \t * static const $(_Class)::Init init {
      \t *
      \t *   // Setup values
      \t *   PmcLowVoltageDetect_Enabled ,             // Low-Voltage Detect Enable - LVD logic enabled
      \t *   PmcLowVoltageWarningInterrupt_Disabled ,  // Low-Voltage Warning Interrupt Enable - Interrupt disabled
      \t *   PmcLowVoltageReset_Disabled ,             // Low-Voltage Detect Reset Enable - LVD events do not generate hardware resets
      \t *   PmcLowVoltageDetectInStop_Disabled ,      // Low-Voltage Detect Stop Enable - LVD events disabled during stop mode
      \t *   PmcBandgapBuffer_Disabled ,               // Bandgap Buffer Enable - Bandgap buffer is disabled
      \t *   PmcLowVoltageLevel_HighTripPoint ,        // Low-Voltage Detect Level Select - High trip point (VLVD = VLVDH)
      \t *   PmcLowVoltageWarningLevel_LowTripPoint,   // Low-Voltage Warning Level Select - Low trip point (VLVW = VLVW1)
      \t *
      \t *    $(_name)Callback,                // Call-back to execute on event - call-back function name
      \t *    NvicPriority_Low,                // Priority for interrupt - Low
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      %multilineDescription
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="pmc_spmsc1_lvwack,pmc_spmsc1_lvwie,pmc_spmsc1_lvdre,pmc_spmsc1_lvdse,pmc_spmsc1_lvde,pmc_spmsc1_bgbe"
      linePadding="xxx"
   ><![CDATA[
      %multilineDescription
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="pmc_spmsc2_lvdv,pmc_spmsc2_lvwv"
      linePadding="xxx"
   ><![CDATA[
      %multilineDescription
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="/PCR/nvic_irqLevel,irqLevel"
      linePadding="xxx"
   ><![CDATA[
      %multilineDescription
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

<!--   Constructors -->

   <variableTemplate where="basicInfo" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            pmc_spmsc1_lvwack;
            pmc_spmsc1_lvwie;
            pmc_spmsc1_lvdre;
            pmc_spmsc1_lvdse;
            pmc_spmsc1_lvde;
            pmc_spmsc1_bgbe;
            pmc_spmsc2_lvdv;
            pmc_spmsc2_lvwv
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      padToComments="50"
      variables="
            pmc_spmsc1_lvde,
            pmc_spmsc1_lvwack,
            pmc_spmsc1_lvwie,
            pmc_spmsc1_lvdre,
            pmc_spmsc1_lvdse,
            pmc_spmsc1_bgbe,
            pmc_spmsc2_lvdv,
            pmc_spmsc2_lvwv
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoIrqGuard)"
             condition="$(_BasicInfoIrqGuard)" >   <![CDATA[
      \t   if constexpr (irqHandlerInstalled) {
      \t      // Only set call-backs if feature enabled
      \t      setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t   pmc->SPMSC1    = init.spmsc1;
      \t   pmc->SPMSC2    = init.spmsc2;
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
      <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="pmc_files" >
      <copy source="Project_Headers/pmc-MKE.h"  target="Project_Headers/pmc.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

</peripheralPage>
