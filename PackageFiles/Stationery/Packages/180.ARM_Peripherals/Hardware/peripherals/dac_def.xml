<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- Dac_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Comparitor">

   <xi:include href="_default_instance.xml"/>

   <template><![CDATA[
      \t//! Pin number in Info table for DAC output if mapped to a pin
      \tstatic constexpr int outputPin  = 0;\n\n
   ]]></template>
   
   <constant key="disable_peripheral"      derived = "true" value = "dac->C0 = DAC_C0_DACEN(0);"  />
   <xi:include href="_mapPinsOption.xml"/>   

   <binaryOption key="dac_c0_dacrfs" description="DAC Reference Select"
      toolTip="Selects the DAC reference voltage">
      <choice value="0" name="VrefOut(1.2V)" />
      <choice value="1" name="VddA" isDefault="true" />
   </binaryOption>
   <binaryOption key="dac_c0_dactrgsel" description="DAC Trigger Select"
      toolTip="Selects the DAC Trigger">
      <choice value="0" name="Hardware trigger" />
      <choice value="1" name="Software trigger" isDefault="true" />
   </binaryOption>
   <binaryOption key="dac_c0_lpen" description="DAC Low Power Control"
      toolTip="Affects power consumption of DAC">
      <choice value="0" name="High-Power mode" isDefault="true" />
      <choice value="1" name="Low-Power mode" />
   </binaryOption>
   <binaryOption key="dac_c0_dacbwien" description="DAC Buffer Watermark Interrupt Enable"
      toolTip="">
      <choice value="0" name="Interrupt is disabled" isDefault="true" />
      <choice value="1" name="Interrupt is enabled" />
   </binaryOption>
   <binaryOption key="dac_c0_dacbtien" description="DAC Buffer Read Pointer Top Flag Interrupt Enable"
      toolTip="">
      <choice value="0" name="Interrupt is disabled" isDefault="true" />
      <choice value="1" name="Interrupt is enabled" />
   </binaryOption>
   <binaryOption key="dac_c0_dacbbien" description="DAC Buffer Read Pointer Bottom Flag Interrupt Enable"
      toolTip="">
      <choice value="0" name="Interrupt is disabled" isDefault="true" />
      <choice value="1" name="Interrupt is enabled" />
   </binaryOption>
   <template><![CDATA[
      \t//! DAC Control Register 0
      \tstatic constexpr uint32_t c0 =
      \t   DAC_C0_DACRFS($(dac_c0_dacrfs))        | // Reference Select
      \t   DAC_C0_DACTRGSEL($(dac_c0_dactrgsel))     | // Trigger Select
      \t   DAC_C0_LPEN($(dac_c0_lpen))          | // Low Power Control
      \t#if defined(DAC_C0_DACBWIEN)
      \t   DAC_C0_DACBWIEN($(dac_c0_dacbwien))      | // Buffer Watermark Interrupt Enable
      \t#endif
      \t   DAC_C0_DACBTIEN($(dac_c0_dacbtien))      | // Buffer Read Pointer Top Flag Interrupt Enable
      \t   DAC_C0_DACBBIEN($(dac_c0_dacbbien));       // Buffer Read Pointer Bottom Flag Interrupt Enable\n\n
   ]]></template>
      
   <binaryOption key="dac_c1_dmaen" description="DMA Enable Select"
      toolTip="When DMA is enabled, the DMA request will be generated by original interrupts.\n
      The interrupts will not be presented on this module at the same time" >
      <choice value="0" name="DMA is disabled" isDefault="true" />
      <choice value="1" name="DMA is enabled" />
   </binaryOption>

   <choiceOption key="dac_c1_dacbfwm" description="DAC Buffer Watermark Select"
      toolTip="Controls when SR[DACBFWMF] is set.\n
         When the DAC buffer read pointer reaches the word defined by this field, SR[DACBFWMF] will be set">
      <choice value="0" name="1 word" isDefault="true" />
      <choice value="1" name="2 words" />
      <choice value="2" name="3 words" />
      <choice value="3" name="4 words" />
   </choiceOption>

   <choiceOption key="dac_c1_dacbfmd" description="DAC Buffer Work Mode Select"
      toolTip="Modes\n
      Normal:   Increments from 0 to max and wraps\n
      Swing:    Increments from 0 to max, decrements downto 0\n
      One-Time: Increments from 0 to max and stops">
      <choice value="0" name="Normal mode" isDefault="true" />
      <choice value="1" name="Swing mode" />
      <choice value="2" name="One-Time Scan mode" />
      <choice value="3" name="Reserved" />
   </choiceOption>

   <binaryOption key="dac_c1_dacbfen" description="DAC Buffer Enable"
      toolTip="If enabled the converted data is the word that the read pointer points to is used.\n
      This means converted data can be from any word of the buffer">
      <choice value="0" name="Buffer read pointer disabled. Converted data is first buffer word" isDefault="true" />
      <choice value="1" name="Buffer read pointer enabled" />
   </binaryOption>
   <template><![CDATA[
      \t//! DAC Control Register 1
      \tstatic constexpr uint32_t c1 =
      \t   DAC_C1_DMAEN($(dac_c1_dmaen))       | // DMA Enable Select
      \t   DAC_C1_DACBFWM($(dac_c1_dacbfwm))     | // Buffer Watermark Select
      \t   DAC_C1_DACBFMD($(dac_c1_dacbfmd))     | // Buffer Work Mode Select
      \t   DAC_C1_DACBFEN($(dac_c1_dacbfen));      // Buffer Enable\n\n
   ]]></template>
      
   <intOption key="dac_c2_dacbfup" description="DAC Buffer Upper Limit"
      toolTip="Selects the upper limit of the DAC buffer. The buffer read pointer cannot exceed it" 
      value="1"
      min="0" />
      
   <template><![CDATA[
      \t//! DAC Control Register 2
      \tstatic constexpr uint32_t c2 =
      \t   DAC_C2_DACBFUP($(dac_c2_dacbfup));   // DAC Buffer Upper Limit\n\n
   ]]></template>
   
   <template key="/DAC/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_name)
   \t */
   \tclass $(_class) : public $(_base_class)Base_T<$(_class)Info> {};\n
   ]]></template>
      
   <xi:include href="_clockOption.xml"/>
      
   <xi:include href="_irqOption.xml"/>         
   
   <projectActionList id = "dac_files" >
      <copy source="Project_Headers/dac.h"                         target="Project_Headers/dac.h"                         overwrite="true" derived="true" />
      <copy source="Snippets/dac-example.cpp"                      target="Snippets/dac-example.cpp"                      overwrite="true" derived="true" />
      <copy source="Snippets/dac-dma-pdb-example.cpp"              target="Snippets/dac-dma-pdb-example.cpp"              overwrite="true" derived="true" />
      <copy source="Snippets/dac-dma-pitThrottled-example.cpp"     target="Snippets/dac-dma-pitThrottled-example.cpp"     overwrite="true" derived="true" />
      <copy source="Snippets/dac-hardwareTrigger-dma-example.cpp"  target="Snippets/dac-hardwareTrigger-dma-example.cpp"  overwrite="true" derived="true" />
      <copy source="Snippets/dac-hardwareTrigger-example.cpp"      target="Snippets/dac-hardwareTrigger-example.cpp"      overwrite="true" derived="true" />
      <copy source="Snippets/dac-softwareTrigger-example.cpp"      target="Snippets/dac-softwareTrigger-example.cpp"      overwrite="true" derived="true" />
   </projectActionList>
   
   <signals/>
   
</peripheralPage>
