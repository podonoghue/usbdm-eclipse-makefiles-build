<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- usbdcd0_v1_1.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="USB Device Charger Detection">

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <constant key="suppressInstance"           value="false"         />
   <equation key="irq_parameters"             value=""  />
   <equation key="irq_dummy_parameters"       value=""  />
   <equation key="irq_call_parameters"        value=""  />
   <equation key="generateDefault"            value="false"         />
   <equation key="configureInStartupDefault"  value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- _____ Class Declaration _______ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <!-- _____ CONTROL _______ -->

   <binaryOption key="usbdcd_control_sr" condition="usbdcd_control_sr_present"
      enabledBy="enablePeripheralSupport"
      typeName="UsbdcdSoftwareReset"
      toolTip="Determines whether a software reset is performed"
      description="Software Reset" >
      <choice name="No effect"       value="0" enum="NoAction" />
      <choice name="Software reset"  value="1" enum="Reset" />
   </binaryOption >

   <binaryOption key="usbdcd_control_start" condition="usbdcd_control_start_present"
      enabledBy="enablePeripheralSupport"
      typeName="UsbdcdStart"
      toolTip="Determines whether the charger detection sequence is initiated"
      description="Start Change Detection Sequence" >
      <choice name="No effect"       value="0" enum="NoAction" />
      <choice name="Start sequence"  value="1" enum="StartSequence" />
   </binaryOption >

   <binaryOption key="usbdcd_control_bc12" condition="usbdcd_control_bc12_present"
      enabledBy="enablePeripheralSupport"
      typeName="UsbdcdCompatibility"
      toolTip="This bit cannot be changed after start detection"
      description="BC1.2 compatibility level" >
      <choice name="Compatible with BC1.1 (default)"  value="0" enum="Bc11" />
      <choice name="Compatible with BC1.2"            value="1" enum="Bc12" />
   </binaryOption >

   <binaryOption key="usbdcd_control_ie" condition="usbdcd_control_ie_present"
      enabledBy="irqHandlingMethod"
      typeName="UsbdcdEventAction"
      toolTip="Enables/disables interrupts to the system."
      description="Interrupt Handling" >
      <choice name="Interrupts disabled"  value="0" enum="None" />
      <choice name="Interrupts enabled"   value="1" enum="Interrupt" />
   </binaryOption >

   <binaryOption key="usbdcd_control_if" condition="usbdcd_control_if_present"
      hidden="true"
      typeName="UsbdcdEvent"
      toolTip="Indicates whether an interrupt is pending."
      description="Interrupt Flag" >
      <choice name="No interrupt"       value="0" enum="None" />
      <choice name="Interrupt Pending"  value="1" enum="InterruptPending" />
   </binaryOption >

   <choiceOption key="usbdcd_control_iack" condition="usbdcd_control_iack_present"
      hidden="true"
      typeName="UsbdcdEventAcknowledge"
      toolTip="Used to clear pending interrupt"
      description="Interrupt Acknowledge" >
      <choice name="Write 1 to clear IF"  value="0" enum="ClearFlag" />
   </choiceOption >

   <!-- _____ CLOCK _______ -->

   <aliasOption key="/SIM/system_bus_clock[0]" />

   <binaryOption key="usbdcd_clock_clock_unit" condition="usbdcd_clock_clock_unit_present"
      ref="(/SIM/system_bus_clock[0]>1000000)?1:0"
      derived="true"
      locked="true"
      enabledBy="enablePeripheralSupport"
      typeName="UsbdcdClockUnit"
      toolTip="Specifies the unit of measure for the clock speed."
      description="Unit of measurement encoding for Clock Speed" >
      <choice name="kHz" value="0" enum="Khz"  />
      <choice name="MHz" value="1" enum="Mhz" isDefault="true" />
   </binaryOption >

   <intOption key="usbdcd_clock_clock_speed" condition="usbdcd_clock_clock_speed_present"
      ref="/SIM/system_bus_clock[0]/(usbdcd_clock_clock_unit?1000000:1000)"
      derived="true"
      locked="true"
      enabledBy="enablePeripheralSupport"
      typeName="UsbdcdClockSpeed"
      baseType="uint16_t"
      description="Numerical Value of Clock Speed"
      toolTip="This value allows the USBDCD to accurately determine time intervals\n
               The unit of measure can be kHz or MHz as controlled by usbdcd_clock_clock_unit"
      min="1" max="1024" value="48"
   />

   <!-- _____ STATUS _______ -->

   <binaryOption key="usbdcd_status_active" condition="usbdcd_status_active_present"
      hidden="true"
      typeName="UsbdcdActiveStatus"
      toolTip="Indicates whether the sequence is running."
      description="Active Status Indicator\nIndicates whether the sequence is running" >
      <choice name="Sequence not running"  value="0" enum="Idle" />
      <choice name="Sequence running"      value="1" enum="SequenceRunning" />
   </binaryOption >

   <binaryOption key="usbdcd_status_to" condition="usbdcd_status_to_present"
      hidden="true"
      typeName="UsbdcdTimeoutStatus"
      toolTip="Indicates whether the detection sequence has passed the 1s timeout threshhold."
      description="Timeout Flag" >
      <choice name="&lt;= 1 second"                value="0" enum="NoTimeout" />
      <choice name="&gt;= 1 second since contact"  value="1" enum="TimeoutOccurred" />
   </binaryOption >

   <binaryOption key="usbdcd_status_err" condition="usbdcd_status_err_present"
      hidden="true"
      typeName="UsbdcdErrorStatus"
      toolTip="Indicates whether there is an error in the detection sequence."
      description="Error Flag\nIndicates whether there is an error in the detection sequence" >
      <choice name="No sequence errors"  value="0" enum="NoError" />
      <choice name="Sequence errors"     value="1" enum="SequenceError" />
   </binaryOption >

   <choiceOption key="usbdcd_status_seq_stat" condition="usbdcd_status_seq_stat_present"
      hidden="true"
      typeName="UsbdcdProgress"
      toolTip="Indicates the status of the charger detection sequence."
      description="Charger Detection Sequence Status" >
      <choice name="Not enabled/detected"    value="0" enum="NotDetected" />
      <choice name="Data pin complete"       value="1" enum="DataPinComplete" />
      <choice name="Charging port complete"  value="2" enum="ChargingPortComplete" />
      <choice name="Charger type complete"   value="3" enum="ChargerTypeComplete" />
   </choiceOption >

   <choiceOption key="usbdcd_status_seq_res" condition="usbdcd_status_seq_res_present"
      hidden="true"
      typeName="UsbdcdOutcome"
      toolTip="Indicates how the charger detection is attached."
      description="Charger Detection Sequence Results\nReports how the charger detection is attached" >
      <choice name="No results"         value="0" enum="NoResults" />
      <choice name="Standard host"      value="1" enum="StandardHost" />
      <choice name="Charging port"      value="2" enum="ChargingPort" />
      <choice name="Dedicated charger"  value="3" enum="DedicatedCharger" />
   </choiceOption >

   <!-- _____ SIGNAL_OVERRIDE _______ -->

   <choiceOption key="usbdcd_signal_override_ps" condition="usbdcd_signal_override_ps_present"
      enabledBy="enablePeripheralSupport"
      register="signal_override"
      typeName="UsbdcdSignalOverridePs"
      toolTip="Used to enable specified voltage and current source circuits on the USB_DP and USB_DM pins.\n
               May set this bit field to 0b10 for required signaling if attached to a Dedicated Charging Port, or\n
               during operation under the Dead Battery Provision"
      description="Phase Selection" >
      <choice name="No overrides. Normal USB data operation"            value="0" enum="Normal" />
      <choice name="Enables VDP_SRC->USB_DP and IDM_SINK->USB_DM pin"   value="2" enum="EnableVdp_srcIdm_sink" />
   </choiceOption >

   <!-- _____ TIMER0 _______ -->

   <intOption key="usbdcd_timer0_tseq_init" condition="usbdcd_timer0_tseq_init_present"
      enabledBy="enablePeripheralSupport"
      typeName="UsbdcdInitiationTime"
      baseType="uint8_t"
      description="Sequence Initiation Time (in ms)"
      toolTip="This represents the system latency (in ms) measured from the time VBUS goes active to the time\n
               system software initiates the charger detection sequence in the USBDCD module. \n
               When software sets the CONTROL[START] bit, the Unit Connection Timer (TUNITCON) is initialized\n
               with the value of TSEQ_INIT. \n
               The USB Battery Charging Specification requires the entire sequence, including TSEQ_INIT,\n
               to be completed in 1s or less."
      min="0" max="1023" value="16"
   />

   <intOption key="usbdcd_timer0_tunitcon" condition="usbdcd_timer0_tunitcon_present"
      hidden="true"
      typeName="uint32_t"
      description="Unit Connection Timer Elapse (in ms)"
      toolTip="The represents the amount of elapsed time since the event of setting the START bit plus\n
               the value of TSEQ_INIT. \n
               The timer is automatically initialized with the value of TSEQ_INIT"
   />

   <!-- _____ TIMER1 _______ -->

   <intOption key="usbdcd_timer1_tdcd_dbnc" condition="usbdcd_timer1_tdcd_dbnc_present"
      enabledBy="enablePeripheralSupport"
      typeName="UsbdcdDataPlusDebounceTime"
      baseType="uint8_t"
      description="Time Period to Debounce D+ Signal (in ms)"
      toolTip="Sets the time period (ms) to debounce the D+ signal during the data pin contact detection phase.\n
               The USB Battery Charging Specification requires a minimum value of 10 ms"
      min="0" max="1023" value="10"
   />

   <intOption key="usbdcd_timer1_tvdpsrc_on" condition="usbdcd_timer1_tvdpsrc_on_present"
      enabledBy="enablePeripheralSupport"
      typeName="UsbdcdComparatorEnabledTime"
      baseType="uint8_t"
      description="Time Period Comparator Enabled (in ms)"
      toolTip="This timing parameter is used after detection of the data pin.\n
               The USB Battery Charging Specification requires a minimum value of 40 ms."
      min="0" max="1023" value="40"
   />

   <!-- _____ TIMER2 _______ -->

   <intOption key="usbdcd_timer2_tvdpsrc_con" condition="usbdcd_timer2_tvdpsrc_con_present"
      enabledBy="enablePeripheralSupport"
      typeName="UsbdcdDataPlusPullupDelayTime"
      baseType="uint8_t"
      description="Time Period Before Enabling D+ Pullup (in ms)"
      toolTip="Sets the time period (ms) that the module waits after charging port detection before system\n
               software must enable the D+ pullup to connect to the USB host.\n
               Valid values are 1-1023, but the USB Battery Charging Specification requires a minimum\n
               value of 40 ms."
      min="0" max="1023" value="40"
   />

   <intOption key="usbdcd_timer2_check_dm" condition="usbdcd_timer2_check_dm_present"
      enabledBy="enablePeripheralSupport"
      typeName="UsbdcdDataMinusCheckDelayTime"
      baseType="uint8_t"
      description="Time Before Check of D- Line (in ms)"
      toolTip="Sets the amount of time (in ms) that the module waits after the device connects to the USB bus until\n
               checking the state of the D- line to determine the type of charging port. See Charger Type Detection.\n
               Valid values are 1-15ms."
      min="1" max="15" value="1"
   />

   <!-- _____ TIMER2_BC11 _______ -->

   <intOption key="usbdcd_timer2_bc11_tvdpsrc_con" condition="usbdcd_timer2_bc11_tvdpsrc_con_present"
      enabledBy="enablePeripheralSupport"
      register="timer2_bc11"
      typeName="UsbdcdDataPlusPullupDelayTime"
      baseType="uint8_t"
      description="Time Period Before Enabling D+ Pullup (in ms)"
      toolTip="Sets the time period (ms) that the module waits after charging port detection before system\n
               software must enable the D+ pullup to connect to the USB host.\n
               Valid values are 1-1023, but the USB Battery Charging Specification requires a minimum\n
               value of 40 ms."
      min="0" max="1023" value="40"
   />

   <intOption key="usbdcd_timer2_bc11_check_dm" condition="usbdcd_timer2_bc11_check_dm_present"
      enabledBy="enablePeripheralSupport"
      register="timer2_bc11"
      typeName="UsbdcdDataMinusCheckDelayTime"
      baseType="uint8_t"
      description="Time Before Check of D- Line (in ms)"
      toolTip="Sets the amount of time (in ms) that the module waits after the device connects to the USB bus until\n
               checking the state of the D- line to determine the type of charging port. See Charger Type Detection.\n
               Valid values are 1-15ms."
      min="1" max="15" value="1"
   />

   <!-- _____ TIMER2_BC12 _______ -->

   <intOption key="usbdcd_timer2_bc12_twait_after_prd" condition="usbdcd_timer2_bc12_twait_after_prd_present"
      enabledBy="enablePeripheralSupport"
      register="timer2_bc12"
      typeName="UsbdcdPrimaryToSecondaryWait"
      baseType="uint32_t"
      description="Wait time after primary detection."
      toolTip="Sets the amount of time (in ms) that the module waits after primary detection\n
               before start to secondary detection\n
               Valid values are 1-1023ms. Default is 1ms"
      value="1"
   />

   <intOption key="usbdcd_timer2_bc12_tvdmsrc_on" condition="usbdcd_timer2_bc12_tvdmsrc_on_present"
      enabledBy="enablePeripheralSupport"
      register="timer2_bc12"
      typeName="UsbdcdTvdmsrcOnTime"
      baseType="uint32_t"
      description="VDM_SRC time"
      toolTip="Sets the amount of time (in ms) that the module enables the VDM_SRC.\n
               Valid values are 0-40ms"
      value="0b101000"
   />

<!-- Setters and getters -->

   <for keys="field                          : set   : get   : clear : genCode                 : name"
        values="
         usbdcd_control_sr                   : true  : true  : false : enableGettersAndSetters : SoftwareReset;
         usbdcd_control_start                : true  : true  : false : enableGettersAndSetters : StartSequence;
         usbdcd_control_bc12                 : true  : true  : false : enableGettersAndSetters : Compatibility;
         usbdcd_control_ie                   : true  : true  : false : enableGettersAndSetters : InterruptEnable;
         usbdcd_control_if                   : false : true  : false : enableGettersAndSetters : InterruptFlag;
         usbdcd_control_iack                 : false : false : true  : enableGettersAndSetters : InterruptFlag;
         usbdcd_clock_clock_speed            : true  : true  : false : enableGettersAndSetters : ClockSpeed;
         usbdcd_clock_clock_unit             : true  : true  : false : enableGettersAndSetters : ClockUnit;
         usbdcd_status_active                : false : true  : false : enableGettersAndSetters : StatusActive;
         usbdcd_status_to                    : false : true  : false : enableGettersAndSetters : StatusTo;
         usbdcd_status_err                   : false : true  : false : enableGettersAndSetters : StatusErr;
         usbdcd_status_seq_stat              : false : true  : false : enableGettersAndSetters : StatusSeqStat;
         usbdcd_status_seq_res               : false : true  : false : enableGettersAndSetters : StatusSeqRes;
         usbdcd_signal_override_ps           : true  : true  : false : enableGettersAndSetters : PhaseSelection;
         usbdcd_timer0_tseq_init             : true  : true  : false : enableGettersAndSetters : InitiationTime;
         usbdcd_timer0_tunitcon              : false : true  : false : enableGettersAndSetters : ConnectionTime;
         usbdcd_timer1_tdcd_dbnc             : true  : true  : false : enableGettersAndSetters : DataPlusDebounceTime;
         usbdcd_timer1_tvdpsrc_on            : true  : true  : false : enableGettersAndSetters : ComparatorEnabledTime;
         usbdcd_timer2_tvdpsrc_con           : true  : true  : false : enableGettersAndSetters : DataPlusPullupDelayTime;
         usbdcd_timer2_check_dm              : true  : true  : false : enableGettersAndSetters : DataMinusCheckDelayTime;
         usbdcd_timer2_bc11_tvdpsrc_con      : true  : true  : false : enableGettersAndSetters : DataPlusPullupDelayTime;
         usbdcd_timer2_bc11_check_dm         : true  : true  : false : enableGettersAndSetters : DataMinusCheckDelayTime;
         usbdcd_timer2_bc12_twait_after_prd  : true  : true  : false : enableGettersAndSetters : PrimaryToSecondaryWait;
         usbdcd_timer2_bc12_tvdmsrc_on       : true  : true  : false : enableGettersAndSetters : TvdmsrcOnTime" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Clear %description
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!--   ========== USBDCD Init class =============================== -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   UsbdcdControlSr_NoEffect ,           // Software Reset - No effect
      \t *   UsbdcdControlStart_NoEffect ,        // Start Change Detection Sequence - No effect
      \t *   UsbdcdControlIe_InterruptsDisabled , // Interrupt Enable - Interrupts disabled
      \t *   UsbdcdControlIack_Write1ToClearIf ,  // Interrupt Acknowledge - Write 1 to clear IF
      \t *   UsbdcdClockSpeed(48) ,               // Numerical Value of Clock Speed
      \t *   UsbdcdClockUnit_MhzSpeed ,           // Unit of measurement encoding for Clock Speed - MHz Speed
      \t *   UsbdcdInitiationTime(16) ,           // Sequence Initiation Time (in ms)
      \t *   UsbdcdDebounceDataPlusTime(10) ,     // Time Period to Debounce D+ Signal (in ms)
      \t *   UsbdcdComparatorEnabledTime(40) ,    // Time Period Comparator Enabled (in ms)
      \t *   UsbdcdDataPlusPupDelayTime(40) ,     // Time Period Before Enabling D+ Pullup (in ms)
      \t *   UsbdcdDataMinusCheckDelayTime(1),    // Time Before Check of D- Line (in ms)
      \t *
      \t *   $(_name)Callback,                    // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                    // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!--   Member variables -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)" >
   <![CDATA[
      \t   /// USB Device Charger Detection
      \t   CallbackFunction sCallback = nullptr;\n\n
   ]]></template>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="usbdcd_control_sr,usbdcd_control_start,usbdcd_control_bc12,usbdcd_control_ie,usbdcd_control_iack"
   ><![CDATA[
      \t   /// Control Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="usbdcd_clock_clock_speed,usbdcd_clock_clock_unit"
   ><![CDATA[
      \t   /// Clock Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="usbdcd_signal_override_ps"
   ><![CDATA[
      \t   /// Signal Override Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="usbdcd_timer0_tseq_init"
   ><![CDATA[
      \t   /// TIMER0 Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="usbdcd_timer1_tdcd_dbnc,usbdcd_timer1_tvdpsrc_on"
   ><![CDATA[
      \t   /// Timing parameters for USBDCD
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="usbdcd_timer2_tvdpsrc_con,usbdcd_timer2_check_dm"
   ><![CDATA[
      \t   /// Timing parameters for USBDCD
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="usbdcd_timer2_bc11_tvdpsrc_con,usbdcd_timer2_bc11_check_dm"
   ><![CDATA[
      \t   /// Timing parameters for USBDCD v1.1
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="usbdcd_timer2_bc12_twait_after_prd,usbdcd_timer2_bc12_tvdmsrc_on"
   ><![CDATA[
      \t   /// Timing parameters for USBDCD v1.2
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!-- Init Constructors -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for USB Device Charger Detection
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param sCallback   USB Device Charger Detection call-back
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(CallbackFunction sCallback, Types... rest) : Init(rest...) {
      \t
      \t      this->sCallback = sCallback;
      \t   }\n\n
   ]]></template>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            usbdcd_control_sr;
            usbdcd_control_start;
            usbdcd_control_bc12;
            usbdcd_control_ie;
            usbdcd_clock_clock_speed;
            usbdcd_clock_clock_unit;
            usbdcd_signal_override_ps;
            usbdcd_timer0_tseq_init;
            usbdcd_timer1_tdcd_dbnc;
            usbdcd_timer1_tvdpsrc_on;
            usbdcd_timer2_tvdpsrc_con;
            usbdcd_timer2_check_dm;
            usbdcd_timer2_bc11_tvdpsrc_con;
            usbdcd_timer2_bc11_check_dm;
            usbdcd_timer2_bc12_twait_after_prd;
            usbdcd_timer2_bc12_tvdmsrc_on
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      padToComments="35"
      variables="
            usbdcd_control_sr,
            usbdcd_control_start,
            usbdcd_control_bc12,
            usbdcd_control_ie,
            usbdcd_clock_clock_speed,
            usbdcd_clock_clock_unit,
            usbdcd_signal_override_ps,
            usbdcd_timer0_tseq_init,
            usbdcd_timer1_tdcd_dbnc,
            usbdcd_timer1_tvdpsrc_on,
            usbdcd_timer2_tvdpsrc_con,
            usbdcd_timer2_check_dm,
            usbdcd_timer2_bc11_tvdpsrc_con,
            usbdcd_timer2_bc11_check_dm,
            usbdcd_timer2_bc12_twait_after_prd,
            usbdcd_timer2_bc12_tvdmsrc_on
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoIrqGuard)"
             condition="$(_BasicInfoIrqGuard)" >   <![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      // Only set call-backs if feature enabled
      \t      Info::setCallback(init.sCallback);
      \t      Info::enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t   // Do software reset if requested
      \t   usbdcd->CONTROL           = init.control&USBDCD_CONTROL_SR_MASK;
      \t   usbdcd->CLOCK             = init.clock;
      \t#ifdef USBDCD_SIGNAL_OVERRIDE_PS
      \t   usbdcd->SIGNAL_OVERRIDE   = init.signal_override;
      #endif
      \t   usbdcd->TIMER0            = init.timer0;
      \t   usbdcd->TIMER1            = init.timer1;
      #ifdef USBDCD_TIMER2_CHECK_DM_MASK
      \t   usbdcd->TIMER2            = init.timer2;
      #endif
      #ifdef USBDCD_TIMER2_BC11_CHECK_DM_MASK
      \t   usbdcd->TIMER2_BC11       = init.timer2_bc11;
      \t   usbdcd->TIMER2_BC12       = init.timer2_bc12;
      #endif
      \t   usbdcd->CONTROL           = init.control&~USBDCD_CONTROL_SR_MASK;
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- _____ Common _______ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Info)> {};
      \t//typedef $(_Baseclass)Base_T<$(_Info)> $(_Class);
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="usbdcd_files" >
      <copy source="Project_Headers/usbdcd.h"       target="Project_Headers/usbdcd.h"          overwrite="true" derived="true" />
      <copy source="Snippets/usbdcd-example.cpp"    target="Snippets/usbdcd-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>

   <!-- _____ Startup _______ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- _____ SIM configuration _______ -->
   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

</peripheralPage>
