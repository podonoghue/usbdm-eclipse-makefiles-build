<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- sim_commonTemplates.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <template><![CDATA[
      \t/*
      \t * Template:sim_commonTemplates.xml
      \t */ \n
   ]]></template>

   <!-- ************* SCGCx Bus clock enables ****************** -->
   <!-- Create list of clock enable fields -->
   <equation key="clockEnables" value="=&quot;&quot;" />
   <for keys="peripheral"
      values="adc;cmp;cmt;crc;dac;dma;dmamux;ewm;flexio;ftf;ftfa;ftfe;ftfl;ftm;
              i2c;i2s;lptmr;lpuart;pdb;pit;porta;portb;portc;portd;porte;rnga;
              rtc;slcd;spi;tpm;tsi;uart;usb;usbdcd;vref;
      ">
      <for keys="scgcNum" values="4;5;6;7">
         <for keys="instance" values=";0;1;2;3;4;5">
            <equation key="enabled" value="&quot;%(peripheral)&quot;==&quot;ftf&quot;" />
            <equation key="clockEnables"
               value="=clockEnables+&quot;%(scgcNum) : %(peripheral)%(instance) : &quot;+
                       Prettify(&quot;%(peripheral)&quot;)+&quot;%(instance):&quot;+enabled+&quot;;&quot;"
               condition="sim_scgc%(scgcNum)_%(peripheral)%(instance)_present" />
         </for>
      </for>
   </for>
   <deleteVariable key="enabled" />

   <!-- Peripheral routing MKL -->
   <!--   field                 :   name                -->
   <constant key="peripheralRouting" type="String" value="&quot;
      sim_sopt2_lpuart1src      : Lpuart1src      ;
      sim_sopt2_lpuart0src      : Lpuart0src      ;
      sim_sopt2_uart0src        : Uart0src        ;
      sim_sopt2_tpmsrc          : Tpmsrc          ;
      sim_sopt2_flexiosrc       : Flexiosrc       ;
      sim_sopt2_usbsrc          : Usbsrc          ;
      sim_sopt2_clkoutsel       : Clkoutsel       ;
      sim_sopt2_rtcclkoutsel    : RtcClkoutsel    ;
      sim_sopt7_adc0alttrgen    : Adc0AltTrgEn    ;
      sim_sopt7_adc0pretrgsel   : Adc0PretrgSel   ;
      sim_sopt7_adc0trgsel      : Adc0TrgSel      ;
      sim_fcfg1_flashdoze       : FlashDoze       ;
      sim_fcfg1_flashdis        : FlashDisable
   &quot;" />

   <category name="SCGC" description="Peripheral Clock Enables">
      <for keys=  " reg : name    : Name    : isDefault"
           values="=clockEnables" >
         <binaryOption key="sim_scgc%(reg)_%(name)" condition="sim_scgc%(reg)_%(name)_present"
            enabledBy="enablePeripheralSupport"
            typeName="Sim%(Name)Clock"
            description="%(Name) Clock Gate Control"
            toolTip="This clock gate must be enabled to access %(Name)\n
                     This may be done here or when the individual peripheral is configured." >
            <choice name="%(Name) Clock disabled"  value="0" enum="Disabled"/>
            <choice name="%(Name) Clock enabled"   value="1" enum="Enabled" isDefault="%(isDefault)" />
         </binaryOption >
      </for>
   </category>


   <category name="SOPT8" description="FTM signals">
      <for keys="ch" values="0;1;2;3;4;5;6;7">
         <binaryOption key="sim_sopt8_ftm0och%(ch)src" condition="sim_sopt8_ftm0och%(ch)src_present"
            typeName="SimFtm0Ch%(ch)OutputSrc"
            description="FTM0 channel %(ch) output source"
            toolTip="Allows modulation of FTM output">
            <choice value="0" name="FTM0 ch %(ch) direct"                 enum="Direct"             isDefault="true" />
            <choice value="1" name="FTM0 ch %(ch) modulated by FTM1 ch 1" enum="ModulatedByFtm1Ch1" />
         </binaryOption>
      </for>

      <for keys="ch" values="0;1;2;3;4;5;6;7">
         <binaryOption key="sim_sopt8_ftm3och%(ch)src"  condition="sim_sopt8_ftm3och%(ch)src_present"
            typeName="SimFtm3Ch%(ch)OutputSrc"
            description="FTM3 channel %(ch) output source"
            toolTip="Allows modulation of FTM output">
            <choice value="0" name="FTM3 ch %(ch) direct"                 enum="Direct"             isDefault="true" />
            <choice value="1" name="FTM3 ch %(ch) modulated by FTM2 ch 1" enum="ModulatedByFtm2Ch1" />
         </binaryOption>
      </for>

      <choiceOption key="sim_sopt8_ftm_syncbits" condition="sim_sopt8_ftm0syncbit_present"
         typeName="SimFtmSync"
         valueFormat="%s"
         hidden="true"
         description="FTM Hardware Trigger 0 Software Asserts"
         toolTip="This allows software to assert the hardware trigger (TRIG0) FTM inputs\n
                  Use setFtmSyncBits() to assert TRIG0 input on multiple FTMs\n
                  Use clearFtmSyncBits() or clearAllFtmSyncBits() to allow other trigger sources to assert">
         <choice value="SIM_SOPT8_FTM0SYNCBIT_MASK" name="FTM0 trigger mask" enum="Ftm0" />
         <choice value="SIM_SOPT8_FTM1SYNCBIT_MASK" name="FTM1 trigger mask" enum="Ftm1" />
         <choice value="SIM_SOPT8_FTM2SYNCBIT_MASK" name="FTM2 trigger mask" enum="Ftm2" />
         <choice value="SIM_SOPT8_FTM3SYNCBIT_MASK" name="FTM3 trigger mask" enum="Ftm3" />
      </choiceOption>
   </category>

   <category name="SOPT9" description="TPM signals">

      <for keys="p" values="0;1;2;3">
         <binaryOption key="sim_sopt9_tpm%(p)clksel" condition="sim_sopt9_tpm%(p)clksel_present"
            typeName="SimTpm%(p)ClkSel"
            description="TPM%(p) External Clock Pin"
            toolTip="External pin used to drive the clock to the TPM module">
            <choice value="0"  name="TPM_CLKIN0 pin" enum="TpmClkin0" isDefault="true" />
            <choice value="1"  name="TPM_CLKIN1 pin" enum="TpmClkin1" />
         </binaryOption>

         <choiceOption key="sim_sopt9_tpm%(p)ch0src" condition="sim_sopt9_tpm%(p)ch0src_present"
            typeName="SimTpm%(p)Ch0Src"
            description="TPM%(p) channel 0 input capture source"
            toolTip="Source for TPM channel 0 input capture\n
               NOTE: When the TPM is not in input capture mode, clear this field">
            <choice value="0" name="TPM_CH0 signal"           enum="IcPin"  isDefault="true"/>
            <choice value="1" name="CMP0 output"              enum="Cmp0"     />
            <choice value="2" name="CMP1 output"              enum="Cmp1"     />
         </choiceOption>
      </for>
   </category>

   <if condition="!osc0_peripheral" >
      <!-- Oscillator peripheral used for OSC0 input to MCG = OSC0 -->
      <!-- This peripheral is tied closely to the MCG              -->
      <constant key="osc0_peripheral"  type="String" value="&quot;/OSC0&quot;" />
      <constant key="osc0_description" type="String" value="&quot;OSC0 - Main System Oscillator (OSCCLK0)&quot;" />
   </if>

   <if condition="rtc_independent" >
   <!-- *********************** rtc_independent *********************** -->

      <!-- ERCCLK32K Sources -->
      <choiceOption key="sim_sopt1_osc32ksel" condition="!sim_sopt1_osc32ksel"
         typeName="SimErc32kSel"
         target="system_erclk32k_clock"
         hidden="true"
         description="ERCLK32K clock source"
         toolTip="Clock source for External 32k Reference Clock [ERCLK32K]">
         <choice value="0" name="OSC0 in low range (OSC32KCLK)"  ref="/OSC0/osc32k_clock"          enum="Osc32kClk" code="Osc0Info::getOsc32kClock()"  />
         <choice value="2" name="RTC 32kHz clock"                ref="/RTC/rtcclk_gated_clock"     enum="Rtc32kClk" code="RtcInfo::getExternalClock()" />
         <choice value="3" name="LPO 1kHz clock"                 ref="/PMC/system_low_power_clock" enum="LpoClk"    code="PmcInfo::getLpoClock()"     isDefault="true"/>
      </choiceOption>

      <if condition="sim_sopt2_rtcclkoutsel_present" >
         <choiceOption key="sim_sopt2_rtcclkoutsel"
            typeName="SimRtcClkoutSel"
            target="rtc_clkout"
            hidden="true"
            description="RTC clock out source"
            toolTip="Clock output on the RTC_CLKOUT pin">
            <choice value="0"  name="RTC 1 Hz clock"   ref="/RTC/rtc_1hz_clock"      enum="1Hz"   />
            <choice value="1"  name="RTC 32kHz clock"  ref="/RTC/rtcclk_gated_clock" enum="32kHz" isDefault="true" />
         </choiceOption>

         <intOption key="rtc_clkout"
            hidden="true"
            locked="true"
            derived="true"
            units="Hz"
            description="RTC clock out frequency"
            toolTip="Clock frequency on the RTC_CLKOUT pin"  />

         <clockCodeTemplate variable="sim_sopt2_rtcclkoutsel"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %paramName %tooltip
            \t */
            \tstatic void setRtcClockout(%paramType %paramName) {
            \t   %fieldAssignment
            \t}\n\n
         ]]></clockCodeTemplate>
      </if>

   <else_if condition="RtcForcing" />
      <!-- *********************** RtcForcing *********************** -->

      <!-- Uses RTC_CLKIN pin -->
      <intOption key="rtc_clkin_clock"
         hidden="true"
         units="Hz"
         description="RTC_CLKIN pin"
         toolTip="External clock for the RTC (usually 32.768 kHz)"
         origin="RTC_CLKIN pin"
         value="0"
         min="0" max="33000" />

      <!-- ERCCLK32K Sources -->
      <choiceOption key="sim_sopt1_osc32ksel" condition="!sim_sopt1_osc32ksel"
         typeName="SimErc32kSel"
         target="system_erclk32k_clock"
         hidden="true"
         description="ERCLK32K clock source"
         toolTip="Clock source for External 32k Reference Clock [ERCLK32K]">
         <choice value="0" name="OSC32KCLK"           ref="/OSC0/osc32k_clock"          enum="Osc32kClk"  code="Osc0Info::getOscerClock()" />
         <choice value="2" name="RTC_CLKIN pin"       ref="/SIM/rtc_clkin_clock"        enum="RtcClkin"   code="rtc_clkin_clock"            />
         <choice value="3" name="LPO 1kHz clock"      ref="/PMC/system_low_power_clock" enum="LpoClk"     code="PmcInfo::getLpoClock()"  isDefault="true"/>
      </choiceOption>

      <if condition="sim_sopt2_rtcclkoutsel_present" >
         <choiceOption key="sim_sopt2_rtcclkoutsel"
            typeName="SimRtcClkoutSel"
            target="rtc_clkout"
            hidden="true"
            description="RTC clock out source"
            toolTip="Clock output on the RTC_CLKOUT pin">
            <choice value="0"  name="RTC 1 Hz clock"   ref="/RTC/rtc_1hz_clock"      enum="1Hz"   />
            <choice value="1"  name="OSCERCLK"         ref="/OSC0/oscer_clock"       enum="32kHz" isDefault="true" />
         </choiceOption>

         <intOption key="rtc_clkout"
            hidden="true"
            locked="true"
            derived="true"
            units="Hz"
            description="RTC clock out frequency"
            toolTip="Clock frequency on the RTC_CLKOUT pin"  />

         <clockCodeTemplate variable="sim_sopt2_rtcclkoutsel"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %paramName %tooltip
            \t */
            \tstatic void setRtcClockout(%paramType %paramName) {
            \t   %fieldAssignment
            \t}\n\n
         ]]></clockCodeTemplate>
      </if>

   <else />
      <!-- *********************** !rtc_independent && !RtcForcing = rtc_none *********************** -->

      <!-- ERCCLK32K Sources -->
      <choiceOption key="sim_sopt1_osc32ksel_Fixed" condition="!sim_sopt1_osc32ksel"
         target="system_erclk32k_clock"
         hidden="true"
         description="ERCLK32K clock source"
         toolTip="Clock source for External 32k Reference Clock [ERCLK32K]">
         <choice value="0" name="OSC0 in low range (OSC32KCLK)"  ref="/OSC0/osc32k_clock"          enum="Osc32kClk" code="Osc0Info::getOsc32kClock()"  />
      </choiceOption>

   </if>

   <intOption key="system_erclk32k_clock" condition="sim_sopt1_osc32ksel||sim_sopt1_osc32ksel_Fixed"
      hidden="true"
      locked="true"
      units="Hz"
      derived="true"
      description="Frequency of External 32k Reference Clock [ERCLK32K]"
      toolTip="External reference clock available to some peripherals (usually ~32kHz)"
      origin="Derived from OSC32KCLK, RTC or LPO"
      value="32768"
      disabledValue="0" />

<!-- ========== External clock sources =============================== -->
   <variableTemplate variables="system_usb_clkin_clock" ><![CDATA[
   \t///  %description
   \tstatic constexpr uint32_t usbExternalClock=$(system_usb_clkin_clock);\n\n
   ]]></variableTemplate>

   <variableTemplate variables="system_sdhc_clockin" ><![CDATA[
   \t/// %description
   \tstatic constexpr uint32_t sdhcExternalClock=$(system_sdhc_clockin);\n\n
   ]]></variableTemplate>

   <variableTemplate variables="system_irc48m_clock[]" ><![CDATA[
   \t/// %description
   \tstatic constexpr uint32_t irc48mClock=$(system_irc48m_clock[]);\n\n
   ]]></variableTemplate>

<!-- ========== SOPT1 =============================== -->
   <variableTemplate namespace="usbdm" variables="sim_sopt1_ramsize"><![CDATA[
      \t/**
      \t * RAM size
      \t */
      \tenum SimRamSize {
      \t   SimRamSize_8KiB    = SIM_SOPT1_RAMSIZE(1),  ///< 8KiB RAM
      \t   SimRamSize_16KiB   = SIM_SOPT1_RAMSIZE(3),  ///< 16KiB RAM
      \t   SimRamSize_24KiB   = SIM_SOPT1_RAMSIZE(4),  ///< 24KiB RAM
      \t   SimRamSize_32KiB   = SIM_SOPT1_RAMSIZE(5),  ///< 32KiB RAM
      \t   SimRamSize_48KiB   = SIM_SOPT1_RAMSIZE(6),  ///< 32KiB RAM
      \t   SimRamSize_64KiB   = SIM_SOPT1_RAMSIZE(7),  ///< 64KiB RAM
      \t   SimRamSize_96KiB   = SIM_SOPT1_RAMSIZE(8),  ///< 96KiB RAM
      \t   SimRamSize_128KiB  = SIM_SOPT1_RAMSIZE(9),  ///< 128KiB RAM
      \t   SimRamSize_256KiB  = SIM_SOPT1_RAMSIZE(11), ///< 256KiB RAM
      \t   SimRamSize_512KiB  = SIM_SOPT1_RAMSIZE(12), ///< 256KiB RAM
      \t   SimRamSize_1024KiB = SIM_SOPT1_RAMSIZE(13), ///< 256KiB RAM
      \t};\n\n
   ]]></variableTemplate>

   <variableTemplate variables="sim_sopt1_ramsize"><![CDATA[
      \t/**
      \t * Get RAM size
      \t *
      \t * @return RAM size value
      \t */
      \tstatic SimRamSize getRamSize() {
      \t
      \t   return static_cast<SimRamSize>(sim->SOPT1&SIM_SOPT1_RAMSIZE_MASK);
      \t}\n\n
   ]]></variableTemplate>

   <variableTemplate variables="rtc_clkin_clock" ><![CDATA[
      \t/// Frequency of clock provided to RTC external input pin
      \tstatic constexpr uint32_t rtc_clkin_clock = $(rtc_clkin_clock);  \n\n
   ]]></variableTemplate>

   <clockCodeTemplate variable="sim_sopt1_osc32ksel"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setErc32kClock(%paramType %paramName) {
      \t   %fieldAssignment
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getErc32kClock() {
      \t
      \t   switch(%maskingExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>

   <template condition="rtc_none" ><![CDATA[
      \t/**
      \t * Get ERCLK32K clock frequency
      \t *
      \t * @return Clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getErc32kClock() {
      \t   // No RTC
      \t   return Osc0Info::getOsc32kClock();  // OSC0 in 32kHz mode
      \t}\n\n
   ]]></template>

   <clockCodeTemplate variable="sim_sopt1_osc32kout" codeGenCondition="enableGettersAndSetters"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setErc32kClkoutPin(%paramType %paramName) {
      \t   %fieldAssignment
      \t}\n\n
   ]]></clockCodeTemplate>

   <clockCodeTemplate variable="sim_sopt1_usbpower" codeGenCondition="enableGettersAndSetters"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setUsbPowerModes(%paramType %paramName) {
      \t   sim->SOPT1CFG = SIM_SOPT1CFG_USSWE_MASK|SIM_SOPT1CFG_UVSWE_MASK|SIM_SOPT1CFG_URWE_MASK;
      \t   %fieldAssignment
      \t}\n\n
   ]]></clockCodeTemplate>

<!-- ========== SOPT2 =============================== -->

<!-- SOPT2 general settings -->

   <for keys="  var                       : name"
        values="sim_sopt2_clkoutsel[]     : Clkout;
                sim_sopt2_fbsl            : FlexbusSecurity;
                sim_sopt2_traceclksel     : TraceClockout;
                sim_sopt2_usbregen        : UsbPhyRegulator;
                sim_sopt2_ptd7pad         : PortDPad;
                sim_sopt2_rmiisrc         : Rmiiclock
        ">
      <clockCodeTemplate variable="%(var)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %paramName %tooltip
         \t */
         \tstatic void set%(name)(%paramType %paramName) {
         \t   %fieldAssignment
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic uint32_t get%(name)() {
         \t
         \t   return %maskingExpression;
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>

<!-- SOPT2 clock settings -->

   <for keys="  var                       : name"
        values="sim_sopt2_pllfllsel[]     : PeripheralClock;
                sim_sopt2_sdhcsrc[]       : SdhcClock;
                sim_sopt2_tpmsrc[]        : TpmClock;
                sim_sopt2_flexiosrc[]     : FlexioClock;
                sim_sopt2_emvsimsrc[]     : EmvsimClock;
                sim_sopt2_timesrc[]       : TimestampClock;
                sim_sopt2_usbslsrc        : UsbSlowClock
                ">
      <clockCodeTemplate variable="%(var)"
      returnFormat="%s"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %paramName %tooltip
         \t */
         \tstatic void set%(name)(%paramType %paramName) {
         \t   %fieldAssignment
         \t}

         \t/**
         \t * Get %description
         \t *  %tooltip
         \t *
         \t * @return Clock frequency in Hz
         \t */
         \tstatic uint32_t get%(name)() {
         \t
         \t   switch(%maskingExpression) {
         \t      default: return 0;
         %body
         \t   }
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>

   <for keys="n" values=";0;1;2;3;4">
      <clockCodeTemplate variable="sim_sopt2_lpuart%(n)src[]"
         returnFormat="%s"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %paramName %tooltip
         \t */
         \tstatic void setLpuart%(n)Clock(%paramType %paramName) {
         \t   %fieldAssignment
         \t}

         \t/**
         \t * Get %description
         \t *
         \t * @return Clock frequency in Hz
         \t */
         \tstatic uint32_t getLpuart%(n)Clock() {
         \t
         \t   switch(%maskingExpression) {
         \t      default: return 0;
         %body
         \t   }
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>

   <for keys="n" values=";0;1;2;3">
      <clockCodeTemplate variable="sim_sopt2_uart%(n)src[0]"
         returnFormat="%s"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %paramName %tooltip
         \t */
         \tstatic void setUart%(n)Clock(%paramType %paramName) {
         \t   %fieldAssignment
         \t}

         \t/**
         \t * Get %description
         \t *
         \t * @return Clock frequency in Hz
         \t */
         \tstatic uint32_t getUart%(n)Clock() {
         \t
         \t   switch(%maskingExpression) {
         \t      default:
         %body
         \t   }
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>

   <for keys="n" values=";0;1;2;3;4;5;6">
      <variableTemplate variables="system_uart%(n)_fixedclocksource[0]" ><![CDATA[
         \t/**
         \t * Get UART%(n) input clock frequency
         \t *
         \t * @return Clock frequency in Hz
         \t */
         \tstatic inline uint32_t getUart%(n)Clock() {
         \t   return $(system_uart%(n)_fixedclocksource[0].code[]);
         \t}\n\n
      ]]></variableTemplate>
   </for>

<!-- ========== SIM BasicInfo class - Start =============================== -->

   <template namespace="usbdm" ><![CDATA[
      class $(_Baseclass)BasicInfo {
      \t
      public:\n
   ]]></template>

<!-- ========== Getters and Setters =============================== -->

   <for keys=  " regNum : name    : Name    : isDefault"
        values="=clockEnables" >
      <variableTemplate variables="sim_scgc%(regNum)_%(name)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Enable %description
         \t */
         \tstatic void enable%(Name)Clock() {
         \t   %register = %register|%mask;
         \t}
         \t
         \t/**
         \t * Disable %description
         \t */
         \tstatic void disable%(Name)Clock() {
         \t   %register = %register&~%mask;
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic bool get%(Name)ClockEnable() {
         \t   return %register&%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <for keys="field:name"
        values="=peripheralRouting" >
      <variableTemplate variables="%(field)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

<!--   ========== SIM Clock Init class =============================== -->

   <template namespace="usbdm" discardRepeats="true" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass) clock enables
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::ClockEnables $(_name)ClockEnables {
      \t *
      \t *   // Setup values
      \t *   SimScgc4Spi1_ClockDisabled                // SPI1 Clock Gate Control,
      \t *   SimScgc4Spi0_ClockDisabled                // SPI0 Clock Gate Control,
      \t *   SimScgc4Cmp0_ClockDisabled                // Comparator Clock Gate Control,
      \t *   SimScgc4Usb0_ClockDisabled                // USB Clock Gate Control,
      \t *   SimScgc4Uart2_ClockDisabled               // UART2 Clock Gate Control,
      \t *   SimScgc4Uart1_ClockDisabled               // UART1 Clock Gate Control,
      \t *   SimScgc4Uart0_ClockDisabled               // UART0 Clock Gate Control,
      \t *   SimScgc4I2c1_ClockDisabled                // I2C1 Clock Gate Control,
      \t *   SimScgc4I2c0_ClockDisabled                // I2C0 Clock Gate Control,
      \t *   SimScgc5Porte_ClockDisabled               // Port E Clock Gate Control,
      \t *   SimScgc5Portd_ClockDisabled               // Port D Clock Gate Control,
      \t *   SimScgc5Portc_ClockDisabled               // Port C Clock Gate Control,
      \t *   SimScgc5Portb_ClockDisabled               // Port B Clock Gate Control,
      \t *   SimScgc5Porta_ClockDisabled               // Port A Clock Gate Control,
      \t *   SimScgc5Tsi0_ClockDisabled                // TSI0 Clock Gate Control,
      \t *   SimScgc5Lptmr_ClockDisabled               // LPTMR  Clock Gate Control,
      \t *   SimScgc6Rtc_ClockDisabled                 // RTC Clock Gate Control,
      \t *   SimScgc6Adc0_ClockDisabled                // ADC0 Clock Gate Control,
      \t *   SimScgc6Tpm1_ClockDisabled                // TPM1 Clock Gate Control,
      \t *   SimScgc6Tpm0_ClockDisabled                // TPM0 Clock Gate Control,
      \t *   SimScgc6Ftf_ClockDisabled                 // Flash Clock Gate Control,
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)ClockEnables)
      \t * @endcode
      \t */
      \tclass ClockEnables {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr ClockEnables(const ClockEnables &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr ClockEnables() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <for keys="regNum" dim="8" >
      <template namespace="usbdm" discardRepeats="true"
         codeGenCondition="enablePeripheralSupport&amp;&amp;Exists(sim_scgc%(regNum)_present)" ><![CDATA[
         \t   /// System Clock Gating Control Register %(regNum)
         \t   uint32_t scgc%(regNum) = 0;\n\n
      ]]></template>
   </for>

   <!--   Constructors -->

   <for keys=  " regNum : name    : Name    : isDefault"
        values="=clockEnables" >
      <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="enablePeripheralSupport"
         variables="sim_scgc%(regNum)_%(name)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr ClockEnables(%params, Types... rest) : ClockEnables(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <template codeGenCondition="enablePeripheralSupport"><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class) peripheral clock gating
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr ClockEnables DefaultClockEnables = {\n
   ]]>
   </template>

   <for keys=  " reg : name    : Name    : isDefault"
        values="=clockEnables" >

      <variableTemplate codeGenCondition="enablePeripheralSupport"
         separator=","
         terminator=","
         variables="sim_scgc%(reg)_%(name)"
      ><![CDATA[
         %initExpression\n
      ]]>
      </variableTemplate >

   </for >
   <template codeGenCondition="enablePeripheralSupport"><![CDATA[
      \t};
      \t\n
   ]]>
   </template>

<!--   Configure methods -->

   <for keys="name            : Name      : op "
      values="configureClocks : Configure : \=        ;
              enableClocks    : Enable    : |=        ;
              disableClocks   : Disable   : &amp;= ~  "
   >
      <template codeGenCondition="enablePeripheralSupport" >
      <![CDATA[
         \t/**
         \t * %(Name) peripheral clock gating from values specified in init
         \t *
         \t * @param init Class containing initialisation values
         \t */
         \tstatic void %(name)(const ClockEnables &init) {
         \t\n
      ]]>
      </template>
      <for keys="regNum" dim="8" >
         <template codeGenCondition="enablePeripheralSupport" condition="sim_scgc%(regNum)_present" ><![CDATA[
            \t   sim->SCGC%(regNum)  %(op) init.scgc%(regNum);\n
         ]]></template>
      </for>
      <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
         \t}
         \t\n
      ]]>
      </template>
   </for>

   <template namespace="usbdm" discardRepeats="true" codeGenCondition="enablePeripheralSupport" >
      <![CDATA[
      \t}; // class $(_Baseclass)BasicInfo::ClockEnables
      \t\n
   ]]>
   </template>

<!-- ========== SOPT2 ClockSourceInit class =============================== -->

   <variableTemplate namespace="usbdm"
      variables="
         sim_sopt2_pllfllsel[],
         sim_sopt2_usbsrc[],

         sim_sopt2_uart0src[],
         sim_sopt2_tpmsrc[],
         sim_sopt2_clkoutsel[],
         sim_sopt2_rtcclkoutsel,
         sim_sopt2_traceclksel,
         sim_sopt2_usbregen,
         sim_sopt2_ptd7pad"
   ><![CDATA[
      \t/**
      \t * Class used to do initialisation of SIM Clock control (SOPT2)
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Generic Example: (see Sim::DefaultSopt2Values for device specific example)
      \t * @code
      \t * static const ClockSourceInit clockSourceInit {
      \t *    SimUsbFullSpeedClockSource_McgPClk, // USB Clock - Peripheral clock (MCGPCLK)
      \t *    SimTpmClockSource_McgPClk,          // TPM Clock source - MCGPCLK (HIRC=IRC48M) Clock
      \t *    SimFlexioClockSource_McgPClk,       // FLEXIO Clock select - MCGPCLK (HIRC=IRC48M) Clock
      \t *    SimClkoutSel_LpoClk,                // CLKOUT pin clock - LPO clock (1 kHz)
      \t *    SimRtcClkoutSel_32kHz,              // RTC clock out source - OSC32KCLK clock (from OSC0)
      \t *    SimLpuart0ClockSource_McgPClk,      // LPUART0 Clock - MCGPCLK (HIRC=IRC48M) Clock
      \t *    SimLpuart1ClockSource_McgPClk,      // LPUART1 Clock - MCGPCLK (HIRC=IRC48M) Clock
      \t *
      \t *    // Base value modified by above
      \t *    Sim::DefaultSopt2Values[McgClockMode_HIRC_48MHz]
      \t * };
      \t *
      \t * // Initialise SIM Clock control from values specified above
      \t * Sim::configure(clockSourceInit);
      \t * @endcode
      \t */
      \tclass ClockSourceInit {
      \t
      \tpublic:
      \t
      \t   /// System Options Register 2
      \t   uint32_t sopt2 = 0;
      \t
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr ClockSourceInit(const ClockSourceInit &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr ClockSourceInit() = default;
      \t
   ]]></variableTemplate>

   <variableTemplate
      variables="
         sim_sopt2_pllfllsel[],
         sim_sopt2_usbsrc[],

         sim_sopt2_uart0src[],
         sim_sopt2_tpmsrc[],
         sim_sopt2_clkoutsel[],
         sim_sopt2_rtcclkoutsel,
         sim_sopt2_traceclksel,
         sim_sopt2_usbregen,
         sim_sopt2_ptd7pad"
   ><![CDATA[
      \t/**
      \t * Configure SIM Clock control from values specified in constructor.
      \t */
      \tstatic void configure(const ClockSourceInit &clockSourceInit) {\n
      \t   %register = clockSourceInit.%registerName;
      \t}\n\n
   ]]></variableTemplate>

   <for keys="v"
      values="
         sim_sopt2_pllfllsel[];
         sim_sopt2_usbsrc[];
         sim_sopt2_sdhcsrc[];
         sim_sopt2_tpmsrc[];
         sim_sopt2_flexiosrc[];
         sim_sopt2_emvsimsrc[];
         sim_sopt2_timesrc[];
         sim_sopt2_clkoutsel[];

         sim_sopt2_rmiisrc;
         sim_sopt2_usbslsrc;
         sim_sopt2_fbsl;
         sim_sopt2_rtcclkoutsel;
         sim_sopt2_traceclksel;
         sim_sopt2_usbregen;
         sim_sopt2_ptd7pad
         ">
      <variableTemplate  namespace="usbdm" variables="%(v)"
            linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr ClockSourceInit(%params, Types... rest) : ClockSourceInit(rest...) {
         \t
         \t      %registerName |= %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>

   <for keys="m" values="'';0;1;2;3;4">
      <for keys="v"
         values="
             sim_sopt2_lpuart%(m)src[];
             sim_sopt2_uart%(m)src[]">
         <variableTemplate namespace="usbdm" variables="%(v)"
            linePadding="xxx"
         ><![CDATA[
            \t   /**
            \t    * Constructor for %description
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            \t    *
            %paramDescription
            \t    */
            \t   template <typename... Types>
            \t   constexpr ClockSourceInit(%params, Types... rest) : ClockSourceInit(rest...) {
            \t
            \t      %registerName |= %paramExpression;
            \t   }
            \t\n
         ]]></variableTemplate>
      </for>
   </for>

   <variableTemplate  namespace="usbdm"
      variables="
         sim_sopt2_pllfllsel[],
         sim_sopt2_usbsrc[],

         sim_sopt2_uart0src[],
         sim_sopt2_tpmsrc[],
         sim_sopt2_clkoutsel[],
         sim_sopt2_rtcclkoutsel,
         sim_sopt2_traceclksel,
         sim_sopt2_usbregen,
         sim_sopt2_ptd7pad"
   ><![CDATA[
      \t}; // class ClockSourceInit \n\n
   ]]></variableTemplate>

   <template  ><![CDATA[
      \t/**
      \t * Default value for Sim::ClockSourceInit
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr ClockSourceInit DefaultSopt2Values[] = {\n
   ]]></template>

   <for keys="n" dim="=/SIM/numberOfClockSettings" >
      <template  codeGenCondition="/MCG/enableClockConfiguration[%(n)]"
      ><![CDATA[
         \t{ // $(/MCG/ClockConfig[%(n)]) ($(/MCG/mcgClockMode[%(n)].enum[]))\n
      ]]></template>
      <variableTemplate  codeGenCondition="/MCG/enableClockConfiguration[%(n)]"
         variables="
            sim_sopt2_pllfllsel[%(n)],
            sim_sopt2_usbsrc[%(n)],

            sim_sopt2_sdhcsrc[%(n)],
            sim_sopt2_tpmsrc[%(n)],
            sim_sopt2_flexiosrc[%(n)],
            sim_sopt2_emvsimsrc[%(n)],
            sim_sopt2_timesrc[%(n)],
            sim_sopt2_clkoutsel[%(n)],

            sim_sopt2_rmiisrc,
            sim_sopt2_usbslsrc,
            sim_sopt2_fbsl,
            sim_sopt2_rtcclkoutsel,
            sim_sopt2_traceclksel,
            sim_sopt2_usbregen,
            sim_sopt2_ptd7pad"
         terminator=","
         separator=","
      ><![CDATA[
         %initExpression\n
      ]]></variableTemplate>
      <for keys="m" values="'';0;1;2;3;4">
         <for keys="v"
            values="
                sim_sopt2_lpuart%(m)src[%(n)];
                sim_sopt2_uart%(m)src[%(n)]"
                >
            <variableTemplate   codeGenCondition="/MCG/enableClockConfiguration[%(n)]"
               terminator=","
               separator=","
               variables="%(v)"
               ><![CDATA[
               %initExpression\n
            ]]></variableTemplate>
         </for>
      </for>
      <template   codeGenCondition="/MCG/enableClockConfiguration[%(n)]"
      ><![CDATA[
         \t},\n
      ]]></template>
   </for>
   <template  ><![CDATA[
      };\n\n
   ]]></template>

<!-- ========== SOPT4 =============================== -->
   <for keys="ftm" values="0;1;2;3">
      <for keys="flt" values="0;1;2;3">
         <clockCodeTemplate variable="sim_sopt4_ftm%(ftm)flt%(flt)" codeGenCondition="enableGettersAndSetters"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %paramName %tooltip
            \t */
            \tstatic void setFtm%(ftm)Flt%(flt)(%paramType %paramName) {
            \t   %fieldAssignment
            \t}\n\n
            \t
            \t/**
            \t * Get %description
            \t *
            \t * @param %paramName %tooltip
            \t */
            \tstatic %paramType getFtm%(ftm)Flt%(flt)() {
            \t   return %paramType(%maskingExpression);
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>

   <for keys="ftm" values="0;1;2;3">
      <for keys="ch" values="0;1;2;3">
         <clockCodeTemplate variable="sim_sopt4_ftm%(ftm)ch%(ch)src" codeGenCondition="enableGettersAndSetters"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %paramName %tooltip
            \t */
            \tstatic void setFtm%(ftm)Ch%(ch)Src(%paramType %paramName) {
            \t   %fieldAssignment
            \t}
            \t
            \t/**
            \t * Get %description
            \t *
            \t * @param %paramName %tooltip
            \t */
            \tstatic %paramType getFtm%(ftm)Ch%(ch)Src() {
            \t   return %paramType(%maskingExpression);
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>

   <for keys="ftm" values="0;1;2;3">
      <clockCodeTemplate variable="sim_sopt4_ftm%(ftm)clksel" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %paramName %tooltip
         \t */
         \tstatic void setFtm%(ftm)ClkSel(%paramType %paramName) {
         \t   %fieldAssignment
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @param %paramName %tooltip
         \t */
         \tstatic %paramType getFtm%(ftm)ClkSel() {
         \t   return %paramType(%maskingExpression);
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>

   <for keys="ftm" values="0;1;2;3">
      <for keys="trg" values="0;1;2;3">
         <clockCodeTemplate variable="sim_sopt4_ftm%(ftm)trg%(trg)src" codeGenCondition="enableGettersAndSetters"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %paramName %tooltip
            \t */
            \tstatic void setFtm%(ftm)Trg%(trg)Src(%paramType %paramName) {
            \t   %fieldAssignment
            \t}
            \t
            \t/**
            \t * Get %description
            \t *
            \t * @param %paramName %tooltip
            \t */
            \tstatic %paramType getFtm%(ftm)Trg%(trg)Src() {
            \t   return %paramType(%maskingExpression);
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>

   <for keys="tpm" values="0;1;2;3">
      <clockCodeTemplate variable="sim_sopt4_tpm%(tpm)clksel" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %paramName %tooltip
         \t *
         \t * @note The selected pin must also be configured for the TPM external clock function
         \t * through the appropriate pin control register in the port control module
         \t */
         \tstatic void setTpm%(tpm)ExternalClockInput(%paramType %paramName) {
         \t   %fieldAssignment
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @param %paramName %tooltip
         \t *
         \t * @note The selected pin must also be configured for the TPM external clock function
         \t * through the appropriate pin control register in the port control module
         \t */
         \tstatic %paramType getTpm%(tpm)ExternalClockInput() {
         \t   return %paramType(%maskingExpression);
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>

    <for keys="tpm" values="0;1;2;3">
      <for keys="ch" values="0;1;2;3">
         <clockCodeTemplate variable="sim_sopt4_tpm%(tpm)ch%(ch)src" codeGenCondition="enableGettersAndSetters"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %paramName %tooltip
            \t *
            \t * @note The selected pin must also be configured for the TPM external clock function
            \t * through the appropriate pin control register in the port control module
            \t */
            \tstatic void setTpm%(tpm)Ch%(ch)InputCaptureSource(%paramType %paramName) {
            \t   %fieldAssignment
            \t}
            \t
            \t/**
            \t * Get %description
            \t *
            \t * @param %paramName %tooltip
            \t *
            \t * @note The selected pin must also be configured for the TPM external clock function
            \t * through the appropriate pin control register in the port control module
            \t */
            \tstatic %paramType getTpm%(tpm)Ch%(ch)InputCaptureSource() {
            \t   return %paramType(%maskingExpression);
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>

<!-- ========== SOPT5 =============================== -->

   <for keys="n" values="0;1;2;3;4;5">
      <for keys   = "name       : Name"
           values = "uart%(n)   : Uart%(n);
                     lpuart%(n) : Lpuart%(n)" >

         <variableTemplate namespace="usbdm"
            variables="sim_sopt5_%(name)ode,sim_sopt5_%(name)txsrc,sim_sopt5_%(name)rxsrc"
            linePadding="xxx"
         ><![CDATA[
            \t/**
            \t * Class used to do initialisation of %(Name) signals
            \t *
            \t * @note This constructor may be used to create a const instance in ROM
            \t *
            \t * Example:
            \t * @code
            \t * static const %(Name)Init %(name)Init {
            \t * };
            \t *
            \t * // Initialise %(Name) signals from values specified above
            \t * Sim.configure(%(name)Init)
            \t * @endcode
            \t */
            \tclass %(Name)Init {
            \t
            \tpublic:
            \t   /// %(Name) signals
            \t   uint32_t %registerName = 0;
            \t
            \t   /**
            \t    * Copy Constructor
            \t    */
            \t   constexpr %(Name)Init(const %(Name)Init &other) = default;
            \t
            \t   /**
            \t    * Default Constructor
            \t    */
            \t   constexpr %(Name)Init() = default;
            \t
            \t   /**
            \t    * Constructor
            %paramDescription
            \t    */
            \t   constexpr %(Name)Init(
            %params) {
            \t
            \t      %registerName = (%registerName & ~%mask) |
            \t                       %paramExpression;
            \t   }
            \t\n
         ]]></variableTemplate>

         <variableTemplate
            variables="sim_sopt5_%(name)ode,sim_sopt5_%(name)txsrc,sim_sopt5_%(name)rxsrc"
            linePadding="xxx"
         ><![CDATA[
            \t/**
            \t * Configure %(Name) signals from values specified in constructor.
            \t */
            \tstatic void configure(const %(Name)Init &config) {\n
            \t   %register = (%register&~%mask) | config.%registerName;
            \t}
            \t\n
         ]]></variableTemplate>

         <for keys="v" values="sim_sopt5_%(name)ode;sim_sopt5_%(name)txsrc;sim_sopt5_%(name)rxsrc">
            <variableTemplate namespace="usbdm"
               variables="%(v)"
               linePadding="xxx"
            ><![CDATA[
            \t   /**
            \t    * Set %description
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            \t    *
            \t    * @param %paramName %tooltip
            \t    */
            \t      template <typename... Types>
            \t      constexpr %(Name)Init(%paramType %paramName, Types... rest) : %(Name)Init(rest...) {
            \t         %registerName = (%registerName & ~%mask) | %paramExpression;
            \t   }\n\n
            ]]></variableTemplate>
         </for>
         <variableTemplate namespace="usbdm"
            variables="sim_sopt5_%(name)ode,sim_sopt5_%(name)txsrc,sim_sopt5_%(name)rxsrc"
            linePadding="xxx"
         ><![CDATA[
            \t}; // class %(Name)Init \n\n
         ]]></variableTemplate>

         <variableTemplate variables="sim_sopt5_%(name)ode,sim_sopt5_%(name)txsrc,sim_sopt5_%(name)rxsrc" codeGenCondition="enableGettersAndSetters"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            %paramDescription
            \t */
            \tstatic void configure%(Name)(
            %params) {
            \t   %fieldAssignment
            \t}\n\n
         ]]></variableTemplate>

         <for keys="  ext    : fullName  "
              values="ode    : %(Name)Drive ;
                      rxsrc  : %(Name)RxSrc ;
                      txsrc  : %(Name)TxSrc " >
            <clockCodeTemplate variable="sim_sopt5_%(name)%(ext)" codeGenCondition="enableGettersAndSetters"
            ><![CDATA[
               \t/**
               \t * Set %description
               \t *
               %paramDescription
               \t */
               \tstatic void set%(fullName)(%params) {
               \t   %fieldAssignment
               \t}
               \t
               \t/**
               \t * Get %description
               \t *
               \t * @return %tooltip
               \t */
               \tstatic %paramType get%(fullName)() {
               \t   return %paramType(%register&%mask);
               \t}
               \t\n
            ]]></clockCodeTemplate>
         </for>

      </for>
   </for>

<!-- ========== SOPT7 =============================== -->

   <template key="AdcInit_description" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of all Adc trigger sources
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * @code
      \t * static const AdcInit adcInit {
      \t * };
      \t *
      \t * // Initialise Adc signals from values specified above
      \t * Sim::configure(adcInit)
      \t * @endcode
      \t */
   ]]></template>

   <variableTemplate namespace="usbdm"
      variables="
         sim_sopt7_adc0trigger,sim_sopt7_adc0trgsel,
         sim_sopt7_adc1trigger,sim_sopt7_adc1trgsel"
      linePadding="xxx"
   ><![CDATA[
$(AdcInit_description)
      \tclass AdcInit {
      \t
      \tpublic:
      \t   /// Adc signals
      \t   uint32_t %registerName = 0;
      \t
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr AdcInit(const AdcInit &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr AdcInit() = default;
      \t\n
   ]]></variableTemplate>

   <for keys="p" values=";0;1">
      <variableTemplate namespace="usbdm"
         variables="sim_sopt7_adc%(p)trigger"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr AdcInit(%params, Types... rest) : AdcInit(rest...) {
         \t
         \t      %registerName = (%registerName & ~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>

      <variableTemplate namespace="usbdm"
         variables="sim_sopt7_adc%(p)trigger,sim_sopt7_adc%(p)trgsel"
         linePadding="xxx"
         nonDefaultParams="2"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description0 and %description1
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr AdcInit(
         %params, Types... rest) : AdcInit(rest...) {
         \t
         \t      %registerName = (%registerName & ~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate
      variables="
         sim_sopt7_adc0trigger,sim_sopt7_adc0trgsel,
         sim_sopt7_adc1trigger,sim_sopt7_adc1trgsel"
      linePadding="xxx"
   ><![CDATA[
      \t/**
      \t * Configure ADC trigger sources from values specified
      \t */
      \tstatic void configure(const AdcInit &config) {\n
      \t   %register = (%register&~%mask) |
      \t                config.%registerName;
      \t}
      \t\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm"
      variables="
         sim_sopt7_adc0trigger,sim_sopt7_adc0trgsel,
         sim_sopt7_adc1trigger,sim_sopt7_adc1trgsel"
      linePadding="xxx"
   ><![CDATA[
      \t};\n\n
      \t\n
   ]]></variableTemplate>

   <for keys="p" values=";0;1">

      <template key="Adc%(p)Init_description" ><![CDATA[
         \t/**
         \t * Class used to do initialisation of Adc%(p) trigger sources
         \t *
         \t * @note This constructor may be used to create a const instance in ROM
         \t *
         \t * Example:
         \t * @code
         \t * static const Adc%(p)Init adc%(p)Init {
         \t * };
         \t *
         \t * // Initialise Adc signals from values specified above
         \t * adc%(p)Init.configure()
         \t * @endcode
         \t */
      ]]></template>

      <variableTemplate namespace="usbdm"
         variables="sim_sopt7_adc%(p)trigger,sim_sopt7_adc%(p)trgsel"
            linePadding="xxx"
      ><![CDATA[
$(Adc%(p)Init_description)
         \tclass Adc%(p)Init {
         \t
         \tpublic:
         \t   /// Adc signals
         \t   uint32_t %registerName = 0;
         \t
         \t   /**
         \t    * Copy Constructor
         \t    */
         \t   constexpr Adc%(p)Init(const Adc%(p)Init &other) = default;
         \t
         \t   /**
         \t    * Default Constructor
         \t    */
         \t   constexpr Adc%(p)Init() = default;
         \t
         \t   /**
         \t    * Constructor
         %paramDescription
         \t    */
         \t   constexpr Adc%(p)Init(
         %params) {
         \t
         \t      %registerName = %paramExpression;
         \t   }
         \t};\n\n
      ]]></variableTemplate>

      <variableTemplate
         variables="sim_sopt7_adc%(p)trigger,sim_sopt7_adc%(p)trgsel"
            linePadding="xxx"
      ><![CDATA[
         \t/**
         \t * Configure Adc signals from values specified
         \t */
         \tstatic void configure(const Adc%(p)Init &config) {\n
         \t   %register = (%register&~%mask) | config.%registerName;
         \t}
         \t\n
      ]]></variableTemplate>

      <variableTemplate variables="sim_sopt7_adc%(p)trigger,sim_sopt7_adc%(p)trgsel" codeGenCondition="enableGettersAndSetters" >
      <![CDATA[
         \t/**
         \t * Set %description0 and %description2
         \t *
         %paramDescription
         \t *
         \t * For example, setAdc%(p)Triggers(SimAdc%(p)TriggerMode_Alt_PreTrigger_1, SimAdc0Trigger_PitCh0) will set the trigger source
         \t * to PIT channel 0 and conversion will use SC1[1]/R[1]
         \t */
         \tstatic void setAdc%(p)Triggers(
         %params) {
         \t
         \t   %register = (%register&~%mask)|(%paramExpression);
         \t};\n\n
      ]]></variableTemplate>
   </for>

<!-- ========== SOPT8 =============================== -->

   <for keys="p" values="0;1;2;3">
      <for keys="ch" values="0;1;2;3;4;5;6;7">
         <clockCodeTemplate variable="sim_sopt8_ftm%(p)och%(ch)src" codeGenCondition="enableGettersAndSetters"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %paramName %tooltip
            \t */
            \tstatic void setFtm%(p)Ch%(ch)OutputSrc(%paramType %paramName) {
            \t   %fieldAssignment
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>

   <clockCodeTemplate variable="sim_sopt8_ftm_syncbits" codeGenCondition="enableGettersAndSetters"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * %tooltip
      \t *
      \t * @param %paramName Mask of bits made up from %paramType values
      \t */
      \tstatic void setFtmSyncBits(uint32_t %paramName) {
      \t   sim->SOPT8 = sim->SOPT8 | %paramName;
      \t}

      \t/**
      \t * Clear %description
      \t *
      \t * %tooltip
      \t *
      \t * @param %paramName Mask of bits made up from %paramType values
      \t */
      \tstatic void clearFtmSyncBits(uint32_t %paramName) {
      \t   sim->SOPT8 = sim->SOPT8 & ~%paramName;
      \t}

      \t/**
      \t * Clear all %description
      \t *
      \t * %tooltip
      \t */
      \tstatic void clearAllFtmSyncBits() {
      \t   sim->SOPT8 = sim->SOPT8 &
      \t      ~(SIM_SOPT8_FTM0SYNCBIT_MASK|SIM_SOPT8_FTM1SYNCBIT_MASK|SIM_SOPT8_FTM2SYNCBIT_MASK|SIM_SOPT8_FTM3SYNCBIT_MASK);
      \t}\n\n
   ]]></clockCodeTemplate>

<!-- ========== SOPT9 =============================== -->

   <for keys="p" values="1;2">
      <for keys="Fn:FN:fn" values="ClkSel:CLKSEL:clksel;Ch0Src:CH0SRC:ch0src">
         <clockCodeTemplate variable="sim_sopt9_tpm%(p)%(fn)" codeGenCondition="enableGettersAndSetters"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %paramName %tooltip
            \t */
            \tstatic void setTpm%(p)%(Fn)(%paramType %paramName) {
            \t   %fieldAssignment
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>

<!-- ========== CLKDIV2 =============================== -->
   <clockCodeTemplate variable="sim_sopt2_usbsrc[]"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * If the internal clock is selected then the clock divider will be recalculated
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic ErrorCode setUsbFullSpeedClock(%paramType %paramName) {
      \t   ErrorCode rc = E_NO_ERROR;
      \t
      \t   // The USB interface must be disabled for clock changes to have effect
      \t   sim->SCGC4 = sim->SCGC4 & ~SIM_SCGC4_USB0_MASK;
      \t
      \t   // Set clock source
      \t   %fieldAssignment
      \t\n
   ]]></clockCodeTemplate>
   <variableTemplate variables="sim_clkdiv2_usb[]" ><![CDATA[
      \t   if (simUsbFullSpeedClockSource == SimUsbFullSpeedClockSource_PeripheralClk) {
      \t      // Set clock divider for internal clock
      \t      rc = E_CLOCK_INIT_FAILED;
      \t      // Try to calculate value
      \t      unsigned inputFreq = getPeripheralClock();
      \t      for (unsigned frac = 0; frac < 2; frac++) {
      \t         for (unsigned div = 0; div < 8; div++) {
      \t            unsigned usbClock = (inputFreq * (frac+1))/(div+1);
      \t            if (usbClock == 48000000) {
      \t               // Found suitable value
      \t               sim->CLKDIV2 = SIM_CLKDIV2_USBFRAC(frac)|SIM_CLKDIV2_USBDIV(div);
      \t               rc = E_NO_ERROR;
      \t            }
      \t         }
      \t      }
      \t   }
      \t   rc = setErrorCode(rc);\n\n
   ]]></variableTemplate>
   <variableTemplate variables="sim_sopt2_usbsrc[]" ><![CDATA[
      \t   // Restore USB clock
      \t   sim->SCGC4 = sim->SCGC4 | SIM_SCGC4_USB0_MASK;
      \t   return rc;
      \t}

      \t/**
      \t * Get USB clock frequency
      \t *
      \t * @return Clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getUsbFullSpeedClock() {
      \t   switch ((sim->SOPT2&SIM_SOPT2_USBSRC_MASK)) {
      \t      default:
      \t      case $(sim_sopt2_usbsrc[].enum[0]) : return usbExternalClock;\n
   ]]></variableTemplate>
   <variableTemplate variables="sim_clkdiv2_usb[]" ><![CDATA[
      \t      case $(sim_sopt2_usbsrc[].enum[1]) :
      \t         return  (getPeripheralClock()*
      \t            (((sim->CLKDIV2&SIM_CLKDIV2_USBFRAC_MASK)>>SIM_CLKDIV2_USBFRAC_SHIFT)+1))/
      \t            (((sim->CLKDIV2&SIM_CLKDIV2_USBDIV_MASK)>>SIM_CLKDIV2_USBDIV_SHIFT)+1);\n
   ]]></variableTemplate>
   <template condition="!sim_clkdiv2_usb[]&amp;&amp;sim_sopt2_usbsrc[]" ><![CDATA[
      \t      case $(sim_sopt2_usbsrc[].enum[1]) : return getPeripheralClock();\n
   ]]></template>
   <variableTemplate variables="sim_sopt2_usbsrc[]" ><![CDATA[
      \t   }
      \t}\n\n
   ]]></variableTemplate>

   <variableTemplate variables="sim_clkdiv2_usb[]"><![CDATA[
      \t/**
      \t * Set USB clock divisors to suitable value and enable clock
      \t */
      \tstatic void updateUsbClockDivider() {
      \t
      \t   setUsbFullSpeedClock((SimUsbFullSpeedClockSource)(sim->SOPT2&SIM_SOPT2_USBSRC_MASK));
      \t}\n\n
   ]]></variableTemplate>

<!-- ========== CLKDIV3 =============================== -->
   <clockCodeTemplate variable="sim_clkdiv3_pllfll[]"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %paramName %tooltip
      \t */
      \tstatic void setPeripheralClockDivider(%paramType %paramName) {
      \t   // Must disable clock to TPMs, LPUARTs and FLEXIO before changing clock divider
      \t   uint32_t scgc2 = sim->SCGC2;
      \t   sim->SCGC2   = 0;
      \t   sim->CLKDIV3 = simPeripheralClockDivider;
      \t   sim->SCGC2   = scgc2;
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getDividedPeripheralClock() {
      \t
      \t   int  pllfllfrac  = (sim->CLKDIV3&SIM_CLKDIV3_PLLFLLFRAC_MASK)>>SIM_CLKDIV3_PLLFLLFRAC_SHIFT;
      \t   int  pllflldiv   = (sim->CLKDIV3&SIM_CLKDIV3_PLLFLLDIV_MASK)>>SIM_CLKDIV3_PLLFLLDIV_SHIFT;
      \t   return (getPeripheralClock()*(pllfllfrac+1))/(pllflldiv+1);
      \t}\n\n
   ]]></clockCodeTemplate>

<!-- ========== COP Watchdog =============================== -->
   <variableTemplate
      variables="
         sim_copc_copdbgen,
         sim_copc_copstpen,
         sim_copc_copw,
         sim_copc_copt"
   ><![CDATA[
         \t/// COP Control Register
         \tstatic constexpr uint32_t copc = %initExpression\n\n
   ]]></variableTemplate>

   <if condition="sim_copc_copt" >
      <template><![CDATA[
         \t/**
         \t * Feed COP watchdog
         \t */
         \tstatic void refreshCop() {
         \t   sim->SRVCOP = 0x55;
         \t   sim->SRVCOP = 0xAA;
         \t}\n\n
      ]]></template>

      <template key="/SYSTEM/Includes" ><![CDATA[
      ]]></template>

      <variableTemplate key="/SYSTEM/WatchdogInitialise" variables="sim_copc_copt" ><![CDATA[
         \t/*
         \t * Initialise watchdog
         \t */
         \tUSBDM::SimInfo::sim->COPC = USBDM::SimInfo::copc;
         \t
      ]]></variableTemplate>
   </if>

<!-- ========== SIM Init class =============================== -->
   <if condition="true">
  <template namespace="usbdm" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of SIM
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t * @note Actual parameters available vary with device - see Sim::DefaultInitValue for custom example
      \t *
      \t * Example:
      \t * @code
      \t * static const Sim::Init simInit {
      \t *    SimErc32kClkoutPinSelect_None,            // ERCLK32K Clock Output
      \t *    SimErc32kSel_LpoClk,                      // ERCLK32K clock source
      \t *    SimUsbPower_EnabledInAll,                 // USB voltage regulator power control
      \t *    SimUsbFullSpeedClockSource_PeripheralClk, // USB Clock
      \t *    SimTraceClockoutSel_McgOutClk,            // Debug trace clock select
      \t *    SimRtcClkoutSel_32kHz ,                   // RTC clock out source
      \t *    SimClkoutSel_OscerClk0 ,                  // CLKOUT pin clock
      \t *    SimPeripheralClockSource_Irc48mClk ,      // Peripheral Clock
      \t *    SimFlexbusSecurity_None,                  // FlexBus off-chip access security level
      \t *    SimLpuartClockSource_PeripheralClk,       // LPUART Clock select
      \t *    SimTraceClockoutSel_McgOutClk,            // Debug trace clock select
      \t *    SimRtcClkoutSel_32kHz,                    // RTC clock out source
      \t *    SimClkoutSel_OscerClk0,                   // CLKOUT pin clock
      \t *    SimPeripheralClockSource_Irc48mClk,       // Peripheral Clock
      \t *    SimFlexbusSecurity_None,                  // FlexBus off-chip access security level
      \t *    SimFtm0Flt0_Ftm0Fault0,                   // FTM0 Fault 0 Select
      \t *    SimFtm0Trg0Src_Cmp0,                      // FTM0 Hardware Trigger 0 Source
      \t *    SimFtm0Flt1_Ftm0Fault1,                   // FTM0 Fault 1 Select
      \t *    SimFtm0Trg1Src_PdbTrigger1,               // FTM0 Hardware Trigger 1 Source
      \t *    SimFtm0ClkSel_FtmClkin0,                  // FTM0 External Clock Pin
      \t *    SimFtm1Flt0_Ftm1Fault0,                   // FTM1 Fault 0 Select
      \t *    SimFtm1Ch0Src_IcPin,                      // FTM 1 channel 0 input capture source
      \t *    SimFtm1ClkSel_FtmClkin0,                  // FTM1 External Clock Pin
      \t *    SimFtm2Flt0_Ftm2Fault0,                   // FTM2 Fault 0 Select
      \t *    SimFtm2Ch0Src_IcPin,                      // FTM2 channel 0 input capture source
      \t *    SimFtm2Ch1Src_IcPin,                      // FTM2 channel 1 input capture source
      \t *    SimFtm2ClkSel_FtmClkin0,                  // FTM2 External Clock Pin
      \t *    SimFtm3Flt0_Ftm3Fault0,                   // FTM3 Fault 0 Select
      \t *    SimFtm3Trg0Src_Ftm1,                      // FTM3 Hardware Trigger 0 Source
      \t *    SimFtm3Trg1Src_Ftm2,                      // FTM3 Hardware Trigger 1 Source
      \t *    SimFtm3ClkSel_FtmClkin0,                  // FTM3 External Clock Pin
      \t *    SimUart0RxSrc_RxPin,                      // UART 0 receive data source
      \t *    SimUart0TxSrc_Direct,                     // UART 0 transmit data source
      \t *    SimLpuart0RxSrc_RxPin,                    // LPUART 0 receive data source
      \t *    SimUart1RxSrc_RxPin,                      // UART 1 receive data source
      \t *    SimUart1TxSrc_Direct,                     // UART 1 transmit data source
      \t *    SimAdc0TriggerMode_Pdb ,                  // ADC0 trigger mode
      \t *    SimAdc0TriggerSrc_External,               // ADC0 trigger
      \t *    SimAdc1TriggerMode_Pdb ,                  // ADC1 trigger mode
      \t *    SimAdc1TriggerSrc_External,               // ADC1 trigger
      \t *    SimFtm0Ch0OutputSrc_Direct,               // FTM0 channel 0 output source
      \t *    SimFtm3Ch0OutputSrc_Direct,               // FTM3 channel 0 output source
      \t *    SimFtm0Ch1OutputSrc_Direct,               // FTM0 channel 1 output source
      \t *    SimFtm3Ch1OutputSrc_Direct,               // FTM3 channel 1 output source
      \t *    SimFtm0Ch2OutputSrc_Direct,               // FTM0 channel 2 output source
      \t *    SimFtm3Ch2OutputSrc_Direct,               // FTM3 channel 2 output source
      \t *    SimFtm0Ch3OutputSrc_Direct,               // FTM0 channel 3 output source
      \t *    SimFtm3Ch3OutputSrc_Direct,               // FTM3 channel 3 output source
      \t *    SimFtm0Ch4OutputSrc_Direct,               // FTM0 channel 4 output source
      \t *    SimFtm3Ch4OutputSrc_Direct,               // FTM3 channel 4 output source
      \t *    SimFtm0Ch5OutputSrc_Direct,               // FTM0 channel 5 output source
      \t *    SimFtm3Ch5OutputSrc_Direct,               // FTM3 channel 5 output source
      \t *    SimFtm0Ch6OutputSrc_Direct,               // FTM0 channel 6 output source
      \t *    SimFtm3Ch6OutputSrc_Direct,               // FTM3 channel 6 output source
      \t *    SimFtm0Ch7OutputSrc_Direct,               // FTM0 channel 7 output source
      \t *    SimFtm3Ch7OutputSrc_Direct,               // FTM3 channel 7 output source
      \t *    SimTpm1ClkSel_TpmClkin0,                  // TPM1 External Clock Pin
      \t *    SimTpm1Ch0Src_IcPin,                      // TPM1 channel 0 input capture source
      \t *    SimTpm2ClkSel_TpmClkin0,                  // TPM2 External Clock Pin
      \t *    SimTpm2Ch0Src_IcPin,                      // TPM2 channel 0 input capture source
      \t * };
      \t *
      \t * // Initialise SIM from values specified above
      \t * Sim::configure(simInit);
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t/**
      \t * Copy Constructor
      \t */
      \tconstexpr Init(const Init &other) = default;
      \t
      \t/**
      \t * Default Constructor
      \t */
      \tconstexpr Init() = default;
      \t\n
   ]]></template>

   <template><![CDATA[
      \t/**
      \t * Configure SIM from values specified in config
      \t */
      \tstatic void configure(const Init &config) {\n
   ]]></template>
   <template condition="sim_sopt1_usbpower" ><![CDATA[
      \t   sim->SOPT1CFG = SIM_SOPT1CFG_USSWE_MASK|SIM_SOPT1CFG_UVSWE_MASK|SIM_SOPT1CFG_URWE_MASK;\n
   ]]></template>
   <template condition="sim_sopt1_osc32kout||sim_sopt1_osc32ksel||sim_sopt1_usbpower" ><![CDATA[
      \t   sim->SOPT1 = config.sopt1;\n
   ]]></template>
   <template><![CDATA[
      \t   sim->SOPT2 = config.sopt2;   // SOPT2 may also be altered by MCG clock code
      \t   sim->SOPT4 = config.sopt4;
      \t   sim->SOPT5 = config.sopt5;
      \t   sim->SOPT7 = config.sopt7;\n
      ]]></template>
   <variableTemplate variables="sim_sopt8_ftm0och0src" ><![CDATA[
      \t   sim->SOPT8 = config.sopt8;\n
   ]]></variableTemplate>
   <variableTemplate variables="sim_sopt9_tpm1clksel" ><![CDATA[
      \t   sim->SOPT9 = config.sopt9;\n
   ]]></variableTemplate>
   <variableTemplate variables="sim_clkdiv2_usb[]" ><![CDATA[
      \t
      \t   updateUsbClockDivider();\n
   ]]></variableTemplate>
   <template><![CDATA[
      \t}
      \t
      \tstatic void defaultConfigure() {
      \t   configure(DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <variableTemplate namespace="usbdm"
      variables=
         "sim_sopt1_osc32kout,
          sim_sopt1_osc32ksel,
          sim_sopt1_usbpower"
    ><![CDATA[
      \t   /// System Options Register 1
      \t   uint32_t sopt1 = 0;\n\n
   ]]></variableTemplate >
   <variableTemplate namespace="usbdm"
      variables="
         sim_sopt2_pllfllsel[],
         sim_sopt2_lpuartsrc[],
         sim_sopt2_lpuart0src[],
         sim_sopt2_lpuart1src[],
         sim_sopt2_uart0src[],
         sim_sopt2_tpmsrc[],
         sim_sopt2_usbsrc[],
         sim_sopt2_clkoutsel[],
         sim_sopt2_emvsimsrc[],
         sim_sopt2_sdhcsrc[],
         sim_sopt2_flexiosrc[],
         sim_sopt2_timesrc[],
         sim_sopt2_ptd7pad,
         sim_sopt2_traceclksel,
         sim_sopt2_rtcclkoutsel,
         sim_sopt2_fbsl,
         sim_sopt2_rmiisrc"
   ><![CDATA[
      \t   /// System Options Register 2
      \t   uint32_t sopt2 = 0;\n\n
   ]]></variableTemplate>
   <variableTemplate namespace="usbdm"
      variables="
         sim_sopt4_ftm0flt0,
         sim_sopt4_ftm0trg0src,
         sim_sopt4_ftm0ch0src,
         sim_sopt4_tpm0ch0src,
         sim_sopt4_tpm0clksel,
         sim_sopt4_ftm0clksel"
   ><![CDATA[
      \t   /// System Options Register 4
      \t   uint32_t sopt4 = 0;\n\n
   ]]></variableTemplate>
   <variableTemplate namespace="usbdm"
      variables="
         sim_sopt5_uart0ode,
         sim_sopt5_uart0rxsrc,
         sim_sopt5_uart0txsrc,
         sim_sopt5_lpuart0ode,
         sim_sopt5_lpuart0rxsrc,
         sim_sopt5_lpuart0txsrc"
   ><![CDATA[
      \t   /// System Options Register 5
      \t   uint32_t sopt5 = 0;\n\n
   ]]></variableTemplate>
   <variableTemplate namespace="usbdm"
      variables="
         sim_sopt7_adc0trigger,
         sim_sopt7_adc0trgsel"
   ><![CDATA[
      \t   /// System Options Register 7
      \t   uint32_t sopt7 = 0;\n\n
   ]]></variableTemplate>
   <variableTemplate namespace="usbdm"
      variables="
         sim_sopt8_ftm0och0src,
         sim_sopt8_ftm3och0src"
   ><![CDATA[
      \t   /// System Options Register 8
      \t   uint32_t sopt8 = 0;\n\n
   ]]></variableTemplate>
   <variableTemplate namespace="usbdm"
      variables="
         sim_sopt9_tpm1clksel,
         sim_sopt9_tpm2ch0src,
         sim_sopt9_tpm1clksel,
         sim_sopt9_tpm2ch0src"
   ><![CDATA[
      \t   /// System Options Register 9
      \t   uint32_t sopt9 = 0;\n\n
   ]]></variableTemplate>

   <template namespace="usbdm" ><![CDATA[
      \t
      \tpublic:\n
   ]]></template>

   <for keys="n" values=";0;1;2;3;4">
      <for keys="v"
         values="
             sim_sopt2_lpuart%(n)src[];
             sim_sopt2_uart%(n)src[]">
         <variableTemplate namespace="usbdm" variables="%(v)"
            linePadding="xxx"
         ><![CDATA[
            \t   /**
            \t    * Constructor for %description
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            \t    *
            %paramDescription
            \t    */
            \t   template <typename... Types>
            \t   constexpr Init(%params, Types... rest) : Init(rest...) {
            \t
            \t      %registerName |= %paramExpression;
            \t   }
            \t\n
         ]]></variableTemplate>
      </for>
   </for>
   <for keys="v"
      values="
         sim_sopt2_pllfllsel[];
         sim_sopt2_tpmsrc[];
         sim_sopt2_usbsrc[];
         sim_sopt2_clkoutsel[];
         sim_sopt2_emvsimsrc[];
         sim_sopt2_sdhcsrc[];
         sim_sopt2_flexiosrc[];
         sim_sopt2_timesrc[];
         sim_sopt1_osc32kout;
         sim_sopt1_osc32ksel;
         sim_sopt1_usbpower;
         sim_sopt2_ptd7pad;
         sim_sopt2_traceclksel;
         sim_sopt2_rtcclkoutsel;
         sim_sopt2_fbsl;
         sim_sopt2_rmiisrc;
         sim_sopt1_usbsstby;
         sim_sopt1_usbvstby;
         sim_sopt2_usbregen;
         sim_sopt2_usbslsrc
         ">
      <variableTemplate namespace="usbdm" variables="%(v)"
            linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName |= %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>
   <for keys="p" values="0;1;2;3" >
      <for keys="u" values="0;1;2;3" >
         <for keys="v"
            values="
                sim_sopt4_ftm%(p)flt%(u);
                sim_sopt4_ftm%(p)trg%(u)src;
                sim_sopt4_ftm%(p)ch%(u)src;
                sim_sopt4_tpm%(p)ch%(u)src">
            <variableTemplate namespace="usbdm" variables="%(v)"
                  linePadding="xxx"
            ><![CDATA[
               \t   /**
               \t    * Constructor for %description
               \t    *
               \t    * @tparam   Types
               \t    * @param    rest
               \t    *
               %paramDescription
               \t    */
               \t   template <typename... Types>
               \t   constexpr Init(%params, Types... rest) : Init(rest...) {
               \t
               \t      %registerName |= %paramExpression;
               \t   }
               \t\n
            ]]></variableTemplate>
         </for>
      </for>
      <for keys="v"
         values="
             sim_sopt4_tpm%(p)clksel;
             sim_sopt4_ftm%(p)clksel">
         <variableTemplate namespace="usbdm" variables="%(v)"
            linePadding="xxx"
         ><![CDATA[
            \t   /**
            \t    * Constructor for %description
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            \t    *
            %paramDescription
            \t    */
            \t   template <typename... Types>
            \t   constexpr Init(%params, Types... rest) : Init(rest...) {
            \t
            \t      %registerName |= %paramExpression;
            \t   }
            \t\n
         ]]></variableTemplate>
      </for>
   </for>
   <for keys="p" values=";0;1;2;3;4">
      <for keys="v"
         values="
             sim_sopt5_uart%(p)ode;
             sim_sopt5_uart%(p)rxsrc;
             sim_sopt5_uart%(p)txsrc;
             sim_sopt5_lpuart%(p)ode;
             sim_sopt5_lpuart%(p)rxsrc;
             sim_sopt5_lpuart%(p)txsrc">
         <variableTemplate namespace="usbdm" variables="%(v)"
                  linePadding="xxx"
         ><![CDATA[
            \t   /**
            \t    * Constructor for %description
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            \t    *
            %paramDescription
            \t    */
            \t   template <typename... Types>
            \t   constexpr Init(%params, Types... rest) : Init(rest...) {
            \t
            \t      %registerName |= %paramExpression;
            \t   }
            \t\n
         ]]></variableTemplate>
      </for>
   </for>
   <for keys="p" values=";0;1">
      <variableTemplate namespace="usbdm" variables="sim_sopt7_adc%(p)trigger,sim_sopt7_adc%(p)trgsel"
         linePadding="xxx"
       ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      %params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName |= %paramExpression;
      \t   }
      \t\n
      ]]></variableTemplate>
   </for>
   <for keys="ch" values="0;1;2;3;4;5;6;7">
      <for keys="v"
         values="
             sim_sopt8_ftm0och%(ch)src;
             sim_sopt8_ftm3och%(ch)src">
         <variableTemplate namespace="usbdm" variables="%(v)"
            linePadding="xxx"
         ><![CDATA[
            \t   /**
            \t    * Constructor for %description
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            \t    *
            %paramDescription
            \t    */
            \t   template <typename... Types>
            \t   constexpr Init(%params, Types... rest) : Init(rest...) {
            \t
            \t      %registerName |= %paramExpression;
            \t   }
            \t\n
         ]]></variableTemplate>
      </for>
   </for>
   <for keys="p" values="1;2">
      <for keys="fn" values="clksel;ch0src">
         <variableTemplate namespace="usbdm" variables="sim_sopt9_tpm%(p)%(fn)"
            linePadding="xxx"
         ><![CDATA[
            \t   /**
            \t    * Constructor for %description
            \t    *
            \t    * @tparam   Types
            \t    * @param    rest
            \t    *
            %paramDescription
            \t    */
            \t   template <typename... Types>
            \t   constexpr Init(%params, Types... rest) : Init(rest...) {
            \t
            \t      %registerName |= %paramExpression;
            \t   }
            \t\n
         ]]></variableTemplate>
      </for>
   </for>
   <template namespace="usbdm" ><![CDATA[
      \t};\n\n
   ]]></template>

<!-- ========== SIM BasicInfo class - End =============================== -->

   <template namespace="usbdm" ><![CDATA[
      }; // class $(_Baseclass)BasicInfo \n\n
   ]]></template>

   </if>
 <!-- ========== DefaultInitValue =============================== -->

   <template  ><![CDATA[
      \t/**
      \t * Default value for Sim::DefaultInit
      \t * This value is created from Configure.usbdmProject settings (Peripheral Parameters->SIM)
      \t */
      \tstatic constexpr Init DefaultInitValue {\n
   ]]></template>
   <variableTemplate
      variables="
         sim_sopt2_pllfllsel[],
         sim_sopt2_sdhcsrc[],
         sim_sopt2_tpmsrc[],
         sim_sopt2_flexiosrc[],
         sim_sopt2_usbsrc[],
         sim_sopt2_clkoutsel[],
         sim_sopt2_emvsimsrc[],
         sim_sopt2_timesrc[],

         sim_sopt2_rtcclkoutsel,
         sim_sopt2_traceclksel,
         sim_sopt2_fbsl,
         sim_sopt1_osc32kout,
         sim_sopt1_osc32ksel,
         sim_sopt1_usbpower,
         sim_sopt2_ptd7pad,
         sim_sopt2_rmiisrc,
         sim_sopt2_usbregen,
         sim_sopt2_usbslsrc"
      terminator=","
      separator=","
   ><![CDATA[
      %initExpression\n
   ]]></variableTemplate>
   <for keys="n" values=";0;1;2;3;4">
      <for keys="v"
         values="
             sim_sopt2_lpuart%(n)src[];
             sim_sopt2_uart%(n)src[]"
             >
         <variableTemplate
            terminator=","
            separator=","
            variables="%(v)"
            ><![CDATA[
            %initExpression\n
         ]]></variableTemplate>
      </for>
   </for>
   <for keys="p" values="0;1;2;3" >
      <for keys="u" values="0;1;2;3" >
         <for keys="v"
            values="
                sim_sopt4_ftm%(p)flt%(u);
                sim_sopt4_ftm%(p)trg%(u)src;
                sim_sopt4_ftm%(p)ch%(u)src;
                sim_sopt4_tpm%(p)ch%(u)src">
            <variableTemplate
               terminator=","
               separator=","
               variables="%(v)"
            ><![CDATA[
               %initExpression\n
            ]]></variableTemplate>
         </for>
      </for>
      <for keys="v"
         values="
             sim_sopt4_tpm%(p)clksel;
             sim_sopt4_ftm%(p)clksel">
         <variableTemplate
            terminator=","
            separator=","
            variables="%(v)"
         ><![CDATA[
            %initExpression\n
         ]]></variableTemplate>
      </for>
   </for>
   <for keys="p" values=";0;1;2;3;4">
      <for keys="v"
         values="
             sim_sopt5_uart%(p)ode;
             sim_sopt5_uart%(p)rxsrc;
             sim_sopt5_uart%(p)txsrc;
             sim_sopt5_lpuart%(p)ode;
             sim_sopt5_lpuart%(p)rxsrc;
             sim_sopt5_lpuart%(p)txsrc">
         <variableTemplate
            terminator=","
            separator=","
            variables="%(v)"
         ><![CDATA[
            %initExpression\n
         ]]></variableTemplate>
      </for>
   </for>
   <for keys="p" values=";0;1">
      <variableTemplate
         terminator=","
         separator=","
         variables="sim_sopt7_adc%(p)trigger,sim_sopt7_adc%(p)trgsel"
       ><![CDATA[
         %initExpression\n
      ]]></variableTemplate>
   </for>
   <for keys="ch" values="0;1;2;3;4;5;6;7">
      <for keys="v"
         values="
             sim_sopt8_ftm0och%(ch)src;
             sim_sopt8_ftm3och%(ch)src">
         <variableTemplate
            terminator=","
            separator=","
            variables="%(v)"
            ><![CDATA[
            %initExpression\n
         ]]></variableTemplate>
      </for>
   </for>
   <for keys="p" values="1;2">
      <for keys="fn" values="clksel;ch0src">
         <variableTemplate
            terminator=","
            separator=","
            variables="sim_sopt9_tpm%(p)%(fn)"
            ><![CDATA[
            %initExpression\n
         ]]></variableTemplate>
      </for>
   </for>
   <template  ><![CDATA[
      \t};\n\n
   ]]></template>

 <!-- ========== Common =============================== -->
   <template key="DefaultInitValue" ><![CDATA[
      \tstatic void initRegs() {
      \t
      \t   configure(DefaultInitValue);
      \t};\n\n
   ]]></template>


</fragment>
