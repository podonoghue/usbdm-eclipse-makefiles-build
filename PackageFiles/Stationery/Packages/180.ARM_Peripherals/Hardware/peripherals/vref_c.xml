<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- vref_c.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Voltage Reference" >

   <constant key="irq_parameters"           type="String"  value="&quot;&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;&quot;"  />
   <constant key="isGeneratedByDefault"     type="Boolean" value="false"         />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %paramType[index]               As for %paramType
    * %paramName[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %fieldAssignment         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %maskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

   <constant key="disable_peripheral"  value = "&quot;vref->SC = 0;&quot;" type="String"  />

   <template><![CDATA[
      \t//! Pin number in Info table for VREF output if mapped to a pin
      \tstatic constexpr int outputPin  = 0;\n\n
   ]]></template>

   <!-- ************* Class Declaration ****************** -->

   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Baseclass)BasicInfo&quot;" />

   <!-- ************* SC ****************** -->

   <binaryOption key="vref_sc_vrefen" condition="vref_sc_vrefen_present"
      enabledBy="enablePeripheralSupport"
      typeName="VrefEnable"
      description="Internal Voltage Reference enable"
      toolTip="Controls the bandgap reference within the Voltage Reference module">
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled"  isDefault="true" />
   </binaryOption>

   <!-- ************* TRM ****************** -->

   <binaryOption key="vref_trm_chopen" condition="vref_trm_chopen_present"
      enabledBy="vref_sc_vrefen"
      typeName="VrefChop"
      description="Chop oscillator enable"
      toolTip="Controls the internal chopping operation to minimise the internal analogue offset\n
               This option is enabled during factory trimming of the VREF voltage.\n
               This should be enabled to achieve the performance stated in the data sheet.\n
               If the chop oscillator is to be used in very low power modes, the system (bandgap)\n
               voltage reference must also be enabled. See PmcBandgapLowPowerEnable">
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled"  isDefault="true" />
   </binaryOption>

   <intOption key="vref_trm_trim" condition="vref_trm_trim_present"
      enabledBy="enablePeripheralSupport"
      toolTip="Changes the resulting VREF by approximately ~0.5 mV for each step"
      description="Trim bits"
      typeName="int8_t"
      value="31"
      min="0"
      max="63"
      />

   <binaryOption key="vref_sc_regen" condition="vref_sc_regen_present"
      enabledBy="vref_sc_vrefen"
      typeName="VrefReg"
      description="Regulator enable"
      toolTip="Controls the internal 1.75 V regulator which produce a constant\n
         internal voltage supply in order to reduce the sensitivity to external supply noise and variation\n
         If it is desired to keep the regulator enabled in very low power modes see PmcBandgapLowPowerEnable">
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled"  isDefault="true" />
   </binaryOption>

   <binaryOption key="vref_sc_icompen" condition="vref_sc_icompen_present"
      enabledBy="vref_sc_vrefen"
      typeName="VrefIcomp"
      description="Second order curvature compensation enable"
      toolTip="Controls the second order curvature compensation\.n
               This should be enabled to achieve the performance stated in the data sheet">
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled" isDefault="true" />
   </binaryOption>

   <choiceOption key="vref_sc_mode_lv" condition="vref_sc_mode_lv_present"
      enabledBy="vref_sc_vrefen"
      typeName="VrefBuffer"
      description="Buffer Mode selection"
      toolTip="Selects the buffer mode for the Voltage Reference module">
      <choice value="0" name="Bandgap on only, for stabilisation and startup" enum="Bandgap"    />
      <choice value="1" name="High power buffer mode enabled"                 enum="HighPower"  isDefault="true" />
      <choice value="2" name="Low-power buffer mode enabled"                  enum="LowPower"   />
   </choiceOption>

<!-- Graphic here -->

   <for keys="field:name"
        values="
      vref_trm_chopen:Chop;
      vref_trm_trim:Trim;
      vref_sc_vrefen:Enable;
      vref_sc_regen:Regulator;
      vref_sc_icompen:Compensastion;
      vref_sc_mode_lv:BufferMode" >
      <variableTemplate variables="%(field)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

<!--   ========== VREF Init class =============================== -->

   <template key="init_description" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   VrefEnable_Enabled ,   // Internal Voltage Reference enable
      \t *   31,                    // Trim bits,
      \t *   VrefChop_Enabled ,     // Chop oscillator enable
      \t *   VrefReg_Enabled ,      // Regulator enable
      \t *   VrefIcomp_Enabled ,    // Second order curvature compensation enable
      \t *   VrefBuffer_HighPower,  // Buffer Mode selection
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" discardRepeats="true" >
   <![CDATA[
      class $(_Baseclass)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <template namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="vref_trm_chopen,vref_trm_trim"
   ><![CDATA[
      \t   /// Trim Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="vref_sc_vrefen,vref_sc_regen,vref_sc_icompen,vref_sc_mode_lv"
   ><![CDATA[
      \t   /// Status and Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <variableTemplate key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="vref_sc_regen" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t
      \t   Info::enable();
      \t
      \t   uint8_t trm = init.trm;\n
   ]]></variableTemplate>
   <if condition="vref_sc_regen&amp;&amp;vref_trm_chopen">
      <variableTemplate key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="vref_sc_regen, vref_trm_chopen"
         linePadding="xxx"
      ><![CDATA[
         \t   if (init.%registerName0&%mask0) {
         \t      // Chop must be enabled if regulator enabled
         \t      %registerName1 |= %mask1;
         \t   }\n
      ]]></variableTemplate>
   </if>
   <variableTemplate key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="vref_sc_regen" >
   <![CDATA[
      \t   vref->TRM = trm;
      \t   %register0  = init.%registerName0 & ~%mask0;
      \t
      \t   // Regulator must be enabled >300ns after other settings
      \t   waitUS(1);
      \t   %register0 = init.%registerName0;
      \t
      \t   while ((vref->SC & VREF_SC_VREFST_MASK) == 0) {
      \t      // Wait until stable
      \t   }
      \t}\n\n
   ]]></variableTemplate>


<!--  Constructors -->

   <for keys="r"
      values="
         vref_sc_vrefen;
         vref_sc_regen;
         vref_sc_icompen;
         vref_sc_mode_lv;
         vref_trm_chopen;
         vref_trm_trim
         ">
      <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>

   <template  namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t};\n\n
   ]]></template>

   <template namespace="usbdm" ><![CDATA[
      };\n\n
   ]]></template>

<!--  Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
         vref_sc_vrefen,
         vref_sc_regen,
         vref_sc_icompen,
         vref_sc_mode_lv,
         vref_trm_chopen,
         vref_trm_trim"
   ><![CDATA[
      \t/**
      \t * Default initialisation value for Vref$(_instance)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></variableTemplate>

   <!--  ********************* MISC ********************* -->

   <validate class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" />

   <template key="/VREF/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n
   ]]></template>

   <projectActionList id = "vref_files">
      <copy source="Project_Headers/vref.h"  target="Project_Headers/vref.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <signals enabledBy="enablePeripheralSupport" />
</peripheralPage>
