<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- vref_c.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Voltage Reference" >

   <constant key="disable_peripheral"  value = '"vref->SC = 0;"' type="String"  />

   <equation key="irq_parameters"            value=""       />
   <equation key="irq_dummy_parameters"      value=""       />
   <equation key="irq_call_parameters"       value=""       />
   <equation key="generateDefault"           value="false"  />
   <equation key="configureInStartupDefault" value="false"  />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <template><![CDATA[
      \t//! Pin number in Info table for VREF output if mapped to a pin
      \tstatic constexpr int outputPin  = 0;\n\n
   ]]></template>

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <!-- ____ SC ____ -->

   <binaryOption key="vref_sc_vrefen" condition="vref_sc_vrefen_present"
      enabledBy="enablePeripheralSupport"
      typeName="VrefEnable"
      baseType="uint8_t"
      description="Internal Voltage Reference enable"
      toolTip="Controls the bandgap reference within the Voltage Reference module" >
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled"  isDefault="true" />
   </binaryOption>

   <binaryOption key="vref_sc_regen" condition="vref_sc_regen_present"
      enabledBy="vref_sc_vrefen"
      typeName="VrefReg"
      baseType="uint8_t"
      description="Regulator enable"
      toolTip="Controls the internal 1.75 V regulator which produce a constant\n
         internal voltage supply in order to reduce the sensitivity to external supply noise and variation\n
         If it is desired to keep the regulator enabled in very low power modes see PmcBandgapLowPowerEnable" >
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled"  isDefault="true" />
   </binaryOption>

   <!-- ____ TRM ____ -->

   <binaryOption key="vref_trm_chopen" condition="vref_trm_chopen_present"
      enabledBy="vref_sc_vrefen"
      typeName="VrefChop"
      baseType="uint8_t"
      description="Chop oscillator enable"
      toolTip="Controls the internal chopping operation to minimise the internal analogue offset\n
               This option is enabled during factory trimming of the VREF voltage.\n
               This should be enabled to achieve the performance stated in the data sheet.\n
               If the chop oscillator is to be used in very low power modes, the system (bandgap)\n
               voltage reference must also be enabled. See PmcBandgapLowPowerEnable" >
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled"  isDefault="true" />
   </binaryOption>

   <!-- Preserve factory trim -->
   <intOption key="vref_trm_trim" condition="vref_trm_trim_present"
      hidden="true"
      toolTip="Changes the resulting VREF by approximately ~0.5 mV for each step"
      description="Trim bits"
      typeName="int8_t"
      value="31"
      min="0"
      max="63"
      />

   <binaryOption key="vref_sc_icompen" condition="vref_sc_icompen_present"
      enabledBy="vref_sc_vrefen"
      typeName="VrefIcomp"
      baseType="uint8_t"
      description="Second order curvature compensation enable"
      toolTip="Controls the second order curvature compensation.\n
               This should be enabled to achieve the performance stated in the data sheet" >
      <choice value="0" name="Disabled" enum="Disabled" />
      <choice value="1" name="Enabled"  enum="Enabled" isDefault="true" />
   </binaryOption>

   <binaryOption key="vref_sc_vrefst" condition="vref_sc_vrefst_present"
      hidden="true"
      typeName="VrefStable"
      baseType="uint8_t"
      toolTip=""
      description="Internal Voltage Reference stable" >
      <choice name="Not ready"   value="0" enum="NotReady"/>
      <choice name="Ready"       value="1" enum="Ready"/>
   </binaryOption >

   <choiceOption key="vref_sc_mode_lv" condition="vref_sc_mode_lv_present"
      enabledBy="vref_sc_vrefen"
      typeName="VrefBuffer"
      baseType="uint8_t"
      description="Buffer Mode selection"
      toolTip="Selects the buffer mode for the Voltage Reference module" >
      <choice value="0" name="Bandgap on only, for stabilisation and startup" enum="Bandgap"    />
      <choice value="1" name="High power buffer mode enabled"                 enum="HighPower"  isDefault="true" />
      <choice value="2" name="Low-power buffer mode enabled"                  enum="LowPower"   />
   </choiceOption>

   <!-- ____ Getters and Setters ____________ -->

   <template where="usbdm" >
   <![CDATA[
      \t extern void waitUS(uint32_t usToWait);
      \t\n
   ]]>
   </template>

   <for keys="field           : set   : get   : clear : genCode                 : name"
        values="

         vref_trm_chopen      : true  : true  : false : enableGettersAndSetters : Chop;
         vref_trm_trim        : true  : true  : false : enableGettersAndSetters : Trim;

         vref_sc_vrefen       : true  : true  : false : enableGettersAndSetters : Enable;
         vref_sc_regen        : true  : true  : false : enableGettersAndSetters : Regulator;
         vref_sc_icompen      : true  : true  : false : enableGettersAndSetters : Compensastion;
         vref_sc_vrefst       : false : true  : false : enableGettersAndSetters : RegulatorStatus;
         vref_sc_mode_lv      : true  : true  : false : enableGettersAndSetters : BufferMode" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t * (%(field))
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t * (%(field))
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %returnType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
         tooltipPadding="x*x"      ><![CDATA[
         \t/**
         \t * Clear %description
         \t * (%(field))
         \t *
         \t * %tooltip
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!-- ________ VREF Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   VrefEnable_Enabled ,    // Internal Voltage Reference enable - Enabled
      \t *   VrefChop_Enabled ,      // Chop oscillator enable - Enabled
      \t *   VrefReg_Enabled ,       // Regulator enable - Enabled
      \t *   VrefIcomp_Enabled ,     // Second order curvature compensation enable - Enabled
      \t *   VrefBuffer_HighPower,   // Buffer Mode selection - High power buffer mode enabled
      \t *   int8_t(31) ,            // Trim bits
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tprivate:
      \t   /**
      \t    * Prevent implicit parameter conversions
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(Types...) = delete;
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : vref_trm_chopen                                      :   0      ;
               %baseType   : vref_sc_vrefen,vref_sc_regen,vref_sc_icompen,
                             vref_sc_mode_lv                                      :   0      " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <!-- ____ Init class Constructors ____________ -->

   <for keys="r"
      values="
            vref_trm_chopen;
            vref_sc_vrefen;vref_sc_regen;vref_sc_icompen;
            vref_sc_mode_lv
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%variables)
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Configure methods ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral
      \t   enable();
      \t\n
   ]]>
   </template>
   <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="vref_trm_chopen,vref_sc_regen,vref_sc_vrefst" >
   <![CDATA[
      \t   %register0  = (%register0 & ~%mask0)|init.%registerName0;
      \t   %register1   = init.%registerName1 & ~%mask1;
      \t
      \t   // Regulator must be enabled >300ns after other settings
      \t   waitUS(1);
      \t   %register1   = init.%registerName1;
      \t
      \t   while ((%register2 & %mask2) == 0) {
      \t      // Wait until stable
      \t   }
      \t}
      \t\n
   ]]>
   </variableTemplate>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      padToComments="35"
      variables="
            vref_trm_chopen,
            vref_sc_vrefen,
            vref_sc_regen,
            vref_sc_icompen,
            vref_sc_mode_lv
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues
      \t};
      \t\n
   ]]></variableTemplate>

   <!-- ____ Common ____ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Info)> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="vref_files" >
      <copy source="Project_Headers/vref.h"  target="Project_Headers/vref.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ____ Startup ____ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration ____ -->
   <category name="Advanced" description="SIM configuration" >
      <aliasOption key="=_scgc_clock"              locked="false" condition="_scgc_clock" />
   </category>

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
