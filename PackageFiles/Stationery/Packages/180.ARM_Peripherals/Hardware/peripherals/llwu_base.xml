<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- llwu_base.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <constant key="irq_parameters"            type="String"  value="&quot;&quot;"  />
   <constant key="irq_dummy_parameters"      type="String"  value="&quot;&quot;"  />
   <constant key="irq_call"                  type="String"  value="&quot;&quot;"  />
   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title description="------------------------------------------" />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %paramType[index]               As for %paramType
    * %paramName[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicExpression             Symbolic variable value e.g. AdcCompare_Disabled
    * %fieldAssignment;               Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %maskingExpression              Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Baseclass)BasicInfo&quot;" />

   <!-- ******************************** ME ******************************** -->

   <choiceOption key="llwu_me_peripherals" condition="llwu_me_wume0_present"
      enabledBy="enablePeripheralSupport"
      hidden="true"
      typeName="LlwuPeripheral"
      description="LLWU peripheral wake-up source"
      valueFormat="%s"
      toolTip="Peripheral used as wake-up source"
      enumText="$(/LLWU/InputModuleMapping:// No wake-up peripherals found)"
      >
      <choice name="No wake-up peripheral" value="0"          enum="None" />
      <choice name="Wake-up peripheral 0"  value="1&lt;&lt;0" enum="0" />
      <choice name="Wake-up peripheral 1"  value="1&lt;&lt;1" enum="1" />
      <choice name="Wake-up peripheral 2"  value="1&lt;&lt;2" enum="2" />
      <choice name="Wake-up peripheral 3"  value="1&lt;&lt;3" enum="3" />
      <choice name="Wake-up peripheral 4"  value="1&lt;&lt;4" enum="4" />
      <choice name="Wake-up peripheral 5"  value="1&lt;&lt;5" enum="5" />
      <choice name="Wake-up peripheral 6"  value="1&lt;&lt;6" enum="6" />
      <choice name="Wake-up peripheral 7"  value="1&lt;&lt;7" enum="7" />
   </choiceOption>

   <binaryOption key="llwu_me_wume" condition="llwu_me_wume0_present"
      hidden="true"
      typeName="LlwuPeripheralWakeup"
      valueFormat="%s"
      description="LLWU peripheral wake-up control"
      toolTip="Whether this peripheral can wake-up the processor">
      <choice name="Wake-up disabled" value="false" enum="Disabled" isDefault="true" />
      <choice name="Wake-up enabled"  value="true"  enum="Enabled" />
   </binaryOption>

   <category name="Peripheral sources" description="Wakeups from peripherals">
      <for keys="n" dim="8">
         <binaryOption key="llwu_me_wume%(n)" condition="llwu_me_wume%(n)_present"
            enabledBy="enablePeripheralSupport"
            typeName="LlwuPeripheral"
            valueFormat="%s"
            description="LLWU peripheral wake-up control"
            toolTip="Whether this peripheral can wake-up the processor">
            <choice name="Wake-up disabled" value="false" enum="None" isDefault="true" />
            <choice name="Wake-up enabled"  value="true"  enum="%(n)" />
         </binaryOption>

      </for>
   </category>

   <variableTemplate key="llwu_base_methods" codeGenCondition="enablePeripheralSupport"
      variables="llwu_me_peripherals,llwu_me_wume"
      nonDefaultParams="2" ><![CDATA[
      \t/**
      \t * Configure %description0
      \t *
      %paramDescription
      \t */
      \tstatic void configurePeripheralSource(
      %params) {
      \t
      \t   if (%paramName1) {
      \t      %register = %register | %paramName0;
      \t   }
      \t   else {
      \t      %register = %register & (uint8_t)~%paramName0;
      \t   }
      \t}
      \t
      \t/**
      \t * Get flag bit mask indicating wake-up peripheral sources
      \t * The mask returned correspond to (multiple) peripheral sources.
      \t * These flags are cleared through the originating peripheral.
      \t *
      \t *
      \t * Example checking source
      \t * @code
      \t *    if ((peripheralWakeupSource&LlwuPeripheral_Lptmr) != 0) {
      \t *       // Wake-up from LPTMR
      \t *    }
      \t * @endcode
      \t *
      \t * @return Bit mask
      \t */
      \tstatic uint32_t getPeripheralWakeupSources() {
      \t   return llwu->MF;
      \t}

      \t/**
      \t *  Check if peripheral is source of wake-up
      \t *  These flags are cleared through the originating peripheral.
      \t *
      %paramDescription0
      \t *
      \t * @return false Given peripheral is not source of wake-up.
      \t * @return true  Given peripheral is source of wake-up.
      \t */
      \tstatic bool isPeripheralWakeupSource(%paramType0 %paramName0) {
      \t   return llwu->MF & %paramName0;
      \t}\n\n
   ]]></variableTemplate>

   <!-- ******************************** RST ******************************** -->

   <binaryOption key="llwu_rst_llrste" condition="llwu_rst_llrste_present"
      enabledBy="enablePeripheralSupport"
      typeName="LlwuResetWakeup"
      description="Low-Leakage Mode RESET Enable"
      toolTip="This bit must be set to allow the device to be reset while in a low-leakage power mode.\n
         On devices where Reset is not a dedicated pin, the RESET pin must also be enabled\n
         in the explicit port mux control" >
      <choice name="RESET pin not enabled as a LLWU mode exit source" enum="Disabled" value="0" />
      <choice name="RESET pin enabled as a LLWU mode exit source"     enum="Enabled"  value="1" isDefault="true" />
   </binaryOption>

   <binaryOption key="llwu_rst_rstfilt" condition="llwu_rst_rstfilt_present"
      enabledBy="enablePeripheralSupport"
      typeName="LlwuResetFilter"
      description="Digital Filter On RESET Pin"
      toolTip="Enables the digital filter for the RESET pin during LLS, VLLS3, VLLS2, or VLLS1 modes" >
      <choice name="Filter not enabled" enum="Disabled" value="0" isDefault="true" />
      <choice name="Filter enabled"     enum="Enabled"  value="1" />
   </binaryOption>

   <variableTemplate key="llwu_base_methods" variables="llwu_rst_rstfilt,llwu_rst_llrste" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Controls Reset wake-up control
      \t *
      %paramDescription
      \t */
      \tstatic void configureResetFilter(
      %params) {
      \t   %register = %paramExpression;
      \t}\n
   ]]></variableTemplate>

   <choiceOption key="llwu_pe"  hidden="true" condition="llwu_pe1_wupe0_present"
      enabledBy="enablePeripheralSupport"
      typeName="LlwuPinMode"
      description="Wake-up pin control"
      toolTip="Enables and configures the edge detection for a wake-up pin"
      valueFormat="LLWU_PE1_WUPE0(%s),LLWU_PE1_WUPE1(%s),LLWU_PE1_WUPE2(%s),LLWU_PE1_WUPE3(%s)"
      >
      <choice name="Wake-up pin disabled"         enum="Disabled"     value="0,0,0,0" isDefault="true" />
      <choice name="Wake-up on pin rising edge"   enum="RisingEdge"   value="1,1,1,1" />
      <choice name="Wake-up on pin falling edge"  enum="FallingEdge"  value="2,2,2,2" />
      <choice name="Wake-up on pin either edge"   enum="EitherEdge"   value="3,3,3,3" />
   </choiceOption>

   <category name="Pin sources" description="Wakeups from pins">

      <!-- ******************************** PEx ******************************** -->

      <for keys  ="r:p"
           values=
           "1:0;1:1;1:2;1:3;2:4;2:5;2:6;2:7;3:8;3:9;3:10;3:11;4:12;4:13;4:14;4:15;5:16;
            5:17;5:18;5:19;6:20;6:21;6:22;6:23;7:24;7:25;7:26;7:27;8:28;8:29;8:30;8:31"
           >
         <choiceOption key="llwu_pe%(r)_wupe%(p)" condition="llwu_pe%(r)_wupe%(p)_present"
            enabledBy="enablePeripheralSupport"
            typeName="LlwuPinMode"
            description="Unused input %(p)"
            valueFormat="(LLWU_PE%(r)_WUPE%(p)_MASK&amp;(%s))"
            toolTip="Enables and configures the edge detection for the wake-up pin">
            <choice name="Wake-up pin disabled"        value="LlwuPinMode_Disabled"    enum="Disabled"     isDefault="true" />
            <choice name="Wake-up on pin rising edge"  value="LlwuPinMode_RisingEdge"  enum="RisingEdge"    />
            <choice name="Wake-up on pin falling edge" value="LlwuPinMode_FallingEdge" enum="FallingEdge"   />
            <choice name="Wake-up on pin either edge"  value="LlwuPinMode_EitherEdge"  enum="EitherEdge"    />
         </choiceOption>
      </for>

   <!-- ******************************** FILTx ******************************** -->
      <choiceOption key="llwu_filt_filte"  hidden="true" condition="llwu_filt1_filte_present"
         enabledBy="enablePeripheralSupport"
         typeName="LlwuFilterPinMode"
         description="Wake-up On External Pin with Digital Filter"
         toolTip="Controls the digital filter options for the external pin detect">
         <choice name="Wake-up disabled"                  enum="Disabled"     value="0" isDefault="true" />
         <choice name="Wake-up on filtered rising edge"   enum="RisingEdge"   value="1" />
         <choice name="Wake-up on filtered falling edge"  enum="FallingEdge"  value="2" />
         <choice name="Wake-up on either filtered edge"   enum="EitherEdge"   value="3" />
      </choiceOption>

      <for keys="n" values="1;2;3;4">
         <choiceOption key="llwu_filt%(n)_filte"   condition="llwu_filt%(n)_filte_present" enabledBy="enablePeripheralSupport" derivedFrom="llwu_filt_filte"   />
         <choiceOption key="llwu_filt%(n)_filtsel" condition="llwu_filt%(n)_filte_present" enabledBy="llwu_filt%(n)_filte != 0"
            description="Filter %(n) Pin Select"
            toolTip="Selects 1 of the external signals to be muxed into the filter" >
            <choice name="" value="" enum="dummy" />
         </choiceOption>
      </for>
   </category>

   <template condition="llwu_filt1_filte_present" namespace="usbdm" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * Pin filter numbers
      \t *
      \t * @note These are used as an index into the FILT table so numbers do NOT correspond to filter names FILT[0] <=> FILT1 etc
      \t */
      \tenum LlwuFilterNum {\n
   ]]></template>
   <for keys="m:n" values="0:1;1:2;2:3;3:4">
      <variableTemplate variables="llwu_filt%(n)_filte"   namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t   LlwuFilterNum_%(n) = %(m),  //!<  Wake-up pin LLWU_P%(n)\n
      ]]></variableTemplate>
   </for>
   <template condition="llwu_filt1_filte_present"  namespace="usbdm" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t};\n\n
   ]]></template>

   <template condition="llwu_pe1_wupe0_present" namespace="usbdm" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \tenum LlwuPin : uint32_t {\n
   ]]></template>
   <for keys  ="r:p"
        values=
        "1:0;1:1;1:2;1:3;2:4;2:5;2:6;2:7;3:8;3:9;3:10;3:11;4:12;4:13;4:14;4:15;5:16;
         5:17;5:18;5:19;6:20;6:21;6:22;6:23;7:24;7:25;7:26;7:27;8:28;8:29;8:30;8:31"
        >
      <variableTemplate variables="llwu_pe%(r)_wupe%(p)" namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      ><![CDATA[
         \t   LlwuPin_%(p) = %(p),  //!<  Wake-up pin LLWU_P%(p)\n
      ]]></variableTemplate>
   </for>
   <template condition="llwu_pe1_wupe0_present"  namespace="usbdm" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      $(/LLWU/InputPinMapping:// No user pin mappings found)
      \t};\n\n
   ]]></template>

<!--   ========== LLWU Init class =============================== -->

   <template key="init_description" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t * - llwuPeripheral,                            - Peripheral to enable as wake-up source
      \t * - llwuPin, llwuPinMode,                      - Pin to enable as direct wake-up source
      \t * - llwuFilterNum, llwuPin, llwuFilterPinMode, - Pin to enable as filtered wake-up source
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t status) {
      \t *    (void) status;
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *    // Pins
      \t *    LlwuPin_Pta4,  LlwuPinMode_FallingEdge,
      \t *    LlwuPin_Pta13, LlwuPinMode_EitherEdge,
      \t *    LlwuPin_Ptd4,  LlwuPinMode_RisingEdge,
      \t *
      \t *    // Filtered Pins
      \t *    LlwuFilterNum_1, LlwuPin_Pta4, LlwuFilterPinMode_EitherEdge,
      \t *    LlwuFilterNum_2, LlwuPin_Ptc3, LlwuFilterPinMode_RisingEdge,
      \t *
      \t *    // Peripherals
      \t *    LlwuPeripheral_RtcAlarm,
      \t *    LlwuPeripheral_Lptmr0,
      \t *
      \t *    // Reset
      \t *    LlwuResetWakeup_Enabled, LlwuResetFilter_Enabled
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" >
   <![CDATA[
      class $(_Class)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  llwuCallback Callback function to execute on interrupt
      \t */
      \tstatic void setCallback(CallbackFunction llwuCallback) {
      \t   if (llwuCallback == nullptr) {
      \t      llwuCallback = unhandledCallback;
      \t   }
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || (sCallback == llwuCallback),
      \t         "Handler already set");
      \t   sCallback = llwuCallback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t   return;
      \t}
      \t\n
   ]]>
   </template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/** Callback for programmatically set handler */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Class)Info::unhandledCallback;
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <template namespace="usbdm" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t   /// Array to assist with mapping Pin to register bit-mask
      \t   static constexpr uint8_t masks[] =
      \t      {LLWU_PE1_WUPE0_MASK, LLWU_PE1_WUPE1_MASK, LLWU_PE1_WUPE2_MASK, LLWU_PE1_WUPE3_MASK, };
      \t\n
   ]]></template>
   <for keys="n:b" values="8:28;7:24;6:20;5:16;4:12;3:8;2:4;1:0;" >
      <if condition="llwu_pe%(n)_wupe%(b)">
         <template namespace="usbdm" codeGenCondition="enablePeripheralSupport"><![CDATA[
            \t
            \t   /// Pin sources enable
            \t   uint8_t pe[%(n)]   = {0};\n
         ]]></template>
         <break/>
      </if>
   </for>

   <for keys="n" values="4;3;2;1" >
      <if condition="llwu_filt%(n)_filte">
         <template namespace="usbdm" codeGenCondition="enablePeripheralSupport"><![CDATA[
            \t
            \t   /// Filter configurations
            \t   uint8_t filt[%(n)] = {0};\n
         ]]></template>
         <break/>
      </if>
   </for>

   <variableTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="llwu_me_peripherals"
   ><![CDATA[
      \t
      \t   /// Module (peripheral) sources enable
      \t   uint8_t %registerName      = 0;\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="llwu_rst_llrste"
   ><![CDATA[
      \t
      \t   /// Reset Pin Filter configuration
      \t   uint8_t %registerName     = 0;\n
   ]]></variableTemplate>

<!--   Constructors -->

   <variableTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="llwu_me_peripherals"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t%paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName |= %paramExpression;
      \t   }
      \t\n
   ]]></variableTemplate>

   <template namespace="usbdm" condition="llwu_filt1_filte" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t   /**
      \t    * Constructor for filtered pin source
      \t    *
      \t    * @tparam Types
      \t    * @param rest
      \t    *
      \t    * @param llwuFilterNum       Filter to use
      \t    * @param llwuPin             Peripheral to enable as wake-up source
      \t    * @param llwuFilterPinMode   Sensitivity of pin
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      \t         LlwuFilterNum     llwuFilterNum,
      \t         LlwuPin           llwuPin,
      \t         LlwuFilterPinMode llwuFilterPinMode,
      \t         Types... rest) : Init(rest...) {
      \t
      \t      // LLWU_FILT_FILTF_MASK clears flag on write to register
      \t      filt[llwuFilterNum] = LLWU_FILT_FILTF_MASK|llwuFilterPinMode|llwuPin;
      \t   }
      \t\n
   ]]></template>

   <template namespace="usbdm" condition="llwu_pe1_wupe0" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t   /**
      \t    * Constructor for unfiltered pin source
      \t    *
      \t    * @tparam Types
      \t    * @param rest
      \t    *
      \t    * @param llwuPin       Peripheral to enable as wake-up source
      \t    * @param llwuPinMode   Sensitivity of pin
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(LlwuPin llwuPin, LlwuPinMode llwuPinMode, Types... rest) : Init(rest...) {
      \t
      \t      const int      index = llwuPin>>2;
      \t      const uint8_t  value = llwuPinMode & masks[llwuPin&3];
      \t
      \t      pe[index] |= value;
      \t   }
      \t\n
   ]]></template>

   <template namespace="usbdm" condition="llwu_rst_llrste" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t   /**
      \t    * Constructor for Reset as wake-up source
      \t    *
      \t    * @tparam Types
      \t    * @param rest
      \t    *
      \t    * @param llwuResetWakeup  Enable/Disable Reset source
      \t    * @param llwuResetFilter  Enable/Disable Reset pin filter
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(LlwuResetWakeup llwuResetWakeup, LlwuResetFilter llwuResetFilter, Types... rest) : Init(rest...) {
      \t
      \t      rst = llwuResetWakeup|llwuResetFilter;
      \t   }
      \t\n
   ]]></template>

<!--   Default Initialisation value -->

   <template key="DefaultInitValue" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t// LLWU default init value
      \tstatic constexpr LlwuInfo::Init DefaultInitValue {\n
   ]]></template>
   <for keys="n" dim="8" >
      <variableTemplate key="DefaultInitValue" codeGenCondition="enablePeripheralSupport"
         variables="llwu_me_wume%(n)"
         terminator=","
         separator=","
      ><![CDATA[
         %initExpression  \n
      ]]></variableTemplate>
   </for>

   <for keys  ="r:p"
        values=
        "1:0;1:1;1:2;1:3;2:4;2:5;2:6;2:7;3:8;3:9;3:10;3:11;4:12;4:13;4:14;4:15;5:16;
         5:17;5:18;5:19;6:20;6:21;6:22;6:23;7:24;7:25;7:26;7:27;8:28;8:29;8:30;8:31"
        >
      <variableTemplate key="DefaultInitValue" codeGenCondition="enablePeripheralSupport"
         variables="llwu_pe%(r)_wupe%(p)"
         terminator=","
         separator=","
         initExpressionOnSameLine="true"
      ><![CDATA[
          \t   LlwuPin_%(p), %initExpression, \n
      ]]></variableTemplate>
   </for>

   <for keys="n" values="1;2;3;4">
      <variableTemplate key="DefaultInitValue" codeGenCondition="enablePeripheralSupport"
         variables="llwu_filt%(n)_filtsel, llwu_filt%(n)_filte"
         terminator=","
         separator=","
         initExpressionOnSameLine="true"
      ><![CDATA[
         \t   LlwuFilterNum_%(n), %initExpression, \n
      ]]></variableTemplate>
   </for>

   <variableTemplate key="DefaultInitValue" codeGenCondition="enablePeripheralSupport"
      variables="llwu_rst_llrste, llwu_rst_rstfilt"
      terminator=","
      separator=","
   ><![CDATA[
      \t   %symbolicExpression0, %symbolicExpression1,  \n
   ]]></variableTemplate>

   <template key="DefaultInitValue" codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t};\n\n
   ]]></template>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t * $(_BASENAME) flags from pin events are cleared.
      \t * Requests from peripheral devices must be cleared at source
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t
      \t   // Enable peripheral clock
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      condition="irqHandlingMethod" >
   <![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      Info::setCallback(init.callbackFunction);
      \t      Info::enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>
   <for keys="n:b" values="1:0;2:8;3:16;4:24" >
      <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         condition="llwu_pf%(n)_wuf%(b)_present" >
      <![CDATA[
         \t      // Clear pin flags
         \t      llwu->PF%(n) = 0xFF;\n
      ]]></template>
   </for>
   <for keys="i:n:b" values="0:1:0;1:2:4;2:3:8;3:4:12;4:5:16;5:6:20;6:7:24;7:8:28;" >
      <variableTemplate key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="llwu_pe%(n)_wupe%(b)" >
      <![CDATA[
         \t      // Configure pin source
         \t      %register  = init.pe[%(i)];\n
      ]]></variableTemplate>
   </for>
   <for keys="i:n" values="0:1;1:2;2:3;3:4" >
      <variableTemplate key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="llwu_filt%(n)_filte" >
      <![CDATA[
         \t      // Configure and clear filtered pin source
         \t      %register = init.filt[%(i)];\n
      ]]></variableTemplate>
   </for>
   <variableTemplate key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="llwu_me_peripherals" >
   <![CDATA[
      \t      // Configure peripheral sources
      \t      %register    = init.%registerName;\n
   ]]></variableTemplate>
   <variableTemplate key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="llwu_rst_llrste" >
   <![CDATA[
      \t      // Configure filtered reset pin source
      \t      %register   = init.%registerName;\n
   ]]></variableTemplate>
   <template  key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t};\n\n
   ]]></template >

   <template namespace="usbdm" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
      <![CDATA[
      \t}; // $(_Class)BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm" >
      <![CDATA[
      }; // $(_Class)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.LlwuValidate">
   </validate>

   <projectActionList id = "llwu_files" >
      <copy source="Project_Headers/llwu.h"            target="Project_Headers/llwu.h"            overwrite="true" derived="true" />
      <copy source="Snippets/llwu-simple-example.cpp"  target="Snippets/llwu-simple-example.cpp"  overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* Signal mapping ****************** -->

   <signals enabledBy="enablePeripheralSupport" />

</fragment>
