<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- irq_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Interrupt" >

   <equation key="irq_parameters"            value=""  />
   <equation key="irq_dummy_parameters"      value=""  />
   <equation key="irq_call"                  value=""  />
   <equation key="generateDefault"           value="false"         />
   <equation key="configureInStartupDefault" value="false"         />
   <xi:include href="enablePeripheral.xml" />
   <title />

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String" value='"$(_Class)Info : public $(_Structname)BasicInfo"' />

   <!-- ************* SC ****************** -->

   <binaryOption key="irq_sc_irqpe" condition="irq_sc_irqpe_present"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      typeName="IrqPinEnable"
      description="IRQ Pin Enable"
      toolTip="Selectively enables the IRQ pin">
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="irq_sc_irqpdd" condition="irq_sc_irqpdd_present"
      enabledBy="irq_sc_irqpe"
      typeName="IrqPullUp"
      toolTip="Controls pull-up device on IRQ pin"
      description="Interrupt Request (IRQ) Pull Device Disable" >
      <choice name="Pull-up Enabled"     value="0" enum="Enabled"/>
      <choice name="Pull-up Disabled"    value="1" enum="Disabled"/>
   </binaryOption >

   <choiceOption key="irq_sc_irqmod" condition="irq_sc_irqmod_present&amp;&amp;irq_sc_irqedg_present"
      enabledBy="irq_sc_irqpe"
      valueFormat="IRQ_SC_IRQMOD(%s),IRQ_SC_IRQEDG(%s)"
      typeName="IrqMode"
      toolTip="Selects edge/level and polarity to trigger event"
      description="IRQ Detection Mode" >
      <choice name="Falling Edge only"          value="0,0" enum="FallingEdgeOnly"/>
      <choice name="Falling Edge or Low level"  value="1,0" enum="FallingEdgeOrLowLevel"/>
      <choice name="Rising Edge only"           value="0,1" enum="RisingEdgeOnly"/>
      <choice name="Rising Edge or High level"  value="1,1" enum="RisingEdgeOrHighLevel"/>
   </choiceOption >

   <choiceOption key="irq_sc_irqack" condition="irq_sc_irqack_present"
      hidden="true"
      typeName="IrqAcknowledge"
      toolTip="Acknowledges interrupt request events (write 1 to clear IRQF).\n
               Writing 0 has no meaning or effect. Reads always return 0. \n
               If edge-and-level detection is selected, then IRQF cannot be cleared \n
               while the IRQ pin remains at its asserted level"
      description="IRQ Acknowledge" >
      <choice name="Write 1 to clear"  value="1" enum="Write1ToClear"/>
   </choiceOption >

   <binaryOption key="irq_sc_irqie" condition="irq_sc_irqie_present"
      enabledBy="irq_sc_irqpe"
      typeName="IrqInterrupt"
      toolTip="Determines whether IRQ events (IRQF=1) generate an interrupt request"
      description="IRQ Interrupt Enable" >
      <choice name="Interrupts Disabled"    value="0" enum="Disabled"/>
      <choice name="Interrupts Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

<!-- Graphic here -->

   <variableTemplate variables="irq_sc_irqack" codeGenCondition="/$(_BASENAME)/enableGettersAndSetters"
   ><![CDATA[
      \t/**
      \t * %description
      \t */
      \tstatic void achnowledge() {
      \t   %register = %register | %mask;
      \t}\n\n
   ]]></variableTemplate>

   <for keys="field:name"
        values="
      irq_sc_irqpdd:PullUp;
      irq_sc_irqpe:Enable;
      irq_sc_irqie:IrqRequests;
      irq_sc_irqmod:Mode" >
      <variableTemplate variables="%(field)" codeGenCondition="/$(_BASENAME)/enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

<!--   ========== IRQ Init class =============================== -->

   <template key="init_description" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init init {
      \t *
      \t *   // Setup values
      \t *   IrqPinEnable_Enabled ,          // IRQ Pin Enable - Enabled
      \t *   IrqMode_FallingEdgeOrLowLevel , // IRQ Detection Mode - Falling Edge or Low level
      \t *   IrqPullUp_Disabled,             // Interrupt Request (IRQ) Pull Device Disable - Pull-up Disabled
      \t *   IrqInterrupt_Disabled,          // IRQ Interrupt Enable - Interrupts Disabled
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure(init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate where="basicInfo" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="irq_sc_irqpdd,irq_sc_irqpe,irq_sc_irqack,irq_sc_irqie,irq_sc_irqmod"
   ><![CDATA[
      \t   /// Interrupt Pin Request Status and Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t   // ..........  Configure ...........
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
             condition="irqHandlingMethod" ><![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      Info::setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
      \t   // Initialise IRQ
      \t   irq->SC    = init.sc|IRQ_SC_IRQACK_MASK;

      \t   // Clear pending IRQ flag
      \t   irq->SC    = init.sc|IRQ_SC_IRQACK_MASK;

      \t    // Required delay to avoid interrupt
      \t   (void) irq->SC;
      \t}
      \t\n
   ]]></template>

<!--   Constructors -->

   <variableTemplate where="basicInfo" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            irq_sc_irqpe;
            irq_sc_irqmod;
            irq_sc_irqpdd;
            irq_sc_irqie
            " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      separator=","
      terminator=","
      variables="
            irq_sc_irqpe,
            irq_sc_irqmod,
            irq_sc_irqpdd
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></variableTemplate>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
      <![CDATA[
      \t}; // $(_Class)BasicInfo::Init\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id = "irq_files" >
      <copy source="Project_Headers/irq-MKE.h"  target="Project_Headers/irq.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->
   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title/>
      <aliasOption key="/SIM/sim_pinsel0_$(_name)ps" locked="false" optional="true" />
      <aliasOption key="/SIM/sim_pinsel1_$(_name)ps" locked="false" optional="true" />
   </category>

   <signals enabledBy="enablePeripheralSupport" locked="true" />

</peripheralPage>
