<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- irq_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Interrupt" >

   <constant key="suppressInstance"         type="Boolean" value="false"         />
   <constant key="peripheralUsesInterrupts" type="Boolean" value="true"          />
   <constant key="irq_parameters"           type="String"  value="&quot;&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;&quot;"  />
   <constant key="isGeneratedByDefault"     type="Boolean" value="false"         />
   <constant key="isSupportedinStartup"     type="Boolean" value="true"          />
   <xi:include href="_enablePeripheral.xml"  />
   <title description="------------------------------------------" />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2                    (fProvider.getName())
    *  $(_Baseclass)    => e.g FTM0 => Ftm             (fPeripheral.getClassBaseName())
    *  $(_instance)     => e.g FTM0 => 0, PTA => A     (fPeripheral.getInstance())
    *  $(_Class)        => e.g FTM2 => Ftm2            (fPeripheral.getClassName())
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT  (fPeripheral.getBaseName())
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicValueExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %enumClass[index]               As for %paramType
    * %enumParam[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicValueExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %defaultClockExpression         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %defaultMaskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

   <!-- ************* SIM ****************** -->
   <aliasOption key="/SIM/sim_pinsel0_irqps" constant="false" optional="true" />

   <!-- ************* SC ****************** -->

   <binaryOption key="irq_sc_irqpe" condition="irq_sc_irqpe_present"
      enabledBy="/$(_BASENAME)/enablePeripheralSupport"
      enumStem="IrqPinEnable"
      description="IRQ Pin Enable"
      toolTip="Selectively enables the IRQ pin">
      <choice name="Disabled"    value="0" enum="Disabled"/>
      <choice name="Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="irq_sc_irqpdd" condition="irq_sc_irqpdd_present"
      enabledBy="irq_sc_irqpe"
      enumStem="IrqPullUp"
      toolTip="Controls pull-up device on IRQ pin"
      description="Interrupt Request (IRQ) Pull Device Disable" >
      <choice name="Pull-up Enabled"     value="0" enum="Enabled"/>
      <choice name="Pull-up Disabled"    value="1" enum="Disabled"/>
   </binaryOption >

   <choiceOption key="irq_sc_irqmod" condition="irq_sc_irqmod_present&amp;&amp;irq_sc_irqedg_present"
      enabledBy="irq_sc_irqpe"
      valueFormat="IRQ_SC_IRQMOD(%s),IRQ_SC_IRQEDG(%s)"
      enumStem="IrqMode"
      toolTip="Selects edge/level and polarity to trigger event"
      description="IRQ Detection Mode" >
      <choice name="Falling Edge only"          value="0,0" enum="FallingEdgeOnly"/>
      <choice name="Falling Edge or Low level"  value="1,0" enum="FallingEdgeOrLowLevel"/>
      <choice name="Rising Edge only"           value="0,1" enum="RisingEdgeOnly"/>
      <choice name="Rising Edge or High level"  value="1,1" enum="RisingEdgeOrHighLevel"/>
   </choiceOption >

   <choiceOption key="irq_sc_irqack" condition="irq_sc_irqack_present"
      hidden="true"
      enumStem="IrqAcknowledge"
      toolTip="Acknowledges interrupt request events (write 1 to clear IRQF).\n
               Writing 0 has no meaning or effect. Reads always return 0. \n
               If edge-and-level detection is selected, then IRQF cannot be cleared \n
               while the IRQ pin remains at its asserted level"
      description="IRQ Acknowledge" >
      <choice name="Write 1 to clear"  value="1" enum="Write1ToClear"/>
   </choiceOption >

   <binaryOption key="irq_sc_irqie" condition="irq_sc_irqie_present"
      enabledBy="irq_sc_irqpe"
      enumStem="IrqInterrupt"
      toolTip="Determines whether IRQ events (IRQF=1) generate an interrupt request"
      description="IRQ Interrupt Enable" >
      <choice name="Interrupts Disabled"    value="0" enum="Disabled"/>
      <choice name="Interrupts Enabled"     value="1" enum="Enabled"/>
   </binaryOption >

<!-- Graphic here -->

   <setTemplate variables="irq_sc_irqack" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * %description
      \t */
      \tstatic void achnowledge() {
      \t   %register = %register | %mask;
      \t}\n\n
   ]]></setTemplate>

   <for keys="field:name"
        values="
      irq_sc_irqpdd:Irq;
      irq_sc_irqpe:PullUp;
      irq_sc_irqie:IrqRequests;
      irq_sc_irqmod:Mode" >
      <setTemplate variables="%(field)" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void configure%(name)(%params) {
         \t   %defaultFieldExpression
         \t}\n\n
      ]]></setTemplate>
   </for>

<!--   ========== IRQ Init class =============================== -->

   <template key="init_description" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init init {
      \t *
      \t *   // Setup values
      \t *   IrqPinEnable_Enabled ,          // IRQ Pin Enable - Enabled
      \t *   IrqMode_FallingEdgeOrLowLevel , // IRQ Detection Mode - Falling Edge or Low level
      \t *   IrqPullUp_Disabled,             // Interrupt Request (IRQ) Pull Device Disable - Pull-up Disabled
      \t *   IrqInterrupt_Disabled,          // IRQ Interrupt Enable - Interrupts Disabled
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure(init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      class $(_Class)BasicInfo {
      \t
      public:\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Class) interrupt call back.
      \t */
      \ttypedef $(_Class)BasicInfo::CallbackFunction CallbackFunction;
      \t
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  irqCallback Callback function to execute on interrupt
      \t */
      \tstatic void setCallback(CallbackFunction irqCallback) {
      \t   if (irqCallback == nullptr) {
      \t      irqCallback = unhandledCallback;
      \t   }
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || (sCallback == irqCallback),
      \t         "Handler already set");
      \t   sCallback = irqCallback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   // Clear IRQ flag
      \t   irq->SC = irq->SC|IRQ_SC_IRQACK_MASK;
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t   return;
      \t}
      \t\n
   ]]>
   </template>

   <template namespace="all" key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/** Callback for programmatically set handler */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Class)Info::unhandledCallback;
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
   <![CDATA[
      $(init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <setTemplate namespace="usbdm" variables="irqHandlingMethod" codeGenCondition="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></setTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      variables="irq_sc_irqpdd,irq_sc_irqpe,irq_sc_irqack,irq_sc_irqie,irq_sc_irqmod"
   ><![CDATA[
      \t   /// Interrupt Pin Request Status and Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></initialValueTemplate>

   <initialValueTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %enumClass %registerName0 = %symbolicValueExpression1;
      \t\n
   ]]></initialValueTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t   // ..........  Configure ...........
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
             condition="irqHandlingMethod" ><![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      Info::setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>

   <template key="/$(_BASENAME)/InitMethod" namespace="all" discardRepeats="true" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
      \t   // Initialise IRQ
      \t   irq->SC    = init.sc|IRQ_SC_IRQACK_MASK;

      \t   // Clear pending IRQ flag
      \t   irq->SC    = init.sc|IRQ_SC_IRQACK_MASK;

      \t    // Required delay to avoid interrupt
      \t   (void) irq->SC;
      \t}
      \t\n
   ]]></template>

<!--   Constructors -->

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <setTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t   %registerName = %paramExpression;
      \t   }\n\n
   ]]></setTemplate>

   <for keys="r"
      values="
            irq_sc_irqpe;
            irq_sc_irqmod;
            irq_sc_irqpdd;
            irq_sc_irqie
            " >
      <setTemplate namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </setTemplate>
   </for>

<!--   Default Initialisation value -->

   <initialValueTemplate codeGenCondition="/$(_BASENAME)/enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            irq_sc_irqpe,
            irq_sc_irqmod,
            irq_sc_irqpdd
         "
   ><![CDATA[
      $(init_description)
      \ttypedef $(_Class)BasicInfo::Init Init;
      \t
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};\n\n
   ]]></initialValueTemplate>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
      <![CDATA[
      \t}; // $(_Class)BasicInfo::Init\n\n
   ]]>
   </template>

   <template namespace="usbdm" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" >
      <![CDATA[
      }; // $(_Class)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" namespace="all" codeGenCondition="/$(_BASENAME)/enablePeripheralSupport" ><![CDATA[
   \t/**
   \t * Class representing $(_NAME)
   \t */
   \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <template key="/SYSTEM/Includes" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" namespace="all" condition="@isSupportedinStartup" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <projectActionList id = "irq_files" >
      <copy source="Project_Headers/irq-MKE.h"  target="Project_Headers/irq.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Signal mapping ****************** -->
   <category name="SIM" description="Pin mapping">
      <aliasOption key="/SIM/sim_pinsel_$(_name)ps"  constant="false" optional="true" />
      <aliasOption key="/SIM/sim_pinsel0_$(_name)ps" constant="false" optional="true" />
      <aliasOption key="/SIM/sim_pinsel1_$(_name)ps" constant="false" optional="true" />
   </category>

   <signals/>

</peripheralPage>
