<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- cmt_0.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Carrier Modulator Transmitter" >

   <!-- ____ Class Declarations ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <!-- ____ Instance control ________ -->
   <constant key="_can_create_instance" value="true" type="Boolean" />

   <equation key="irq_parameters"             value=""          />
   <equation key="irq_dummy_parameters"       value=""          />
   <equation key="irq_call"                   value=""          />
   <equation key="generateDefault"            value="false"     />
   <equation key="configureInStartupDefault"  value="false"     />
   <xi:include href="enablePeripheral.xml"    />
   <title />

   <!-- _____ MSC _____ -->
   <binaryOption key="cmt_msc_mcgen" condition="cmt_msc_mcgen_present"
      hidden="true"
      derived="true"
      typeName="CmtModulatorAndCarrierEnable"
      baseType="uint8_t"
      toolTip="Setting MCGEN will initialize the carrier generator and modulator and will enable all clocks"
      description="Modulator and Carrier Enable" >
      <choice name="Disabled"    value="0" enum="Disabled" />
      <choice name="Enabled"     value="1" enum="Enabled" />
   </binaryOption >


   <choiceOption key="cmt_msc_mode"
      enabledBy="enablePeripheralSupport"
      valueFormat="CMT_MSC_MCGEN(%s),CMT_MSC_BASE(%s),CMT_MSC_FSK(%s)"
      typeName="CmtMode"
      baseType="uint8_t"
      toolTip="Selects between Time, Baseband, FSK and direct modes"
      description="Mode of operation"
      >
      <choice name="Direct"           value="0,0,0"  enum="Direct"
      toolTip="The output is controlled by IROL"
      />
      <choice name="Time"             value="1,0,0"  enum="Time"
         toolTip="Waveform alternates between modulation frequency (mark) and idle (space).\n
                  Modulation waveform is controlled by setPrimaryTiming().\n
                  Mark/Space time is controlled by setMarkSpaceTiming()."
      />
      <choice name="Baseband"         value="1,1,0"  enum="Baseband"
         toolTip="Waveform alternates between high (mark) and idle (space) without use of modulation.\n
                  Mark/Space time is controlled by setMarkSpaceTiming()."
      />
      <choice name="FreqShiftKeying"  value="1,0,1"  enum="FreqShiftKeying"
         toolTip="Waveform changes between two modulation frequencies(mark) separated by idle time (space) i.e.\n
                   (Primary modulation - idle - Secondary modulation - idle) repeated.\n
                   Modulation waveforms are controlled by setPrimaryTiming() and setSecondaryTiming().\n
                   Mark/Space time is controlled by setMarkSpaceTiming().\n
                   Space time may be set to zero to obtain simple FSK with no idle time."
      />
   </choiceOption>

   <binaryOption key="cmt_msc_eocf" condition="cmt_msc_eocf_present"
      enabledBy="enablePeripheralSupport"
      hidden="true"
      typeName="CmtStatus"
      baseType="uint8_t"
      toolTip="Sets when:\n
               - The modulator is not currently active and MCGEN is set\n
               - At the end of each modulation cycle while MCGEN is set\n
               Cleared by:\n
               - Calling getStatus() followed by calling getMarkTime(), getSpaceTime() or setMarkSpaceTiming().\n
               - A DMA cycle"
      description="End Of Cycle Status Flag" >
      <choice name="Cycle not completed"  value="0" enum="CycleIncomplete"/>
      <choice name="Cycle completed"      value="1" enum="CycleCompleted"/>
   </binaryOption >

   <!-- _____ OC _____ -->

   <choiceOption key="cmt_oc_output" condition="cmt_oc_cmtpol_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="CMT_OC_IROPEN(%s),CMT_OC_CMTPOL(%s)"
      typeName="CmtOutput"
      baseType="uint8_t"
      toolTip="Enables and controls the polarity of the IRO signal.\n
               When enabled, the the IRO signal is an output that drives out either\n
               the CMT transmitter output or the state of IROL depending on whether\n
               MSC[MCGEN] is set or not"
      description="Output Control"
   >
      <choice value="0,0" name="Disabled"    enum="Disabled"    />
      <choice value="1,0" name="Active-low"  enum="ActiveLow"   />
      <choice value="1,1" name="Active-high" enum="ActiveHigh"  />
   </choiceOption>

   <binaryOption  key="cmt_oc_irol" condition="cmt_oc_irol_present"
      enabledBy="(cmt_oc_output>0)"
      typeName="CmtOutputLevel"
      baseType="uint8_t"
      description="IRO Latch Control"
      toolTip="Reads the state of the IRO latch.\n
               The value written controls the state of the IRO signal when MSC[MCGEN] is cleared and IROPEN is set"
      >
      <choice value="0" name="Low"  enum="Low"  />
      <choice value="1" name="High" enum="High" />
   </binaryOption>

   <!-- _____ PPS _____ -->

   <choiceOption key="cmt_pps_ppsdiv" condition="cmt_pps_ppsdiv_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmtClockPrescaler"
      baseType="uint8_t"
      toolTip="Divides the CMT clock to generate the Intermediate Frequency clock\n
               to the secondary prescaler.\n
               This should be chosen to produce a nominal 8MHz frequency from the CMT input clock."
      description="Primary Prescaler Divider"
      enumText="
      \t   CmtClockPrescaler_Auto              = 0xFF,               ///&lt; Calculate divider to generate 8MHz based on input clock"
      >
      <choice name="Bus clock / 1"   value="0"  enum="BusClockDivBy1"  />
      <choice name="Bus clock / 2"   value="1"  enum="BusClockDivBy2"  />
      <choice name="Bus clock / 3"   value="2"  enum="BusClockDivBy3"  />
      <choice name="Bus clock / 4"   value="3"  enum="BusClockDivBy4"  />
      <choice name="Bus clock / 5"   value="4"  enum="BusClockDivBy5"  />
      <choice name="Bus clock / 6"   value="5"  enum="BusClockDivBy6"  />
      <choice name="Bus clock / 7"   value="6"  enum="BusClockDivBy7"  />
      <choice name="Bus clock / 8"   value="7"  enum="BusClockDivBy8"  />
      <choice name="Bus clock / 9"   value="8"  enum="BusClockDivBy9"  />
      <choice name="Bus clock / 10"  value="9"  enum="BusClockDivBy10" />
      <choice name="Bus clock / 11"  value="10" enum="BusClockDivBy11" />
      <choice name="Bus clock / 12"  value="11" enum="BusClockDivBy12" />
      <choice name="Bus clock / 13"  value="12" enum="BusClockDivBy13" />
      <choice name="Bus clock / 14"  value="13" enum="BusClockDivBy14" />
      <choice name="Bus clock / 15"  value="14" enum="BusClockDivBy15" />
      <choice name="Bus clock / 16"  value="15" enum="BusClockDivBy16" />
   </choiceOption >

   <intOption key="clockFrequency"
      description="Intermediate frequency (nominally 8MHz)"
      ref="(/SIM/system_bus_clock[0])/(cmt_pps_ppsdiv+1)"
      derived="true"
      units="Hz"
   />
   <choiceOption key="cmt_msc_cmtdiv" condition="cmt_msc_cmtdiv_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmtIntermediatePrescaler"
      baseType="uint8_t"
      toolTip="Causes the CMT to be clocked at the Intermediate frequency divided by 1, 2, 4, or 8"
      description="Intermediate frequency Prescaler"
      >
      <choice name="Intermediate frequency /1" value="0" enum="DivBy1" />
      <choice name="Intermediate frequency /2" value="1" enum="DivBy2" />
      <choice name="Intermediate frequency /4" value="2" enum="DivBy4" />
      <choice name="Intermediate frequency /8" value="3" enum="DivBy8" />
   </choiceOption >

   <binaryOption key="cmt_msc_exspc" condition="cmt_msc_exspc_present"
      hidden="true"
      enabledBy="enablePeripheralSupport"
      baseType="uint8_t"
      typeName="CmtExtendedSpace"
      toolTip="Enables the extended space operation."
      description="Extended Space Enable" >
      <choice name="Disabled"    value="0" enum="Disabled" />
      <choice name="Enabled"     value="1" enum="Enabled" />
   </binaryOption >

   <choiceOption key="cmt_dma_irq" condition="cmt_msc_eocie_present&amp;&amp;cmt_dma_dma_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="CMT_MSC_EOCIE(%s),CMT_DMA_DMA(%s)"
      typeName="CmtEndOfCycleAction"
      baseType="uint8_t"
      toolTip="Enables a Interrupt or DMA request when EOCIE is set"
      description="End of Cycle Event handling" >
      <choice value="0,0" name="No Action"             enum="None"        />
      <choice value="1,0" name="Interrupt Request"     enum="Interrupt"   />
      <choice value="1,1" name="DMA Transfer Request"  enum="DmaTransfer" />
   </choiceOption>

   <binaryOption key="cmt_msc_eocie" condition="cmt_msc_eocie_present"
      enabledBy="enablePeripheralSupport"
      hidden="true"
      typeName="CmtInterruptEnable"
      baseType="uint8_t"
      toolTip="Requests to enable a CPU interrupt when EOCF is set if EOCIE is high"
      description="End of Cycle Interrupt Enable" >
      <choice name="Interrupt disabled"  value="0" enum="Disabled"/>
      <choice name="Interrupt enabled"   value="1" enum="Enabled"/>
   </binaryOption >

   <!-- _____ DMA _____ -->

   <binaryOption key="cmt_dma_dma" condition="cmt_dma_dma_present"
      enabledBy="enablePeripheralSupport"
      hidden="true"
      typeName="CmtDma"
      baseType="uint8_t"
      toolTip=""
      description="DMA Transfer Enable" >
      <choice name="DMA disabled"  value="0" enum="Disabled"/>
      <choice name="DMA enabled"   value="1" enum="Enabled"/>
   </binaryOption >

   <!-- _____ CGH1 _____ -->

   <intOption key="cmt_cgh1_ph" condition="cmt_cgh1_ph_present"
      enabledBy="enablePeripheralSupport"
      baseType="uint8_t"
      typeName="CmtPrimaryCarrierHighTime"
      description="Primary Carrier High Time Data Value"
      toolTip="Contains the number of input clocks required to generate the carrier high time period.\n
               When operating in Time mode, this register is always selected.\n
               When operating in FSK mode, this register and the secondary register pair are\n
               alternately selected under the control of the modulator.\n
               The primary carrier high time value is undefined out of reset.\n
               This register must be written to nonzero values before the carrier \n
               generator is enabled to avoid spurious results."
      value="0"
   />

   <!-- _____ CGL1 _____ -->

   <intOption key="cmt_cgl1_pl" condition="cmt_cgl1_pl_present"
      enabledBy="enablePeripheralSupport"
      baseType="uint8_t"
      typeName="CmtPrimaryCarrierLowTime"
      description="Primary Carrier Low Time Data Value"
      toolTip="Contains the number of input clocks required to generate the carrier low time period.\n
               When operating in Time mode, this register is always selected.\n
               When operating in FSK mode, this register and the secondary register pair are\n
               alternately selected under the control of the modulator.\n
               The primary carrier low time value is undefined out of reset.\n
               This register must be written to nonzero values before the carrier generator\n
               is enabled to avoid spurious results."
      value="0"
   />

   <!-- _____ CGH2 _____ -->

   <intOption key="cmt_cgh2_sh" condition="cmt_cgh2_sh_present"
      enabledBy="enablePeripheralSupport"
      baseType="uint8_t"
      typeName="CmtSecondaryCarrierHighTime"
      description="Secondary Carrier High Time Data Value"
      toolTip="Contains the number of input clocks required to generate the carrier high time period.\n
               When operating in Time mode, this register is never selected.\n
               When operating in FSK mode, this register and the primary register pair are\n
               alternately selected under control of the modulator.\n
               The secondary carrier high time value is undefined out of reset.\n
               This register must be written to nonzero values before the carrier generator\n
               is enabled when operating in FSK mode."
      value="0"
   />

   <!-- _____ CGL2 _____ -->

   <intOption key="cmt_cgl2_sl" condition="cmt_cgl2_sl_present"
      enabledBy="enablePeripheralSupport"
      baseType="uint8_t"
      typeName="CmtSecondaryCarrierLowTime"
      description="Secondary Carrier Low Time Data Value"
      toolTip="Contains the number of input clocks required to generate the carrier low time period.\n
               When operating in Time mode, this register is never selected.\n
               When operating in FSK mode, this register and the primary register pair are\n
               alternately selected under the control of the modulator.\n
               The secondary carrier low time value is undefined out of reset.\n
               This register must be written to nonzero values before the carrier generator\n
               is enabled when operating in FSK mode."
      value="0"
   />

   <!-- _____ CMD1/CMD2 _____ -->

   <intOption key="cmt_mark" condition="cmt_cmd1_mb_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="%s"
      baseType="uint16_t"
      typeName="CmtMarkPeriod"
      description="Mark period"
      toolTip="Controls the mark period of the modulator for all modes"
      value="0"
   />

   <!-- _____ CMD3/CMD4 _____ -->

   <intOption key="cmt_space" condition="cmt_cmd3_sb_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="%s"
      baseType="uint16_t"
      typeName="CmtSpacePeriod"
      description="Space period"
      toolTip="Controls the space periods of the modulator for all modes"
      value="0"
   />

<!-- ====================================================================================================== -->
<!--     START BasicInfo Class      -->
<!-- ====================================================================================================== -->

   <!-- BasicInfo Instance pointer and Constructors  -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t// Pointer to $(_BASENAME) hardware instance
      \tvolatile $(_Type) * const $(_basename);
      \t\n
   ]]></template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Constructor
      \t *
      \t * @param $(_basename) $(_BASENAME) hardware instance
      \t */
      \tconstexpr $(_BasicInfo)(volatile $(_Type) * $(_basename)) : $(_basename)($(_basename)) {
      \t}
      \t\n
   ]]></template>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="cmt_pps_ppsdiv"
      nonDefaultParams="0"
      defaultParamValue="CmtClockPrescaler_Auto" >
   <![CDATA[
      \t/**
      \t * Calculate %description
      \t *
      %paramDescription
      \t */
      \tstatic CmtClockPrescaler calculateClockPrescaler(%params) {
      \t
      \t   if (%paramName == %paramType_Auto) {
      \t      // Calculate a prescaler an 8MHz clock based on clock available
      \t      %paramName = CmtClockPrescaler(((SystemBusClock+4000000)/8000000)-1);
      \t   }
      \t   return %paramName;
      \t}
      \t\n
   ]]>
   </variableTemplate>

<!-- ====================================================================================================== -->
<!--     START BasicInfo/Info duplicated methods -->
<!-- ====================================================================================================== -->

<for
   keys="   static    : const    : where     : guard                                      "
   values=" ''        : 'const ' : basicInfo : $(_BasicInfoGuard)                         ;
            'static ' : ''       : info      : $(_InfoGuard)                              "  >

   <!-- ____ Getters and Setters ____________ -->

   <for keys="field           : get   : set   : clear : genCode                 : name"
        values="
         cmt_oc_irol          : true  : true  : false : enableGettersAndSetters : OutputState;
         cmt_msc_mode         : true  : true  : false : enableGettersAndSetters : Mode;
         cmt_msc_eocf         : true  : false : false : %(guard)                : EndOfCycleFlag;
         cmt_msc_cmtdiv       : true  : true  : false : enableGettersAndSetters : Prescaler;
         cmt_msc_exspc        : true  : true  : false : %(guard)                : ExtendedSpace;
         cmt_oc_output        : false : true  : false : enableGettersAndSetters : OutputControl;
         cmt_dma_dma          : true  : true  : false : enableGettersAndSetters : DmaControl" >
      <variableTemplate location="%(where)" condition="%(set)" codeGenCondition="%(genCode)&amp;&amp;%(guard)"
         variables="%(field)" >
      <![CDATA[
         \t/**
         \t * Set %description
         \t * (%variables)
         \t *
         %paramDescription
         \t */
         \t%(static)void set%(name)(%params) %(const){
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]>
      </variableTemplate>
      <variableTemplate location="%(where)" condition="%(get)" codeGenCondition="%(genCode)&amp;&amp;%(guard)"
         variables="%(field)" >
      <![CDATA[
         \t/**
         \t * Get %description
         \t * (%variables)
         \t *
         \t * @return %tooltip
         \t */
         \t%(static)%returnType get%(name)() %(const){
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]>
      </variableTemplate>
      <variableTemplate location="%(where)" condition='="(%variables)"=="%(clear)"' codeGenCondition="%(genCode)&amp;&amp;%(guard)"
         variables="%(field)"
         tooltipPadding="x*x" >
      <![CDATA[
         \t/**
         \t * Clear %description
         \t * (%variables)
         \t *
         %paramDescription
         \t */
         \t%(static)void clear%(name)(%params) %(const){
         \t   // w1c and mixed register
         \t   %register = %register|%paramExpression;
         \t}
         \t\n
      ]]>
      </variableTemplate>
      <variableTemplate location="%(where)" condition='="w1cIm"=="%(clear)"' codeGenCondition="%(genCode)&amp;&amp;%(guard)"
         variables="%(field)"
         tooltipPadding="x*x" >
      <![CDATA[
         \t/**
         \t * Clear %description
         \t * (%variables)
         \t *
         \t * %tooltip
         \t */
         \t%(static)void clear%(name)() %(const){
         \t   // w1c and mixed register
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <variableTemplate location="%(where)" codeGenCondition="%(guard)"
      variables="cmt_dma_irq" >
   <![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \t%(static)void setEndOfCycleAction(%params) %(const){
      \t
      \t   cmt->MSC = (cmt->MSC&~CMT_MSC_EOCIE_MASK)|CMT_MSC_EOCIE(%paramName);
      \t   cmt->DMA = (cmt->DMA&~CMT_DMA_DMA_MASK)  |CMT_DMA_DMA(%paramName);
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \t%(static)%paramType getEndOfCycleAction() %(const){
      \t   return %paramType((cmt->MSC&~CMT_MSC_EOCIE_MASK)|(cmt->DMA&~CMT_DMA_DMA_MASK));
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate location="%(where)" codeGenCondition="%(guard)"
      variables="cmt_pps_ppsdiv" >
   <![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \t%(static)void setClockDivider(%params) %(const){
      \t
      \t   %paramName = calculateClockPrescaler(%paramName);
      \t   %fieldAssignment;
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \t%(static)%paramType getClockDivider() %(const){
      \t   return %paramType(%register&%mask);
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate location="%(where)" codeGenCondition="%(guard)"
      variables="cmt_mark"
      paramTypes="Ticks" >
   <![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \t%(static)void setMarkPeriod(%params) %(const){
      \t   cmt->CMD1    = uint8_t(%paramExpression>>8);
      \t   cmt->CMD2    = uint8_t(%paramExpression);
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \t%(static)%paramType getMarkPeriod() %(const){
      \t   return %paramType((cmt->CMD1<<8)+cmt->CMD2);
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate location="%(where)" codeGenCondition="%(guard)"
      variables="cmt_space"
      paramTypes="Ticks" >
   <![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \t%(static)void setSpacePeriod(%params) %(const){
      \t   cmt->CMD3    = uint8_t(%paramExpression>>8);
      \t   cmt->CMD4    = uint8_t(%paramExpression);
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \t%(static)%paramType getSpacePeriod() %(const){
      \t   return %paramType((cmt->CMD3<<8)+cmt->CMD4);
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate location="%(where)" codeGenCondition="%(guard)"
      variables="cmt_mark,cmt_space"
      nonDefaultParams="2"
      paramTypes="Ticks,Ticks" >
   <![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \t%(static)void setMarkSpacePeriod(%params) %(const){
      \t   cmt->CMD1    = uint8_t(%paramName0>>8);
      \t   cmt->CMD2    = uint8_t(%paramName0);
      \t   cmt->CMD3    = uint8_t(%paramName1>>8);
      \t   cmt->CMD4    = uint8_t(%paramName1);
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate location="%(where)" codeGenCondition="%(guard)"
      variables="cmt_cgh1_ph,cmt_cgl1_pl"
      nonDefaultParams="2"
      paramTypes="Ticks,Ticks" >
   <![CDATA[
      \t/**
      \t * Set %description0 and %description1
      \t *
      %paramDescription
      \t */
      \t%(static)void setPrimaryTiming(%params) %(const){
      \t   %register0 = %paramName0;
      \t   %register1 = %paramName1;
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate location="%(where)" codeGenCondition="%(guard)"
      variables="cmt_cgh2_sh,cmt_cgl2_sl"
      nonDefaultParams="2"
      paramTypes="Ticks,Ticks" >
   <![CDATA[
      \t/**
      \t * Set %description0 and %description1
      \t *
      %paramDescription
      \t */
      \t%(static)void setSecondaryTiming(%params) %(const){
      \t   %register0 = %paramName0;
      \t   %register1 = %paramName1;
      \t}
      \t\n
   ]]>
   </variableTemplate>
</for>

<!-- ====================================================================================================== -->
<!--     START BasicInfo::Init class      -->
<!-- ====================================================================================================== -->
   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *
      \t *   CmtMode_Direct ,                    // Mode of operation - Direct
      \t *   CmtClockPrescaler_BusClockDivBy1 ,  // Primary Prescaler Divider - Bus clock / 1
      \t *   CmtIntermediatePrescaler_DivBy1 ,   // Intermediate frequency Prescaler - Intermediate frequency /1
      \t *   CmtOutput_Disabled ,                // Output Control - Disabled
      \t *   CmtMscEocie_InterruptDisabled ,     // End of Cycle Interrupt Enable - Interrupt disabled
      \t *   CmtDmaDma_DmaDisabled ,             // DMA Transfer Enable - DMA disabled
      \t *   CmtPrimaryCarrierHighTime(0) ,      // Primary Carrier High Time Data Value
      \t *   CmtPrimaryCarrierLowTime(0) ,       // Primary Carrier Low Time Data Value
      \t *   CmtSecondaryCarrierHighTime(0) ,    // Secondary Carrier High Time Data Value
      \t *   CmtSecondaryCarrierLowTime(0) ,     // Secondary Carrier Low Time Data Value
      \t *   CmtMarkPeriod(0) ,                  // Mark period
      \t *   CmtSpacePeriod(0),                  // Space period
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tprivate:
      \t   /**
      \t    * Prevent implicit parameter conversions
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(Types...) = delete;
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ BasicInfo::Init class Member variables ________ -->

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : cmt_cgh1_ph                                          :   0      ;
               %baseType   : cmt_cgl1_pl                                          :   0      ;
               %baseType   : cmt_cgh2_sh                                          :   0      ;
               %baseType   : cmt_cgl2_sl                                          :   0      ;
               %baseType   : cmt_oc_irol,cmt_oc_cmtpol,cmt_oc_iropen              :   0      ;
               %baseType   : cmt_msc_cmtdiv,cmt_msc_exspc,cmt_msc_base,
                             cmt_msc_fsk,cmt_msc_eocie,cmt_msc_mcgen              :   0      ;
               %baseType   : cmt_cmd1_mb                                          :   0      ;
               %baseType   : cmt_cmd2_mb                                          :   0      ;
               %baseType   : cmt_cmd3_sb                                          :   0      ;
               %baseType   : cmt_cmd4_sb                                          :   0      ;
               %baseType   : cmt_dma_dma                                          :   0      ;
               %returnType : cmt_pps_ppsdiv                                       :   %returnType(0) ;
               %baseType   : cmt_mark                                             :   0      ;
               %baseType   : cmt_space                                            :   0      " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(variables)"
         linePadding="xxx" >
      <![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]>
      </variableTemplate>
   </for>

   <!-- ____ BasicInfo::Init class Constructors ____________ -->

   <for keys="r"
      values="
            cmt_oc_output;
            cmt_oc_irol;
            cmt_msc_cmtdiv;
            cmt_msc_mode
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%variables)
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <for keys="r"
      values="
            cmt_mark;
            cmt_space;
            cmt_cgh1_ph;
            cmt_cgl1_pl;
            cmt_cgh2_sh;
            cmt_cgl2_sl;
            cmt_pps_ppsdiv
            " >
      <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
      %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)"
      variables="cmt_dma_irq"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      // Parameter contains non-overlapping bit fields from two registers
      \t      dma = (dma & ~CMT_DMA_DMA_MASK)   | (CMT_DMA_DMA_MASK & %paramName);
      \t      msc = (msc & ~CMT_MSC_EOCIE_MASK) | (CMT_MSC_EOCIE_MASK & %paramName);
      \t   }
      \t\n
   ]]>
   </variableTemplate>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

<!-- ====================================================================================================== -->
<!--     END BasicInfo::Init class      -->
<!-- ====================================================================================================== -->

   <!-- ____ BasicInfo class Configure methods ____ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      linePadding="xxx" >
   <![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t * This routine does not configure pins or interrupt handlers
      \t *
      \t * @param $(_basename)           Hardware instance pointer
      \t * @param clockFrequency Clock frequency
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(
      \t               volatile $(_Type) *$(_basename),
      \t               const Init    &init) {
      \t
      \t   //clockInitialise($(_basename), clockFrequency, init.clockFrequency);
      \t\n
   ]]>
   </template>
   <for keys=
             " var                                                    : statement            "
      values=" cmt_msc_mcgen                                          : %register = 0;
               cmt_cgh1_ph                                            : %configRegAssignment  ;
               cmt_cgl1_pl                                            : %configRegAssignment  ;
               cmt_cgh2_sh                                            : %configRegAssignment  ;
               cmt_cgl2_sl                                            : %configRegAssignment  ;
               cmt_oc_irol,cmt_oc_cmtpol,cmt_oc_iropen                : %configRegAssignment  ;
               cmt_dma_dma                                            : %configRegAssignment  ;
               cmt_mark                                               : cmt->CMD1    = uint8_t(init.%registerName>>8) ;
               cmt_mark                                               : cmt->CMD2    = uint8_t(init.%registerName)    ;
               cmt_space                                              : cmt->CMD3    = uint8_t(init.%registerName>>8) ;
               cmt_space                                              : cmt->CMD4    = uint8_t(init.%registerName)    ;
               cmt_pps_ppsdiv                                         : %register    = calculateClockPrescaler(init.%registerName)  ;
               cmt_msc_cmtdiv,cmt_msc_exspc,cmt_msc_base,
               cmt_msc_fsk,cmt_msc_eocie,cmt_msc_mcgen                : %configRegAssignment  " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(var)"
         linePadding="xxx" >
      <![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]>
      </variableTemplate>
   </for>
   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t * This routine does not configure pins or interrupt handlers
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tvoid configure(const Init &init) const {
      \t
      \t   configure($(_basename), init);
      \t}
      \t\n
   ]]>
   </template>


<!-- ====================================================================================================== -->
<!--     END BasicInfo class      -->
<!-- ====================================================================================================== -->
<!-- ====================================================================================================== -->
<!--     START Info class      -->
<!-- ====================================================================================================== -->
   <!-- ____ Info constructors ________ -->

   <template where="info" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t// Output pin
      \ttypedef PcrTable_T<$(_Info), 0> OutputPin;
      \t\n
   ]]>
   </template>
   
   <template where="info" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t/*
      \t *   Default Constructor
      \t */
      \t$(_Info)() : $(_BasicInfo)($(_basename)) {
      \t   defaultConfigure();
      \t}
      \t
      \t/*
      \t *   Constructor
      \t */
      \t$(_Info)(const Init &init) : $(_BasicInfo)($(_basename)) {
      \t   configure(init);
      \t}
      \t\n
   ]]>
   </template>

   <!-- Init configure methods -->

   <template where="info" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic void defaultConfigure() {
      \t
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral
      \t   enable();
      \t\n
   ]]>
   </template>
   <template where="info" codeGenCondition="$(_InfoIrqGuard)" condition="=(_hardwareIrqCount==1)" >
   <![CDATA[
      \t   // Configure call-back
      \t   if (init.callbacks[0] != nullptr) {
      \t      setCallback(init.callbacks[0]);
      \t      enableNvicInterrupts(init.priorities[0]);
      \t   }
      \t\n
   ]]>
   </template>
   <variableTemplate where="info" codeGenCondition="$(_InfoIrqGuard)" condition="=(_hardwareIrqCount>1)"
      variables="irq_enum"
      immediateVariables="_hardwareIrqCount">
   <![CDATA[
      \t   for(int index=0; index<$(_hardwareIrqCount); index++) {
      \t      if (init.callbacks[index] != nullptr) {
      \t         // Configure call-back
      \t         setCallback(%returnType0(index), init.callbacks[index]);
      \t         enableNvicInterrupts(%returnType0(index), init.priorities[index]);
      \t      }
      \t   }
      \t\n
   ]]>
   </variableTemplate>
   <template where="info" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t   $(_BasicInfo)::configure($(_basename), init);
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <template where="info" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr $(_BasicInfo)::Init DefaultInitValue = {\n
   ]]>
   </template>

   <variableTemplate where="info" codeGenCondition="$(_InfoGuard)"
      separator=","
      terminator=","
      padToComments="45"
      variables="
            cmt_msc_mode,
            cmt_pps_ppsdiv,
            cmt_msc_cmtdiv,
            cmt_oc_output,
            cmt_dma_irq,
            cmt_cgh1_ph,
            cmt_cgl1_pl,
            cmt_cgh2_sh,
            cmt_cgl2_sl,
            cmt_mark,
            cmt_space
         " >
   <![CDATA[
      \t%initNonZeroValues
      \t};
      \t\n
   ]]>
   </variableTemplate>

<!-- ====================================================================================================== -->
<!--     END Info class      -->
<!-- ====================================================================================================== -->
<!-- ====================================================================================================== -->
<!--     Common      -->
<!-- ====================================================================================================== -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class representing a Carrier Modulator Transmitter.
      \t *
      \t * Typical modes of operation:
      \t * Time mode
      \t *    Waveform alternates between modulation frequency (mark) and idle (space).
      \t *    Modulation waveform is controlled by setPrimaryTiming().
      \t *    Mark/Space time is controlled by setMarkSpaceTiming().
      \t * Baseband mode
      \t *    Waveform alternates between high (mark) and idle (space) without use of modulation.
      \t *    Mark/Space time is controlled by setMarkSpaceTiming().
      \t * FSK mode
      \t *    Waveform changes between two modulation frequencies(mark) separated by idle time (space) i.e.
      \t *    (Primary modulation - idle - Secondary modulation - idle) repeated.
      \t *    Modulation waveforms are controlled by setPrimaryTiming() and setSecondaryTiming().
      \t *    Mark/Space time is controlled by setMarkSpaceTiming().
      \t *    Space time may be set to zero to obtain simple FSK with no idle time.
      \t */
      \ttypedef $(_Info) $(_Class);
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="cmt_files" >
      <copy source="Project_Headers/cmt.h"          target="Project_Headers/cmt.h"          overwrite="true" derived="true" />
      <copy source="Snippets/cmt-example.cpp"       target="Snippets/cmt-example.cpp"       overwrite="true" derived="true" />
      <copy source="Snippets/cmt-sirc-example.cpp"  target="Snippets/cmt-sirc-example.cpp"  overwrite="true" derived="true" />
   </projectActionList>

   <!-- ____ Startup ____ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration ____ -->

   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <!--  ____ Signal mapping ____ -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
