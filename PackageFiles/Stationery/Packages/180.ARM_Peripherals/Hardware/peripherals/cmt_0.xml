<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- cmt_0.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Carrier Modulator Transmitter" >

   <equation key="irq_parameters"             value=""  />
   <equation key="irq_dummy_parameters"       value=""  />
   <equation key="irq_call"                   value=""  />
   <equation key="generateDefault"            value="false"         />
   <equation key="configureInStartupDefault"  value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Baseclass)BasicInfo&quot;" />

   <!-- ************* MSC ****************** -->

   <choiceOption key="cmt_msc_mode"
      enabledBy="enablePeripheralSupport"
      valueFormat="CMT_MSC_MCGEN(%s),CMT_MSC_BASE(%s),CMT_MSC_FSK(%s)"
      toolTip="Selects between Time, Baseband, FSK and direct modes"
      description="Mode of operation"
      typeName="CmtMode"
      >
      <choice name="Direct"           value="0,0,0"  enum="Direct"
      toolTip="The output is controlled by IROL"
      />
      <choice name="Time"             value="1,0,0"  enum="Time"
         toolTip="Waveform alternates between modulation frequency (mark) and idle (space).\n
                  Modulation waveform is controlled by setPrimaryTiming().\n
                  Mark/Space time is controlled by setMarkSpaceTiming()."
      />
      <choice name="Baseband"         value="1,1,0"  enum="Baseband"
         toolTip="Waveform alternates between high (mark) and idle (space) without use of modulation.\n
                  Mark/Space time is controlled by setMarkSpaceTiming()."
      />
      <choice name="FreqShiftKeying"  value="1,0,1"  enum="FreqShiftKeying"
         toolTip="Waveform changes between two modulation frequencies(mark) separated by idle time (space) i.e.\n
                   (Primary modulation - idle - Secondary modulation - idle) repeated.\n
                   Modulation waveforms are controlled by setPrimaryTiming() and setSecondaryTiming().\n
                   Mark/Space time is controlled by setMarkSpaceTiming().\n
                   Space time may be set to zero to obtain simple FSK with no idle time."
      />
   </choiceOption>

   <binaryOption key="cmt_msc_eocf" condition="cmt_msc_eocf_present"
      enabledBy="enablePeripheralSupport"
      hidden="true"
      typeName="CmtStatus"
      toolTip="Sets when:\n
               - The modulator is not currently active and MCGEN is set\n
               - At the end of each modulation cycle while MCGEN is set\n
               Cleared by:\n
               - Calling getStatus() followed by calling getMarkTime(), getSpaceTime() or setMarkSpaceTiming().
               - A DMA cycle"
      description="End Of Cycle Status Flag" >
      <choice name="Cycle not completed"  value="0" enum="CycleIncomplete"/>
      <choice name="Cycle completed"      value="1" enum="CycleCompleted"/>
   </binaryOption >

   <!-- ************* OC ****************** -->

   <choiceOption key="cmt_oc_output" condition="cmt_oc_cmtpol_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="CMT_OC_IROPEN(%s),CMT_OC_CMTPOL(%s)"
      typeName="CmtOutput"
      toolTip="Enables and controls the polarity of the IRO signal.\n
               When enabled, the the IRO signal is an output that drives out either\n
               the CMT transmitter output or the state of IROL depending on whether\n
               MSC[MCGEN] is set or not"
      description="Output Control"
   >
      <choice value="0,0" name="Disabled"    enum="Disabled"    />
      <choice value="1,0" name="Active-low"  enum="ActiveLow"   />
      <choice value="1,1" name="Active-high" enum="ActiveHigh"  />
   </choiceOption>

   <binaryOption  key="cmt_oc_irol" condition="cmt_oc_irol_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmtOutputLevel"
      description="IRO Latch Control"
      toolTip="Reads the state of the IRO latch.\n
               Writing to IROL changes the state of the IRO signal when MSC[MCGEN] is cleared and IROPEN is set"
      >
      <choice value="0" name="Low"  enum="Low"  />
      <choice value="1" name="High" enum="High" />
   </binaryOption>

   <!-- ************* PPS ****************** -->

   <choiceOption key="cmt_pps_ppsdiv" condition="cmt_pps_ppsdiv_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmtClockPrescaler"
      toolTip="Divides the CMT clock to generate the Intermediate Frequency clock\n
               to the secondary prescaler.\n
               This should be chosen to produce a nominal 8MHz frequency from the CMT input clock."
      description="Primary Prescaler Divider"
      enumText="
      \t   CmtClockPrescaler_Auto            = 0xFF,               ///&lt; Calculate divider to generate 8MHz based on Bus clock"
      >
      <choice name="Bus clock / 1"   value="0"  enum="BusClockDivBy1"  />
      <choice name="Bus clock / 2"   value="1"  enum="BusClockDivBy2"  />
      <choice name="Bus clock / 3"   value="2"  enum="BusClockDivBy3"  />
      <choice name="Bus clock / 4"   value="3"  enum="BusClockDivBy4"  />
      <choice name="Bus clock / 5"   value="4"  enum="BusClockDivBy5"  />
      <choice name="Bus clock / 6"   value="5"  enum="BusClockDivBy6"  />
      <choice name="Bus clock / 7"   value="6"  enum="BusClockDivBy7"  />
      <choice name="Bus clock / 8"   value="7"  enum="BusClockDivBy8"  />
      <choice name="Bus clock / 9"   value="8"  enum="BusClockDivBy9"  />
      <choice name="Bus clock / 10"  value="9"  enum="BusClockDivBy10" />
      <choice name="Bus clock / 11"  value="10" enum="BusClockDivBy11" />
      <choice name="Bus clock / 12"  value="11" enum="BusClockDivBy12" />
      <choice name="Bus clock / 13"  value="12" enum="BusClockDivBy13" />
      <choice name="Bus clock / 14"  value="13" enum="BusClockDivBy14" />
      <choice name="Bus clock / 15"  value="14" enum="BusClockDivBy15" />
      <choice name="Bus clock / 16"  value="15" enum="BusClockDivBy16" />
   </choiceOption >

   <intOption key="clockFrequency"
      description="Intermediate frequency (nominally 8MHz)"
      ref="(/SIM/system_bus_clock[0])/(cmt_pps_ppsdiv+1)"
      derived="true"
      units="Hz"
   />
   <choiceOption key="cmt_msc_cmtdiv" condition="cmt_msc_cmtdiv_present"
      enabledBy="enablePeripheralSupport"
      typeName="CmtIntermediatePrescaler"
      toolTip="Causes the CMT to be clocked at the Intermediate frequency divided by 1, 2, 4, or 8"
      description="Intermediate frequency Prescaler"
      >
      <choice name="Intermediate frequency /1" value="0" enum="DivBy1" />
      <choice name="Intermediate frequency /2" value="1" enum="DivBy2" />
      <choice name="Intermediate frequency /4" value="2" enum="DivBy4" />
      <choice name="Intermediate frequency /8" value="3" enum="DivBy8" />
   </choiceOption >

   <binaryOption key="cmt_msc_exspc" condition="cmt_msc_exspc_present"
      hidden="true"
      enabledBy="enablePeripheralSupport"
      typeName="CmtExtendedSpace"
      toolTip="Enables the extended space operation."
      description="Extended Space Enable" >
      <choice name="Disabled"    value="0" enum="Disabled" />
      <choice name="Enabled"     value="1" enum="Enabled" />
   </binaryOption >

   <choiceOption key="cmt_dma_irq" condition="cmt_msc_eocie_present&amp;&amp;cmt_dma_dma_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="CMT_MSC_EOCIE(%s),CMT_DMA_DMA(%s)"
      typeName="CmtEndOfCycleAction"
      toolTip="Enables a Interrupt or DMA request when EOCIE is set"
      description="End of Cycle Event handling" >
      <choice value="0,0" name="No Action"             enum="None"        />
      <choice value="1,0" name="Interrupt Request"     enum="Interrupt"   />
      <choice value="1,1" name="DMA Transfer Request"  enum="DmaTransfer" />
   </choiceOption>

   <binaryOption key="cmt_msc_eocie" condition="cmt_msc_eocie_present"
      enabledBy="enablePeripheralSupport"
      hidden="true"
      typeName="CmtInterruptEnable"
      toolTip="Requests to enable a CPU interrupt when EOCF is set if EOCIE is high"
      description="End of Cycle Interrupt Enable" >
      <choice name="Interrupt disabled"  value="0" enum="Disabled"/>
      <choice name="Interrupt enabled"   value="1" enum="Enabled"/>
   </binaryOption >

   <!-- ************* DMA ****************** -->

   <binaryOption key="cmt_dma_dma" condition="cmt_dma_dma_present"
      enabledBy="enablePeripheralSupport"
      hidden="true"
      typeName="CmtDma"
      toolTip=""
      description="DMA Transfer Enable" >
      <choice name="DMA disabled"  value="0" enum="Disabled"/>
      <choice name="DMA enabled"   value="1" enum="Enabled"/>
   </binaryOption >

   <!-- ************* CGH1 ****************** -->

   <intOption key="cmt_cgh1_ph" condition="cmt_cgh1_ph_present"
      enabledBy="enablePeripheralSupport"
      baseType="uint8_t"
      typeName="CmtPrimaryCarrierHighTime"
      description="Primary Carrier High Time Data Value"
      toolTip="Contains the number of input clocks required to generate the carrier high time period.\n
               When operating in Time mode, this register is always selected.\n
               When operating in FSK mode, this register and the secondary register pair are\n
               alternately selected under the control of the modulator.\n
               The primary carrier high time value is undefined out of reset.\n
               This register must be written to nonzero values before the carrier \n
               generator is enabled to avoid spurious results."
      value="0"
   />

   <!-- ************* CGL1 ****************** -->

   <intOption key="cmt_cgl1_pl" condition="cmt_cgl1_pl_present"
      enabledBy="enablePeripheralSupport"
      baseType="uint8_t"
      typeName="CmtPrimaryCarrierLowTime"
      description="Primary Carrier Low Time Data Value"
      toolTip="Contains the number of input clocks required to generate the carrier low time period.\n
               When operating in Time mode, this register is always selected.\n
               When operating in FSK mode, this register and the secondary register pair are\n
               alternately selected under the control of the modulator.\n
               The primary carrier low time value is undefined out of reset.\n
               This register must be written to nonzero values before the carrier generator\n
               is enabled to avoid spurious results."
      value="0"
   />

   <!-- ************* CGH2 ****************** -->

   <intOption key="cmt_cgh2_sh" condition="cmt_cgh2_sh_present"
      enabledBy="enablePeripheralSupport"
      baseType="uint8_t"
      typeName="CmtSecondaryCarrierHighTime"
      description="Secondary Carrier High Time Data Value"
      toolTip="Contains the number of input clocks required to generate the carrier high time period.\n
               When operating in Time mode, this register is never selected.\n
               When operating in FSK mode, this register and the primary register pair are\n
               alternately selected under control of the modulator.\n
               The secondary carrier high time value is undefined out of reset.\n
               This register must be written to nonzero values before the carrier generator\n
               is enabled when operating in FSK mode."
      value="0"
   />

   <!-- ************* CGL2 ****************** -->

   <intOption key="cmt_cgl2_sl" condition="cmt_cgl2_sl_present"
      enabledBy="enablePeripheralSupport"
      baseType="uint8_t"
      typeName="CmtSecondaryCarrierLowTime"
      description="Secondary Carrier Low Time Data Value"
      toolTip="Contains the number of input clocks required to generate the carrier low time period.\n
               When operating in Time mode, this register is never selected.\n
               When operating in FSK mode, this register and the primary register pair are\n
               alternately selected under the control of the modulator.\n
               The secondary carrier low time value is undefined out of reset.\n
               This register must be written to nonzero values before the carrier generator\n
               is enabled when operating in FSK mode."
      value="0"
   />

   <!-- ************* CMD1/CMD2 ****************** -->

   <intOption key="cmt_mark" condition="cmt_cmd1_mb_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="%s"
      baseType="uint16_t"
      typeName="CmtMarkPeriod"
      description="Mark period"
      toolTip="Controls the mark period of the modulator for all modes"
      value="0"
   />

   <!-- ************* CMD3/CMD4 ****************** -->

   <intOption key="cmt_space" condition="cmt_cmd3_sb_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="%s"
      baseType="uint16_t"
      typeName="CmtSpacePeriod"
      description="Space period"
      toolTip="Controls the space periods of the modulator for all modes"
      value="0"
   />

   <!-- ____ Setters and Getters ____________ -->

   <for keys="field           : get   : set   : clear : genCode                 : name"
        values="
         cmt_oc_irol          : true  : true  : false : enableGettersAndSetters : OutputState;
         cmt_msc_mode         : true  : true  : false : enableGettersAndSetters : Mode;
         cmt_msc_eocf         : true  : false : false : true                    : EndOfCycleFlag;
         cmt_msc_cmtdiv       : true  : true  : false : enableGettersAndSetters : Prescaler;
         cmt_msc_exspc        : true  : true  : false : true                    : ExtendedSpace;
         cmt_oc_output        : false : true  : false : enableGettersAndSetters : OutputControl;
         cmt_dma_dma          : true  : true  : false : enableGettersAndSetters : DmaControl" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Clear %description
         \t *
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate variables="cmt_dma_irq" codeGenCondition="enableGettersAndSetters"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tstatic void setEndOfCycleAction(%params) {
      \t
      \t   cmt->MSC = (cmt->MSC&~CMT_MSC_EOCIE_MASK)|CMT_MSC_EOCIE(%paramName);
      \t   cmt->DMA = (cmt->DMA&~CMT_DMA_DMA_MASK)  |CMT_DMA_DMA(%paramName);
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \tstatic %paramType getEndOfCycleAction() {
      \t   return %paramType((cmt->MSC&~CMT_MSC_EOCIE_MASK)|(cmt->DMA&~CMT_DMA_DMA_MASK));
      \t}
      \t\n
   ]]></variableTemplate>

   <variableTemplate variables="cmt_pps_ppsdiv"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tstatic void setClockDivider(%params) {
      \t
      \t   if (%paramName == %paramType_Auto) {
      \t      %paramName = CmtClockPrescaler(((SystemBusClock+4000000)/8000000)-1);
      \t   }
      \t   %fieldAssignment;
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \tstatic %paramType getClockDivider() {
      \t   return %paramType(%register&%mask);
      \t}
      \t\n
   ]]></variableTemplate>

   <variableTemplate variables="cmt_mark" codeGenCondition="enableGettersAndSetters"
      paramTypes="Ticks"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tstatic void setMarkPeriod(%params) {
      \t   cmt->CMD1    = uint8_t(%paramExpression>>8);
      \t   cmt->CMD2    = uint8_t(%paramExpression);
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \tstatic %paramType getMarkPeriod() {
      \t   return %paramType((cmt->CMD1<<8)+cmt->CMD2);
      \t}
      \t\n
   ]]></variableTemplate>

   <variableTemplate variables="cmt_space" codeGenCondition="enableGettersAndSetters"
      paramTypes="Ticks"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tstatic void setSpacePeriod(%params) {
      \t   cmt->CMD3    = uint8_t(%paramExpression>>8);
      \t   cmt->CMD4    = uint8_t(%paramExpression);
      \t}
      \t
      \t/**
      \t * Get %description
      \t *
      \t * @return %tooltip
      \t */
      \tstatic %paramType getSpacePeriod() {
      \t   return %paramType((cmt->CMD3<<8)+cmt->CMD4);
      \t}
      \t\n
   ]]></variableTemplate>

   <variableTemplate variables="cmt_mark,cmt_space"
      nonDefaultParams="2"
      paramTypes="Ticks,Ticks"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      %paramDescription
      \t */
      \tstatic void setMarkSpacePeriod(
      %params) {
      \t   cmt->CMD1    = uint8_t(%paramName0>>8);
      \t   cmt->CMD2    = uint8_t(%paramName0);
      \t   cmt->CMD3    = uint8_t(%paramName1>>8);
      \t   cmt->CMD4    = uint8_t(%paramName1);
      \t}
      \t\n
   ]]></variableTemplate>

   <variableTemplate variables="cmt_cgh1_ph,cmt_cgl1_pl" codeGenCondition="enableGettersAndSetters"
      nonDefaultParams="2"
      paramTypes="Ticks,Ticks"
   ><![CDATA[
      \t/**
      \t * Set %description0 and %description1
      \t *
      %paramDescription
      \t */
      \tstatic void setPrimaryTiming(
      %params) {
      \t   %register0 = %paramName0;
      \t   %register1 = %paramName1;
      \t}
      \t\n
   ]]></variableTemplate>

   <variableTemplate variables="cmt_cgh2_sh,cmt_cgl2_sl" codeGenCondition="enableGettersAndSetters"
      nonDefaultParams="2"
      paramTypes="Ticks,Ticks"
   ><![CDATA[
      \t/**
      \t * Set %description0 and %description1
      \t *
      %paramDescription
      \t */
      \tstatic void setSecondaryTiming(
      %params) {
      \t   %register0 = %paramName0;
      \t   %register1 = %paramName1;
      \t}
      \t\n
   ]]></variableTemplate>

   <!--  ___ Init class ______________ -->

   <template key="/$(_BASENAME)/init_description" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *
      \t *   CmtMode_Direct ,                    // Mode of operation - Direct
      \t *   CmtClockPrescaler_BusClockDivBy1 ,  // Primary Prescaler Divider - Bus clock / 1
      \t *   CmtIntermediatePrescaler_DivBy1 ,   // Intermediate frequency Prescaler - Intermediate frequency /1
      \t *   CmtOutput_Disabled ,                // Output Control - Disabled
      \t *   CmtMscEocie_InterruptDisabled ,     // End of Cycle Interrupt Enable - Interrupt disabled
      \t *   CmtDmaDma_DmaDisabled ,             // DMA Transfer Enable - DMA disabled
      \t *   CmtPrimaryCarrierHighTime(0) ,      // Primary Carrier High Time Data Value
      \t *   CmtPrimaryCarrierLowTime(0) ,       // Primary Carrier Low Time Data Value
      \t *   CmtSecondaryCarrierHighTime(0) ,    // Secondary Carrier High Time Data Value
      \t *   CmtSecondaryCarrierLowTime(0) ,     // Secondary Carrier Low Time Data Value
      \t *   CmtMarkPeriod(0) ,                  // Mark period
      \t *   CmtSpacePeriod(0),                  // Space period
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
   ]]>
   </template>

   <template where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      $(/$(_BASENAME)/init_description)
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!-- ____ Init class Member variables ________ -->

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_cgh1_ph"
   ><![CDATA[
      \t   /// Carrier Generator High Data Register 1
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_cgl1_pl"
   ><![CDATA[
      \t   /// Carrier Generator Low Data Register 1
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_cgh2_sh"
   ><![CDATA[
      \t   /// Carrier Generator High Data Register 2
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_cgl2_sl"
   ><![CDATA[
      \t   /// Carrier Generator Low Data Register 2
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_oc_output"
   ><![CDATA[
      \t   /// Output Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_msc_cmtdiv,cmt_msc_mode"
   ><![CDATA[
      \t   /// Modulator Status and Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_mark"
   ><![CDATA[
      \t   /// Modulator Data Register Mark
      \t   uint16_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_space"
   ><![CDATA[
      \t   /// Modulator Data Register Space
      \t   uint16_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_pps_ppsdiv"
   ><![CDATA[
      \t   /// Primary Prescaler Register
      \t   %paramType %registerName = CmtClockPrescaler_Auto;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_dma_irq"
   ><![CDATA[
      \t   /// %description
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            cmt_oc_output;
            cmt_oc_irol;
            cmt_msc_cmtdiv;
            cmt_msc_mode
            " >
      <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="cmt_dma_irq"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      // Parameter contains non-overlapping bit fields from two registers
      \t      dma = (dma & ~CMT_DMA_DMA_MASK)   | (CMT_DMA_DMA_MASK & %paramName);
      \t      msc = (msc & ~CMT_MSC_EOCIE_MASK) | (CMT_MSC_EOCIE_MASK & %paramName);
      \t   }
      \t\n
   ]]>
   </variableTemplate>

   <for keys="r"
      values="
            cmt_mark;
            cmt_space;
            cmt_cgh1_ph;
            cmt_cgl1_pl;
            cmt_cgh2_sh;
            cmt_cgl2_sl;
            cmt_pps_ppsdiv
            " >
      <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
      %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <!-- ____ Init class Configure method ____ -->

   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enableClock();
      \t\n
   ]]></template>
   <template codeGenCondition="/$(_BASENAME)/irqHandlingMethod" condition="/$(_BASENAME)/irqHandlingMethod" >   <![CDATA[
      \t   // Set call-backs
      \t   setCallback(init.callbackFunction);
      \t   enableNvicInterrupt(irqNums[0], init.irqlevel);
      \t\n
   ]]></template>
   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t   cmt->MSC     = 0;
      \t   cmt->CGH1    = init.cgh1;
      \t   cmt->CGL1    = init.cgl1;
      \t   cmt->CGH2    = init.cgh2;
      \t   cmt->CGL2    = init.cgl2;
      \t   cmt->OC      = init.oc;
      \t   cmt->DMA     = init.dma;
      \t   cmt->CMD1    = uint8_t(init.mark>>8);
      \t   cmt->CMD2    = uint8_t(init.mark);
      \t   cmt->CMD3    = uint8_t(init.space>>8);
      \t   cmt->CMD4    = uint8_t(init.space);
      \t   setClockDivider(init.pps);
      \t
      \t   cmt->MSC     = init.msc;
      \t}
      \t\n
   ]]>
   </template>

<!-- ____  Default Initialisation value ____  -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            cmt_msc_mode,
            cmt_pps_ppsdiv,
            cmt_msc_cmtdiv,
            cmt_oc_output,
            cmt_dma_irq,
            cmt_cgh1_ph,
            cmt_cgl1_pl,
            cmt_cgh2_sh,
            cmt_cgl2_sl,
            cmt_mark,
            cmt_space,
            irqLevel
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

   <template where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
      <![CDATA[
      \t}; // class $(_Baseclass)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <!-- ************* SIM controls ****************** -->

   <category name="Advanced" description="Pin mapping and clock enables" >
    <!-- None -->
   </category>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)_T<$(_Class)Info> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="cmt_files" >
      <copy source="Project_Headers/cmt.h"          target="Project_Headers/cmt.h"          overwrite="true" derived="true" />
      <copy source="Snippets/cmt-example.cpp"       target="Snippets/cmt-example.cpp"       overwrite="true" derived="true" />
      <copy source="Snippets/cmt-sirc-example.cpp"  target="Snippets/cmt-sirc-example.cpp"  overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->

   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
