<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- osc0_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="System Oscillator" >

   <equation key="irq_parameters"             value=""          />
   <equation key="irq_dummy_parameters"       value=""          />
   <equation key="irq_call"                   value=""          />
   <equation key="generateDefault"            value="false"     />
   <equation key="configureInStartupDefault"  value="false"     />
   <xi:include href="enablePeripheral.xml"    />
   <title />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Class)Info : public $(_Structname)BasicInfo"' />

   <!-- ____ CR ____ -->
   <title description="Control Register" />

   <binaryOption key="osc_cr_oscen" condition="osc_cr_oscen_present"
      enabledBy="enablePeripheralSupport"
      typeName="OscCrOscen"
      baseType="uint8_t"
      toolTip="Enables the OSC module. The OSC module can also be enabled by the ICS module"
      description="OSC Enable" >
      <choice name="OSC disabled"  value="0" enum="OscDisabled" />
      <choice name="OSC enabled"   value="1" enum="OscEnabled" />
   </binaryOption >

   <binaryOption key="osc_cr_oscsten" condition="osc_cr_oscsten_present"
      enabledBy="enablePeripheralSupport"
      typeName="OscCrOscsten"
      baseType="uint8_t"
      toolTip="Controls whether or not the OSC clock remains enabled when MCU enters Stop mode and OSCEN is set.\n
               OSCSTEN has no effect if ICS requests OSC enable"
      description="OSC Enable in Stop mode" >
      <choice name="Disabled in Stop mode"  value="0" enum="DisabledInStopMode" />
      <choice name="Enabled in Stop mode"   value="1" enum="EnabledInStopMode" />
   </binaryOption >

   <binaryOption key="osc_cr_oscos" condition="osc_cr_oscos_present"
      enabledBy="enablePeripheralSupport"
      typeName="OscCrOscos"
      baseType="uint8_t"
      toolTip="Selects the output clock of the OSC module"
      description="OSC Output Select" >
      <choice name="External clock source"    value="0" enum="ExternalClockSource" />
      <choice name="Oscillator clock source"  value="1" enum="OscillatorClockSource" />
   </binaryOption >

   <binaryOption key="osc_cr_range" condition="osc_cr_range_present"
      enabledBy="enablePeripheralSupport"
      typeName="OscCrRange"
      baseType="uint8_t"
      toolTip="Selects the frequency range for the OSC module"
      description="Frequency Range Select" >
      <choice name="Low range of 32 kHz"     value="0" enum="LowRangeOf32Khz" />
      <choice name="High range of 4-20 MHz"  value="1" enum="HighRangeOf420Mhz" />
   </binaryOption >

   <binaryOption key="osc_cr_hgo" condition="osc_cr_hgo_present"
      enabledBy="enablePeripheralSupport"
      typeName="OscCrHgo"
      baseType="uint8_t"
      toolTip="Controls the OSC mode of operation"
      description="High Gain Oscillator Select" >
      <choice name="Low-power mode"  value="0" enum="LowPowerMode" />
      <choice name="High-gain mode"  value="1" enum="HighGainMode" />
   </binaryOption >

   <binaryOption key="osc_cr_oscinit" condition="osc_cr_oscinit_present"
      hidden="true"
      typeName="OscCrOscinit"
      baseType="uint8_t"
      toolTip="This field is set after the initialization cycles of oscillator are completed"
      description="OSC Initialization" >
      <choice name="Initialization is not complete"  value="0" enum="InitializationIsNotComplete" />
      <choice name="Initialization is completed"     value="1" enum="InitializationIsCompleted" />
   </binaryOption >

   <!-- ____ Getters and Setters ____________ -->

   <for keys="field                     : set   : get   : clear : genCode                 : name"
        values="

         osc_cr_oscen                   : true  : true  : false : enableGettersAndSetters : CrOscen;
         osc_cr_oscsten                 : true  : true  : false : enableGettersAndSetters : CrOscsten;
         osc_cr_oscos                   : true  : true  : false : enableGettersAndSetters : CrOscos;
         osc_cr_range                   : true  : true  : false : enableGettersAndSetters : CrRange;
         osc_cr_hgo                     : true  : true  : false : enableGettersAndSetters : CrHgo;
         osc_cr_oscinit                 : false : true  : false : enableGettersAndSetters : CrOscinit" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t * (%(field))
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t * (%(field))
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %returnType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
         tooltipPadding="x*x"      ><![CDATA[
         \t/**
         \t * Clear %description
         \t * (%(field))
         \t *
         \t * %tooltip
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!-- ________ OSC Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
XXXXXXXXXXXXXXXXXXXXXX
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tprivate:
      \t   /**
      \t    * Prevent implicit parameter conversions
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(Types...) = delete;
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : osc_cr_oscen,osc_cr_oscsten,osc_cr_oscos,
                             osc_cr_range,osc_cr_hgo                              :   0      ;
               %paramType  : /PCR/nvic_irqLevel                                   :   %defaultValue   " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    * (%variables)
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="/PCR/nvic_irqLevel;
            osc_cr_oscen;osc_cr_oscsten;osc_cr_oscos;
            osc_cr_range;osc_cr_hgo;
            " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%variables)
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <!-- ____ Init class Configure method ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral
      \t   enable();
      \t\n
   ]]>
   </template>
   <template codeGenCondition="irqHandlingMethod" condition="irqHandlingMethod" >
   <![CDATA[
      \t   // Configure call-backs
      \t   setCallback(init.callbackFunction);\n
   ]]>
   </template>
   <for keys=
             " var                                                    : statement            "
      values=" irqLevel                                               : enableNvicInterrupts(init.irqlevel) ;
               osc_cr_oscen,osc_cr_oscsten,osc_cr_oscos,
               osc_cr_range,osc_cr_hgo                                : %configRegAssignment " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            osc_cr_oscen,
            osc_cr_oscsten,
            osc_cr_oscMode,
            osc_cr_range
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]>
   </variableTemplate>

   <template><![CDATA[
      \t/**
      \t * Get OSC clock
      \t *
      \t * @return Clock frequency as uint32_t in Hz
      \t */
      \tstatic uint32_t getOscClock() {
      \t   switch(osc->CR&(OSC_CR_OSCINIT_MASK|OSC_CR_OSCOS_MASK)) {
      \t      case OSC_CR_OSCINIT(0)|OSC_CR_OSCOS(0):
      \t      case OSC_CR_OSCINIT(1)|OSC_CR_OSCOS(0):
      \t         // External clock - assume valid
      \t         return osc_clock;
      \t         break;
      \t      case OSC_CR_OSCINIT(1)|OSC_CR_OSCOS(1):
      \t         // Oscillator selected and valid
      \t         return (osc->CR&OSC_CR_OSCINIT_MASK)?osc_clock:0;
      \t      default :
      \t         return 0;
      \t      break;
      \t   }
      \t}\n\n
   ]]></template>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};
      \t//typedef $(_Baseclass)Base_T<$(_Class)Info> $(_Class);
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="osc0_files" >
      <copy source="Project_Headers/osc-MKE.h"  target="Project_Headers/osc.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->
   <!-- Already included -->
   <!-- template key="/ICS/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template -->

   <template key="/ICS/ClockStartupBefore" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="These settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <!--  ____ Signal mapping __________________ -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
