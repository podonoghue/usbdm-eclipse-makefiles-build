<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- kbi0_mke02.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Keyboard interrupts" >

   <option key="debugGuards" value="true" />


   <!-- ____ Class Declarations ________ -->
   <constant key="_basicInfo_declaration" type="String" value='"$(_BasicInfo)"' />
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <constant key="captureSize"       type="String"  value='"8"'  />

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <!-- ____ Instance control ________ -->
   <constant key="_can_create_instance" value="true" type="Boolean" />

   <equation key="irq_parameters"             value=""          />
   <equation key="irq_dummy_parameters"       value=""          />
   <equation key="irq_call_parameters"        value=""          />
   <equation key="generateDefault"            value="false"     />
   <equation key="configureInStartupDefault"  value="false"     />
   <xi:include href="enablePeripheral.xml"  />
   <title />


   <!--
      Common shared by all KBIs
      Used as underlying value for user code configuring individual pins
   -->
   <choiceOption key="kbi_pe_indexshared"
      valueFormat="%s"
      hidden="true"
      derived="true"
      typeName="KbiPinIndex"
      baseType="uint8_t"
      description="KBI Pin Index"
      toolTip="Selects KBI pin" >
      <choiceExpansion value="%(i)" name="Enable Pin #%(i)" enum="Pin%(i)" keys="i" dim="=captureSize" />
   </choiceOption>

   <!-- KBI Specific values based on kbi_pin_sharedIndex -->
   <choiceOption key="kbi_pe_index"
      valueFormat="%s"
      hidden="true"
      derived="true"
      typeName="Kbi$(_instance)PinIndex"
      baseType="KbiPinIndex"
      generateAsConstants="true"
      description="KBI$(_instance) Pin Index"
      toolTip="Selects KBI$(_instance) pin" >
      <choiceExpansion value="KbiPinIndex_Pin%(i)" name="Pin %(pin)"
                       enum='=touppercase("%(pin)")' keys="pin" values='=ExpandPinList(inputPinMap,";")'
                       signal="KBI0_P%(i)" />
   </choiceOption>

   <!-- ____ PE ____ -->

   <choiceOption key="kbi_pe_kbipeShared"
      valueFormat="%s"
      hidden="true"
      derived="true"
      generateOperators="true"
      typeName="KbiEnableMask"
      baseType='="uint"+captureSize+"_t"'
      description="KBI Common Pin Enable Masks"
      toolTip="These are used for the underlying pin enable masks for all KBIs" >
      <choiceExpansion value="1U&lt;&lt;%(i)" name="Enable Pin Mask #%(i)" enum="Pin%(i)" keys="i" dim="=captureSize" />
   </choiceOption>

   <bitmaskOption key="kbi_pe_kbipe" condition="kbi_pe_kbipe_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="%s"
      typeName="Kbi$(_instance)EnableMask"
      baseType="KbiEnableMask"
      description="KBI$(_instance) Pin Enables"
      toolTip="Bitmask selecting enabled pins"
      generateAsConstants="true"
      bitmask="0"
      bitList="=inputPinMap"
      pinMap='="KBI$(_instance)_P%i:"+inputPinMap'
      value="0"
   />

   <!-- ____ ES ____ -->

   <choiceOption key="kbi_es_sharedPolarityMask"
      valueFormat="%s"
      hidden="true"
      derived="true"
      generateOperators="true"
      typeName="KbiPolarityMask"
      baseType='="uint"+captureSize+"_t"'
      description="KBI Common Pin Polarity Masks"
      toolTip="These are used for the underlying pin polarity masks for all KBIs\n
               Mask value indicates Rising-edge/high-level selected" >
      <choiceExpansion value="1U&lt;&lt;%(i)" name="Enable Pin Mask #%(i)" enum="Pin%(i)" keys="i" dim="=captureSize" />
   </choiceOption>

   <bitmaskOption key="kbi_es_kbedg" condition="kbi_es_kbedg_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="%s"
      typeName="Kbi$(_instance)PolarityMask"
      baseType="KbiPolarityMask"
      generateAsConstants="true"
      description="Kbi$(_instance) Edge Selects"
      toolTip="Bitmask selecting polarity : 0=Falling edge/low level; 1=Rising edge/high level"
      bitmask="0"
      bitList="=inputPinMap"
      value="0"
   />

   <!-- ____ SC ____ -->

   <binaryOption key="kbi_sc_kbspen" condition="kbi_sc_kbspen_present"
      enabledBy="enablePeripheralSupport"
      typeName="KbiStatusReflects"
      baseType="uint8_t"
      description="Real KBI_SP register enable"
      toolTip="The SP register may show either the current KBI pin values or\n
               the value captured when interrupt flag was set" >
      <choice name="Current value"  value="0" enum="CurrentValue"/>
      <choice name="Latched value"  value="1" enum="LatchedValue"/>
   </binaryOption >

   <binaryOption key="kbi_sc_kbf" condition="kbi_sc_kbf_present"
      enabledBy="enablePeripheralSupport"
      hidden="true"
      typeName="KbiEvent"
      baseType="uint8_t"
      description="KBI Interrupt Flag"
      toolTip="Indicates when a KBI interrupt request is detected.\n
               Writes have no effect on KBF." >
      <choice name="Not detected"  value="0" enum="None"/>
      <choice name="Detected"      value="1" enum="InterruptDetected"/>
   </binaryOption >

   <binaryOption key="kbi_sc_kback" condition="kbi_sc_kback_present"
      derived="true"
      hidden="true"
      typeName="KbiAck"
      baseType="uint8_t"
      description="KBI Acknowledge"
      toolTip="Writing a 1 to KBACK is part of the flag clearing mechanism" >
      <choice name="Clear"      value="1" enum="Write1ToClear"/>
   </binaryOption >

   <binaryOption key="kbi_sc_rstkbsp" condition="kbi_sc_rstkbsp_present"
      enabledBy="enablePeripheralSupport"
      hidden="true"
      derived="true"
      typeName="KbiRst"
      baseType="uint8_t"
      description="Reset KBI_SP register"
      toolTip="Writing a 1 to RSTKBSP is to clear the KBIxSP Register. This bit always reads as 0" >
      <choice name="Clear"      value="1" enum="Write1ToClear"/>
   </binaryOption >

   <binaryOption key="kbi_sc_kbie" condition="kbi_sc_kbie_present"
      enabledBy="enablePeripheralSupport"
      typeName="KbiInterrupt"
      baseType="uint8_t"
      description="KBI Interrupt Enable"
      toolTip="Determines whether a KBI interrupt is enabled or not." >
      <choice name="Interrupt disabled"  value="0" enum="Disabled"/>
      <choice name="Interrupt enabled"   value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="kbi_sc_kbmod" condition="kbi_sc_kbmod_present"
      enabledBy="enablePeripheralSupport"
      typeName="KbiDetectionMode"
      baseType="uint8_t"
      description="KBI Detection Mode"
      toolTip="KBMOD (along with ES[KBEDG]) controls the detection mode of the KBI interrupt pins." >
      <choice name="Edges only"       value="0" enum="EdgesOnly"/>
      <choice name="Edges or levels"  value="1" enum="EdgesOrLevels"/>
   </binaryOption >

   <!-- ____ SP ____ -->

   <intOption key="kbi_sp_sp" condition="kbi_sp_sp_present"
      hidden="true"
      derived="true"
      typeName="KbiSourcePin"
      baseType="uint32_t"
      description="Active KBI Source Pins"
      toolTip="Bit-mask showing active pins\n
               This may show the currently active pins or\n
               those recorded at the last event time. (See KBSPEN)"
      value="0"
      min="0" max="0"
   />
<!-- ====================================================================================================== -->
<!--     START BasicInfo Class      -->
<!-- ====================================================================================================== -->

   <!-- BasicInfo Instance pointer and Constructors  -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t// Pointer to $(_BASENAME) hardware instance
      \tvolatile $(_Type) * const $(_basename);
      \t\n
   ]]></template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Constructor
      \t *
      \t * @param $(_basename) $(_BASENAME) hardware instance
      \t */
      \tconstexpr $(_BasicInfo)(volatile $(_Type) * $(_basename)) : $(_basename)($(_basename)) {
      \t}
      \t\n
   ]]></template>

<!-- ====================================================================================================== -->
<!--     START BasicInfo/Info duplicated methods -->
<!-- ====================================================================================================== -->

<for
   keys="   static    : const    : where     : guard                                      "
   values=" ''        : 'const ' : basicInfo : $(_BasicInfoGuard)                         ;
            'static ' : ''       : info      : $(_InfoGuard)                              "  >

   <!-- ____ Getters and Setters ____________ -->

   <for keys="field                     : set   : get   : clear : genCode                 : name"
        values="

         kbi_pe_kbipeShared             : true  : true  : false : enableGettersAndSetters : EnabledPins;

         kbi_es_sharedPolarityMask      : true  : true  : false : enableGettersAndSetters : PinPolarity;

         kbi_sc_rstkbsp                 : false : false : true  : enableGettersAndSetters : ResetSourcePin;
         kbi_sc_kbspen                  : true  : true  : false : enableGettersAndSetters : Status;
         kbi_sc_kbf                     : true  : false : false : enableGettersAndSetters : InterruptFlag;
         kbi_sc_kback                   : true  : false : false : enableGettersAndSetters : Acknowledge;
         kbi_sc_kbie                    : true  : true  : false : enableGettersAndSetters : InterruptEnable;
         kbi_sc_kbmod                   : true  : true  : false : enableGettersAndSetters : DetectionMode;

         kbi_sp_sp                      : false : true  : false : enableGettersAndSetters : SourcePin" >
      <variableTemplate location="%(where)" condition="%(set)" codeGenCondition="%(genCode)&amp;&amp;%(guard)"
         variables="%(field)" >
      <![CDATA[
         \t/**
         \t * Set %description
         \t * (%variables)
         \t *
         %paramDescription
         \t */
         \t%(static)void set%(name)(%params) %(const){
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]>
      </variableTemplate>
      <variableTemplate location="%(where)" condition="%(get)" codeGenCondition="%(genCode)&amp;&amp;%(guard)"
         variables="%(field)" >
      <![CDATA[
         \t/**
         \t * Get %description
         \t * (%variables)
         \t *
         \t * @return %tooltip
         \t */
         \t%(static)%returnType get%(name)() %(const){
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]>
      </variableTemplate>
      <variableTemplate location="%(where)" condition='="w1c"=="%(clear)"' codeGenCondition="%(genCode)&amp;&amp;%(guard)"
         variables="%(field)"
         tooltipPadding="x*x" >
      <![CDATA[
         \t/**
         \t * Clear %description
         \t * (%variables)
         \t *
         %paramDescription
         \t */
         \t%(static)void clear%(name)(%params) %(const){
         \t   // w1c and mixed register
         \t   %register = %register|%paramExpression;
         \t}
         \t\n
      ]]>
      </variableTemplate>
      <variableTemplate location="%(where)" condition='="w1cIm"=="%(clear)"' codeGenCondition="%(genCode)&amp;&amp;%(guard)"
         variables="%(field)"
         tooltipPadding="x*x" >
      <![CDATA[
         \t/**
         \t * Clear %description
         \t * (%variables)
         \t *
         \t * %tooltip
         \t */
         \t%(static)void clear%(name)() %(const){
         \t   // w1c and mixed register
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <variableTemplate location="%(where)" codeGenCondition="%(guard)"
      variables="kbi_pe_indexshared,/Common/polarity,kbi_es_sharedPolarityMask"
      params="kbi$(_instance)PinIndex,"
      defaultParamValue=",ActiveHigh" >
   <![CDATA[
      \t/**
      \t * Enable input with polarity selection
      \t * (%variables)
      \t *
      %paramDescription0
      %paramDescription1
      \t */
      \t%(static)void enablePin(%param0,
      \t                      %param1) %(const){
      \t
      \t   const uint8_t mask = 1U<<unsigned(%paramName0);
      \t
      \t   %register0 = %register0 | mask;
      \t   %register2 = (%register2&~mask) | (~%paramName1&mask);
      \t}
      \t
      \t/**
      \t * Disable input
      \t * (%variables)
      \t *
      %paramDescription0
      \t */
      \t%(static)void disablePin(%param0) %(const){
      \t
      \t   const uint8_t mask = 1U<<unsigned(%paramName0);
      \t
      \t   %register0 = %register0 & ~mask;
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate location="%(where)" codeGenCondition="%(guard)" condition="!kbi_sp_sp_present"
      variables="kbi_sc_kback,kbi_sc_rstkbsp" >
   <![CDATA[
      \t/**
      \t * Clear status
      \t * (%variables)
      \t */
      \t%(static)void clearStatus() %(const){
      \t
      \t   %register = %mask;
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate location="%(where)" codeGenCondition="%(guard)" condition="kbi_sp_sp_present"
      variables="kbi_sc_kback,kbi_sc_rstkbsp,kbi_sp_sp"
      params=",,*" >
   <![CDATA[
      \t/**
      \t * Get and clear status
      \t * (%variables)
      \t *
      \t * @return %tooltip2
      \t */
      \t%(static)%returnType2 getAndClearStatus() %(const){
      \t
      \t   %returnType2 temp = %returnType2(%register2);
      \t   %register1           = %mask0|%mask1;
      \t
      \t   return temp;
      \t}
      \t\n
   ]]>
   </variableTemplate>
</for>

<!-- ====================================================================================================== -->
<!--     START BasicInfo::Init class      -->
<!-- ====================================================================================================== -->
   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
XXXXXXXXXXXXXXXXXXXXXX
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tprivate:
      \t   /**
      \t    * Prevent implicit parameter conversions
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(Types...) = delete;
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ BasicInfo::Init class Member variables ________ -->

   <for keys=" type      : variables                                            : init    "
       values="%baseType : kbi_pe_kbipeShared                                   :   0      ;
               %baseType : kbi_es_sharedPolarityMask                            :   0      ;
               %baseType : kbi_sc_rstkbsp,kbi_sc_kbspen,kbi_sc_kbf,kbi_sc_kback,
                           kbi_sc_kbie,kbi_sc_kbmod                             :   0      " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(variables)"
         linePadding="xxx" >
      <![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]>
      </variableTemplate>
   </for>

   <!-- ____ BasicInfo::Init class Constructors ____________ -->

   <for keys="r"
      values="
            kbi_pe_kbipeShared;
            kbi_es_sharedPolarityMask;
            kbi_sc_rstkbsp;kbi_sc_kbspen;kbi_sc_kbf;
            kbi_sc_kback;kbi_sc_kbie;kbi_sc_kbmod
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%variables)
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="kbi_pe_indexshared,/Common/polarity,kbi_es_sharedPolarityMask"
      defaultParamValue=",ActiveHigh" >
   <![CDATA[
      \t/**
      \t * Constructor for Input with polarity selection
      \t * (%variables)
      \t *
      \t * @tparam   Types
      \t * @param    rest
      \t *
      %paramDescription0
      %paramDescription1
      \t */
      \ttemplate <typename... Types>
      \tconstexpr Init(%param0,
      \t               %param1, Types... rest) : Init(rest...) {
      \t
      \t   const uint32_t mask  = 1<<unsigned(%paramName0);
      \t
      \t   %registerName0 |= KbiEnableMask(mask);
      \t   %registerName2 = (%registerName2&~mask) | (~%paramName1&mask);
      \t}
      \t\n
   ]]>
   </variableTemplate>
   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

<!-- ====================================================================================================== -->
<!--     END BasicInfo::Init class      -->
<!-- ====================================================================================================== -->

   <!-- ____ BasicInfo class Configure methods ____ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      linePadding="xxx" >
   <![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t * This routine does not configure pins or interrupt handlers
      \t *
      \t * @param $(_basename)            Hardware instance pointer
      \t * @param init            Class containing initialisation values
      \t */
      \tstatic void configure(
      \t               volatile $(_Type) *$(_basename),
      \t               const Init    &init) {
      \t
      \t\n
   ]]>
   </template>
   <for keys=
             " var                                                    : statement            "
      values=" kbi_sc_kbie,                                           : %register = 0 ;
               kbi_es_kbedg                                           : %configRegAssignment  ;
               kbi_pe_kbipe                                           : %configRegAssignment ;
               kbi_sc_kback,                                          : %register = KBI_SC_KBACK_MASK ;
               kbi_sc_rstkbsp,                                        : %register = KBI_SC_RSTKBSP_MASK ;
               kbi_sc_rstkbsp,kbi_sc_kbspen,kbi_sc_kbf,kbi_sc_kback,
               kbi_sc_kbie,kbi_sc_kbmod                               : %configRegAssignment" >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(var)"
         linePadding="xxx" >
      <![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]>
      </variableTemplate>
   </for>
   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t * This routine does not configure pins or interrupt handlers
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tvoid configure(const Init &init) const {
      \t
      \t   configure($(_basename), init);
      \t}
      \t\n
   ]]>
   </template>
<!-- ====================================================================================================== -->
<!--     END BasicInfo class      -->
<!-- ====================================================================================================== -->
<!-- ====================================================================================================== -->
<!--     START Info class      -->
<!-- ====================================================================================================== -->

   <!-- ____ Info constructors ________ -->

   <template where="info" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t/**
      \t *   Default Constructor
      \t */
      \t$(_Info)() : $(_BasicInfo)($(_basename)) {
      \t   defaultConfigure();
      \t}
      \t
      \t/**
      \t *   Constructor
      \t */
      \t$(_Info)(const Init &init) : $(_BasicInfo)($(_basename)) {
      \t   configure(init);
      \t}
      \t\n
   ]]>
   </template>

   <!-- Init configure methods -->

   <template where="info" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic void defaultConfigure() {
      \t
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral
      \t   enable();
      \t\n
   ]]>
   </template>
   <template where="info" codeGenCondition="$(_InfoIrqGuard)" condition="=(_hardwareIrqCount==1)" >
   <![CDATA[
      \t   // Configure call-back
      \t   if (init.callbacks[0] != nullptr) {
      \t      setCallback(init.callbacks[0]);
      \t      enableNvicInterrupts(init.priorities[0]);
      \t   }
      \t\n
   ]]>
   </template>
   <variableTemplate where="info" codeGenCondition="$(_InfoIrqGuard)" condition="=(_hardwareIrqCount>1)"
      variables="irq_enum"
      immediateVariables="_hardwareIrqCount">
   <![CDATA[
      \t   for(int index=0; index<$(_hardwareIrqCount); index++) {
      \t      if (init.callbacks[index] != nullptr) {
      \t         // Configure call-back
      \t         setCallback(%returnType0(index), init.callbacks[index]);
      \t         enableNvicInterrupts(%returnType0(index), init.priorities[index]);
      \t      }
      \t   }
      \t\n
   ]]>
   </variableTemplate>
   <template where="info" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t   $(_BasicInfo)::configure($(_basename), init);
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <template where="info" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {\n
   ]]>
   </template>
   <xi:include href="irqHandlingInit.xml"    />
   <variableTemplate where="info" codeGenCondition="$(_InfoGuard)"
      separator=","
      terminator=","
      padToComments="40"
      variables="
            kbi_pe_kbipe,
            kbi_es_kbedg,
            kbi_sc_kbspen,kbi_sc_kbie,kbi_sc_kbmod" >
   <![CDATA[
      \t%initExpression\n
   ]]></variableTemplate>
   <template codeGenCondition="$(_InfoGuard)"
   ><![CDATA[
      \t};
      \t\n
   ]]></template>
<!-- ====================================================================================================== -->
<!--     END Info class      -->
<!-- ====================================================================================================== -->
<!-- ====================================================================================================== -->
<!--     Common      -->
<!-- ====================================================================================================== -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class representing $(_STRUCTNAME) instance
      \t */
      \ttypedef $(_BasicInfo) $(_Structname);
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Info)> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="kbi_files" >
      <copy source="Project_Headers/kbi-MKE.h"  target="Project_Headers/kbi.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ____ Startup ____ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration ____ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="These settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <!--  ____ Signal mapping ____ -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
