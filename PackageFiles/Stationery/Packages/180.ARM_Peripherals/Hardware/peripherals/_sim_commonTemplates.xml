<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- _sim_commonTemplates.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <template><![CDATA[
      \t/*
      \t * Template:sim_commonTemplates.xml
      \t */ \n
   ]]></template>
 
<!-- ========== External clock sources =============================== -->
   <template variable="system_usb_clkin_clock" ><![CDATA[
   \t//!  %description
   \tstatic constexpr uint32_t usbExternalClock=$(system_usb_clkin_clock);\n\n
   ]]></template>

   <template variable="system_sdhc_clockin" ><![CDATA[
   \t//! %description
   \tstatic constexpr uint32_t sdhcExternalClock=$(system_sdhc_clockin);\n\n
   ]]></template>

   <template variable="system_irc48m_clock" ><![CDATA[
   \t//! %description
   \tstatic constexpr uint32_t irc48mClock=$(system_irc48m_clock);\n\n
   ]]></template>
      
<!-- ========== ADC clock sources =============================== -->

   <clockCodeTemplate variable="adc0_cfg1_adiclk"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Get %description
      \t *
      \t * @param %enumParam %tooltip
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getAdcClock(%enumClass %enumParam) {
      \t   
      \t   switch(%enumParam) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>
   
<!-- ========== SOPT1 =============================== -->
   <template namespace="usbdm" variable="sim_sopt1_ramsize"><![CDATA[
      \t/**
      \t * RAM size
      \t */
      \tenum SimRamSize {
      \t   SimRamSize_8KiB    = SIM_SOPT1_RAMSIZE(1),  //!< 8KiB RAM
      \t   SimRamSize_16KiB   = SIM_SOPT1_RAMSIZE(3),  //!< 16KiB RAM
      \t   SimRamSize_24KiB   = SIM_SOPT1_RAMSIZE(4),  //!< 24KiB RAM
      \t   SimRamSize_32KiB   = SIM_SOPT1_RAMSIZE(5),  //!< 32KiB RAM
      \t   SimRamSize_48KiB   = SIM_SOPT1_RAMSIZE(6),  //!< 32KiB RAM
      \t   SimRamSize_64KiB   = SIM_SOPT1_RAMSIZE(7),  //!< 64KiB RAM
      \t   SimRamSize_96KiB   = SIM_SOPT1_RAMSIZE(8),  //!< 96KiB RAM
      \t   SimRamSize_128KiB  = SIM_SOPT1_RAMSIZE(9),  //!< 128KiB RAM
      \t   SimRamSize_256KiB  = SIM_SOPT1_RAMSIZE(11), //!< 256KiB RAM
      \t   SimRamSize_512KiB  = SIM_SOPT1_RAMSIZE(12), //!< 256KiB RAM
      \t   SimRamSize_1024KiB = SIM_SOPT1_RAMSIZE(13), //!< 256KiB RAM
      \t};\n\n
   ]]></template>

   <template variable="sim_sopt1_ramsize"><![CDATA[
      \t/**
      \t * Get RAM size
      \t *
      \t * @return RAM size value
      \t */
      \tstatic SimRamSize getRamSize() {
      \t
      \t   return static_cast<SimRamSize>(sim->SOPT1&SIM_SOPT1_RAMSIZE_MASK);
      \t}\n\n
   ]]></template>

   <clockCodeTemplate variable="sim_sopt1_osc32ksel"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setErc32kClock(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getErc32kClock() {
      \t   
      \t   switch(%defaultMaskingExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>

   <template variable="rtc_none" ><![CDATA[
      \t/**
      \t * Get ERCLK32K clock frequency
      \t *
      \t * @return Clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getErc32kClock() {
      \t   // No RTC
      \t   return Osc0Info::getOsc32kClock();  // OSC0 in 32kHz mode
      \t}\n\n
   ]]></template>

   <clockCodeTemplate variable="sim_sopt1_osc32kout"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setErc32kClkoutPin(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}\n\n
   ]]></clockCodeTemplate>

   <clockCodeTemplate variable="sim_sopt1_usbpower"
      mask="(SIM_SOPT1_USBREGEN_MASK|SIM_SOPT1_USBSSTBY_MASK|SIM_SOPT1_USBVSTBY_MASK)"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setUsbPowerModes(%enumClass %enumParam) {
      \t   sim->SOPT1CFG = SIM_SOPT1CFG_USSWE_MASK|SIM_SOPT1CFG_UVSWE_MASK|SIM_SOPT1CFG_URWE_MASK;
      \t   %defaultClockExpression
      \t}\n\n
   ]]></clockCodeTemplate>
   
   <if condition="sim_sopt1_osc32kout||sim_sopt1_osc32ksel||sim_sopt1_usbpower" >   
      <template><![CDATA[
         \t//! System Options Register 1
         \tstatic constexpr uint32_t sopt1 = \n
      ]]></template>
      <template variable="sim_sopt1_osc32kout" ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="sim_sopt1_osc32ksel" ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="sim_sopt1_usbpower"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template>
      <![CDATA[
         \t   0;\n\n
      ]]></template>
   </if>
   
<!-- ========== SOPT2 =============================== -->

   <clockCodeTemplate variable="sim_sopt2_ptd7pad"
      enumStem="simPortDPad"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setPortDPad(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}\n\n
   ]]></clockCodeTemplate>
         
   <for keys="n" values=";0;1;2;3;4">
      <clockCodeTemplate variable="sim_sopt2_lpuart%(n)src"
         returnFormat="%s"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %enumParam %tooltip
         \t */
         \tstatic void setLpuart%(n)Clock(%enumClass %enumParam) {
         \t   %defaultClockExpression
         \t}

         \t/**
         \t * Get %description
         \t *
         \t * @return Clock frequency in Hz
         \t */
         \tstatic uint32_t getLpuart%(n)Clock() {
         \t   
         \t   switch(%defaultMaskingExpression) {
         \t      default: return 0;
         %body
         \t   }
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>         

   <for keys="n" values=";0;1;2;3">
      <clockCodeTemplate variable="sim_sopt2_uart%(n)src"
         enumStem="SimUart%(n)ClockSource"
         returnFormat="%s"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %enumParam %tooltip
         \t */
         \tstatic void setUart%(n)Clock(%enumClass %enumParam) {
         \t   %defaultClockExpression
         \t}

         \t/**
         \t * Get %description
         \t *
         \t * @return Clock frequency in Hz
         \t */
         \tstatic uint32_t getUart%(n)Clock() {
         \t   
         \t   switch(%defaultMaskingExpression) {
         \t      default:
         %body
         \t   }
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>         

   <for keys="n" values=";0;1;2;3">
      <template variable="system_uart%(n)_fixedclocksource" ><![CDATA[
         \t/** 
         \t * Get UART%(n) input clock frequency
         \t *
         \t * @return Clock frequency in Hz
         \t */
         \tstatic inline uint32_t getUart%(n)Clock() {
         \t   return $(system_uart%(n)_fixedclocksource.code[]);
         \t}\n\n
      ]]></template>
   </for>         
         
   <clockCodeTemplate variable="sim_sopt2_tpmsrc"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setTpmClock(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getTpmClock() {
      \t   
      \t   switch(%defaultMaskingExpression) {
      \t      default:
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>
         
   <clockCodeTemplate variable="sim_sopt2_traceclksel"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setTraceClockout(%enumClass %enumParam) {
      \t   sim->SOPT2 = (sim->SOPT2&~SIM_SOPT2_TRACECLKSEL_MASK) | %enumParam;
      \t}\n\n
   ]]></clockCodeTemplate>
   
   <clockCodeTemplate variable="sim_sopt2_rtcclkoutsel"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setRtcClockout(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}\n\n
   ]]></clockCodeTemplate>
         
   <clockCodeTemplate variable="sim_sopt2_clkoutsel" 
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setClkout(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}\n\n
   ]]></clockCodeTemplate>
         
   <clockCodeTemplate variable="sim_sopt2_pllfllsel"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setPeripheralClock(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t *
      \t * @note If there is a peripheral clock divider then this is the 
      \t *       frequency of the undivided peripheral clock
      \t */
      \tstatic uint32_t getPeripheralClock() {
      \t   
      \t   switch(%defaultMaskingExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>
         
   <clockCodeTemplate variable="sim_sopt2_emvsimsrc"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setEmvsimClock(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getEmvsimClock() {
      \t   
      \t   switch(%defaultMaskingExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>

   <clockCodeTemplate variable="sim_sopt2_sdhcsrc"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setSdhcClock(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getSdhcClock() {
      \t   
      \t   switch(%defaultMaskingExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>
   
   <clockCodeTemplate variable="sim_sopt2_fbsl"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setFlexbusSecurity(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Security level
      \t */
      \tstatic uint32_t getFlexbusSecurity() {
      \t   
      \t   return %defaultMaskingExpression;
      \t}\n\n
   ]]></clockCodeTemplate>
   
   <clockCodeTemplate variable="sim_sopt2_flexiosrc"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setFlexioClock(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getFlexioClock() {
      \t   
      \t   switch(%defaultMaskingExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>
   
   <clockCodeTemplate variable="sim_sopt2_timesrc"
      enumStem="SimTimestampClockSource"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setTimestampClock(%enumClass %enumParam) {
      \t   %defaultClockExpression
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getTimestampClock() {
      \t   
      \t   switch(%defaultMaskingExpression) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>
   
   <clockCodeTemplate variable="sim_sopt2_usbregen"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void enableUsbPhyRegulator(%enumClass %enumParam) {
      \t   %defaultClockExpression;
      \t}\n\n
   ]]></clockCodeTemplate>
   
   <clockCodeTemplate variable="sim_sopt2_usbslsrc"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setUsbSlowClock(%enumClass %enumParam) {
      \t   %defaultClockExpression;
      \t}\n\n
   ]]></clockCodeTemplate>
   
   <template><![CDATA[
      \t//! System Options Register 2
      \tstatic constexpr uint32_t sopt2 = \n
   ]]></template>
   <template variable="sim_sopt2_ptd7pad"      > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_lpuart0src"   > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_lpuart1src"   > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_uart0src"     > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_tpmsrc"       > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_usbsrc[]"     > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_traceclksel"  > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_rtcclkoutsel" > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_clkoutsel"    > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_pllfllsel[]"  > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_lpuartsrc"    > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_emvsimsrc"    > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_sdhcsrc"      > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_fbsl"         > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_flexiosrc"    > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_timesrc"      > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt2_rmiisrc"      > <![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template                                   > <![CDATA[ \t   0;                    \n\n ]]></template>
   
<!-- ========== SOPT4 =============================== -->
   <for keys="ftm" values="0;1;2;3">
      <for keys="flt" values="0;1;2;3">
         <clockCodeTemplate variable="sim_sopt4_ftm%(ftm)flt%(flt)"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %enumParam %tooltip
            \t */
            \tstatic void setFtm%(ftm)Flt%(flt)(%enumClass %enumParam) {
            \t   %defaultClockExpression
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>

   <for keys="ftm" values="0;1;2;3">
      <for keys="ch" values="0;1;2;3">
         <clockCodeTemplate variable="sim_sopt4_ftm%(ftm)ch%(ch)src"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %enumParam %tooltip
            \t */
            \tstatic void setFtm%(ftm)Ch%(ch)Src(%enumClass %enumParam) {
            \t   %defaultClockExpression
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>

   <for keys="ftm" values="0;1;2;3">
      <clockCodeTemplate variable="sim_sopt4_ftm%(ftm)clksel"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %enumParam %tooltip
         \t */
         \tstatic void setFtm%(ftm)ClkSel(%enumClass %enumParam) {
         \t   %defaultClockExpression
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>
   
   <for keys="ftm" values="0;1;2;3">
      <for keys="trg" values="0;1;2;3">
         <clockCodeTemplate variable="sim_sopt4_ftm%(ftm)trg%(trg)src"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %enumParam %tooltip
            \t */
            \tstatic void setFtm%(ftm)Trg%(trg)Src(%enumClass %enumParam) {
            \t   %defaultClockExpression
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>
   
   <for keys="tpm" values="0;1;2;3">
      <clockCodeTemplate variable="sim_sopt4_tpm%(tpm)clksel"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %enumParam %tooltip
         \t *
         \t * @note The selected pin must also be configured for the TPM external clock function
         \t * through the appropriate pin control register in the port control module
         \t */
         \tstatic void setTpm%(tpm)ExternalClockInput(%enumClass %enumParam) {
         \t   %defaultClockExpression
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>

    <for keys="tpm" values="0;1;2;3">
      <for keys="ch" values="0;1;2;3">
         <clockCodeTemplate variable="sim_sopt4_tpm%(tpm)ch%(ch)src"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %enumParam %tooltip
            \t *
            \t * @note The selected pin must also be configured for the TPM external clock function
            \t * through the appropriate pin control register in the port control module
            \t */
            \tstatic void setTpm%(tpm)Ch%(ch)InputCaptureSource(%enumClass %enumParam) {
            \t   %defaultClockExpression
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>
   
   <template><![CDATA[
      \t//! System Options Register 4
      \tstatic constexpr uint32_t sopt4 = \n
   ]]></template>
   <for keys="p" values="0;1;2;3" >
      <for keys="u" values="0;1;2;3" >
         <template variable="sim_sopt4_ftm%(p)flt%(u)"    ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
         <template variable="sim_sopt4_ftm%(p)trg%(u)src" ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
         <template variable="sim_sopt4_ftm%(p)ch%(u)src"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
         <template variable="sim_sopt4_tpm%(p)ch%(u)src"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      </for>   
      <template variable="sim_sopt4_tpm%(p)clksel"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="sim_sopt4_ftm%(p)clksel"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   </for>   
   <template                                   ><![CDATA[ \t   0;                    \n\n ]]></template>
   
<!-- ========== SOPT5 =============================== -->

   <for keys="n" values="0;1;2;3;4;5">
      <clockCodeTemplate variable="sim_sopt5_lpuart%(n)ode"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %enumParam %tooltip
         \t */
         \tstatic void setLpuart%(n)Drive(%enumClass %enumParam) {
         \t   %defaultClockExpression
         \t}\n\n
      ]]></clockCodeTemplate>
      
      <clockCodeTemplate variable="sim_sopt5_lpuart%(n)rxsrc"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %enumParam %tooltip
         \t */
         \tstatic void setLpuart%(n)RxSrc(%enumClass %enumParam) {
         \t   %defaultClockExpression
         \t}\n\n
      ]]></clockCodeTemplate>
   
      <clockCodeTemplate variable="sim_sopt5_lpuart%(n)txsrc"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %enumParam %tooltip
         \t */
         \tstatic void setLpuart%(n)TxSrc(%enumClass %enumParam) {
         \t   %defaultClockExpression
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>

   <for keys="n" values="0;1;2;3;4;5">
      <clockCodeTemplate variable="sim_sopt5_uart%(n)ode"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %enumParam %tooltip
         \t */
         \tstatic void setUart%(n)Drive(%enumClass %enumParam) {
         \t   %defaultClockExpression
         \t}\n\n
      ]]></clockCodeTemplate>
   
      <clockCodeTemplate variable="sim_sopt5_uart%(n)rxsrc"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %enumParam %tooltip
         \t */
         \tstatic void setUart%(n)RxSrc(%enumClass %enumParam) {
         \t   %defaultClockExpression
         \t}\n\n
      ]]></clockCodeTemplate>
   
      <clockCodeTemplate variable="sim_sopt5_uart%(n)txsrc"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param %enumParam %tooltip
         \t */
         \tstatic void setUart%(n)TxSrc(%enumClass %enumParam) {
         \t   %defaultClockExpression
         \t}\n\n
      ]]></clockCodeTemplate>
   </for>
   
   <template><![CDATA[
      \t//! System Options Register 5
      \tstatic constexpr uint32_t sopt5 = \n
   ]]></template>
   <for keys="p" values=";0;1;2;3;4">
      <template variable="sim_sopt5_uart%(p)ode"     ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="sim_sopt5_uart%(p)rxsrc"   ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="sim_sopt5_uart%(p)txsrc"   ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="sim_sopt5_lpuart%(p)ode"   ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="sim_sopt5_lpuart%(p)rxsrc" ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="sim_sopt5_lpuart%(p)txsrc" ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   </for>
   <template                                         ><![CDATA[ \t   0;                    \n\n ]]></template>

<!-- ========== SOPT7 =============================== -->
   <for keys="p" values=";0;1">
      <template variable="sim_sopt7_adc%(p)trigger" ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         \t * @param[in] simAdc%(p)TriggerMode   %tooltip\n
      ]]></template>
      <template variable="sim_sopt7_adc%(p)trgsel" ><![CDATA[
         \t *
         \t * @param[in] simAdc%(p)Trigger   %tooltip
         \t *
         \t * For example, setAdc%(p)Triggers(SimAdc%(p)TriggerMode_Alt_PreTrigger_1, SimAdc0Trigger_PitCh0) will set the trigger source
         \t * to PIT channel 0 and conversion will use SC1[1]/R[1]
         \t */
         \tstatic void setAdc%(p)Triggers(SimAdc%(p)TriggerMode simAdc%(p)TriggerMode, SimAdc%(p)Trigger simAdc%(p)Trigger=SimAdc%(p)Trigger_External) {
         \t   sim->SOPT7 = (sim->SOPT7&~(SIM_SOPT7_ADC%(p)TRGSEL_MASK|SIM_SOPT7_ADC%(p)ALTTRGEN_MASK))|simAdc%(p)Trigger|simAdc%(p)TriggerMode;
         \t};\n\n
      ]]></template>
   </for>
   
   <template><![CDATA[
      \t//! System Options Register 7
      \tstatic constexpr uint32_t sopt7 = \n
   ]]></template>
   <template variable="sim_sopt7_adc0trigger" ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt7_adc0trgsel"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt7_adc1trigger" ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template variable="sim_sopt7_adc1trgsel"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   <template                                   ><![CDATA[ \t   0;                    \n\n    ]]></template>
   
<!-- ========== SOPT8 =============================== -->

   <for keys="p" values="0;1;2;3">
      <for keys="ch" values="0;1;2;3;4;5;6;7">
         <clockCodeTemplate variable="sim_sopt8_ftm%(p)och%(ch)src"
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %enumParam %tooltip
            \t */
            \tstatic void setFtm%(p)Ch%(ch)OutputSrc(%enumClass %enumParam) {
            \t   %defaultClockExpression
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>
   
   <clockCodeTemplate variable="sim_sopt8_ftm_syncbits"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * %tooltip
      \t *
      \t * @param mask Mask of bits made up from %enumClass values
      \t */
      \tstatic void setFtmSyncBits(uint32_t %enumParam) {
      \t   sim->SOPT8 = sim->SOPT8 | %enumParam;
      \t}
         
      \t/**
      \t * Clear %description
      \t *
      \t * %tooltip
      \t *
      \t * @param mask Mask of bits made up from %enumClass values
      \t */
      \tstatic void clearFtmSyncBits(uint32_t %enumParam) {
      \t   sim->SOPT8 = sim->SOPT8 & ~%enumParam;
      \t}
         
      \t/**
      \t * Clear all %description
      \t *
      \t * %tooltip
      \t */
      \tstatic void clearAllFtmSyncBits() {
      \t   sim->SOPT8 = sim->SOPT8 & 
      \t      ~(SIM_SOPT8_FTM0SYNCBIT_MASK|SIM_SOPT8_FTM1SYNCBIT_MASK|SIM_SOPT8_FTM2SYNCBIT_MASK|SIM_SOPT8_FTM3SYNCBIT_MASK);
      \t}\n\n
   ]]></clockCodeTemplate>
   
   <template variable="sim_sopt8_ftm0och0src" ><![CDATA[
      \t//! System Options Register 8
      \tstatic constexpr uint32_t sopt8 = \n
   ]]></template>
   <for keys="ch" values="0;1;2;3;4;5;6;7">
      <template variable="sim_sopt8_ftm0och%(ch)src"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="sim_sopt8_ftm3och%(ch)src"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
   </for>
   <template variable="sim_sopt8_ftm0och0src" ><![CDATA[
      \t   0;\n\n
   ]]></template>
   
<!-- ========== SOPT9 =============================== -->   

   <for keys="p" values="1;2">
      <for keys="Fn,FN,fn" values="ClkSel,CLKSEL,clksel;Ch0Src,CH0SRC,ch0src">
         <clockCodeTemplate variable="sim_sopt9_tpm%(p)%(fn)" 
         ><![CDATA[
            \t/**
            \t * Set %description
            \t *
            \t * @param %enumParam %tooltip
            \t */
            \tstatic void setTpm%(p)%(Fn)(%enumClass %enumParam) {
            \t   %defaultClockExpression
            \t}\n\n
         ]]></clockCodeTemplate>
      </for>
   </for>
   
   <template variable="sim_sopt9_tpm1clksel" ><![CDATA[
      \t//! System Options Register 9
      \tstatic constexpr uint32_t sopt9 = \n
   ]]></template>
   <for keys="p" values="1;2">
      <for keys="Fn,FN,fn" values="ClkSel,CLKSEL,clksel;Ch0Src,CH0SRC,ch0src">
         <template variable="sim_sopt9_tpm%(p)%(fn)"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      </for>
   </for>
   <template variable="sim_sopt9_tpm1clksel" ><![CDATA[
      \t   0;\n\n
   ]]></template>

<!-- ========== CLKDIV2 =============================== -->
   <clockCodeTemplate variable="sim_sopt2_usbsrc"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * If the internal clock is selected then the clock divider will be recalculated
      \t *      
      \t * @param %enumParam %tooltip
      \t */
      \tstatic ErrorCode setUsbFullSpeedClock(%enumClass %enumParam) {
      \t   ErrorCode rc = E_NO_ERROR;
      \t
      \t   // The USB interface must be disabled for clock changes to have effect
      \t   sim->SCGC4 = sim->SCGC4 & ~SIM_SCGC4_USBOTG_MASK;
      \t
      \t   // Set clock source
      \t   %defaultClockExpression
      \t\n
   ]]></clockCodeTemplate>
   <template variable="sim_clkdiv2_usb[]" ><![CDATA[
      \t   if (simUsbFullSpeedClockSource == SimUsbFullSpeedClockSource_PeripheralClk) {
      \t      // Set clock divider for internal clock
      \t      rc = E_CLOCK_INIT_FAILED;
      \t      // Try to calculate value
      \t      unsigned inputFreq = getPeripheralClock();
      \t      for (unsigned frac = 0; frac < 2; frac++) {
      \t         for (unsigned div = 0; div < 8; div++) {
      \t            unsigned usbClock = (inputFreq * (frac+1))/(div+1);
      \t            if (usbClock == 48000000) {
      \t               // Found suitable value
      \t               sim->CLKDIV2 = SIM_CLKDIV2_USBFRAC(frac)|SIM_CLKDIV2_USBDIV(div);
      \t               rc = E_NO_ERROR;
      \t            }
      \t         }
      \t      }
      \t   }
      \t   rc = setAndCheckErrorCode(rc);\n\n
   ]]></template>
   <template variable="sim_sopt2_usbsrc" ><![CDATA[
      \t   // Restore USB clock
      \t   sim->SCGC4 = sim->SCGC4 | SIM_SCGC4_USBOTG_MASK;
      \t   return rc;
      \t}

      \t/**
      \t * Get USB clock frequency
      \t *
      \t * @return Clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getUsbFullSpeedClock() {
      \t   switch ((sim->SOPT2&SIM_SOPT2_USBSRC_MASK)) {
      \t      default:
      \t      case $(sim_sopt2_usbsrc[].enum[0]) : return usbExternalClock;\n
   ]]></template>
   <template variable="sim_clkdiv2_usb[]" ><![CDATA[
      \t      case $(sim_sopt2_usbsrc[].enum[1]) :
      \t         return  (getPeripheralClock()*
      \t            (((sim->CLKDIV2&SIM_CLKDIV2_USBFRAC_MASK)>>SIM_CLKDIV2_USBFRAC_SHIFT)+1))/
      \t            (((sim->CLKDIV2&SIM_CLKDIV2_USBDIV_MASK)>>SIM_CLKDIV2_USBDIV_SHIFT)+1);\n
   ]]></template>
   <if condition="!sim_clkdiv2_usb[]&amp;&amp;sim_sopt2_usbsrc" >
      <template><![CDATA[
         \t      case $(sim_sopt2_usbsrc[].enum[1]) : return getPeripheralClock();\n
      ]]></template>
   </if>
   <template variable="sim_sopt2_usbsrc" ><![CDATA[
      \t   }
      \t}\n\n
   ]]></template>

   <template variable="sim_clkdiv2_usb"><![CDATA[
      \t/**
      \t * Set USB clock divisors to suitable value and enable clock
      \t */
      \tstatic void updateUsbClockDivider() {
      \t
      \t   setUsbFullSpeedClock((SimUsbFullSpeedClockSource)(sim->SOPT2&SIM_SOPT2_USBSRC_MASK));
      \t}\n\n
   ]]></template>

<!-- ========== CLKDIV3 =============================== -->
   <clockCodeTemplate variable="sim_clkdiv3_pllfll"
      enumStem="SimPeripheralClockDivider"
   ><![CDATA[
      \t/**
      \t * Set %description
      \t *
      \t * @param %enumParam %tooltip
      \t */
      \tstatic void setPeripheralClockDivider(%enumClass %enumParam) {
      \t   // Must disable clock to TPMs, LPUARTs and FLEXIO before changing clock divider
      \t   uint32_t scgc2 = sim->SCGC2;
      \t   sim->SCGC2   = 0;
      \t   sim->CLKDIV3 = simPeripheralClockDivider;
      \t   sim->SCGC2   = scgc2;
      \t}

      \t/**
      \t * Get %description
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getDividedPeripheralClock() {
      \t   
      \t   int  pllfllfrac  = (sim->CLKDIV3&SIM_CLKDIV3_PLLFLLFRAC_MASK)>>SIM_CLKDIV3_PLLFLLFRAC_SHIFT;
      \t   int  pllflldiv   = (sim->CLKDIV3&SIM_CLKDIV3_PLLFLLDIV_MASK)>>SIM_CLKDIV3_PLLFLLDIV_SHIFT;
      \t   return (getPeripheralClock()*(pllfllfrac+1))/(pllflldiv+1);
      \t}\n\n
   ]]></clockCodeTemplate>

<!-- ========== COP Watchdog =============================== -->
   <template variable="sim_copc_copt"><![CDATA[
      \t//! COP Control Register
      \tstatic constexpr uint32_t copc =
      \t   ($(sim_copc_copt))| // COP period\n
   ]]></template>
   <template variable="sim_copc_copdbgen"><![CDATA[
      \t   SIM_COPC_COPDBGEN($(sim_copc_copdbgen))| // COP enable in debug mode\n
   ]]></template>
   <template variable="sim_copc_copstpen"><![CDATA[
      \t   SIM_COPC_COPSTPEN($(sim_copc_copstpen))| // COP enable in stop mode\n
   ]]></template>
   <template variable="sim_copc_copt"><![CDATA[
      \t   SIM_COPC_COPW($(sim_copc_copw));  // COP Windowed Mode

      \t/**
      \t * Feed COP watchdog
      \t */
      \tstatic void feedCop() {
      \t   sim->SRVCOP = 0x55;
      \t   sim->SRVCOP = 0xAA;
      \t}\n\n
   ]]></template>

 <!-- ========== Common =============================== -->
   <template><![CDATA[
      \t/**
      \t * Initialise SIM registers
      \t */
      \tstatic void initRegs() {
      \t\n
   ]]></template>
   <if condition="sim_sopt1_osc32kout||sim_sopt1_osc32ksel||sim_sopt1_usbpower" >
      <template><![CDATA[
         \t   sim->SOPT1 = sopt1;\n
      ]]></template>
   </if>
   <template><![CDATA[
      \t   sim->SOPT2 = sopt2;   // SOPT2.PLLFLLSEL may also be altered by MCG clock code
      \t   sim->SOPT4 = sopt4;
      \t   sim->SOPT5 = sopt5;
      \t   sim->SOPT7 = sopt7;\n
      ]]></template>
   <template variable="sim_sopt8_ftm0och0src" ><![CDATA[
      \t   sim->SOPT8 = sopt8;\n
   ]]></template>
   <template variable="sim_sopt9_tpm1clksel" ><![CDATA[
      \t   sim->SOPT9 = sopt9;\n
   ]]></template>
   <template variable="sim_clkdiv2_usb" ><![CDATA[
      \t
      \t   updateUsbClockDivider();\n
   ]]></template>
   <template><![CDATA[
      \t}\n\n
   ]]></template>
</fragment>
