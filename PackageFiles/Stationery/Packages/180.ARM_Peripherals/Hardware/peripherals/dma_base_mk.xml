<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- dma_base_mk.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Direct memory access controller" >

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <equation key="irq_parameters"            value="" />
   <equation key="irq_dummy_parameters"      value=""        />
   <equation key="irq_call"                  value=""      />
   <equation key="generateDefault"           value="false"  />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- ************* Constants ****************** -->

   <!-- Derived from SVD -->
   <intOption key="NumChannels" locked="true" derived="true"
      value="=dma_tcd_dim"
      description="Number of DMA channels"
   />
   <intOption key="NumVectors" locked="true" derived="true"
     value="=_hardwareIrqCount"
     description="Number of individual interrupt vectors"
   />

   <template><![CDATA[
      \t//! Number of DMA channels implemented
      \tstatic constexpr unsigned NumChannels = $(NumChannels);

      \t//! Number of DMA vectors implemented
      \tstatic constexpr unsigned NumVectors = $(NumVectors);\n\n

      \t//! Whether vectors are paired wrt channels i.e. Ch0_Ch16, Ch1_Ch17 etc
      \tstatic constexpr bool VectorsPaired = $(NumChannels)>$(NumVectors);\n\n
   ]]></template>

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value='"$(_Info) : public $(_BasicInfo)"' />

   <!-- ************* CR ****************** -->

   <binaryOption key="dma_cr_hoe" condition="dma_cr_hoe_present"
      enabledBy="enablePeripheralSupport"
      typeName="DmaActionOnError"
      toolTip="Whether to halt transfer when a DMA error occurs"
      description="DMA halt on error" >
      <choice value="0" name="Transfer continues on any error" enum="Continue" />
      <choice value="1" name="Transfer halts on any error"     enum="Halt"     isDefault="true"/>
   </binaryOption>

   <binaryOption key="dma_cr_clm" condition="dma_cr_clm_present"
      enabledBy="enablePeripheralSupport"
      typeName="DmaContinuousLink"
      description="Continuous Link mode"
      toolTip="Whether to enable continuous link mode \n
               If enabled, on minor loop completion, the channel activates again if that \n
               channel has a minor loop channel link enabled and the link channel is itself. \n
               This effectively applies the minor loop offsets and restarts the next minor loop" >
      <choice value="0" name="Continuous Link disabled" enum="Disabled" />
      <choice value="1" name="Continuous Link enabled"  enum="Enabled"  />
   </binaryOption>

   <binaryOption key="dma_cr_emlm" condition="dma_cr_emlm_present"
      enabledBy="enablePeripheralSupport"
      typeName="DmaMinorLoopMapping"
      description="Minor loop mapping"
      toolTip="Whether to enable minor loop mapping\n
               When enabled, TCDn.word2 is redefined to include individual enable fields, an offset field \n
               and the NBYTES field. The individual enable fields allow the minor loop offset to be \n
               applied to the source address, the destination address, or both.  \n
               The NBYTES field is reduced when either offset is enabled." >
      <choice value="0" name="Mapping disabled" enum="Disabled" />
      <choice value="1" name="Mapping enabled"  enum="Enabled"  />
   </binaryOption>

   <binaryOption key="dma_cr_erca" condition="dma_cr_erca_present"
      enabledBy="enablePeripheralSupport"
      typeName="DmaArbitration"
      description="Channel Arbitration"
      toolTip="How to arbitrate between requests from different channels" >
      <choice value="0" name="Fixed (within group)"       enum="Fixed" />
      <choice value="1" name="Round Robin (within group)" enum="RoundRobin"  />
   </binaryOption>

   <choiceOption key="dma_cr_GroupArb" condition="dma_cr_erga_present"
      valueFormat="DMA_CR_ERGA(%s),DMA_CR_GRP1PRI(%s),DMA_CR_GRP0PRI(%s)"
      typeName="DmaGroupArbitration"
      description="Group Arbitration"
      toolTip="Controls priority of DMA groups" >
      <choice value="1,0,1" name="Round Robin" enum="RoundRobin"  />
      <choice value="0,0,1" name="Group 0 > Group 1"  enum="01"   />
      <choice value="0,1,0" name="Group 1 > Group 0"  enum="10"   />
   </choiceOption>

   <binaryOption key="dma_cr_edbg" condition="dma_cr_edbg_present"
      enabledBy="enablePeripheralSupport"
      typeName="DmaInDebug"
      description="Operation in Debug mode"
      toolTip="Control DMA operation in debug mode" >
      <choice value="0" name="Continue in debug" enum="Continue"                  />
      <choice value="1" name="Halt in debug"     enum="Halt"     isDefault="true" />
   </binaryOption >

   <choiceOption key="dma_channel_num"
      hidden="true"
      valueFormat="%s"
      baseType="uint8_t"
      typeName="DmaChannelNum"
      description="DMA channel numbers"
      toolTip="Identifies DMA channel" >
      <choice value="(1&lt;&lt;6)"  name="All DMA channels" enum="All"  />
      <choice value="(1&lt;&lt;7)"  name="No DMA channel"   enum="None" />
      <choiceExpansion keys="ch" dim="=NumChannels" value="%(ch)" name="Channel %(ch)" enum="%(ch)" />
   </choiceOption>

   <binaryOption key="dma_cr_cx" condition="dma_cr_cx_present"
      hidden="true"
      typeName="DmaCancelTransfer"
      toolTip="Stop the executing channel and force the minor loop to finish.\n
               The cancel takes effect after the last write of the current read/write sequence.\n
               The CX bit clears itself after the cancel has been honoured.\n
               This cancel retires the channel normally as if the minor loop was completed"
      description="Cancel Remaining Data Transfer" >
      <choice name="Normal operation"              value="0" enum="NormalOperation"/>
      <choice name="Cancel remainder of transfer"  value="1" enum="CancelRemainderOfTransfer"/>
   </binaryOption >

   <binaryOption key="dma_cr_ecx" condition="dma_cr_ecx_present"
      hidden="true"
      typeName="DmaErrorCancelTransfer"
      toolTip="Stop the executing channel and force the minor loop to finish.\n
               The cancel takes effect after the last write of the current read/write sequence.\n
               The CX bit clears itself after the cancel has been honoured.\n
               This cancel retires the channel normally as if the minor loop was completed.\n
               The ES register is updated and may generate an optional error interrupt"
      description="Cancel Data Transfer and set Error" >
      <choice name="Normal operation"            value="0" enum="NormalOperation"/>
      <choice name="Cancel transfer with error"  value="1" enum="CancelTransferWithError"/>
   </binaryOption >

   <binaryOption key="dma_cr_halt" condition="dma_cr_halt_present"
      hidden="true"
      typeName="DmaHalt"
      toolTip="Halt DMA at the end of current channel operations"
      description="Halt DMA Operations" >
      <choice name="Normal operation"    value="0" enum="NormalOperation"/>
      <choice name="Stall new channels"  value="1" enum="StallNewChannels"/>
   </binaryOption >

   <!-- ************* CSR ****************** -->

   <choiceOption key="dma_csr_bwc" condition="dma_csr_bwc_present"
      hidden="true"
      typeName="DmaSpeed"
      description="Bandwidth Control"
      toolTip="Throttles the amount of bus bandwidth consumed by the eDMA. \n
               Generally, as the eDMA processes the minor loop, it continuously generates \n
               read/write sequences until the minor count is exhausted. This field \n
               forces the eDMA to stall after the completion of each read/write access \n
               to control the bus request bandwidth seen by the crossbar switch" >
      <choice value="0" name="No eDMA engine stalls"                           enum="NoStalls"  />
      <choice value="2" name="eDMA engine stalls for 4 cycles after each R/W" enum="4_Stalls"  />
      <choice value="3" name="eDMA engine stalls for 8 cycles after each R/W" enum="8_Stalls"  />
   </choiceOption>

   <choiceOption key="dma_csr_majorelink" condition="dma_csr_majorelink_present"
      hidden="true"
      valueFormat="DMA_CSR_MAJORELINK(%s),DMA_CSR_MAJORLINKCH(%s)"
      typeName="DmaMajorLink"
      description="Channel linking on major loop complete"
      toolTip="As the channel completes the major loop, this option enables the linking to another channel. \n
               The link target channel initiates a channel service request via an internal mechanism that sets the \n
               TCDn_CSR[START] bit of the specified channel. \n
               NOTE: To support the dynamic linking coherency model, the DMA_CSR_MAJORELINK field is forced to zero when \n
               written to while the TCDn_CSR[DONE] bit is set" >
      <choice value="0,0"  name="Channel-to-channel linking is disabled" enum="Disabled" />
      <choiceExpansion keys="ch" dim="=NumChannels" value="1,%(ch)" name="Link to channel %(ch)" enum="Ch_%(ch)" />
   </choiceOption>

   <binaryOption key="dma_csr_esg" condition="dma_csr_esg_present"
      hidden="true"
      typeName="DmaScatterGather"
      description="Scatter/Gather Processing"
      toolTip="If selected, scatter/gather processing occurs when the channel completes the major loop. \n
               The eDMA engine uses DLASTSGA as a memory pointer to a 0-modulo-32 address containing a 32-byte \n
               data structure loaded as the transfer control descriptor into the local memory. \n
               NOTE: To support the dynamic scatter/gather coherency model, this field is forced to zero when written \n
               to while the TCDn_CSR[DONE] bit is set" >
      <choice value="0" name="TCD is normal format"                  enum="Disabled" />
      <choice value="1" name="TCD specifies a scatter gather format" enum="Enabled"  />
   </binaryOption>

   <binaryOption key="dma_csr_dreq" condition="dma_csr_dreq_present"
      hidden="true"
      typeName="DmaStopOnComplete"
      description="Clear request on complete"
      toolTip="If selected, the eDMA hardware automatically clears the ERQ bit when \n
               the current major iteration count reaches zero" >
      <choice value="0" name="ERQ bit is not affected"        enum="Disabled" />
      <choice value="1" name="ERQ bit is cleared on complete" enum="Enabled"  />
   </binaryOption>

   <binaryOption key="dma_csr_inthalf" condition="dma_csr_inthalf_present"
      hidden="true"
      typeName="DmaIntHalf"
      description="Interrupt when major counter is half complete"
      toolTip="If selected, the channel generates an interrupt request by setting the appropriate bit in the INT \n
               register when the current major iteration count reaches the halfway point. Specifically, the comparison \n
               performed by the eDMA engine is (CITER == (BITER >> 1)). This halfway point interrupt request is \n
               provided to support double-buffered, also known as ping-pong, schemes or other types of data movement \n
               where the processor needs an early indication of the transfer’s progress. \n
               NOTE: If BITER = 1, do not use INTHALF. Use INTMAJOR instead" >
      <choice value="0" name="The half-point interrupt is disabled" enum="Disabled" />
      <choice value="1" name="The half-point interrupt is enabled"  enum="Enabled"  />
   </binaryOption>

   <binaryOption key="dma_csr_intmajor" condition="dma_csr_intmajor_present"
      hidden="true"
      typeName="DmaIntMajor"
      description="Interrupt when major counter completes"
      toolTip="If selected, the channel generates an interrupt request by setting the appropriate bit in \n
               the INT when the current major iteration count reaches zero" >
      <choice value="0" name="The end-of-major loop interrupt is disabled" enum="Disabled" />
      <choice value="1" name="The end-of-major loop interrupt is enabled"  enum="Enabled"  />
   </binaryOption>

   <binaryOption key="dma_csr_start" condition="dma_csr_start_present"
      hidden="true"
      typeName="DmaStart"
      description="Channel Start"
      toolTip="The channel immediately requests service, \n
               otherwise start is triggered later by a hardware request. \n
               The eDMA hardware automatically clears this flag after the channel begins execution" >
      <choice value="0" name="Channel started by hardware request"  enum="Hardware" />
      <choice value="1" name="Channel is immediately started"       enum="Immediate"  />
   </binaryOption>

   <binaryOption key="dma_csr_done" condition="dma_csr_done_present"
      hidden="true"
      typeName="DmaDone"
      toolTip="This flag indicates the eDMA has completed the major loop.\n
               The eDMA engine sets it as the CITER count reaches zero.\n
               The software or hardware clears it when the channel is activated"
      description="Channel Done" >
      <choice name="Not completed"  value="0" enum="NotCompleted"/>
      <choice name="Completed"      value="1" enum="Completed"/>
   </binaryOption >

   <binaryOption key="dma_csr_active" condition="dma_csr_active_present"
      hidden="true"
      typeName="DmaChannelActive"
      toolTip="This flag signals the channel is currently in execution.\n
               It sets when service begins and clears when the minor loop completes or on any error"
      description="Channel Active" >
      <choice name="Idle"        value="0" enum="Idle"/>
      <choice name="Busy"        value="1" enum="Busy"/>
   </binaryOption >

   <!-- ************* DCHPRI ****************** -->

   <binaryOption key="dma_dchpri_ecp" condition="dma_dchpri_ecp_present"
      hidden="true"
      typeName="DmaCanBePreempted"
      toolTip="Allows suspension of this channel by a higher priority channel"
      description="Enable Channel Preemption" >
      <choice name="Cannot be suspended"  value="0" enum="Disabled"/>
      <choice name="Can be suspended"     value="1" enum="Enabled"/>
   </binaryOption >

   <binaryOption key="dma_dchpri_dpa" condition="dma_dchpri_dpa_present"
      hidden="true"
      typeName="DmaCanPreemptLower"
      toolTip="Disallows the channel to suspend lower priority channels"
      description="Disable Preempt Ability" >
      <choice name="Can suspend"     value="0" enum="Disabled"/>
      <choice name="Cannot suspend"  value="1" enum="Enabled"/>
   </binaryOption >

   <choiceOption key="dma_dchpri_chpri" condition="dma_dchpri_chpri_present"
      hidden="true"
      typeName="DmaPriority"
      toolTip="Channel priority when fixed-priority arbitration is enabled\n
               Lower values are higher priority."
      description="Channel Arbitration Priority" >
      <choiceExpansion keys="p" dim="16" value="%(p)" name="Level %(p)" enum="%(p)" />
   </choiceOption >

   <!-- ************* NBYTES_MLOFFYES ****************** -->

   <choiceOption key="dma_nbytes_mloffyes" condition="dma_nbytes_mloffyes_smloe_present"
      valueFormat="DMA_NBYTES_MLOFFYES_SMLOE(%s),DMA_NBYTES_MLOFFYES_DMLOE(%s)"
      hidden="true"
      typeName="DmaMinorLoopOffsetSelect"
      toolTip="Selects whether the minor loop offset is applied to\n
               the source and destination addresses upon minor loop completion."
      description="Source Minor Loop Offset Enable" >
      <choice name="No offset"                     value="0,0" enum="None"        />
      <choice name="Offset Source"                 value="1,0" enum="Source"      />
      <choice name="Offset Destination"            value="0,1" enum="Destination" />
      <choice name="Offset Source and Destination" value="1,1" enum="Both"        />
   </choiceOption >

<!--   ========== DMA DmaTcdCsr class - start =============================== -->

   <template where="definitions" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Union used to do initialisation of a TCD CSR in $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * @code
      \t * // Creating value
      \t * static const $(_Class)::DmaTcdCsr txCsr {
      \t *    DmaSpeed_NoStalls ,           // Bandwidth Control - No eDMA engine stalls
      \t *    DmaMajorLink_Disabled ,       // Channel linking on major loop complete - Channel-to-channel linking is disabled
      \t *    DmaScatterGather_Disabled ,   // Scatter/Gather Processing - TCD is normal format
      \t *    DmaStopOnComplete_Disabled ,  // Clear request on complete - ERQ bit is not affected
      \t *    DmaIntHalf_Disabled ,         // Interrupt when major counter is half complete - The half-point interrupt is disabled
      \t *    DmaIntMajor_Disabled ,        // Interrupt when major counter completes - The end-of-major loop interrupt is disabled
      \t *    DmaStart_Hardware,            // Channel Start - Channel started by hardware request
      \t * };
      \t * @endcode
      \t */
      \tunion __attribute__((__packed__)) DmaTcdCsr {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr DmaTcdCsr(const DmaTcdCsr &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr DmaTcdCsr() : csr(0) {}
      \t
      \t   /**
      \t    * CSR value as uint16_t
      \t    */
      \t   operator uint16_t() const { return csr; }
      \t\n
   ]]></template>

<!-- DmaTcdCsr Member variables -->

   <variableTemplate where="definitions" codeGenCondition="$(_BasicInfoGuard)"
      variables="
         dma_csr_bwc,
         dma_csr_majorelink,
         dma_csr_esg,
         dma_csr_dreq,
         dma_csr_inthalf,
         dma_csr_intmajor,
         dma_csr_start"
   ><![CDATA[
      \tprivate:
      \t   ///  DMA TCD Control and Status
      \t   uint16_t %registerName;
      \t   struct {
      \t      bool          START:1;       //!< Channel Start
      \t      bool          INTMAJOR:1;    //!< Interrupt on major complete
      \t      bool          INTHALF:1;     //!< Interrupt on major half complete
      \t      bool          DREQ:1;        //!< Disable Request
      \t      bool          ESG:1;         //!< Enable Scatter/Gather
      \t      bool          MAJORELINK:1;  //!< Enable channel linking
      \t      bool          ACTIVE:1;      //!< Channel Active
      \t      bool          DONE:1;        //!< Channel Done
      \t      unsigned      MAJORLINKCH:4; //!< Link Channel Number
      \t      unsigned      :2;
      \t      unsigned      BWC:2;         //!< Bandwidth Control
      \t   };
      \t
      \tpublic:
      \t\n
   ]]></variableTemplate>

<!--   DmaTcdCsr Constructors -->

   <for keys="r" values="
         dma_csr_bwc;
         dma_csr_majorelink;
         dma_csr_esg;
         dma_csr_dreq;
         dma_csr_inthalf;
         dma_csr_intmajor;
         dma_csr_start" >
      <variableTemplate where="definitions" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr DmaTcdCsr(%params, Types... rest) : DmaTcdCsr(rest...) {
         \t
         \t      %registerName |= %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>

<!--  ========== DmaTcdCsr class - end =============================== -->

   <template where="definitions" codeGenCondition="$(_BasicInfoGuard)" ><![CDATA[
      \t}; // DmaTcdCsr\n\n
   ]]></template>

<!--   ========== DMA DmaConfig class - start =============================== -->

   <template where="definitions" codeGenCondition="$(_BasicInfoGuard)" ><![CDATA[
      \t/**
      \t * Class used to do initialisation of $(_Class)
      \t *
      \t * This class has a templated constructor that accepts various values:
      \t *
      \t * @note This constructor may be used to create a const instance in ROM
      \t *
      \t * Example:
      \t * @code
      \t * // Creating value
      \t * static const $(_Class)::DmaConfig config {
      \t *    DmaActionOnError_Continue ,    // DMA halt on error - Transfer continues on any error
      \t *    DmaContinuousLink_Disabled ,   // Link mode - Link mode disabled
      \t *    DmaMinorLoopMapping_Disabled , // Minor loop mapping - Mapping disabled
      \t *    DmaArbitration_Fixed ,         // Channel Arbitration - Fixed (within group)
      \t *    DmaInDebug_Halt,               // Operation in Debug mode - Halt in debug
      \t * };
      \t *
      \t * // Enable DMAC with settings from above
      \t * Dma0::configure(config);
      \t * @endcode
      \t */
      \tunion __attribute__((__packed__)) DmaConfig {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr DmaConfig(const DmaConfig &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr DmaConfig() : cr(0) {}
      \t
      \t   /**
      \t    * CSR value as uint16_t
      \t    */
      \t   operator uint16_t() const { return cr; }
      \t\n
   ]]></template>

<!-- DmaConfig Member variables -->

   <variableTemplate where="definitions" codeGenCondition="$(_BasicInfoGuard)"
      variables="
         dma_cr_hoe,
         dma_cr_clm,
         dma_cr_emlm,
         dma_cr_GroupArb,
         dma_cr_erca,
         dma_cr_edbg"
   ><![CDATA[
      \t   ///  DMA TCD Control and Status
      \t   uint32_t %registerName;
      \t\n
   ]]></variableTemplate>

<!--   DmaConfig Constructors -->

   <for keys="r" values="
         dma_cr_hoe;
         dma_cr_clm;
         dma_cr_emlm;
         dma_cr_GroupArb;
         dma_cr_erca;
         dma_cr_edbg" >
      <variableTemplate where="definitions" codeGenCondition="$(_BasicInfoGuard)" variables="%(r)"
         linePadding="xxx"
      ><![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr DmaConfig(%params, Types... rest) : DmaConfig(rest...) {
         \t
         \t      %registerName |= %paramExpression;
         \t   }
         \t\n
      ]]></variableTemplate>
   </for>

<!--    DmaConfig Setters -->

   <for keys=  "var                         : name"
        values="dma_cr_hoe                  : SetActionOnError;
                dma_cr_clm                  : SetLinkMode;
                dma_cr_emlm                 : SetMinorLoopMapping;
                dma_cr_erca,dma_cr_GroupArb : SetArbitration;
                dma_cr_edbg                 : SetActionInDebug" >
      <variableTemplate variables="%(var)" key="/DMA/Setters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tvoid %(name)(%params) {
         \t
         \t   %register = (%register & ~%mask)|%paramExpression;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

<!--   ========== DmaConfig class - end =============================== -->

   <template where="definitions" codeGenCondition="$(_BasicInfoGuard)" ><![CDATA[
      \t}; // DmaConfig\n\n
   ]]></template>

<!--    Default Initialisation values -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
         dma_csr_bwc,
         dma_csr_majorelink,
         dma_csr_esg,
         dma_csr_dreq,
         dma_csr_inthalf,
         dma_csr_intmajor,
         dma_csr_start"
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr DmaTcdCsr DefaultDmaTcdCsrValue = {%initExpression\n\t};
      \t\n
   ]]></variableTemplate>

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
         dma_cr_hoe,
         dma_cr_clm,
         dma_cr_emlm,
         dma_cr_GroupArb,
         dma_cr_erca,
         dma_cr_edbg"
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr DmaConfig DefaultDmaConfigValue = {%initExpression\n\t};
      \t\n
   ]]>
   </variableTemplate>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \ttypedef $(_Baseclass)Base_T<$(_Info)> $(_Class);
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="dma_files" >
      <copy source="Project_Headers/dma-MK.h"                   target="Project_Headers/dma.h"                      overwrite="true"  derived="true" />
      <copy source="Snippets/dma-memory-example.cpp"            target="Snippets/dma-memory-example.cpp"            overwrite="true"  derived="true" />
      <copy source="Snippets/dma-memory-template-example.cpp"   target="Snippets/dma-memory-template-example.cpp"   overwrite="true"  derived="true" />
      <copy source="Snippets/dma-uart-example-mk20.cpp"         target="Snippets/dma-uart-example-mk20.cpp"         overwrite="true"  derived="true" />
      <copy source="Snippets/dma-uart-example-mk22f.cpp"        target="Snippets/dma-uart-example-mk22f.cpp"        overwrite="true"  derived="true" />
      <copy source="Snippets/dma-uart-example-mk28f.cpp"        target="Snippets/dma-uart-example-mk28f.cpp"        overwrite="true"  derived="true" />
      <copy source="Snippets/dma-spi-example.cpp"               target="Snippets/dma-spi-example.cpp"               overwrite="true"  derived="true" />
      <copy source="Snippets/pit-adc-dma-example.cpp"           target="Snippets/pit-adc-dma-example.cpp"           overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->

   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

</peripheralPage>
