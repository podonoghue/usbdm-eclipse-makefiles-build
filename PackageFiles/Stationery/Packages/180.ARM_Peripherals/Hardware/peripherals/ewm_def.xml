<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- ewm_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="External Watchdog Monitor" >

   <equation key="irq_parameters"             value=""  />
   <equation key="irq_dummy_parameters"       value=""  />
   <equation key="irq_call"                   value=""  />
   <equation key="generateDefault"            value="false"         />
   <equation key="configureInStartupDefault"  value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- Constants -->
   <constant key = "disable_peripheral"      value = "&quot;ewm->CTRL = EWM_CTRL_EWMEN(0);&quot;"  type="String" />

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String" value='"$(_Class)Info : public $(_Structname)BasicInfo"' />

   <!-- ************* CTRL ****************** -->

   <binaryOption key="ewm_ctrl_ewmen" condition="ewm_ctrl_ewmen_present"
      baseType="uint8_t"
      enabledBy="enablePeripheralSupport"
      typeName="EwmMode"
      toolTip="Enables the EWM module\n
               This is a write-once value"
      description="EWM enable" >
      <choice name="Disabled"    value="0" enum="Disabled" />
      <choice name="Enabled"     value="1" enum="Enabled" />
   </binaryOption >

   <binaryOption key="ewm_ctrl_inten" condition="ewm_ctrl_inten_present"
      enabledBy="ewm_ctrl_ewmen"
      baseType="uint8_t"
      typeName="EwmAction"
      toolTip="Action taken on EWM event"
      description="Action on event" >
      <choice name="None"        value="0" enum="None"       />
      <choice name="Interrupt"   value="1" enum="Interrupt" />
   </binaryOption >

   <choiceOption key="ewm_ctrl_input" condition="ewm_ctrl_inen_present&amp;&amp;ewm_ctrl_assin_present"
      enabledBy="ewm_ctrl_ewmen"
      baseType="uint8_t"
      valueFormat="EWM_CTRL_INEN(%s),EWM_CTRL_ASSIN(%s)"
      typeName="EwmInputPin"
      toolTip="Enables and selects the polarity of the EWM_in pin\n
               This is a write-once value"
      description="Input pin control" >
      <choice name="Input disabled"    value="0,0" enum="Disabled" />
      <choice name="Input active-low"  value="1,0" enum="ActiveLow" />
      <choice name="Input active-high" value="1,1" enum="ActiveHigh" />
   </choiceOption>

   <!-- ************* SERV ****************** -->

   <choiceOption key="ewm_serv_service" condition="ewm_serv_service_present"
      enabledBy="ewm_ctrl_ewmen"
      hidden="true"
      baseType="uint8_t"
      typeName="EwmService"
      description="The EWM service mechanism requires the CPU to write two values to the SERV register:\n
            a first data byte of 0xB4, \n
            followed by a second data byte of 0x2C."
      toolTip="Values to write to service the EWM">
      <choice value="0xB4" name="First value in sequence"  enum="First"  />
      <choice value="0x2C" name="Second value in sequence" enum="Second" />
   </choiceOption>

   <!-- ************* CLKPRESCALER ****************** -->

   <intOption key="ewm_clkprescaler_clk_div" condition="ewm_clkprescaler_clk_div_present"
      valueFormat="%s"
      enabledBy="ewm_ctrl_ewmen"
      typeName="EwmClockPrescaler"
      baseType="uint16_t"
      description="LPO Clock prescaler"
      toolTip="This selects a prescaler value for the LPO clock before it is used by the timer\n
               This is a write-once register."
      min="1"
      max="257"
      value="1"
   />

   <floatOption key="ewm_inputClock"  condition="ewm_clkprescaler_clk_div_present"
      ref="(1.0*/PMC/system_low_power_clock)/(ewm_clkprescaler_clk_div)"
      locked="true"
      derived="true"
      enabledBy="ewm_ctrl_ewmen"
      description="Input clock (after prescaler)"
      toolTip="This is the clock used by the timer.\n
               It is generated from the LPO wth a prescaler."
      units="Hz"
   />

   <floatOption key="ewm_inputClock"  condition="!ewm_clkprescaler_clk_div_present"
      ref="(1.0*/PMC/system_low_power_clock)"
      locked="true"
      derived="true"
      enabledBy="ewm_ctrl_ewmen"
      description="Input clock"
      toolTip="This is the clock used by the timer.\n
               It is generated from the LPO."
      units="Hz"
   />

   <!-- ************* CMPL ****************** -->

   <intOption key="ewm_cmpl_comparel" condition="ewm_cmpl_comparel_present"
      enabledBy="ewm_ctrl_ewmen"
      units="ticks"
      description="Minimum service time in ticks"
      toolTip="Minimum time that must elapse before the CPU can service the EWM counter"
      value="0"
      min="0"
      max="254"
      enumText="\t   EwmMin_None = 0,\n"
   />

   <floatOption key="ewm_cmpl_minimum"  condition="ewm_cmpl_comparel_present"
      locked="true"
      derived="true"
      ref="ewm_cmpl_comparel/(1.0*ewm_inputClock)"
      enabledBy="ewm_ctrl_ewmen"
      description="Minimum service time in seconds"
      toolTip="Minimum time that must elapse before the CPU can service the EWM counter"
      units="s"
   />

   <!-- ************* CMPH ****************** -->

   <intOption key="ewm_cmph_compareh" condition="ewm_cmph_compareh_present"
      enabledBy="ewm_ctrl_ewmen"
      units="ticks"
      description="Maximum service time in ticks"
      toolTip="Maximum time that may elapse before the CPU has to service the EWM counter"
      value="0"
      min="ewm_cmpl_comparel+1"
      max="254"
      enumText="\t   EwmMax_Maximum = 254,\n"
   />

   <floatOption key="ewm_cmpl_maximum"  condition="ewm_cmph_compareh_present"
      locked="true"
      derived="true"
      ref="ewm_cmph_compareh/(1.0*ewm_inputClock)"
      enabledBy="ewm_ctrl_ewmen"
      description="Maximum service time in seconds"
      toolTip="Maximum time that may elapse before the CPU has to service the EWM counter"
      units="s"
   />

<!-- Setters and getters -->

   <for keys="field               : get   : set   : genCode                 : name"
        values="
         ewm_ctrl_inten           : true  : true  : enableGettersAndSetters : Action;
         ewm_ctrl_input           : true  : true  : true                    : InputPin;
         ewm_ctrl_ewmen           : true  : true  : enableGettersAndSetters : Enable;
         ewm_serv_service         : false : true  : enableGettersAndSetters : Service;
         ewm_cmpl_comparel        : true  : true  : enableGettersAndSetters : MinimumTime;
         ewm_cmph_compareh        : true  : true  : enableGettersAndSetters : MaximumTime" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %returnType get%(name)() {
         \t   return %returnType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <for keys="field               : get   : set   : genCode                 : name"
        values="
         ewm_clkprescaler_clk_div : true  : true  : enableGettersAndSetters : Prescaler" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %register = %paramExpression-1;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %returnType get%(name)() {
         \t   return %returnType(%register+1);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <template><![CDATA[
      \t//! Pin number in Info table for EWM input if mapped to a pin
      \tstatic constexpr int inputPin  = 0;

      \t//! Pin number in Info table for EWM output if mapped to a pin
      \tstatic constexpr int outputPin  = 1;
      \t\n
   ]]></template>

   <!--   ========== EWM Init class =============================== -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   EwmInterrupt_Enabled ,  // Interrupt Enable - Interrupt enabled
      \t *   EwmInputPin_Disabled ,  // Input pin control - Input disabled
      \t *   EwmMode_Enabled ,       // EWM enable - Disabled
      \t *   0_ticks ,               // Minimum service time - No minimum
      \t *   150_ticks,              // Maximum service time - 150 ticks
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!--   Member variables -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ewm_ctrl_inten,ewm_ctrl_input,ewm_ctrl_ewmen"
   ><![CDATA[
      \t   /// Control Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ewm_cmpl_comparel"
   ><![CDATA[
      \t   /// Compare Low Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ewm_cmph_compareh"
   ><![CDATA[
      \t   /// Compare High Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ewm_clkprescaler_clk_div"
   ><![CDATA[
      \t   /// Clock Prescaler Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %returnType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!--   Constructors -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            ewm_ctrl_inten;
            ewm_ctrl_input;
            ewm_ctrl_ewmen
            " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ewm_clkprescaler_clk_div"
      linePadding="xxx" >
   <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = %paramExpression-1;
         \t   }
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="ewm_cmpl_comparel,ewm_cmph_compareh"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description1
      \t    * %description0 is set to zero
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param value %description1
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%paramType1 value, Types... rest) : Init(rest...) {
      \t
      \t      %registerName0 = 0;
      \t      %registerName1 = value;
      \t   }
      \t
      \t   /**
      \t    * Constructor for %description0 and %description1
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param value0 %description0
      \t    * @param value1 %description1
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%paramType0 value0, %paramType1 value1, Types... rest) : Init(rest...) {
      \t
      \t      %registerName0 = value0;
      \t      %registerName1 = value1;
      \t   }
      \t\n
   ]]>
   </variableTemplate>


<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            ewm_ctrl_ewmen,
            ewm_ctrl_inten,
            ewm_ctrl_input,
            ewm_clkprescaler_clk_div,
            ewm_cmpl_comparel,
            ewm_cmph_compareh
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enableClock();
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod"
             condition="irqHandlingMethod" >   <![CDATA[
      \t   // Set call-backs
      \t   setCallback(init.callbackFunction);
      \t   enableNvicInterrupt(irqNums[0], init.irqlevel);
      \t
      \t   // Initialise registers\n
   ]]></template>
   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" condition="ewm_clkprescaler_clk_div" >
   <![CDATA[
      \t   ewm->CLKPRESCALER    = init.clkprescaler;\n
   ]]></template>
   <template codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t   ewm->CMPL    = init.cmpl;
      \t   ewm->CMPH    = init.cmph;
      \t   ewm->CTRL    = init.ctrl;
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="ewm_files" >
      <copy source="Project_Headers/ewm.h"          target="Project_Headers/ewm.h"          overwrite="true" derived="true" />
      <copy source="Snippets/ewm-example.cpp"       target="Snippets/ewm-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->
   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
