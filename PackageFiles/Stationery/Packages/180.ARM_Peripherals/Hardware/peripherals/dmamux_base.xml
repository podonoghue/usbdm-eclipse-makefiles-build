<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- dmamux0_4ch_trig.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="DMA channel multiplexor" >

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <equation key="generateDefault"           value="false"         />
   <equation key="configureInStartupDefault" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

   <!-- ************* Constants ****************** -->
   <intOption key="NumChannels" locked="true" derived="true"
      value="=dmamux_chcfg_dim"
      description="Number of DMA channels"
      toolTip="The number of DMA channels available"/>

   <intOption key="NumLowChannels" condition="dmamux_chcfg_low_dim"
      locked="true"
      derived="true"
      value="=dmamux_chcfg_low_dim"
      description="Number of low DMA channels"
      toolTip="The number of DMA channels available"/>

   <intOption key="NumHighChannels" condition="dmamux_chcfg_high_dim"
      locked="true"
      derived="true"
      value="=dmamux_chcfg_high_dim"
      description="Number of high DMA channels"
      toolTip="The number of DMA channels available"/>

   <intOption key="NumPeriodicChannels" locked="true" derived="true"
      value="=/PIT/pit_channel_dim"
      description="Number of DMA channels with periodic feature"
      toolTip="Each periodic channel may be controlled by the corresponding PIT channel" />

   <for keys="var" values="NumChannels;NumPeriodicChannels" >
      <variableTemplate variables="%(var)"
         initExpressionOnSameLine="true"
         linePadding="//x"
         tooltipPadding=""
      ><![CDATA[
         \t// %tooltip
         \tstatic constexpr unsigned %(var) = %initExpression;
         \t\n
      ]]></variableTemplate>
   </for>

   <choiceOption key="dma_low_channel_num" condition="NumLowChannels"
      hidden="true"
      valueFormat="%s"
      baseType="uint8_t"
      typeName="DmaChannelLowNum"
      description="DMA Low channel numbers"
      toolTip="Identifies Low DMA channel" >
      <choice value="(1&lt;&lt;6)"  name="All DMA channels" enum="All"  />
      <choice value="(1&lt;&lt;7)"  name="No DMA channel"   enum="None" />
      <choiceExpansion keys="ch" dim="=NumLowChannels" value="%(ch)" name="Channel %(ch)" enum="%(ch)" />
   </choiceOption>

   <choiceOption key="dma_high_channel_num" condition="NumHighChannels"
      hidden="true"
      valueFormat="%s"
      baseType="uint8_t"
      typeName="DmaChannelHighNum"
      description="DMA High channel numbers"
      toolTip="Identifies Low DMA channel" >
      <choice value="(1&lt;&lt;6)"  name="All DMA channels" enum="All"  />
      <choice value="(1&lt;&lt;7)"  name="No DMA channel"   enum="None" />
      <choiceExpansion keys="ch" dim="=NumLowChannels,NumLowChannels+NumHighChannels" value="%(ch)" name="Channel %(ch)" enum="%(ch)" />
   </choiceOption>

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Info) : public $(_BasicInfo)&quot;" />

   <!-- ************* CHCFG ****************** -->

   <for keys="ch" dim="=NumChannels" >

      <title description="Slot %(ch)" />

      <choiceOption key="dmamux_chcfg_mode[%(ch)]" condition="dmamux_chcfg_enbl_present"
         enabledBy="enablePeripheralSupport"
         valueFormat="DMAMUX_CHCFG_ENBL(%s),DMAMUX_CHCFG_TRIG(%s)"
         typeName="DmamuxMode"
         toolTip="Controls the mode of operation of the channel"
         description="DMA Channel Mode"
      >
         <choice name="Disabled"                     value="0,0" enum="Disabled"
            toolTip="The channel is disabled"
         />
         <choice name="Request directly routed"      value="1,0" enum="Continuous"
            toolTip="The channel is not throttled"
         />
         <choice name="Periodic triggering enabled"  value="1,1" enum="Throttled" condition="(%(ch)&lt;@NumPeriodicChannels)"
            toolTip="The channel is throttled by the corresponding PIT channel"
         />
      </choiceOption>

      <choiceOption key="dmamux_chcfg_source[%(ch)]" condition="/DMAMUX0/dmamux_chcfg_src"
         enabledBy="dmamux_chcfg_mode[%(ch)]>0"
         derivedFrom="/DMAMUX0/dmamux_chcfg_src"
         >
      </choiceOption>

      <choiceOption key="dmamux_chcfg_low_source[%(ch)]" condition="/DMAMUX0/dmamux_chcfg_src_low&amp;&amp;(%(ch)&lt;16)"
         enabledBy="dmamux_chcfg_mode[%(ch)]>0"
         derivedFrom="/DMAMUX0/dmamux_chcfg_src_low"
         >
      </choiceOption>

      <choiceOption key="dmamux_chcfg_high_source[%(ch)]" condition="/DMAMUX0/dmamux_chcfg_src_high&amp;&amp;(%(ch)&gt;=16)"
         enabledBy="dmamux_chcfg_mode[%(ch)]>0"
         derivedFrom="/DMAMUX0/dmamux_chcfg_src_high"
         >
      </choiceOption>
   </for>

<!-- Setters and getters -->

   <for keys="field                   : get   : set   : genCode                 : name"
        values="
         dmamux_chcfg_mode[]          : true  : true  : enableGettersAndSetters : ChannelMode  ;
         dmamux_chcfg_source[]        : true  : true  : enableGettersAndSetters : Source       ;
         dmamux_chcfg_low_source[]    : true  : true  : enableGettersAndSetters : LowSource    ;
         dmamux_chcfg_high_source[16] : true  : true  : enableGettersAndSetters : HighSource   "
          >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(DmaChannelNum dmaChannelNum, %params) {
         \t   %register[dmaChannelNum] = (%register[dmaChannelNum]&~%mask) | %paramExpression;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)(DmaChannelNum dmaChannelNum) {
         \t   return %paramType((%register[dmaChannelNum]&~%mask));
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!--   ========== DMAMUX Init class =============================== -->

   <template codeGenCondition="$(_InfoGuard)" >
   <![CDATA[
      \t/**
      \t * Configures the hardware requests on a channel.
      \t *
      \t * @param[in] dmaChannelNum   The DMA channel being enabled
      \t * @param[in] dmaSlot         The DMA slot (source) to connect to this channel
      \t * @param[in] DmamuxMode      The mode for the channel
      \t */
      \tstatic void configure(DmaChannelNum dmaChannelNum, DmaSlot dmaSlot, DmamuxMode DmamuxMode=DmamuxMode_Continuous) {
      \t
      \t   // Throttled DMA channels limited by PIT channels available
      \t   usbdm_assert((DmamuxMode != DmamuxMode_Continuous) || (dmaChannelNum<=NumPeriodicChannels),
      \t         "Illegal PIT throttled channel");
      \t
      \t   // DmaSlots 0-63 must associate with DMA channels 0-15
      \t   // DmaSlots 64-128 must associate with DMA channels 15-31
      \t   usbdm_assert(((dmaChannelNum<16)||(dmaSlot>=64))&&((dmaChannelNum>=16)||(dmaSlot<64)),
      \t         "Illegal LPIT channel");
      \t
      \t   // Enable clock to peripheral
      \t   enableClock();
      \t
      \t   // Configure channel - must be disabled to change
      \t   dmamux->CHCFG[dmaChannelNum] = 0;
      \t   dmamux->CHCFG[dmaChannelNum] = DmamuxMode|DMAMUX_CHCFG_SOURCE(dmaSlot);
      \t}
      \t
      \t/**
      \t * Disable hardware requests on channel
      \t *
      \t * @param dmaChannelNum Channel to modify
      \t */
      \tstatic void disable(DmaChannelNum dmaChannelNum) {
      \t
      \t   // Enable clock to peripheral
      \t   enableClock();
      \t
      \t   // Disable channel
      \t   dmamux->CHCFG[dmaChannelNum] = 0;
      \t}
      \t\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of a $(_Baseclass) channel (slot)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * static const $(_Class)::Init $(_name)Init {
      \t *    {
      \t *    DmaChannelNum_3,
      \t *    DmamuxSlot_TPM0_Channel2,   // Mapping of DMA slot to DMA channel - TPM0 Channel 2
      \t *    DmamuxMode_Continuous ,     // DMA Channel Enable - Channel enabled
      \t *    },
      \t *    {
      \t *    DmaChannelNum_1,
      \t *    DmamuxSlot_TPM0_Overflow,   // Mapping of DMA slot to DMA channel - TPM0 overflow
      \t *    DmamuxMode_Throttled ,      // DMA Channel Enable - Channel enabled and throttled by PIT channel
      \t *    },
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!--   Member variables -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
   ><![CDATA[
      \t   /// Channel number for this configuration
      \t   DmaChannelNum channelNum = DmaChannelNum_None;\n\n
   ]]></template>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="dmamux_chcfg_mode[],dmamux_chcfg_source[],dmamux_chcfg_low_source[],dmamux_chcfg_high_source[16]"
   ><![CDATA[
      \t   /// Channel Configuration Register
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <!--   Constructors -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      condition="!dma_low_channel_num"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for Dma ChannelNum
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      \t    * @param  dmaChannelNum DMA ChannelNumber for this configuration
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(DmaChannelNum dmaChannelNum, Types... rest) : Init(rest...) {
      \t
      \t      channelNum = dmaChannelNum;
      \t   }
      \t\n
   ]]>
   </template>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="dma_low_channel_num,dmamux_chcfg_low_source[]"
      nonDefaultParams="2"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for Dma ChannelNum
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      %params, Types... rest) : Init(rest...) {
      \t
      \t      channelNum     = DmaChannelNum(%paramName0);
      \t      %registerName1 = (%registerName1&~%mask1) |
      \t                       %paramName1;
      \t   }
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
      variables="dma_high_channel_num,dmamux_chcfg_high_source[16]"
      nonDefaultParams="2"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for Dma ChannelNum
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(
      %params, Types... rest) : Init(rest...) {
      \t
      \t      channelNum     = DmaChannelNum(%paramName0);
      \t      %registerName1 = (%registerName1&~%mask1) |
      \t                        %paramName1;
      \t   }
      \t\n
   ]]>
   </variableTemplate>

   <for keys="r"
      values="
            dmamux_chcfg_mode[];
            dmamux_chcfg_source[]
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <template codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue[] = {\n
   ]]>
   </template>
   <for keys="ch" dim="=/DMA$(_instance)/NumChannels" >
      <variableTemplate codeGenCondition="enablePeripheralSupport&amp;&amp;(dmamux_chcfg_mode[%(ch)]>0)"
         condition="!dmamux_chcfg_low_source[%(ch)]&amp;&amp;!dmamux_chcfg_high_source[%(ch)]"
         variables="dmamux_chcfg_source[%(ch)],dmamux_chcfg_mode[%(ch)]"
         terminator=","
         separator=","
         padToComments="35"
      ><![CDATA[
         \t   {\n
         \t   DmaChannelNum_%(ch),
         \t   %initExpression
         \t   },\n
      ]]></variableTemplate>
      <variableTemplate codeGenCondition="enablePeripheralSupport&amp;&amp;(dmamux_chcfg_mode[%(ch)]>0)"
         condition="dmamux_chcfg_low_source[%(ch)]"
         variables="dmamux_chcfg_low_source[%(ch)],dmamux_chcfg_mode[%(ch)]"
         terminator=","
         separator=","
         padToComments="35"
      ><![CDATA[
         \t   {\n
         \t   // Low source
         \t   DmaChannelLowNum_%(ch),
         \t   %initExpression
         \t   },\n
      ]]></variableTemplate>
      <variableTemplate codeGenCondition="enablePeripheralSupport&amp;&amp;(dmamux_chcfg_mode[%(ch)]>0)"
         condition="dmamux_chcfg_high_source[%(ch)]"
         variables="dmamux_chcfg_high_source[%(ch)],dmamux_chcfg_mode[%(ch)]"
         terminator=","
         separator=","
         padToComments="35"
      ><![CDATA[
         \t   {\n
         \t   // High source
         \t   DmaChannelHighNum_%(ch),
         \t   %initExpression
         \t   },\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t}; // $(_Info)::DefaultInitValue
      \t\n
   ]]></template>

   <template codeGenCondition="enablePeripheralSupport"
   ><![CDATA[
      \t/**
      \t * Indices into DefaultInitValue array by DMA slot
      \t */
      \tenum InitSlotIndex {\n
   ]]>
   </template>
   <for keys="ch" dim="=/DMA$(_instance)/NumChannels" >
      <template codeGenCondition="enablePeripheralSupport&amp;&amp;(dmamux_chcfg_mode[%(ch)]>0)"
      ><![CDATA[
         \t   InitSlotIndex_%(ch), // Slot #%(ch)\n
      ]]></template>
   </for>
   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t};
      \t\n
   ]]></template>

<!--   Configure methods -->

   <!--  Calculate if any channels configured  -->
   <for keys="ch" dim="=/DMA$(_instance)/NumChannels">
      <if condition="!do_channel_init">
         <!-- 1st time -->
         <equation key="do_channel_init" value='enablePeripheralSupport&amp;&amp;((dmamux_chcfg_mode[%(ch)]>0)' />
      <else />
         <equation key="do_channel_init" value='=do_channel_init+"||(dmamux_chcfg_mode[%(ch)]>0)"' />
      </if>
   </for>
   <equation key="do_channel_init" value='=do_channel_init+")"' />
   <!--  printVar key="do_channel_init" / -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure $(_BASENAME) channel
      \t * It is assumed that the clock to the peripheral is already enabled.
      \t *
      \t * @param dmaChannelNum Identifies channel to initialise
      \t * @param init          Initialisation values
      \t *
      \t * @note The channel number in the initialisation is ignored
      \t */
      \tstatic void configure(DmaChannelNum dmaChannelNum, const Init &init) {
      \t
      #if defined(DEBUG_BUILD)
      \t   if constexpr (NumChannels>NumPeriodicChannels) {
      \t      DmamuxMode mode = DmamuxMode(init.chcfg&(DMAMUX_CHCFG_ENBL_MASK|DMAMUX_CHCFG_TRIG_MASK));
      \t      usbdm_assert((dmaChannelNum>NumPeriodicChannels) && (mode == DmamuxMode_Throttled), "Channel cannot be throttled");
      \t   }
      #endif
      \t
      \t   // Must clear before changing
      \t   dmamux->CHCFG[dmaChannelNum] = 0;
      \t   dmamux->CHCFG[dmaChannelNum] = init.chcfg;
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) channel
      \t * It is assumed that the clock to the peripheral is enabled.
      \t *
      \t * @param init Initialisation values
      \t *
      \t * @note The channel number in the initialisation is used to select the channel being updated
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   configure(init.channelNum, init);
      \t}
      \t
      \t/**
      \t * Configure all $(_BASENAME) channels
      \t * The clock to the peripheral is enabled.
      \t *
      \t * @param init Array of initialisation values
      \t *
      \t * @note The channel numbers in the initialisations are used to select the channel being updated
      \t */
      \ttemplate<size_t N>
      \tstatic void configure(const Init (&init)[N]) {
      \t
      \t   // Enable peripheral clock
      \t   enableClock();
      \t
      \t   for (unsigned channel=0; channel<N; channel++) {
      \t      configure(init[channel]);
      \t   }
      \t}
      \t
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t * The clock to the peripheral is enabled.
      \t */
      \tstatic inline void defaultConfigure() {
      \t\n
   ]]>
   </template>
   <template codeGenCondition="=do_channel_init" >
   <![CDATA[
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t\n
   ]]>
   </template>
   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t}\n
   ]]>
   </template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tusing $(_Class) = $(_Class)Info;
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->
   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

</peripheralPage>
