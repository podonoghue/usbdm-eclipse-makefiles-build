<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- adc0_diff_a.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude" >

   <xi:include href="_default_instance.xml"/>
   
   <constant key="disable_peripheral" value = "adc->SC1[0] = ADC_SC1_ADCH(-1);"  />
   
   <xi:include href="_mapPinsOption.xml"/>
   
<!-- ========== PGA features =============================== -->
   <choiceOption key="adc_pga_pgaen" condition="adc_pga_present"
      description="PGA Enable and mode"
      valueFormat="(%s)"
      enumStem="AdcPgaMode"
      toolTip="">
      <choice value="ADC_PGA_PGAEN(0)"                   name="PGA is disabled"          enum="Disabled" isDefault="true" />
      <choice value="ADC_PGA_PGAEN(1)|ADC_PGA_PGALPb(0)" name="PGA is in low power mode" enum="LowPower"      />
      <choice value="ADC_PGA_PGAEN(1)|ADC_PGA_PGALPb(1)" name="PGA is in normal mode"    enum="NormalPower"   />
   </choiceOption>

   <choiceOption key="adc_pga_pgag" condition="adc_pga_present" 
      description="PGA Gain Setting"
      enumStem="AdcPgaGain"
      toolTip="Sets gain of PGA amplifier">
      <choice value="0" name="Gain = x1"  enum="x1" isDefault="true" />
      <choice value="1" name="Gain = x2"  enum="x2"   />
      <choice value="2" name="Gain = x4"  enum="x4"   />
      <choice value="3" name="Gain = x8"  enum="x8"   />
      <choice value="4" name="Gain = x16" enum="x16"  />
      <choice value="5" name="Gain = x32" enum="x32"  />
      <choice value="6" name="Gain = x64" enum="x64"  />
   </choiceOption>

   <binaryOption key="adc_pga_pgachp" condition="adc_pga_present" 
      description="PGA chopping"
      valueFormat="ADC_PGA_PGACHPb(%s)"
      enumStem="AdcPgaChop"
      toolTip="Controls PGA chopping to remove/reduce offset">
      <choice value="0" enum="Disabled" name="No chopping"        isDefault="true" />
      <choice value="1" enum="Enabled"  name="Chopping enabled"   />
   </binaryOption>

<!-- ========== ADC clock sources =============================== -->

   <intOption key="adcInternalClock" 
      derived="true"
      constant="true"
      description="Frequency of Internal ADC clock"
      toolTip="Varies with ADLPC and ADHSC"
      value="2000000"
      origin="Internal ADC clock"
      units="Hz"/>

   <choiceOption key="adc_cfg1_adiclk" 
      description="ADC Clock Source"
      enumStem="AdcClockSource"
      target="adcInputClock"
      toolTip="Clock source for the ADC module" >
      <choice value="0" name="Bus clock"                   ref="/SIM/system_bus_clock[]"      enum="Bus"       code="SystemBusClock"            />
      <choice value="1" name="Irc48M clock"                ref="/SIM/system_irc48m_clock"     enum="Irc48mClk" code="SimInfo::irc48mClock"      condition="/SIM/system_irc48m_clock"  />
      <choice value="1" name="Bus clock/2"                 ref="/SIM/system_bus_clock,(%%/2)" enum="Busdiv2"   code="SystemBusClock/2"          condition="!/SIM/system_irc48m_clock" />
      <choice value="2" name="Alternate clock (OSCERCLK)"  ref="/OSC0/oscer_clock"            enum="OscerClk"  code="Osc0Info::getOscerClock()" />
      <choice value="3" name="Asynchronous clock (ADACK)"  ref="/ADC0/adcInternalClock"       enum="Asynch"    code="$(adcInternalClock)"       isDefault="true" />
   </choiceOption>
   
   <intOption key="adcInputClock"  
      constant="true"
      derived="true" 
      origin="ADC clock"
      units="Hz"
      description="Frequency of ADC Clock" />
   
   <clockCodeTemplate variable="adc_cfg1_adiclk"
      returnFormat="%s"
   ><![CDATA[
      \t/**
      \t * Get %description
      \t *
      \t * @param %enumParam %tooltip
      \t *
      \t * @return Clock frequency in Hz
      \t */
      \tstatic uint32_t getAdcClock(%enumClass %enumParam) {
      \t   
      \t   switch(%enumParam) {
      \t      default: return 0;
      %body
      \t   }
      \t}\n\n
   ]]></clockCodeTemplate>
   
   <choiceOption key="adc_cfg1_adiv" 
      description="Clock Divide Select"
      enumStem="AdcClockDivider"
      target="adcClockFrequency"
      toolTip="Selects the divide ratio used by the ADC to generate the internal clock ADCK">
      <choice value="0" name="Divide by 1" ref="adcInputClock"    enum="1" isDefault="true" />
      <choice value="1" name="Divide by 2" ref="adcInputClock,(%%/2)" enum="2" />
      <choice value="2" name="Divide by 4" ref="adcInputClock,(%%/4)" enum="4" />
      <choice value="3" name="Divide by 8" ref="adcInputClock,(%%/8)" enum="8" />
   </choiceOption>

   <intOption key="adcClockFrequency" 
      constant="true"
      description="Frequency of ADC clock"
      toolTip="Determined from clock source and prescaler"
      derived="true"
      units="Hz"/>

<!-- ========== ADC =============================== -->

   <choiceOption key="adc_cfg1_mode" description="ADC Resolution"
      enumStem="AdcResolution"
      toolTip="The resolutions available vary with single-ended/differential modes\n
               Note the equivalence between modes e.g. 8-bit-se = 9-bit-diff" >
      <choice value="0" name="8-bit unsigned (single-ended mode)"   enum="8bit_se"    />
      <choice value="2" name="10-bit unsigned (single-ended mode)"  enum="10bit_se"   />
      <choice value="1" name="12-bit unsigned (single-ended mode)"  enum="12bit_se"   />
      <choice value="3" name="16-bit unsigned (single-ended mode)"  enum="16bit_se"   condition="adc_cfg1_mode_16bit_present" />
      <choice value="0" name="9-bit signed (differential mode)"     enum="9bit_diff"  condition="adc_cfg1_mode_diff_present" />
      <choice value="2" name="11-bit signed (differential mode)"    enum="11bit_diff" condition="adc_cfg1_mode_diff_present" />
      <choice value="1" name="13-bit signed (differential mode)"    enum="13bit_diff" condition="adc_cfg1_mode_diff_present" />
      <choice value="3" name="16-bit signed (differential mode)"    enum="16bit_diff" condition="adc_cfg1_mode_diff_present&amp;&amp;adc_cfg1_mode_16bit_present" />
   </choiceOption>

   <if condition="adc_cfg1_mode" >
      <template  discardRepeats="true" namespace="all" key="/ADC/get_maximums" ><![CDATA[
         \t/**
         \t * Get ADC maximum conversion value for an single-ended range
         \t *
         \t * @param adcResolution
         \t *
         \t * @return range e.g. AdcResolution_8bit_se => (2^8)-1
         \t */
         \tstatic constexpr int getSingleEndedMaximum(AdcResolution adcResolution) {
         \t   switch(adcResolution) {
         \t      case AdcResolution_8bit_se:  return (1<<8)-1;
         \t      case AdcResolution_10bit_se: return (1<<10)-1;
         \t      case AdcResolution_12bit_se: return (1<<12)-1;\n
      ]]></template>
      <template discardRepeats="true" namespace="all" key="/ADC/get_maximums" condition="adc_cfg1_mode_16bit_present"  ><![CDATA[
         \t      case AdcResolution_16bit_se: return (1<<16)-1;\n
      ]]></template>
      <template discardRepeats="true" namespace="all" key="/ADC/get_maximums" ><![CDATA[
         \t      default:                     return 0;
         \t   }
         \t}\n\n
      ]]></template>
   </if>
   
   <if condition="adc_cfg1_mode&amp;&amp;adc_cfg1_mode_diff_present">
      <template discardRepeats="true" namespace="all" key="/ADC/get_maximums" ><![CDATA[
      \t/**
      \t * Get ADC maximum conversion value for an differential range
      \t *
      \t * @param adcResolution
      \t *
      \t * @return range e.g. AdcResolution_9bit_diff => (2^8)-1
      \t */
      \tstatic constexpr int getDifferentialMaximum(AdcResolution adcResolution) {
      \t   switch(adcResolution) {
      \t      case AdcResolution_9bit_diff:   return (1<<8)-1;
      \t      case AdcResolution_11bit_diff:  return (1<<10)-1;
      \t      case AdcResolution_13bit_diff:  return (1<<12)-1;\n
      ]]></template>
      <template  discardRepeats="true" namespace="all" key="/ADC/get_maximums" condition="adc_cfg1_mode_16bit_present" ><![CDATA[
      \t      case AdcResolution_16bit_diff:  return (1<<15)-1;\n
      ]]></template>
      <template discardRepeats="true" namespace="all" key="/ADC/get_maximums" ><![CDATA[
      \t      default:                        return 0;
      \t   }
      \t}\n
      ]]></template>
   </if>
   
   <binaryOption key="adc_cfg1_adlpc" description="Low-Power Configuration"
      enumStem="AdcPower"
      toolTip="Adjust power consumption">
      <choice value="0" enum="Normal" name="Normal power configuration" isDefault="true" />
      <choice value="1" enum="Low"    name="Low-power configuration (reduced speed)" />
   </binaryOption>

   <choiceOption key="adc_sample" description="Long Sample Time Select"
      enumStem="AdcSample"
      valueFormat="(%s)"     
      toolTip="Selects sample times \n
               Longer times allow higher impedance inputs to be accurately sampled or\n
               shorter times maximize conversion speed for lower impedance inputs\n
               It also affects the conversion rate and power consumption for continuous mode">
      <choice value="ADC_CFG1_ADLSMP(0)"                    enum="4"   name="4 ADCK total" isDefault="true" />
      <choice value="ADC_CFG1_ADLSMP(1)|ADC_CFG2_ADLSTS(3)" enum="6"   name="+2 ADCK cycles; 6 ADCK total" />
      <choice value="ADC_CFG1_ADLSMP(1)|ADC_CFG2_ADLSTS(2)" enum="10"  name="+6 ADCK cycles; 10 ADCK total" />
      <choice value="ADC_CFG1_ADLSMP(1)|ADC_CFG2_ADLSTS(1)" enum="16"  name="+12 ADCK cycles; 16 ADCK total" />
      <choice value="ADC_CFG1_ADLSMP(1)|ADC_CFG2_ADLSTS(0)" enum="24"  name="+20 ADCK cycles; 24 ADCK total" />
   </choiceOption>

   <choiceOption key="adc_sc3_avg" description="Hardware Average Select"
      enumStem="AdcAveraging"
      valueFormat="(%s)"     
      toolTip="Determines how many ADC conversions will be averaged\n
               by the hardware to create the ADC result">
      <choice value="ADC_SC3_AVGE(0)"                                    enum="off"  name="1 sample" isDefault="true" />
      <choice value="ADC_SC3_AVGE(1)|ADC_SC3_AVGS(0)"                    enum="4"    name="4 samples"    />
      <choice value="ADC_SC3_AVGE(1)|ADC_SC3_AVGS(1)"                    enum="8"    name="8 samples"    />
      <choice value="ADC_SC3_AVGE(1)|ADC_SC3_AVGS(2)"                    enum="16"   name="16 samples"   />
      <choice value="ADC_SC3_AVGE(1)|ADC_SC3_AVGS(3)"                    enum="32"   name="32 samples"   />
      <choice value="AdcAveraging_32|ADC_SC3_CAL_MASK|ADC_SC3_CALF_MASK" enum="Cal"  name="32 samples + clear flag + start calibration" />
   </choiceOption>

   <binaryOption key="adc_cfg2_adhsc" description="High-Speed Configuration"
      enumStem="AdcClockRange"
      toolTip="Configures the ADC for high-speed clock operation\n
               This actually extends the number of conversion clock cycles\n
               but is offset by allowing a faster input clock">
      <choice value="0" enum="Normal" name="Normal conversion sequence selected" isDefault="true" />
      <choice value="1" enum="High"   name="High-speed conversion sequence selected" />
   </binaryOption>

   <binaryOption key="adc_cfg2_adacken" description="Asynchronous Clock Output Enable"
      enumStem="AdcAsyncClock"
      toolTip="Enables the ADC internal asynchronous clock source irrespective of ADC need.\n
         This reduces the initial delay at the start of a sequence of conversions.\n
	 It also allows use of the ADC internal clock as a clock source for other peripherals">
      <choice value="0" enum="Disabled" name="Asynchronous clock output disabled" isDefault="true" />
      <choice value="1" enum="Enabled" name="Asynchronous clock output enabled" />
   </binaryOption>

   <choiceOption key="adc_sc2_refsel" description="Voltage Reference Selection"
      enumStem="AdcRefSel"
      toolTip="Selects the voltage reference source used for conversions">
      <choice value="0" enum="VrefHL"  name="VRefH and VRefl" isDefault="true" />
      <choice value="1" enum="VrefOut" name="Gnd and VrefOut(1.2V)" />
      <choice value="0" enum="Default" name="Default" />
   </choiceOption>

   <binaryOption key="adc_sc2_dmaen" condition="adc_sc2_dmaen_present"
      description="DMA Enable"
      enumStem="AdcDma"
      toolTip="Enables use of DMA with ADC">
      <choice value="0" enum="Disabled" name="Disabled" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Enabled" />
   </binaryOption>

   <binaryOption key="adc_sc1_aien" description="Enables conversion interrupts"
      enumStem="AdcInterrupt"
      toolTip="An interrupt is triggered at the end of each conversion">
      <choice value="0" enum="Disabled" name="Disabled" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Enabled" />
   </binaryOption>

   <binaryOption key="adc_pretrigger" description="Selects the pretrigger"
      enumStem="AdcPretrigger"
      valueFormat="(%s)"
      toolTip="Selects which SC1[x]/R[x] register pair to use">
      <choice value="0" enum="A"  name="Use pretrigger A = SC1[0]/R[0]" isDefault="true" />
      <choice value="1" enum="B"  name="Use pretrigger B = SC1[1]/R[1]" />
   </binaryOption>

   <binaryOption key="adc_cfg2_muxsel" description="Selects between A/B multiplexor inputs on some ADC channels"
      enumStem="AdcMuxsel"
      toolTip="Some ADC inputs may be multiplexed to two pins e.g. adcCh4a and adcCh4b">
      <choice value="0" enum="A"  name="The multiplexor selects A channels" />
      <choice value="1" enum="B"  name="The multiplexor selects B channels" isDefault="true" />
   </binaryOption>

   <binaryOption key="adc_sc3_adco" description="Selects between single and continuous conversion"
      enumStem="AdcContinuous"
      toolTip="When enabled, continuous conversion are triggered when the first conversion is initiated">
      <choice value="0" enum="Disabled" name="Single conversion on each trigger" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Continuous conversions after 1st trigger" />
   </binaryOption>

   <choiceOption key="adc_sc2_compare" description="Compare function"
      enumStem="AdcCompare"
      valueFormat="(%s)"
      toolTip="Enables comparison of ADC result with CV1 and CV2" >
      <choice value="ADC_SC2_ACFE(0)"                                                enum="Disabled"              name="No comparison done"          isDefault="true"    />
      <choice value="ADC_SC2_ACFE(1)|ADC_SC2_ACREN(0)|ADC_SC2_ACFGT(0)"              enum="LessThan"              name="ADC value &lt; low"                              />
      <choice value="ADC_SC2_ACFE(1)|ADC_SC2_ACREN(0)|ADC_SC2_ACFGT(1)"              enum="GreaterThanOrEqual"    name="ADC value &gt;= low"                             />
      <choice value="ADC_SC2_ACFE(1)|ADC_SC2_ACREN(1)|ADC_SC2_ACFGT(0)|(0&lt;&lt;8)" enum="OutsideRangeExclusive" name="(ADC value &lt; low) or (ADC value &gt; high)"   />
      <choice value="ADC_SC2_ACFE(1)|ADC_SC2_ACREN(1)|ADC_SC2_ACFGT(1)|(1&lt;&lt;8)" enum="OutsideRangeInclusive" name="(ADC value &lt;= low) or (ADC value &gt;= high)" />
      <choice value="ADC_SC2_ACFE(1)|ADC_SC2_ACREN(1)|ADC_SC2_ACFGT(0)|(1&lt;&lt;8)" enum="InsideRangeExclusive"  name="(low &lt; ADC value &lt; high)"                  />
      <choice value="ADC_SC2_ACFE(1)|ADC_SC2_ACREN(1)|ADC_SC2_ACFGT(1)|(0&lt;&lt;8)" enum="InsideRangeInclusive"  name="(low &lt;= ADC value &lt;= high)"                />
   </choiceOption>

   <intOption key="low_comparison_value" description="ADC low comparison value" 
      toolTip="Low value for ADC automatic comparison\n
         This value is assumed unsigned"
      min="0" max="0xFFFF"
      />
   
   <intOption key="high_comparison_value" description="ADC high comparison value" 
      toolTip="High value for ADC automatic comparison\n
         This value is assumed unsigned"
      min="0" max="0xFFFF"
      />
   
   <intOption key="adc_cv1" description="ADC CV1 value" 
      toolTip="CV1 threshold value\n
         Either low or high value" 
      constant="true" 
      derived="true" />
   <intOption key="adc_cv2" description="ADC CV2 value" 
      toolTip="CV2 threshold value\n
         Either low or high value"  
      constant="true" 
      derived="true" />
   
   <binaryOption key="adc_sc2_adtrg" description="Conversion Trigger Select"
      enumStem="AdcTrigger"
      toolTip="Selects the type of trigger used for initiating a conversion">
      <choice value="0" enum="Software" name="Software trigger (write to SC1A)" isDefault="true" />
      <choice value="1" enum="Hardware" name="Hardware trigger (ADHWT source)" />
   </binaryOption>
   
   <category name="Advanced" description="Advanced Options" >
      <aliasOption key="/SIM/sim_sopt7_adc$(_instance)alttrgen"  constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt7_adc$(_instance)pretrgsel" constant="false" optional="true"/>
      <aliasOption key="/SIM/sim_sopt7_adc$(_instance)trgsel"    constant="false" optional="true"/>
   </category>

   <xi:include href="_irqOption.xml"/>
      
   <template><![CDATA[
     \t//! Default resolution
     \tstatic constexpr uint32_t defaultAdcResolution = ADC_CFG1_MODE($(adc_cfg1_mode));
     
     \t//! Default value for ADCx_CV1 register
     \tstatic constexpr uint32_t cv1  = $(adc_cv1);
     
     \t//! Default value for ADCx_CV2 register
     \tstatic constexpr uint32_t cv2  = $(adc_cv2);\n\n
   ]]></template>

   <template><![CDATA[
      \t//! Default value for ADCx_CFG1 register
      \tstatic constexpr uint32_t cfg1 = \n
   ]]></template>
   <template variables="adc_cfg1_adiclk"     ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription\n ]]></template>
   <template variables="adc_cfg1_mode"       ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription\n ]]></template>
   <template variables="adc_sample"          ><![CDATA[ \t   (%symbolicValueExpression&ADC_CFG1_ADLSMP_MASK) | // %shortDescription\n ]]></template>
   <template variables="adc_cfg1_adiv"       ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription\n ]]></template>
   <template variables="adc_cfg1_adlpc"      ><![CDATA[ \t   %symbolicValueExpression;  // %shortDescription\n\n]]></template>

   <template><![CDATA[
      \t//! Default value for ADCx_CFG2 register
      \tstatic constexpr uint32_t cfg2 = \n
   ]]></template>
   <template variables="adc_cfg2_muxsel"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription\n ]]></template>
   <template variables="adc_sample"       ><![CDATA[ \t   (%symbolicValueExpression&ADC_CFG2_ADLSTS_MASK) | // %shortDescription\n ]]></template>
   <template variables="adc_cfg2_adhsc"   ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription\n ]]></template>
   <template variables="adc_cfg2_adacken" ><![CDATA[ \t   %symbolicValueExpression;  // %shortDescription\n\n ]]></template>

   <template><![CDATA[
      \t//! Default value for ADCx_SC2 register
      \tstatic constexpr uint32_t sc2 = \n
   ]]></template>
   <template variables="adc_sc2_compare" ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription\n ]]></template>
   <template variables="adc_sc2_dmaen"   ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription\n ]]></template>
   <template variables="adc_sc2_adtrg"   ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription\n ]]></template>
   <template variables="adc_sc2_refsel"  ><![CDATA[ \t   %symbolicValueExpression;  // %shortDescription\n\n ]]></template>
   
   <template key="/ADC/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_name)
   \t */
   \ttypedef AdcBase_T<$(_class)Info> $(_class);\n
   ]]></template>
      
   <signals/>
   
   <xi:include href="_clockOption.xml"/>
      
   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.AdcValidate">
   </validate>

   <projectActionList id = "adc_files" >
      <copy source="Project_Headers/adc.h"                    target="Project_Headers/adc.h"                    overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-comparison-example.cpp" target="Snippets/analogue-comparison-example.cpp" overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-example.cpp"            target="Snippets/analogue-example.cpp"            overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-diff-example.cpp"       target="Snippets/analogue-diff-example.cpp"       overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-interrupt-example.cpp"  target="Snippets/analogue-interrupt-example.cpp"  overwrite="true"  derived="true" />
      <copy source="Snippets/analogue-joystick-example.cpp"   target="Snippets/analogue-joystick-example.cpp"   overwrite="true"  derived="true" />
   </projectActionList>
   
</fragment>
