<!-- ____ Expression functions ____
    *  Ordinal(arg)              => Long arg as is, String arg 1st char as int, boolean arg as 0L/1L 
    *  ToString(arg)             => arg.toString(); 
    *  Character(longarg)        => Character.toString((char)longarg); 
    *  ExpandPinList(arg, sep)   => Expanded list e.g. PT(A-B)(0-1) => PTA0;PTA1;PTB0;PTB1
    *  Exists(varname)           => Whether Variable varname exists 
    *  SignalExists(signame)     => Whether Signal signame exists
    *  SignalMapped(signame)     => Whether Signal signame is mapped to a pin
    *  Prettify(string)          => Prettify the string as a name e.g. PTA => Pta 
    *  ToLowerCase(string)       => string.toUpperCase()
    *  ToUpperCase(string)       => string.toLowerCase()
    *  Format(format,args...)    => String.format(format, args...)
    *  ReplaceAll(string,regex,substitution)    => String.format(format, args...)
    
-->

<!-- ____ General substitutions ____
    *  $(_Structname)   => e.g FTM2 => Ftm or FtmQuad etc
    *  $(_STRUCTNAME)   => e.g FTM2 => FTM or FTMQUAD etc
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
 -->

<!-- ____ Template substitutions ________
    *

    In config function
    ---------------------
    * <li>%configFieldAssignment          Expression of form '%register = (%register & ~%mask)|%registerName
    * <li>%configRegAssignment            Expression of form '%register = %registerName
    
    In constructor
    ----------------
    * <li>%constructorBitSet              Expression of form '%registerName |= %paramExpression
    * <li>%constructorFieldAssignment     Expression of form '%registerName  = (%registerName & ~%mask)|%paramExpression
    * <li>%constructorRegAssignment       Expression of form '%registerName  = %paramExpression

    In setter
    -----------
    * <li>%regAssignment                  Expression of form '%register = %paramExpression
    * <li>%fieldAssignment                Expression of form '%register = (%register & ~%mask)|%paramExpression
    
    In getter
    -----------
    * <li>%fieldExtract                   Expression of form '(%register & %mask)

    General
    ---------
    
    * <li>%baseType[index]                Underlying type for enum or int etc
    * <li>%defaultValue[index]            Default value of variable
    * <li>%description[index]             Description from variable e.g. Compare Function Enable

    * <li>%initExpression                 Based on variables etc. Similar to (%register&%mask)
    
    * <li>%macro[index]                   From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG"
    * <li>%mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%maskingExpression              Based on variable etc. Similar to (%register&%mask)
    * <li>%multilineDescription           Brief description of all variables

    * <li>%param[index]                   Formatted parameter for function
    * <li>%paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramExpression                Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%paramName[index]               Based on typeName with lower-case first letter adcCompare
    * <li>%params                         Formatted parameter list for function
    * <li>%paramType[index]               Based on typeName e.g. AdcCompare (or uint32_t)

    * <li>%register[index]                Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]            Name of corresponding register (lower-case for Init()) e.g. apctl1
    * <li>%registerNAME[index]            Name of corresponding register (upper-case for Init()) e.g. APCTL1
    * <li>%returnType[index]              Based on typeName e.g. AdcCompare (or uint32_t) (references and const stripped)

    * <li>%shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * <li>%symbolicExpression[index]      Symbolic formatted value e.g. AdcCompare_Disabled

    * <li>%tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function

    * <li>%valueExpression                Numeric variable value e.g. 0x3
    * <li>%variable[index]                Variable name e.g. /ADC0/adc_sc2_acfe
-->

