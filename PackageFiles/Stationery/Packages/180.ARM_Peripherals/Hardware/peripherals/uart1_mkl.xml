<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- uart1_mkl.xml -->
<!--
Devices using this peripheral: 
-->
<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="UART">

   <xi:include href="_default_instance.xml"/>

   <xi:include href="_mapPinsOption_on.xml"/>

   <aliasOption key="/SIM/sim_sopt2_uart$(_instance)src" optional="true" constant="false" />
   <aliasOption key="/SIM/Uart$(_instance)Clock"         optional="true" />
   
   <choiceOption name="defaultBaudRate" 
      description="UART default baud rate"
      toolTip="Used by default UART setup for stdio">
      <choice value="110"     name="110" />
      <choice value="300"     name="300" />
      <choice value="600"     name="600" />
      <choice value="1200"    name="1200" />
      <choice value="2400"    name="2400" />
      <choice value="4800"    name="4800" />
      <choice value="9600"    name="9600" />
      <choice value="14400"   name="14400" />
      <choice value="19200"   name="19200" />
      <choice value="28800"   name="28800" />
      <choice value="38400"   name="38400" />
      <choice value="56000"   name="56000" />
      <choice value="57600"   name="57600" />
      <choice value="115200"  name="115200" isDefault="true" />
   </choiceOption>

   <binaryOption name="uartClass" 
      description="Input buffering"
      toolTip="This option determines whether an interrupt-driven driver\n 
               incorporating a queue is used to buffer input data" >
      <choice name="Unbuffered" value="Uart_basic_T" />
      <choice name="Buffered"   value="UartBuffered_basic_T" />
   </binaryOption>
   
   <intOption name="receiveBufferSize" description="Size of input buffer" 
      toolTip="This value determines the size of the receive buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <intOption name="transmitBufferSize" description="Size of output buffer" 
      toolTip="This value determines the size of the transmit buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <category name="Advanced" description="Advanced options">
      <aliasOption key="/SIM/sim_sopt5_uart$(_instance)ode"   optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt5_uart$(_instance)txsrc" optional="true" constant="false" />
      <aliasOption key="/SIM/sim_sopt5_uart$(_instance)rxsrc" optional="true" constant="false" />
   </category>
   
   <stringOption name="irq_pattern"        constant="true" value="^UART%i_?(RxTx|Error|Lon)?$" hidden="true" />
   <stringOption name="irq_classHandler"   constant="true" value="%c%i::irq$1Handler" hidden="true" />
   <xi:include href="_irqOptionSubstituted.xml"/>
   
   <xi:include href="_clockOption.xml"/>
      
   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.UartValidate">
   </validate>

   <projectActionList id = "uart_files">
      <copy source="Snippets/uart-example.cpp"     target="Snippets/uart-example.cpp"  overwrite="true"  derived="true" />
      <copy source="Project_Headers/uart.h"        target="Project_Headers/uart.h"     overwrite="true"  derived="true" macroReplace="true" />
   </projectActionList>
         
   <template><![CDATA[
   \t//! Indicates whether the UART needs a write to clear status errors
   \tstatic constexpr bool statusNeedsWrite = false;

   \t//! Default Baud rate used if not explicitly given
   \tstatic constexpr uint32_t defaultBaudRate = $(defaultBaudRate);
   
   \t//! Default buffer size for receive queue when interrupt driven
   \tstatic constexpr unsigned receiveBufferSize = $(receiveBufferSize);

   \t//! Default buffer size for transmit queue when interrupt driven
   \tstatic constexpr unsigned transmitBufferSize = $(transmitBufferSize);

   \t/**
   \t * Get input clock frequency
   \t *
   \t * @return Input clock frequency as a uint32_t in Hz
   \t */
   \tstatic inline uint32_t getInputClockFrequency() {
   \t   return SimInfo::getUart$(_instance)Clock();
   \t}\n\n
   ]]></template>
   
   <template name="/CONSOLE/Includes" namespace="all"  ><![CDATA[
   #include "uart.h"
   ]]></template>

   <template name="/UART/declarations" namespace="all"  ><![CDATA[
      \t/**
      \t * Class representing $(_name) interface
      \t *
      \t * <b>Example</b>
      \t * @code
      \t *  // Instantiate interface
      \t *  USBDM::$(_class) uart;
      \t *
      \t *  for(int i=0; i++;) {
      \t *     uart.writeln("Hello world ", i);
      \t *  }
      \t *  @endcode
      \t */
      \ttypedef  $(/$(_name)/uartClass:$(_base_class)_T)<$(_class)Info> $(_class);\n\n
   ]]></template>

   <signals/>
</peripheralPage>
