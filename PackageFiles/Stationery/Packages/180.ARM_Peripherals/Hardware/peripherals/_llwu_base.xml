<?xml version="1.0" encoding="UTF-8"
?>
<!DOCTYPE fragment SYSTEM "_menu.dtd" >
<!-- _llwu_base.xml -->

<fragment xmlns:xi="http://www.w3.org/2001/XInclude">

   <xi:include href="_default_instance.xml"/>
 
   <template namespace="usbdm" ><![CDATA[
      \t/**
      \t * LLWU peripheral wake-up mode
      \t */
      \tenum LlwuPeripheralMode {
      \t   LlwuPeripheralMode_Disabled = false, //!< Wake-up by peripheral disabled
      \t   LlwuPeripheralMode_Enabled  = true,  //!< Wake-up by peripheral enabled
      \t};
      \t\n\n
   ]]></template>

   <template key="llwu_base_init" namespace="all"  ><![CDATA[
      \t   llwu->PE1   = Info::pe1;
      \t   llwu->PE2   = Info::pe2;\n
   ]]></template>

   <template namespace="usbdm" ><![CDATA[
      \t/**
      \t * Wake-up pin control
      \t *
      \t * Enables and configures the edge detection for the wakeup pin
      \t */
      \tenum LlwuPinMode {
      \t   LlwuPinMode_Disabled    = (LLWU_PE1_WUPE0(0)|LLWU_PE1_WUPE1(0)|LLWU_PE1_WUPE2(0)|LLWU_PE1_WUPE3(0)), ///< Wake-up pin disabled
      \t   LlwuPinMode_RisingEdge  = (LLWU_PE1_WUPE0(1)|LLWU_PE1_WUPE1(1)|LLWU_PE1_WUPE2(1)|LLWU_PE1_WUPE3(1)), ///< Wake-up on pin rising edge
      \t   LlwuPinMode_FallingEdge = (LLWU_PE1_WUPE0(2)|LLWU_PE1_WUPE1(2)|LLWU_PE1_WUPE2(2)|LLWU_PE1_WUPE3(2)), ///< Wake-up on pin falling edge
      \t   LlwuPinMode_EitherEdge  = (LLWU_PE1_WUPE0(3)|LLWU_PE1_WUPE1(3)|LLWU_PE1_WUPE2(3)|LLWU_PE1_WUPE3(3)), ///< Wake-up on pin either edge
      \t};\n\n
   ]]></template>

   <category name="Pin sources" description="Wakeups from pins">  
      <for keys  ="r,   p  " 
           values="1,   0  ;
                   1,   1  ;
                   1,   2  ;
                   1,   3  ;
                   2,   4  ;
                   2,   5  ;
                   2,   6  ;
                   2,   7  ;
                   3,   8  ;
                   3,   9  ;
                   3,   10 ;
                   3,   11 ;
                   4,   12 ;
                   4,   13 ;
                   4,   14 ;
                   4,   15 ;
                   5,   16 ;
                   5,   17 ;
                   5,   18 ;
                   5,   19 ;
                   6,   20 ;
                   6,   21 ;
                   6,   22 ;
                   6,   23 ;
                   7,   24 ;
                   7,   25 ;
                   7,   26 ;
                   7,   27 ;
                   8,   28 ;
                   8,   29 ;
                   8,   30 ;
                   8,   31 "
           >
         <choiceOption key="llwu_pe%(r)_wupe%(p)" condition="llwu_pe%(r)_present"
            description="Unused input %(p)"
            valueFormat="(LLWU_PE%(r)_WUPE%(p)_MASK&amp;(%s))"
            toolTip="Enables and configures the edge detection for the wakeup pin">
            <choice name="Wake-up pin disabled"        value="LlwuPinMode_Disabled"     isDefault="true" /> 
            <choice name="Wake-up on pin rising edge"  value="LlwuPinMode_RisingEdge"   /> 
            <choice name="Wake-up on pin falling edge" value="LlwuPinMode_FallingEdge"  /> 
            <choice name="Wake-up on pin either edge"  value="LlwuPinMode_EitherEdge"   />
         </choiceOption>
      </for>
   
      <for keys  ="r,   p0,  p1,  p2,  p3  " 
           values="1,    0,   1,   2,   3;
                   2,    4,   5,   6,   7;
                   3,    8,   9,  10,  11;
                   4,   12,  13,  14,  15;
                   5,   16,  17,  18,  19;
                   6,   20,  21,  22,  23;
                   7,   24,  25,  26,  27;
                   8,   28,  29,  30,  31"
           >
         <initialValueTemplate 
            variables="
               llwu_pe%(r)_wupe%(p0),
               llwu_pe%(r)_wupe%(p1),
               llwu_pe%(r)_wupe%(p2),
               llwu_pe%(r)_wupe%(p3)"     
         ><![CDATA[
            \t/// LLWU Pin Enable register %(r)
            \tstatic constexpr uint8_t pe%(r) = %expression\n\n
         ]]></initialValueTemplate>
      </for>
   

      <choiceOption key="llwu_filt_filte"  hidden="true"
         enumStem="LlwuFilterPinMode"
         description="Wakup On External Pin with Digital Filter"  
         toolTip="Controls the digital filter options for the external pin detect">
         <choice name="Wake-up disabled"                  enum="Disabled"     value="0" isDefault="true" />
         <choice name="Wake-up on filtered rising edge"   enum="RisingEdge"   value="1" />
         <choice name="Wake-up on filtered falling edge"  enum="FallingEdge"  value="2" />
         <choice name="Wake-up on either filtered edge"   enum="EitherEdge"   value="3" />
      </choiceOption>   
      
      <for keys="n" values="1;2;3;4">
         <choiceOption key="llwu_filt%(n)_filte"   derivedFrom="llwu_filt_filte"   condition="llwu_filt%(n)_present" />
         <choiceOption key="llwu_filt%(n)_filtsel"  condition="llwu_filt%(n)_present"
            description="Filter %(n) Pin Select" 
            toolTip="Selects 1 of the external signals to be muxed into the filter">
            <choice name="" value="" enum="dummy" />
         </choiceOption>   
   
         <initialValueTemplate 
            variables="
               llwu_filt%(n)_filte,
               llwu_filt%(n)_filtsel"     
         ><![CDATA[
            \t/// Pin Filter %(n) register
            \tstatic constexpr uint8_t filt%(n) = %expression\n\n
         ]]></initialValueTemplate>
      
         <template key="llwu_base_init" namespace="all"  condition="llwu_filt%(n)_present" ><![CDATA[
            \t   llwu->FILT%(n) = Info::filt%(n)|LLWU_FILT_FILTF_MASK;\n
         ]]></template>
      </for>
   </category>
        
   <template key="declarations" namespace="all"  ><![CDATA[
      \t/**
      \t * Class representing LLWU
      \t */
      \tclass Llwu : public LlwuBase_T<LlwuInfo> {};
   ]]></template>
   
   <xi:include href="_mapPinsOption.xml"/>   
   <xi:include href="_irqOption.xml"/>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.LlwuValidate">
   </validate>

   <signals/>

   <projectActionList id = "llwu_files" >
      <copy source="Project_Headers/llwu.h"            target="Project_Headers/llwu.h"            overwrite="true" derived="true" />
      <copy source="Snippets/llwu-example-mk22f.cpp"   target="Snippets/llwu-example-mk22f.cpp"   overwrite="true" derived="true" />
      <copy source="Snippets/llwu-example-mkl25z.cpp"  target="Snippets/llwu-example-mkl25z.cpp"  overwrite="true" derived="true" />
   </projectActionList>
   
</fragment>
