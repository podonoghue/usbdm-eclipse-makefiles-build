<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pmc.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Power Management Controller">

   <equation key="suppressIrqHandler"        value="" />
   <equation key="irq_parameters"            value="PmcInterruptReason pmcInterruptReason" />
   <equation key="irq_dummy_parameters"      value="PmcInterruptReason" />
   <equation key="irq_call"                  value="pmcInterruptReason" />
   <equation key="generateDefault"           value="false" />
   <equation key="configureInStartupDefault" value="false" />
   <xi:include href="enablePeripheral.xml"  />

   <constant key="definitionsInHeader" value="true" type="Boolean" />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <intOption key="system_low_power_clock"
      hidden="true"
      locked="true"
      derived="true"
      origin="LPO Clock"
      units="Hz"
      description="Frequency of Internal Low Power Oscillator [LPO] Clock"
      toolTip="Dependent on device. [Typically ~1kHz]"
      value="1000"/>

   <template><![CDATA[
      \t//! Frequency of Low Power Oscillator (LPO) Clock [~1kHz]
      \tstatic constexpr uint32_t system_low_power_clock = $(system_low_power_clock)UL;

      \t/**
      \t * Get LPO clock
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic constexpr uint32_t getLpoClock() {
      \t   return system_low_power_clock;
      \t}\n\n
   ]]></template>

   <title description="Low Voltage Detect" />

   <!-- ************* LVDSC1 ****************** -->

   <choiceOption key="pmc_lvdsc1_action" condition="pmc_lvdsc1_lvdre_present&amp;&amp;pmc_lvdsc1_lvdie_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="PMC_LVDSC1_LVDRE(%s),PMC_LVDSC1_LVDIE(%s)"
      typeName="PmcLowVoltageAction"
      baseType="uint8_t"
      description="Low-voltage detect action"
      toolTip="Selects interrupt or reset on low voltage detect\n
               Note that selecting reset is a write-once selection">
      <choice value="0,0" enum="None"      name="None"               />
      <choice value="0,1" enum="Interrupt" name="Interrupt"          />
      <choice value="1,0" enum="Reset"     name="Reset (write-once)" />
   </choiceOption>

   <choiceOption key="pmc_lvdsc1_lvdv" condition="pmc_lvdsc1_lvdv_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcLowVoltageDetectLevel"
      baseType="uint8_t"
      description="Low-Voltage Detect level select"
      toolTip="Selects the LVD trip point voltage (Vlvd)">
      <choice value="0" enum="Low"  name="Low trip point selected"  />
      <choice value="1" enum="High" name="High trip point selected" />
   </choiceOption>

   <binaryOption key="pmc_lvdsc1_lvdf" condition="pmc_lvdsc1_lvdf_present"
      hidden="true"
      derived="true"
      typeName="PmcLowVoltageEventFlag"
      baseType="uint8_t"
      toolTip="This read-only status bit indicates a low-voltage detect event"
      description="Low-Voltage Detect Flag" >
      <choice name="NotDetected"  value="0" enum="NotDetected" />
      <choice name="Detected"     value="1" enum="Detected"    />
   </binaryOption >

   <binaryOption key="pmc_lvdsc1_lvdack" condition="pmc_lvdsc1_lvdack_present"
      hidden="true"
      derived="true"
      typeName="PmcLowVoltageEventClear"
      baseType="uint8_t"
      toolTip="Clears low voltage warning error detection flag"
      description="Acknowledge Low-Voltage Detect" >
      <choice value="0" name="NoAction"   enum="NoAction"   />
      <choice value="1" name="EventClear" enum="EventClear" />
   </binaryOption>

   <!-- ************* LVDSC2 ****************** -->

   <binaryOption key="pmc_lvdsc2_lvwie" condition="pmc_lvdsc2_lvwie_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcLowVoltageWarningAction"
      baseType="uint8_t"
      toolTip="Action to take on Low Voltage Warning"
      description="Low-Voltage Warning Interrupt Enable" >
      <choice value="0" enum="None"      name="No action" isDefault="true" />
      <choice value="1" enum="Interrupt" name="Interrupt" />
   </binaryOption>

   <choiceOption key="pmc_lvdsc2_lvwv" condition="pmc_lvdsc2_lvwv_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcLowVoltageWarningLevel"
      baseType="uint8_t"
      toolTip="Selects the LVW trip point voltage (Vlvw)\n
               The actual voltage for the warning depends on pmc_lvdsc1_lvdv"
      description="Low-Voltage Warning Voltage Select" >
      <choice value="0" enum="Low"     name="Low trip point selected"   />
      <choice value="1" enum="MidLow"  name="Mid 1 trip point selected" />
      <choice value="2" enum="MidHigh" name="Mid 2 trip point selected" />
      <choice value="3" enum="High"    name="High trip point selected"  />
   </choiceOption>

   <binaryOption key="pmc_lvdsc2_lvwack" condition="pmc_lvdsc2_lvwack_present"
      hidden="true"
      derived="true"
      typeName="PmcLowVoltageWarningEventClear"
      baseType="uint8_t"
      toolTip="Clears low voltage warning detection flag"
      description="Acknowledge Low-Voltage Warning" >
      <choice value="0" name="NoAction"   enum="NoAction"   />
      <choice value="1" name="EventClear" enum="EventClear" />
   </binaryOption>

   <binaryOption key="pmc_lvdsc2_lvwf" condition="pmc_lvdsc2_lvwf_present"
      hidden="true"
      derived="true"
      enabledBy="enablePeripheralSupport"
      typeName="PmcLowVoltageWarningEventFlag"
      baseType="uint8_t"
      toolTip="This bit indicates a low-voltage warning event.\n
               LVWF is set when VSupply transitions below the trip point"
      description="Low-Voltage Warning Flag" >
      <choice name="No event"              value="0" enum="NoEvent"/>
      <choice name="Low-voltage detected"  value="1" enum="LowVoltageDetected"/>
   </binaryOption >

   <!-- ************* REGSC ****************** -->

   <if condition="PmcBandgapOperationInLowPower_EnabledHighSpeed" >
      <choiceOption key="pmc_regsc_bgen" condition="pmc_regsc_bgen_present"
         enabledBy="enablePeripheralSupport"
         typeName="PmcBandgapOperationInLowPower"
         baseType="uint8_t"
         description="Bandgap Enable In VLPx Operation"
         toolTip="BGEN controls whether the bandgap is enabled in \n
                  lower power modes of operation (VLPx, LLS, and VLLSx)">
         <choice value="0" enum="Disabled"         name="Disabled" isDefault="true" />
         <choice value="1" enum="Enabled"          name="Enabled" />
         <choice value="1" enum="EnabledHighSpeed" name="Enabled HighSpeed" />
      </choiceOption>
   <else/>
      <binaryOption key="pmc_regsc_bgen" condition="pmc_regsc_bgen_present"
         enabledBy="enablePeripheralSupport"
         typeName="PmcBandgapOperationInLowPower"
         baseType="uint8_t"
         description="Bandgap Enable In VLPx Operation"
         toolTip="BGEN controls whether the bandgap is enabled in \n
                  lower power modes of operation (VLPx, LLS, and VLLSx)">
         <choice value="0" enum="Disabled" name="Disabled" isDefault="true" />
         <choice value="1" enum="Enabled"  name="Enabled" />
      </binaryOption>
   </if>

   <binaryOption key="pmc_regsc_bgbe" condition="pmc_regsc_bgbe_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcBandgapBuffer"
      baseType="uint8_t"
      description="Bandgap Buffer Enable"
      toolTip="Controls whether the band-gap reference is available to internal devices e.g. CMP etc">
      <choice value="0" enum="Disabled" name="Disabled" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Enabled" />
   </binaryOption>

   <binaryOption key="pmc_regsc_ackiso" condition="pmc_regsc_ackiso_present"
      hidden="true"
      typeName="PmcPinStatus"
      baseType="uint8_t"
      description="Acknowledge Isolation"
      toolTip="Reading indicates whether certain peripherals and I/O pads are in a latched state\n
               as a result of having been in a VLLS mode. \n
               Writing one to this bit releases the peripherals and I/O pads to their\n
               normal run mode state.">
      <choice value="0" name="Not isolated" enum="NotIsolated" />
      <choice value="1" name="Isolated"     enum="Isolated"    isDefault="true" />
   </binaryOption>

   <binaryOption key="pmc_regsc_regons" condition="pmc_regsc_regons_present"
      hidden="true"
      typeName="PmcRegulator"
      baseType="uint8_t"
      description="Regulation Status"
      toolTip="Indicates the current status of the internal voltage regulator.">
      <choice value="0" name="Stop mode" enum="InStopMode" />
      <choice value="1" name="Run mode"  enum="InRunMode"  />
   </binaryOption>

   <!-- ____ HVDSC1 ____ -->
   <title description="High Voltage Detect" />

   <binaryOption key="pmc_hvdsc1_hvdf" condition="pmc_hvdsc1_hvdf_present"
      hidden="true"
      derived="true"
      typeName="PmcHighVoltageEventFlag"
      baseType="uint8_t"
      toolTip="This read-only status field indicates a high-voltage detect event."
      description="High-Voltage Detect Flag" >
      <choice name="Event not detected"  value="0" enum="NotDetected" />
      <choice name="Event detected"      value="1" enum="Detected" />
   </binaryOption >

   <binaryOption key="pmc_hvdsc1_hvdack" condition="pmc_hvdsc1_hvdack_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcHighVoltageEventClear"
      baseType="uint8_t"
      toolTip="This write-only field is used to acknowledge high voltage detection errors.\n
               Write 1 to clear HVDF. Reads always return 0."
      description="High-Voltage Detect Acknowledge" >
      <choice name="Choice 0"  value="0" enum="NoAction" />
      <choice name="Choice 1"  value="1" enum="ClearFlag" />
   </binaryOption >

   <choiceOption key="pmc_hvdsc1_action" condition="pmc_hvdsc1_hvdie_present&amp;&amp;pmc_hvdsc1_hvdre_present"
      valueFormat="PMC_HVDSC1_HVDIE(%s),PMC_HVDSC1_HVDRE(%s)"
      enabledBy="enablePeripheralSupport"
      typeName="PmcHighVoltageAction"
      baseType="uint8_t"
      toolTip="Controls action on High Voltage detect.\n
               Note: The reset action is write-once"
      description="High-Voltage Detect Action" >
      <choice name="Hardware interrupt disabled"      value="0,0" enum="NoAction" />
      <choice name="Request a hardware interrupt"     value="1,0" enum="Interrupt" />
      <choice name="Force an MCU reset (write once)"  value="0,1" enum="Reset" />
   </choiceOption >

   <binaryOption key="pmc_hvdsc1_hvdv" condition="pmc_hvdsc1_hvdv_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcHighVoltageDetectLevel"
      baseType="uint8_t"
      toolTip="Selects the HVD trip point voltage (V HVD )."
      description="High-Voltage Detect Voltage Select" >
      <choice name="Low trip point"   value="0" enum="Low" />
      <choice name="High trip point"  value="1" enum="High" />
   </binaryOption >

   <!-- ____ SRAMCTL ____ -->
   <title description="SRAM Power-down in VLLS" />
   <bitfieldOption key="pmc_sramctl_vlls2pd" condition="pmc_sramctl_vlls2pd_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcSramOffInLowPower"
      baseType="uint8_t"
      toolTip="Configures whether an array is powered during LLS2 mode and VLLS2 mode."
      description="SRAM VLLS2 Power-down"
      value="0xFF"
      enumClass="true"
      >
      <bitField description="SRAM2 [1FFF_8000-1FFF_FFFF] 32KB not retained"  bit="0" name="SRAM2" />
      <bitField description="SRAM3 [1FFF_0000-1FFF_7FFF] 32KB not retained"  bit="1" name="SRAM3" />
      <bitField description="SRAM4 [2000_8000-2000_FFFF] 32KB not retained"  bit="2" name="SRAM4" />
      <bitField description="SRAM5 [2001_0000-2002_7FFF] 128KB not retained" bit="3" name="SRAM5" />
      <bitField description="SRAM6 [2003_0000-2003_7FFF] 64KB not retained"  bit="4" name="SRAM6" />
      <bitField description="SRAM7 [1FFC_0000-1FFE_FFFF] 192KB not retained" bit="5" name="SRAM7" />
      <bitField description="SRAM8 [3400_FFFF-3403_7FFF] 256KB not retained" bit="6" name="SRAM8" />
      <bitField description="SRAM9 [3404_FFFF-3407_7FFF] 256KB not retained" bit="7" name="SRAM9" />
   </bitfieldOption >

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
   ><![CDATA[
      \t// Pointer to $(_BASENAME) hardware instance
      \tvolatile $(_Type) *$(_basename);
      \t
      \t/**
      \t * Constructor
      \t *
      \t * @param $(_basename) $(_BASENAME) hardware instance
      \t */
      \t$(_BasicInfo)(volatile $(_Type) * $(_basename)) : $(_basename)($(_basename)) {
      \t}
      \t\n
   ]]></template>


   <!-- ____ Getters and Setters ____________ -->

   <variableTemplate variables="pmc_regsc_ackiso"
   ><![CDATA[
      \t/**
      \t * %description
      \t * Releases the peripherals and I/O pads to their normal run mode state.
      \t */
      \tstatic void releaseIsolation() {
      \t   %register = %register|%mask;
      \t}
      \t\n
   ]]></variableTemplate>

   <for keys="field           : set   : get   : clear : genCode                 : name"
        values="

         pmc_lvdsc1_lvdf      : false : true  : false : enableGettersAndSetters : LowVoltageDetectFlag;
         pmc_lvdsc1_lvdack    : false : false : true  : enableGettersAndSetters : LowVoltageDetect;
         pmc_lvdsc1_action    : true  : true  : false : enableGettersAndSetters : LowVoltageAction;
         pmc_lvdsc1_lvdv      : true  : true  : false : enableGettersAndSetters : LowVoltageResetLevel;

         pmc_lvdsc2_lvwf      : false : true  : false : enableGettersAndSetters : LowVoltageWarningFlag;
         pmc_lvdsc2_lvwack    : false : false : true  : enableGettersAndSetters : LowVoltageWarning;
         pmc_lvdsc2_lvwie     : true  : true  : false : enableGettersAndSetters : LowVoltageWarningAction;
         pmc_lvdsc2_lvwv      : true  : true  : false : enableGettersAndSetters : LowVoltageWarningLevel;

         pmc_regsc_bgen       : true  : true  : false : enableGettersAndSetters : BandgapEnable;
         pmc_regsc_ackiso     : false : true  : true  : enableGettersAndSetters : PinIsolation;
         pmc_regsc_regons     : false : true  : false : enableGettersAndSetters : RegulatorStatus;
         pmc_regsc_bgbe       : true  : true  : false : enableGettersAndSetters : BandgapBuffer;

         pmc_hvdsc1_hvdf      : false : true  : false : enableGettersAndSetters : HighVoltageDetectFlag;
         pmc_hvdsc1_hvdack    : false : false : true  : enableGettersAndSetters : HighVoltageDetect;
         pmc_hvdsc1_action    : true  : true  : false : enableGettersAndSetters : HighVoltageAction;
         pmc_hvdsc1_hvdv      : true  : true  : false : enableGettersAndSetters : HighVoltageResetLevel;

         pmc_sramctl_vlls2pd  : true  : true  : false : $(_InfoGuard) : SramRetention" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t * (%(field))
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t * (%(field))
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %returnType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
         tooltipPadding="x*x"      ><![CDATA[
         \t/**
         \t * Clear %description
         \t * (%(field))
         \t *
         \t * %tooltip
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!--   __________ class $(_BasicInfo) _______________________________ -->

   <template where="definitions" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
   \t/**
   \t * Indicates reason for execution of PMC call-back
   \t */
   \tenum PmcInterruptReason {
   \t   PmcInterruptReason_LowVoltageDetect,//!< Low Voltage Detect
   \t   PmcInterruptReason_LowVoltageWarning//!< Low Voltage Warning
   \t};
   \t\n
   ]]>
   </template>

   <!--   __________ Interrupt handling _______________________________ -->

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * $(_Class) interrupt handler
      \t * Passes control to call-back function
      \t */
      \tstatic void irqHandler() {
      \t   if ((pmc->LVDSC1 & (PMC_LVDSC1_LVDF_MASK|PMC_LVDSC1_LVDIE_MASK)) ==
      \t         (PMC_LVDSC1_LVDF_MASK|PMC_LVDSC1_LVDIE_MASK)) {
      \t
      \t      // LVDF enabled and detected
      \t      pmc->LVDSC1 = pmc->LVDSC1 | PMC_LVDSC1_LVDF_MASK;
      \t      sCallback(PmcInterruptReason_LowVoltageDetect);
      \t      return;
      \t   }
      \t   if ((pmc->LVDSC2 & (PMC_LVDSC2_LVWF_MASK|PMC_LVDSC2_LVWIE_MASK)) ==
      \t         (PMC_LVDSC2_LVWF_MASK|PMC_LVDSC2_LVWIE_MASK)) {
      \t
      \t      // LVWF enabled and detected
      \t      pmc->LVDSC2 = pmc->LVDSC2 | PMC_LVDSC2_LVWF_MASK;
      \t      sCallback(PmcInterruptReason_LowVoltageWarning);
      \t      return;
      \t   }
      \t}
      \t\n
   ]]>
   </template>

   <!-- ________ PMC Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(uint32_t status) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   PmcLowVoltageAction_Interrupt ,           // Low-voltage detect action - Interrupt
      \t *   PmcLowVoltageDetectLevel_Low ,            // Low-Voltage Detect level select - Low trip point selected
      \t *   PmcLowVoltageWarningAction_None ,         // Low-Voltage Warning Interrupt Enable - No action
      \t *   PmcLowVoltageWarningLevel_Low ,           // Low-Voltage Warning Voltage Select - Low trip point selected
      \t *   PmcBandgapOperationInLowPower_Disabled ,  // Bandgap Enable In VLPx Operation - Disabled
      \t *   PmcBandgapBuffer_Disabled,                // Bandgap Buffer Enable - Disabled
      \t *   NvicPriority_VeryLow,                     // IRQ level for this peripheral - VeryLow
      \t *   pmcCallback,                              // Call-back function
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tprivate:
      \t   /**
      \t    * Prevent implicit parameter conversions
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(Types...) = delete;
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      %multilineDescription
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : pmc_lvdsc1_action,pmc_lvdsc1_lvdv                    :   0      ;
               %baseType   : pmc_lvdsc2_lvwack,pmc_lvdsc2_lvwie,pmc_lvdsc2_lvwv   :   0      ;
               %baseType   : pmc_regsc_bgen,pmc_regsc_ackiso,pmc_regsc_bgbe       :   0      ;
               %baseType   : pmc_hvdsc1_hvdack,pmc_hvdsc1_hvdie,pmc_hvdsc1_hvdre,
                             pmc_hvdsc1_hvdv                                      :   0      ;
               %baseType   : pmc_sramctl_vlls2pd                                  :   0      ;
               %paramType  : /PCR/nvic_irqLevel                                   :   %defaultValue   " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    * (%variables)
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="/PCR/nvic_irqLevel;
            pmc_lvdsc1_action;
            pmc_lvdsc1_lvdv;
            pmc_lvdsc2_lvwie;pmc_lvdsc2_lvwv;
            pmc_regsc_bgen;pmc_regsc_bgbe;
            pmc_hvdsc1_action;pmc_hvdsc1_hvdv;
            pmc_sramctl_vlls2pd
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%variables)
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Configure methods ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t\n
   ]]>
   </template>
   <template codeGenCondition="irqHandlingMethod" condition="irqHandlingMethod" >
   <![CDATA[
      \t   // Configure call-backs
      \t   setCallback(init.callbackFunction);\n
   ]]>
   </template>
   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t   enableNvicInterrupts(init.irqlevel);
      \t
   ]]>
   </template>
   <for keys=
             " var                                                   : statement            "
      values=" pmc_lvdsc1_action, pmc_lvdsc1_lvdv                    : %configRegAssignment  ;
               pmc_lvdsc2_lvwie,pmc_lvdsc2_lvwv                      : %configRegAssignment  ;
               pmc_regsc_bgen,pmc_regsc_bgbe                         : %configRegAssignment  ;
               pmc_hvdsc1_action, pmc_hvdsc1_hvdv                    : %configRegAssignment  ;
               pmc_sramctl_vlls2pd                                   : %configRegAssignment " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      padToComments="40"
      variables="
            pmc_lvdsc1_action,
            pmc_lvdsc1_lvdv,
            pmc_lvdsc2_lvwie,pmc_lvdsc2_lvwv,
            pmc_regsc_bgen,pmc_regsc_bgbe,
            pmc_hvdsc1_action,pmc_hvdsc1_hvdv,
            pmc_sramctl_vlls2pd,
            irqLevel" >
   <![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues
      \t};
      \t\n
   ]]>
   </variableTemplate>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="pmc_files" >
      <copy source="Project_Headers/pmc.h"     target="Project_Headers/pmc.h"     overwrite="true" derived="true" />
      <copy source="Snippets/pmc-example.cpp"  target="Snippets/pmc-example.cpp"  overwrite="true" derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

</peripheralPage>