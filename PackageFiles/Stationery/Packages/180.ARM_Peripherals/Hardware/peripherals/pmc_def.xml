<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pmc.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Power Management Controller">

   <constant key="irq_parameters"           type="String"  value="&quot;PmcInterruptReason pmcInterruptReason&quot;"  />
   <constant key="irq_dummy_parameters"     type="String"  value="&quot;PmcInterruptReason&quot;"  />
   <constant key="irq_call"                 type="String"  value="&quot;pmcInterruptReason&quot;"  />
   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %paramType[index]               As for %paramType
    * %paramName[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %fieldAssignment;         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %maskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Structname)BasicInfo&quot;" />

   <intOption key="system_low_power_clock"
      locked="true"
      derived="true"
      origin="LPO Clock"
      units="Hz"
      description="Frequency of Internal Low Power Oscillator [LPO] Clock"
      toolTip="Dependent on device. [Typically ~1kHz]"
      value="1000"/>

   <template><![CDATA[
      \t//! Frequency of Low Power Oscillator (LPO) Clock [~1kHz]
      \tstatic constexpr uint32_t system_low_power_clock = $(system_low_power_clock)UL;

      \t/**
      \t * Get LPO clock
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic constexpr uint32_t getLpoClock() {
      \t   return system_low_power_clock;
      \t}\n\n
   ]]></template>

   <!-- ************* LVDSC1 ****************** -->

   <choiceOption key="pmc_lvdsc1_action" condition="pmc_lvdsc1_lvdre_present&amp;&amp;pmc_lvdsc1_lvdie_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="PMC_LVDSC1_LVDRE(%s),PMC_LVDSC1_LVDIE(%s)"
      typeName="PmcLowVoltageAction"
      enumType="uint8_t"
      description="Low-voltage detect action"
      toolTip="Selects interrupt or reset on low voltage detect\n
               Note that selecting reset is a write-once selection">
      <choice value="0,0" enum="None"      name="None"               />
      <choice value="0,1" enum="Interrupt" name="Interrupt"          />
      <choice value="1,0" enum="Reset"     name="Reset (write-once)" />
   </choiceOption>

   <choiceOption key="pmc_lvdsc1_lvdv" condition="pmc_lvdsc1_lvdv_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcLowVoltageDetectLevel"
      enumType="uint8_t"
      description="Low-Voltage Detect level select"
      toolTip="Selects the LVD trip point voltage (Vlvd)">
      <choice value="0" enum="Low"  name="Low trip point selected"  />
      <choice value="1" enum="High" name="High trip point selected" />
   </choiceOption>

   <binaryOption key="pmc_lvdsc1_lvdf" condition="pmc_lvdsc1_lvdf_present"
      hidden="true"
      typeName="PmcLowVoltageDetect"
      toolTip="This read-only status bit indicates a low-voltage detect event"
      description="Low-Voltage Detect Flag" >
      <choice name="NotDetected"  value="0" enum="NotDetected" />
      <choice name="Detected"     value="1" enum="Detected"    />
   </binaryOption >

   <binaryOption key="pmc_lvdsc1_lvdack" condition="pmc_lvdsc1_lvdack_present"
      hidden="true"
      typeName="PmcLowVoltageAck"
      toolTip="Clears low voltage warning error detection flag"
      description="Acknowledge Low-Voltage Detect" >
      <choice value="1" name="Disabled" enum="Ack" isDefault="true" />
   </binaryOption>

   <!-- ************* LVDSC2 ****************** -->

   <binaryOption key="pmc_lvdsc2_lvwie" condition="pmc_lvdsc2_lvwie_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcLowVoltageWarningAction"
      enumType="uint8_t"
      toolTip="Action to take on Low Voltage Warning"
      description="Low-Voltage Warning Interrupt Enable" >
      <choice value="0" enum="None"      name="No action" isDefault="true" />
      <choice value="1" enum="Interrupt" name="Interrupt" />
   </binaryOption>

   <choiceOption key="pmc_lvdsc2_lvwv" condition="pmc_lvdsc2_lvwv_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcLowVoltageWarningLevel"
      enumType="uint8_t"
      toolTip="Selects the LVW trip point voltage (Vlvw)\n
               The actual voltage for the warning depends on pmc_lvdsc1_lvdv"
      description="Low-Voltage Warning Voltage Select" >
      <choice value="0" enum="Low"     name="Low trip point selected"   />
      <choice value="1" enum="MidLow"  name="Mid 1 trip point selected" />
      <choice value="2" enum="MidHigh" name="Mid 2 trip point selected" />
      <choice value="3" enum="High"    name="High trip point selected"  />
   </choiceOption>

   <binaryOption key="pmc_lvdsc2_lvwack" condition="pmc_lvdsc2_lvwack_present"
      hidden="true"
      typeName="PmcLowVoltageWarningAck"
      toolTip="Clears low voltage warning detection flag"
      description="Acknowledge Low-Voltage Warning" >
      <choice value="0" name="Disabled" enum="Ack" isDefault="true" />
   </binaryOption>

   <binaryOption key="pmc_lvdsc2_lvwf" condition="pmc_lvdsc2_lvwf_present"
      hidden="true"
      enabledBy="enablePeripheralSupport"
      typeName="PmcLvdsc2Lvwf"
      toolTip="This bit indicates a low-voltage warning event.\n
               LVWF is set when VSupply transitions below the trip point"
      description="Low-Voltage Warning Flag" >
      <choice name="No event"              value="0" enum="NoEvent"/>
      <choice name="Low-voltage detected"  value="1" enum="LowVoltageDetected"/>
   </binaryOption >

   <!-- ************* REGSC ****************** -->

   <if condition="PmcBandgapOperationInLowPower_EnabledHighSpeed" >
      <choiceOption key="pmc_regsc_bgen" condition="pmc_regsc_bgen_present"
         enabledBy="enablePeripheralSupport"
         typeName="PmcBandgapOperationInLowPower"
         enumType="uint8_t"
         description="Bandgap Enable In VLPx Operation"
         toolTip="BGEN controls whether the bandgap is enabled in \n
                  lower power modes of operation (VLPx, LLS, and VLLSx)">
         <choice value="0" enum="Disabled"         name="Disabled" isDefault="true" />
         <choice value="1" enum="Enabled"          name="Enabled" />
         <choice value="1" enum="EnabledHighSpeed" name="Enabled HighSpeed" />
      </choiceOption>
   <else/>
      <binaryOption key="pmc_regsc_bgen" condition="pmc_regsc_bgen_present"
         enabledBy="enablePeripheralSupport"
         typeName="PmcBandgapOperationInLowPower"
         enumType="uint8_t"
         description="Bandgap Enable In VLPx Operation"
         toolTip="BGEN controls whether the bandgap is enabled in \n
                  lower power modes of operation (VLPx, LLS, and VLLSx)">
         <choice value="0" enum="Disabled" name="Disabled" isDefault="true" />
         <choice value="1" enum="Enabled"  name="Enabled" />
      </binaryOption>
   </if>

   <binaryOption key="pmc_regsc_bgbe" condition="pmc_regsc_bgbe_present"
      enabledBy="enablePeripheralSupport"
      typeName="PmcBandgapBuffer"
      enumType="uint8_t"
      description="Bandgap Buffer Enable"
      toolTip="Controls whether the band-gap reference is available to internal devices e.g. CMP etc">
      <choice value="0" enum="Disabled" name="Disabled" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Enabled" />
   </binaryOption>

   <binaryOption key="pmc_regsc_ackiso" condition="pmc_regsc_ackiso_present"
      hidden="true"
      typeName="PmcPinStatus"
      description="Acknowledge Isolation"
      toolTip="Reading indicates whether certain peripherals and I/O pads are in a latched state\n
               as a result of having been in a VLLS mode. \n
               Writing one to this bit releases the peripherals and I/O pads to their\n
               normal run mode state.">
      <choice value="0" name="Not isolated" enum="NotIsolated" />
      <choice value="1" name="Isolated"     enum="Isolated"    isDefault="true" />
   </binaryOption>

   <binaryOption key="pmc_regsc_regons" condition="pmc_regsc_regons_present"
      hidden="true"
      typeName="PmcRegulator"
      description="Regulation Status"
      toolTip="Indicates the current status of the internal voltage regulator.">
      <choice value="0" name="Stop mode" enum="InStopMode" />
      <choice value="1" name="Run mode"  enum="InRunMode"  />
   </binaryOption>

<!-- Setters and getters -->

   <variableTemplate variables="pmc_regsc_ackiso"
   ><![CDATA[
      \t/**
      \t * %description
      \t * Releases the peripherals and I/O pads to their normal run mode state.
      \t */
      \tstatic void releaseIsolation() {
      \t   %register = %register|%mask;
      \t}
      \t\n
   ]]></variableTemplate>

   <for keys="field           : get   : set   : clear : genCode                 : name"
        values="
         pmc_lvdsc1_lvdf      : true  : false : false : enableGettersAndSetters : LowVoltageDetectFlag;
         pmc_lvdsc1_lvdack    : false : false : true  : enableGettersAndSetters : LowVoltageDetect;
         pmc_lvdsc1_action    : true  : true  : false : enableGettersAndSetters : LowVoltageAction;
         pmc_lvdsc1_lvdv      : true  : true  : false : enableGettersAndSetters : LowVoltageResetLevel;
         pmc_lvdsc2_lvwf      : true  : false : false : enableGettersAndSetters : LowVoltageWarningFlag;
         pmc_lvdsc2_lvwack    : false : false : true  : enableGettersAndSetters : LowVoltageWarning;
         pmc_lvdsc2_lvwie     : true  : true  : false : enableGettersAndSetters : LowVoltageWarningAction;
         pmc_lvdsc2_lvwv      : true  : true  : false : enableGettersAndSetters : LowVoltageWarningLevel;
         pmc_regsc_bgen       : true  : true  : false : enableGettersAndSetters : BandgapEnable;
         pmc_regsc_ackiso     : true  : false : true  : enableGettersAndSetters : PinIsolation;
         pmc_regsc_regons     : true  : false : false : enableGettersAndSetters : RegulatorStatus;
         pmc_regsc_bgbe       : true  : true  : false : enableGettersAndSetters : BandgapBuffer" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!--   ========== class $(_Structname)BasicInfo =============================== -->

   <template namespace="usbdm" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
   \t/**
   \t * Indicates reason for execution of PMC call-back
   \t */
   \tenum PmcInterruptReason {
   \t   PmcInterruptReason_LowVoltageDetect,//!< Low Voltage Detect
   \t   PmcInterruptReason_LowVoltageWarning//!< Low Voltage Warning
   \t};
   \t\n
   ]]>
   </template>

   <template namespace="baseClass" ><![CDATA[
      class $(_Structname)BasicInfo {

      public:\n
   ]]></template>

   <!--   ========== Interrupt handling =============================== -->

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="irqHandlingMethod"
   ><![CDATA[
       \t//! Common class based callback code has been generated for this class of peripheral
       \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
       \t\n
   ]]></variableTemplate>

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Baseclass) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  $(_basename)Callback Callback function to execute on interrupt
      \t *                             Use nullptr to remove callback.
      \t */
      \tstatic void setCallback(CallbackFunction $(_basename)Callback) {
      \t   if ($(_basename)Callback == nullptr) {
      \t      $(_basename)Callback = unhandledCallback;
      \t   }
      \t   // Allow either no handler set yet or removing handler
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || ($(_basename)Callback == unhandledCallback),
      \t         "Handler already set");
      \t   sCallback = $(_basename)Callback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t   if ((pmc->LVDSC1 & (PMC_LVDSC1_LVDF_MASK|PMC_LVDSC1_LVDIE_MASK)) ==
      \t         (PMC_LVDSC1_LVDF_MASK|PMC_LVDSC1_LVDIE_MASK)) {
      \t
      \t      // LVDF enabled and detected
      \t      pmc->LVDSC1 = pmc->LVDSC1 | PMC_LVDSC1_LVDF_MASK;
      \t      sCallback(PmcInterruptReason_LowVoltageDetect);
      \t      return;
      \t   }
      \t   if ((pmc->LVDSC2 & (PMC_LVDSC2_LVWF_MASK|PMC_LVDSC2_LVWIE_MASK)) ==
      \t         (PMC_LVDSC2_LVWF_MASK|PMC_LVDSC2_LVWIE_MASK)) {
      \t
      \t      // LVWF enabled and detected
      \t      pmc->LVDSC2 = pmc->LVDSC2 | PMC_LVDSC2_LVWF_MASK;
      \t      sCallback(PmcInterruptReason_LowVoltageWarning);
      \t      return;
      \t   }
      \t}
      \t\n
   ]]>
   </template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/**
      \t * Callback for programmatically set handler for $(_Class)
      \t */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Structname)BasicInfo::unhandledCallback;
      \t\n
   ]]>
   </template>

   <!--   ========== PMC Init class =============================== -->

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   PmcLowVoltageAction_Interrupt ,           // Low-voltage detect action - Interrupt
      \t *   PmcLowVoltageDetectLevel_Low ,            // Low-Voltage Detect level select - Low trip point selected
      \t *   PmcLowVoltageWarningAction_None ,         // Low-Voltage Warning Interrupt Enable - No action
      \t *   PmcLowVoltageWarningLevel_Low ,           // Low-Voltage Warning Voltage Select - Low trip point selected
      \t *   PmcBandgapOperationInLowPower_Disabled ,  // Bandgap Enable In VLPx Operation - Disabled
      \t *   PmcBandgapBuffer_Disabled,                // Bandgap Buffer Enable - Disabled
      \t *   NvicPriority_VeryLow,                     // IRQ level for this peripheral - VeryLow
      \t *   pmcCallback,                              // Call-back function
      \t *
      \t *   $(_name)Callback,                     // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                // Priority for interrupt - Low
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

<!--   Member variables -->

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="pmc_lvdsc1_lvdack,pmc_lvdsc1_action,pmc_lvdsc1_lvdv"
   ><![CDATA[
      \t   /// Low Voltage Status and Control 1
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="pmc_lvdsc2_lvwack,pmc_lvdsc2_lvwie,pmc_lvdsc2_lvwv"
   ><![CDATA[
      \t   /// Low Voltage Status and Control 2
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="pmc_regsc_bgen,pmc_regsc_ackiso,pmc_regsc_bgbe"
   ><![CDATA[
      \t   /// Regulator Status and Control
      \t   uint8_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %symbolicExpression1;
      \t\n
   ]]></variableTemplate>

<!--   Constructors -->

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
    ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <for keys="r"
      values="
            pmc_lvdsc1_action;
            pmc_lvdsc1_lvdv;
            pmc_lvdsc2_lvwie;
            pmc_lvdsc2_lvwv;
            pmc_regsc_bgen;
            pmc_regsc_bgbe
            " >
      <variableTemplate namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            pmc_lvdsc1_action,
            pmc_lvdsc1_lvdv,
            pmc_lvdsc2_lvwie,
            pmc_lvdsc2_lvwv,
            pmc_regsc_bgen,
            pmc_regsc_bgbe
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
             condition="/$(_STRUCTNAME)/generateSharedIrqInfo" >   <![CDATA[
      \t   if constexpr (irqHandlerInstalled) {
      \t      // Only set call-backs if feature enabled
      \t      setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t   pmc->LVDSC1  = init.lvdsc1;
      \t   pmc->LVDSC2  = init.lvdsc2;
      \t   pmc->REGSC   = init.regsc;
      \t}
      \t\n
   ]]>
   </template>

   <template namespace="baseClass" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
      <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <template namespace="baseClass" >
   <![CDATA[
      }; // class $(_Structname)BasicInfo
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="pmc_files" >
      <copy source="Project_Headers/pmc.h"     target="Project_Headers/pmc.h"     overwrite="true" derived="true" />
      <copy source="Snippets/pmc-example.cpp"  target="Snippets/pmc-example.cpp"  overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

</peripheralPage>