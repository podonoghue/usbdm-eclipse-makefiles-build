<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pmc.xml -->
<!-- INCOMPLETE -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Power Management Controller">

   <xi:include href="_default_instance.xml"/>

   <category name="LPO" description="Low Power Clock Sources" >
      <intOption name="system_low_power_clock"
         constant="true" 
         origin="LPO Clock"
         units="Hz"
         description="Frequency of Internal Low Power Oscillator [LPO] Clock"
         toolTip="Dependent on device. [Typically ~1kHz]" 
         value="1000"/>
      </category>

   <binaryOption name="pmc_lvdsc1_lvdie" 
      description="Low-Voltage Detect Interrupt Enable"
      toolTip="Enables hardware interrupt requests for LVDF">
      <choice value="0" name="Disabled" isDefault="true" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <binaryOption name="pmc_lvdsc1_lvdre" 
      description="Low-Voltage Detect Reset Enable"
      toolTip="This write-once bit enables LVDF events to generate a hardware reset.\n 
               Additional writes are ignored.">
      <choice value="0" name="Disabled" isDefault="true" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <choiceOption name="pmc_lvdsc1_lvdv" 
      description="Low-Voltage Detect Voltage Select"
      toolTip="Selects the LVD trip point voltage (Vlvd)">
      <choice value="0" name="Low trip point selected (Vlvd = Vlvdl)"/>
      <choice value="1" name="High trip point selected (Vlvd = Vlvdh)" />
      <choice value="2" name="Reserved" />
      <choice value="3" name="Reserved" />
   </choiceOption>

   <template><![CDATA[
      \t//! Default value for Low Voltage Detect Status And Control 1 register
      \tstatic constexpr uint32_t pmc_lvdsc1  = 
      \t#ifdef PMC_LVDSC1_LVDV
      \t   PMC_LVDSC1_LVDV($(pmc_lvdsc1_lvdv))   | // Low-Voltage Detect Voltage Select
      \t#endif
      \t   PMC_LVDSC1_LVDIE($(pmc_lvdsc1_lvdie)) | // Low-Voltage Detect Interrupt Enable
      \t   PMC_LVDSC1_LVDRE($(pmc_lvdsc1_lvdre));  // Low-Voltage Detect Reset Enable\n\n
   ]]></template>

   <binaryOption name="pmc_lvdsc2_lvwie" 
      description="Low-Voltage Warning Interrupt Enable"
      toolTip="Enables hardware interrupt requests for LVWF">
      <choice value="0" name="Disabled" isDefault="true" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <choiceOption name="pmc_lvdsc2_lvwv" 
      description="Low-Voltage Warning Voltage Select"
      toolTip="Selects the LVW trip point voltage (Vlvw)\n
               The actual voltage for the warning depends on LVDSC1.LVDV">
      <choice value="0" name="Low trip point selected (Vlvw = Vlvw1)"/>
      <choice value="1" name="Mid 1 trip point selected (Vlvw = Vlvw2)" />
      <choice value="2" name="Mid 2 trip point selected (Vlvw = Vlvw3)" />
      <choice value="3" name="High trip point selected (Vlvw = Vlvw4)" />
   </choiceOption>

   <template><![CDATA[
      \t//! Frequency of Low Power Oscillator (LPO) Clock [~1kHz]
      \tstatic constexpr uint32_t system_low_power_clock = $(system_low_power_clock)UL;
      
      \t//! Default value for Low Voltage Detect Status And Control 2 register
      \tstatic constexpr uint32_t pmc_lvdsc2  = 
      \t#ifdef PMC_LVDSC2_LVWV
      \t   PMC_LVDSC2_LVWV($(pmc_lvdsc2_lvwv))   | // Low-Voltage Warning Voltage Select
      \t#endif
      \t   PMC_LVDSC2_LVWIE($(pmc_lvdsc2_lvwie));  // Low-Voltage Warning Interrupt Enable

      \t/**
      \t * Get LPO clock
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic constexpr uint32_t getLpoClock() {
      \t   return system_low_power_clock;
      \t}\n\n
   ]]></template>

   <binaryOption name="pmc_regsc_bgen" 
      description="Bandgap Enable In VLPx Operation"
      toolTip="BGEN controls whether the bandgap is enabled in \n
               lower power modes of operation (VLPx, LLS, and VLLSx).">
      <choice value="0" name="Disabled" isDefault="true" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <binaryOption name="pmc_regsc_bgbe" 
      description="Bandgap Buffer Enable"
      toolTip="Enables the bandgap buffer.">
      <choice value="0" name="Disabled" isDefault="true" />
      <choice value="1" name="Enabled" />
   </binaryOption>

   <template><![CDATA[
      \t#ifdef PMC_REGSC_BGEN
      \t//! Default value for Regulator Status And Control register
      \tstatic constexpr uint32_t pmc_regsc  = 
      \t   PMC_REGSC_BGEN($(pmc_regsc_bgen)) | // Bandgap Enable In VLPx Operation
      \t   PMC_REGSC_BGBE($(pmc_regsc_bgbe));  // Bandgap Buffer Enable  
      \t#endif\n\n
   ]]></template>

   <template name="/PMC/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_name)
   \t */
   \tclass $(_class) : public $(_base_class)Base_T<$(_class)Info> {};\n
   ]]></template>
      
   <xi:include href="_irqOption.xml"/>
   
   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator">
   </validate>

   <projectActionList id = "pmc_files" >
      <copy source="Project_Headers/pmc.h"     target="Project_Headers/pmc.h"     overwrite="true" derived="true" />
      <copy source="Snippets/pmc-example.cpp"  target="Snippets/pmc-example.cpp"       overwrite="true" derived="true" />
   </projectActionList>
         
</peripheralPage>