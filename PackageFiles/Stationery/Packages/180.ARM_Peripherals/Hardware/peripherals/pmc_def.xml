<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- pmc.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Power Management Controller">

   <xi:include href="_default_instance.xml"/>

   <intOption key="system_low_power_clock"
      constant="true" 
      origin="LPO Clock"
      units="Hz"
      description="Frequency of Internal Low Power Oscillator [LPO] Clock"
      toolTip="Dependent on device. [Typically ~1kHz]" 
      value="1000"/>

   <template><![CDATA[
      \t//! Frequency of Low Power Oscillator (LPO) Clock [~1kHz]
      \tstatic constexpr uint32_t system_low_power_clock = $(system_low_power_clock)UL;
      
      \t/**
      \t * Get LPO clock
      \t *
      \t * @return frequency in Hz as uint32_t
      \t */
      \tstatic constexpr uint32_t getLpoClock() {
      \t   return system_low_power_clock;
      \t}\n\n
   ]]></template>

   <!-- ************* LVDSC1 ****************** -->
   <choiceOption key="pmc_lvdsc1_lvdie_lvdre"
      enumStem="PmcLowVoltageDetectAction" 
      enumType="uint8_t" 
      valueFormat="(%s)"
      description="Low-Voltage Detect action select"
      toolTip="Selects the action to take on low voltage detect\n
               Note that Reset action is a write-once selection">
      <choice value="PMC_LVDSC1_LVDRE(0)|PMC_LVDSC1_LVDIE(0)" enum="None"        name="No Action"/>
      <choice value="PMC_LVDSC1_LVDRE(0)|PMC_LVDSC1_LVDIE(1)" enum="Interrupt"   name="Interrupt"/>
      <choice value="PMC_LVDSC1_LVDRE(1)|PMC_LVDSC1_LVDIE(0)" enum="Reset"       name="Reset"/>
   </choiceOption>

   <choiceOption key="pmc_lvdsc1_lvdv" 
      enumStem="PmcLowVoltageDetectLevel" 
      enumType="uint8_t" 
      description="Low-Voltage Detect voltage select"
      toolTip="Selects the LVD trip point voltage (Vlvd)">
      <choice value="0" enum="Low"  name="Low trip point selected"/>
      <choice value="1" enum="High" name="High trip point selected" />
   </choiceOption>

   <if condition="pmc_lvdsc1_lvdie_lvdre||pmc_lvdsc1_lvdv" >   
      <template><![CDATA[
         \t//! Default value for Low Voltage Detect Status And Control 1 register
         \tstatic constexpr uint32_t pmc_lvdsc1  = \n
      ]]></template>
      <template variable="pmc_lvdsc1_lvdie_lvdre" ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="pmc_lvdsc1_lvdv"        ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template>
      <![CDATA[
         \t   0;\n\n
      ]]></template>
   </if>
   
   <!-- ************* LVDSC2 ****************** -->
   <binaryOption key="pmc_lvdsc2_lvwie" 
      enumStem="PmcLowVoltageWarningAction" 
      enumType="uint8_t" 
      description="Low-Voltage Warning Interrupt Enable"
      toolTip="Action to take on Low Voltage Warning">
      <choice value="0" enum="None"      name="No action" isDefault="true" />
      <choice value="1" enum="Interrupt" name="Interrupt" />
   </binaryOption>

   <choiceOption key="pmc_lvdsc2_lvwv" 
      enumStem="PmcLowVoltageWarningLevel" 
      enumType="uint8_t" 
      description="Low-Voltage Warning Voltage Select"
      toolTip="Selects the LVW trip point voltage (Vlvw)\n
               The actual voltage for the warning depends on pmc_lvdsc1_lvdv">
      <choice value="0" enum="Low"     name="Low trip point selected"   />
      <choice value="1" enum="MidLow"  name="Mid 1 trip point selected" />
      <choice value="2" enum="MidHigh" name="Mid 2 trip point selected" />
      <choice value="3" enum="High"    name="High trip point selected"  />
   </choiceOption>
   
   <if condition="pmc_lvdsc2_lvwie||pmc_lvdsc2_lvwv" >   
      <template><![CDATA[
      \t//! Default value for Low Voltage Detect Status And Control 2 register
      \tstatic constexpr uint32_t pmc_lvdsc2  = \n
      ]]></template>
      <template variable="pmc_lvdsc2_lvwie" ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="pmc_lvdsc2_lvwv"  ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template>
      <![CDATA[
         \t   0;\n\n
      ]]></template>
   </if>

   <!-- ************* REGSC ****************** -->

   <if condition="PmcBandgapOperationInLowPower_EnabledHighSpeed" >
      <choiceOption key="pmc_regsc_bgen" 
         enumStem="PmcBandgapOperationInLowPower" 
         enumType="uint8_t" 
         description="Bandgap Enable In VLPx Operation"
         toolTip="BGEN controls whether the bandgap is enabled in \n
                  lower power modes of operation (VLPx, LLS, and VLLSx)">
         <choice value="0" enum="Disabled"         name="Disabled" isDefault="true" />
         <choice value="1" enum="Enabled"          name="Enabled" />
         <choice value="1" enum="EnabledHighSpeed" name="Enabled HighSpeed" />
      </choiceOption>
   <else/>
      <binaryOption key="pmc_regsc_bgen" 
         enumStem="PmcBandgapOperationInLowPower" 
         enumType="uint8_t" 
         description="Bandgap Enable In VLPx Operation"
         toolTip="BGEN controls whether the bandgap is enabled in \n
                  lower power modes of operation (VLPx, LLS, and VLLSx)">
         <choice value="0" enum="Disabled" name="Disabled" isDefault="true" />
         <choice value="1" enum="Enabled"  name="Enabled" />
      </binaryOption>
   </if>
   
   <binaryOption key="pmc_regsc_bgbe" 
      enumStem="PmcBandgapBuffer" 
      enumType="uint8_t" 
      description="Bandgap Buffer Enable"
      toolTip="Controls whether the band-gap reference is available to internal devices e.g. CMP etc">
      <choice value="0" enum="Disabled" name="Disabled" isDefault="true" />
      <choice value="1" enum="Enabled"  name="Enabled" />
   </binaryOption>

   <if condition="pmc_regsc_bgen||pmc_regsc_bgbe" >   
      <template><![CDATA[
      \t//! Default value for Regulator Status And Control register
      \tstatic constexpr uint32_t pmc_regsc  = \n
      ]]></template>
      <template variable="pmc_regsc_bgen"   ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template variable="pmc_regsc_bgbe"   ><![CDATA[ \t   %symbolicValueExpression | // %shortDescription \n ]]></template>
      <template>
      <![CDATA[
         \t   0;\n\n
      ]]></template>
   </if>
   
   <!-- ************* Common ****************** -->
   
   <template key="/PMC/declarations" namespace="all"  ><![CDATA[
   \t/**
   \t * Class representing $(_name)
   \t */
   \tclass $(_class) : public $(_base_class)Base_T<$(_class)Info> {};\n
   ]]></template>
      
   <xi:include href="_irqOption.xml"/>
   
   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator">
   </validate>

   <projectActionList id = "pmc_files" >
      <copy source="Project_Headers/pmc.h"     target="Project_Headers/pmc.h"     overwrite="true" derived="true" />
      <copy source="Snippets/pmc-example.cpp"  target="Snippets/pmc-example.cpp"  overwrite="true" derived="true" />
   </projectActionList>
         
</peripheralPage>