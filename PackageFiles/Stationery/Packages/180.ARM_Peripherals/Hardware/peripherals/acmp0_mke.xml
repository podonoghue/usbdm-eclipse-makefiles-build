<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- acmp0_mke.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Analogue comparator" >

   <equation key="irq_parameters"            value=""        />
   <equation key="irq_dummy_parameters"      value=""        />
   <equation key="irq_call"                  value=""        />
   <equation key="generateDefault"           value="false"     />
   <equation key="configureInStartupDefault" value="false"     />
   <xi:include href="enablePeripheral.xml"  />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String"
      value='"$(_Class)Info : public $(_Structname)BasicInfo"' />

   <binaryOption key="acmp_cs_acie" condition="acmp_cs_acie_present"
      enabledBy="irqHandlingMethod"
      typeName="AcmpInterrupt"
      baseType="uint8_t"
      description="ACMP Interrupt Enable"
      toolTip="Controls Interrupt generation" >
      <choice name="Interrupt disabled"  value="0" enum="Disabled" />
      <choice name="Interrupt enabled"   value="1" enum="Enabled" />
   </binaryOption >

   <choiceOption key="acmp_cs_acmod" condition="acmp_cs_acmod_present"
      enabledBy="acmp_cs_acie"
      typeName="AcmpMode"
      baseType="uint8_t"
      description="InterruptEdge"
      toolTip="Determines the sensitivity modes of the interrupt trigger" >
      <choice name="Falling edge"      value="0" enum="FallingEdge"     />
      <choice name="Rising edge"       value="1" enum="RisingEdge"      />
      <choice name="Falling edge alt"  value="2" enum="FallingEdgeAlt"  />
      <choice name="Both edges"        value="3" enum="BothEdges"       />
   </choiceOption >

   <!-- ____ CS ____ -->

   <title />

   <binaryOption key="acmp_cs_ace" condition="acmp_cs_ace_present"
      enabledBy="enablePeripheralSupport"
      typeName="AcmpEnable"
      baseType="uint8_t"
      description="Analogue Comparator Enable"
      toolTip="Enables the ACMP module." >
      <choice name="Disabled"    value="0" enum="Disabled" />
      <choice name="Enabled"     value="1" enum="Enabled"  />
   </binaryOption >

   <binaryOption key="acmp_cs_hyst" condition="acmp_cs_hyst_present"
      enabledBy="acmp_cs_ace"
      typeName="AcmpHysterisis"
      baseType="uint8_t"
      description="Analogue Comparator Hysteresis Selection"
      toolTip="Selects ACMP hysterisis." >
      <choice name="20 mV"       value="0" enum="20mV" />
      <choice name="30 mV"       value="1" enum="30mV" />
   </binaryOption >

   <binaryOption key="acmp_cs_acf" condition="acmp_cs_acf_present"
      hidden="true"
      typeName="AcmpFlag"
      baseType="uint8_t"
      description="ACMP Interrupt Flag Bit"
      toolTip="Synchronously set by hardware when ACMP output has a valid edge defined by ACMOD.\n
               Cleared by writing a 0 to this bit. Writing a 1 to this bit has no effect.\n
               The setting of this bit lags the ACMPO ... bus clocks"
      disabledValue="1">
      <choice name="No request"         value="1" enum="Write1Clear" />
   </binaryOption >

   <binaryOption key="acmp_cs_aco" condition="acmp_cs_aco_present"
      hidden="true"
      typeName="AcmpOutputLevel"
      baseType="uint8_t"
      description="ACMP Output - current value of ACMP output when enabled"
      toolTip="" >
      <choice name="ACMP output is low or disabled"  value="0" enum="AcmpOutputLow" />
      <choice name="ACMP output is high"             value="1" enum="AcmpOutputHigh" />
   </binaryOption >

   <!-- ____ C0 ____ -->

   <constant key="inputPinMap" type="String" value='"Inp0,Inp1,Inp2"' condition="!inputPinMap" />

   <choiceOption key="acmp_c0_acpsel_base" condition="acmp_c0_acpsel_present"
      valueFormat="ACMP_C0_ACPSEL(%s)"
      hidden="true"
      derived="true"
      typeName="AcmpInputPlus"
      baseType="uint8_t"
      description="ACMP Positive Input Select"
      toolTip="Selects the positive input source" >
      <choiceExpansion name="External input %(i)" value="%(i)" enum="%(i)" keys="i" dim="3" />
      <choice          name="Internal DAC"        value="3"    enum="Dac" />
   </choiceOption >

   <choiceOption key="acmp_c0_acpsel" condition="acmp_c0_acpsel_present"
      enabledBy="acmp_cs_ace"
      typeName="AcmpInputPlus"
      baseType="uint8_t"
      description="ACMP$(_instance) Positive Input Select"
      toolTip="Selects the $(_Class) positive input source" >
      <choiceExpansion name="%(pin)"       value="%(i)" enum="%(i)" keys="pin" values="=inputPinMap" delimiter="," />
      <choice          name="Internal DAC" value="Dac"  enum="Dac"    />
   </choiceOption >

   <choiceOption key="acmp_c0_acnsel_base" condition="acmp_c0_acnsel_present"
      valueFormat="ACMP_C0_ACNSEL(%s)"
      hidden="true"
      derived="true"
      typeName="AcmpInputMinus"
      baseType="uint8_t"
      description="ACMP Negative Input Select"
      toolTip="Selects the negative input source" >
      <choiceExpansion name="External input %(i)" value="%(i)" enum="%(i)" keys="i" dim="3" />
      <choice          name="Internal DAC"        value="3"    enum="Dac" />
   </choiceOption >

   <choiceOption key="acmp_c0_acnsel" condition="acmp_c0_acnsel_present"
      enabledBy="acmp_cs_ace"
      typeName="AcmpInputMinus"
      baseType="uint8_t"
      description="ACMP Negative Input Select"
      toolTip="Selects the negative input source" >
      <choiceExpansion name="%(pin)"       value="%(i)" enum="%(i)" keys="pin" values="=inputPinMap" delimiter="," />
      <choice          name="Internal DAC" value="Dac"  enum="Dac"    />
   </choiceOption >

   <!-- ____ C1 ____ -->

   <title description="DAC" />

   <binaryOption key="acmp_c1_dacen" condition="acmp_c1_dacen_present"
      enabledBy="acmp_cs_ace"
      typeName="AcmpDacEnable"
      baseType="uint8_t"
      description="DAC Enable"
      toolTip="Enables the DAC" >
      <choice name="Disabled"    value="0" enum="Disabled" />
      <choice name="Enabled"     value="1" enum="Enabled" />
   </binaryOption >

   <binaryOption key="acmp_c1_dacref" condition="acmp_c1_dacref_present"
      enabledBy="acmp_c1_dacen"
      typeName="AcmpDacReference"
      baseType="uint8_t"
      description="DAC Reference Select"
      toolTip="Selects the reference for the DAC" >
      <choice name="Bandgap"     value="0" enum="Bandgap" />
      <choice name="VDDA"        value="1" enum="Vdda"   isDefault="true" />
   </binaryOption >

   <intOption key="acmp_c1_dacval" condition="acmp_c1_dacval_present"
      enabledBy="acmp_c1_dacen"
      typeName="AcmpDacValue"
      baseType="uint8_t"
      description="DAC Output Level Selection"
      toolTip="Selects the DAC output voltage using the formula: \n
               \tVoutput= (Vin/64)x(DACVAL[5:0]+1) \n
               The Voutput range is from Vin/64 to Vin, the step is Vin/64"
      value="0"
      min="0" max="63"
   />

   <!-- ************* Input/Output ****************** -->
   <title description="Input/Output" />

   <constant key="inputPinMap" condition="!inputPinMap" type="String"
      value='"INP0,INP1,INP2"'
   />

   <choiceOption  key="acmp_c2_acipe_base" condition="acmp_c2_acipe_present"
      valueFormat="ACMP_C2_ACIPE(%s)"
      hidden="true"
      derived="true"
      typeName="AcmpInputEnable"
      baseType="uint8_t"
      toolTip="Enables ACMP pins as analogue inputs\n
               Disables other functions"
      description="ACMP Input Pin Enables" >
      <choiceExpansion name="Pin enable %(i)" value="1&lt;&lt;%(i)" enum="%(i)" keys="i" dim="3" />
   </choiceOption>

   <bitmaskOption key="acmp_c2_acipe" condition="acmp_c2_acipe_present"
      enabledBy="acmp_cs_ace"
      typeName="AcmpInputEnable"
      baseType="uint8_t"
      disabledValue="0"
      toolTip="Bitmask controlling which ACMP pins are available as analogue inputs"
      description="ACMP Input Pin Enables"
      bitmask="0x7"
      bitList="=inputPinMap"
      pinMap='="ACMP$(_instance)_IN%i:"+inputPinMap'
      value="0"
   />

   <binaryOption key="acmp_cs_acope" condition="acmp_cs_acope_present"
      baseType="uint8_t"
      enabledBy="acmp_cs_ace"
      typeName="AcmpOutputPin"
      toolTip="Allows the ACMP output to be placed onto external pin"
      description="ACMP Output Pin Enable" >
      <choice name="Pin disabled"  value="0" enum="Disabled" pinMap="ACMP$(_instance)_OUT," />
      <choice name="Pin enabled"   value="1" enum="Enabled"  pinMap="ACMP$(_instance)_OUT,*" />
   </binaryOption >

   <!-- ____ Setters and Getters ____________ -->

   <variableTemplate variables="acmp_c2_acipe" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
   ><![CDATA[
      \t/**
      \t * Allocate %description
      \t * The GPIO function on the associated pin is disabled
      \t *
      %paramDescription
      \t */
      \tstatic void allocateAnalogueInput(%params) {
      \t   %register = %register | %paramName0;
      \t}
      \t
      \t/**
      \t * Release %description
      \t * The GPIO function on the associated pin is enabled
      \t *
      %paramDescription
      \t */
      \tstatic void releaseAnalogueInput(%params) {
      \t   %register = %register & ~%paramName0;
      \t}
      \t\n
   ]]></variableTemplate>

   <for keys="field                     : set   : get   : clear : genCode                 : name"
        values="
         acmp_cs_ace                    : true  : true  : false : enableGettersAndSetters : Enable;
         acmp_cs_hyst                   : true  : true  : false : enableGettersAndSetters : Hysterisis;
         acmp_cs_acf                    : true  : true  : false : enableGettersAndSetters : InterruptFlag;
         acmp_cs_acie                   : true  : true  : false : enableGettersAndSetters : Interrupt;
         acmp_cs_aco                    : false : true  : false : enableGettersAndSetters : OutputLevel;
         acmp_cs_acope                  : true  : true  : false : enableGettersAndSetters : PinEnable;
         acmp_cs_acmod                  : true  : true  : false : enableGettersAndSetters : EdgeSensitivity;

         acmp_c0_acpsel                 : true  : true  : false : enableGettersAndSetters : PositiveInput;
         acmp_c0_acnsel                 : true  : true  : false : enableGettersAndSetters : NegativeInput;

         acmp_c1_dacen                  : true  : true  : false : enableGettersAndSetters : Dac;
         acmp_c1_dacref                 : true  : true  : false : enableGettersAndSetters : DacReference;
         acmp_c1_dacval                 : true  : true  : false : enableGettersAndSetters : DacLevel" >
      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Clear %description
         \t *
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <!-- ________ ACMP Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   AcmpEnable_Enabled ,             // Analogue Comparator Enable - Enabled
      \t *   AcmpHysterisis_20mV ,            // Analogue Comparator Hysteresis Selection - 20 mV
      \t *   AcmpInterrupt_Disabled ,         // ACMP Interrupt Enable - Interrupt disabled
      \t *   AcmpOutputPin_Disabled ,         // ACMP Output Pin Enable - Pin disabled
      \t *   AcmpMode_FallingEdge ,           // InterruptEdge - Falling edge
      \t *   CmpInputPlus_ExternalRef0 , // ACMP Positive Input Select - External ref 0
      \t *   CmpInputMinus_ExternalRef0 , // ACMP Negative Input Select - External ref 0
      \t *   AcmpDacEnable_Disabled ,         // DAC Enable - Disabled
      \t *   AcmpDacReference_Bandgap ,       // DAC Reference Select - Bandgap
      \t *   AcmpDacValue(100),               // DAC Output Level Selection
      \t *
      \t *   // Inputs
      \t *   AcmpInput_Input1,                // ACMP Input Pin Enables
      \t *   AcmpInput_Input2,
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
   ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : acmp_cs_ace,acmp_cs_hyst,acmp_cs_acf,acmp_cs_acie,
                             acmp_cs_acope,acmp_cs_acmod                          :   0      ;
               %baseType   : acmp_c0_acpsel,acmp_c0_acnsel                        :   0      ;
               %baseType   : acmp_c1_dacen,acmp_c1_dacref,acmp_c1_dacval          :   0      ;
               %baseType   : acmp_c2_acipe                                        :   0      " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="acmp_c2_acipe"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %registerName | %paramExpression;
      \t   }
      \t\n
   ]]>
   </variableTemplate>

   <for keys="r"
      values="
            acmp_cs_ace;acmp_cs_hyst;acmp_cs_acie;
            acmp_cs_acope;acmp_cs_acmod;
            acmp_c0_acpsel;acmp_c0_acnsel;
            acmp_c1_dacen;acmp_c1_dacref;acmp_c1_dacval" >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%(r))
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <!-- ____ Init class Configure method ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enable();
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t   setCallback(init.callbackFunction);
      \t   enableNvicInterrupts(init.irqlevel);
      \t\n
   ]]></template>
   <for keys=
             " var                                                    : statement            "
      values=" acmp_c1_dacen,acmp_c1_dacref,acmp_c1_dacval            : %configRegAssignment ;
               acmp_c2_acipe                                          : %configRegAssignment ;
               acmp_c0_acpsel,acmp_c0_acnsel                          : %configRegAssignment ;
               acmp_cs_ace,acmp_cs_hyst,acmp_cs_acf,acmp_cs_acie,
               acmp_cs_acope,acmp_cs_acmod                            : %configRegAssignment " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            acmp_cs_ace,acmp_cs_hyst,acmp_cs_acie,
            acmp_cs_acope,acmp_cs_acmod,
            acmp_c0_acpsel,acmp_c0_acnsel,
            acmp_c1_dacen,acmp_c1_dacref,acmp_c1_dacval,
            acmp_c2_acipe" >
   <![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

   <template where="basicInfo" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \tclass $(_Class) : public $(_Baseclass)Base_T<$(_Class)Info> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="acmp_files" >
      <copy source="Project_Headers/acmp-MKE.h"  target="Project_Headers/acmp.h"  overwrite="true"  derived="true" />
      <copy source="Snippets/cmp-example.cpp" target="Snippets/cmp-example.cpp" overwrite="true" derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="Thes settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
