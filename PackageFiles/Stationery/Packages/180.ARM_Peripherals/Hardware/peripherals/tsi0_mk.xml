<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- tsi0_mk.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Touch Sensing Input" >

   <equation key="suppressIrqHandler"         value="" />
   <equation key="irq_parameters"             value="uint32_t status"  />
   <equation key="irq_dummy_parameters"       value="uint32_t"         />
   <equation key="irq_call_parameters"        value="status"           />
   <equation key="generateDefault"            value="false" />
   <equation key="configureInStartupDefault"  value="false" />
   <xi:include href="enablePeripheral.xml"    />
   <title />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String" value='"$(_Info) : public $(_BasicInfo)"' />

   <template><![CDATA[
      \t//! Base value for PCR (excluding MUX value)
      \tstatic constexpr uint32_t defaultPcrValue  = 0;\n\n
   ]]></template>

   <!-- ____ GENCS ____ -->

   <binaryOption key="tsi_gencs_swts" condition="tsi_gencs_swts_present"
      hidden="true"
      derived="true"
      typeName="TsiSoftwareTrigger"
      baseType="uint32_t"
      description="Software Trigger"
      toolTip="Used to start a scan when software trigger mode is selected" >
      <choice name="NoAction"    value="0" enum="NoAction"  />
      <choice name="Start scan"  value="1" enum="StartScan"/>
   </binaryOption>

   <binaryOption key="tsi_gencs_outrgf" condition="tsi_gencs_outrgf_present"
      hidden="true"
      derived="true"
      typeName="TsiOutOfRangeFlag"
      baseType="uint32_t"
      description="Out of Range Flag"
      toolTip="This flag is set when Out of Range is detected.\n
               Write 1 , when this flag is set, to clear it." >
      <choice name="In Range"               value="0" enum="InRange"/>
      <choice name="Out of Range detected"  value="1" enum="OutOfRangeDetected"/>
   </binaryOption >

   <choiceOption key="tsi_gencs_scanmode" condition="tsi_gencs_tsien_present&amp;&amp;tsi_gencs_stm_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="TSI_GENCS_TSIEN(%s),TSI_GENCS_STM(%s)"
      typeName="TsiScanMode"
      baseType="uint32_t"
      description="Select scan mode"
      toolTip="Enables and selects between software triggered or automatic hardware scanning"
   >
      <choice value="0,0" name="Disabled"                                  enum="Disabled"  />
      <choice value="1,0" name="Software triggered single scan"            enum="Triggered" />
      <choice value="1,1" name="Hardware scanning (repeated periodically)" enum="Periodic"  />
   </choiceOption>

   <binaryOption key="tsi_gencs_stpe" condition="tsi_gencs_stpe_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiStopMode"
      baseType="uint32_t"
      description="TSI STOP Enable"
      toolTip="Controls operation while in Low Power Modes (STOP, VLPS, LLS and VLLS{3,2,1})" >
      <choice name="Disabled in low power"  value="0" enum="Disabled" />
      <choice name="Enabled in low power"   value="1" enum="Enabled"  />
   </binaryOption >

   <choiceOption key="tsi_gencs_intsource" condition="tsi_gencs_erie_present&amp;&amp;tsi_gencs_esor_present"
      enabledBy="irqHandlingMethod"
      valueFormat="TSI_GENCS_TSIIE(%s),TSI_GENCS_ESOR(%s)"
      typeName="TsiEventSource"
      baseType="uint32_t"
      description="Touch Sensing Input Event Enable"
      toolTip="Enables events from Out-of-Range and End-of-Scan conditions" >
      <choice value="0,0" name="Disabled"       enum="Disabled"   />
      <choice value="1,0" name="Out Of Range"   enum="OutOfRange" />
      <choice value="1,1" name="End Of Scan"    enum="EndOfScan"  />
   </choiceOption>

   <binaryOption key="tsi_gencs_erie" condition="tsi_gencs_erie_present"
      enabledBy="irqHandlingMethod"
      typeName="TsiErrorAction"
      baseType="uint32_t"
      toolTip="Action taken on Short Detection or Overrun Error"
      description="Action on Error" >
      <choice name="None"        value="0" enum="None"/>
      <choice name="Interrupt"   value="1" enum="Interrupt"/>
   </binaryOption >

   <choiceOption key="tsi_gencs_nscn" condition="tsi_gencs_nscn_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiConsecutiveScan"
      baseType="uint32_t"
      description="Consecutive Scan number"
      toolTip="Number of Consecutive Scans Per Electrode" >
      <choice          name="Scan Electrode 1 time"     enum="1Time"     value="0"   />
      <choiceExpansion name="Scan Electrode %(n) times" enum="%(n)Times" value="=ToString(%(n)-1)" keys="n" dim="2,32" />
   </choiceOption>

   <choiceOption key="tsi_gencs_ps" condition="tsi_gencs_ps_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiElectrodePrescaler"
      baseType="uint32_t"
      toolTip="Only be changed if the TSI module is disabled"
      description="Prescaler for Electrode Oscillator Frequency" >
      <choice name="Divide by 1"    value="0" enum="DivBy1" />
      <choice name="Divide by 2"    value="1" enum="DivBy2" />
      <choice name="Divide by 4"    value="2" enum="DivBy4" />
      <choice name="Divide by 8"    value="3" enum="DivBy8" isDefault="true"/>
      <choice name="Divide by 16"   value="4" enum="DivBy16" />
      <choice name="Divide by 32"   value="5" enum="DivBy32" />
      <choice name="Divide by 64"   value="6" enum="DivBy64" />
      <choice name="Divide by 128"  value="7" enum="DivBy128"/>
   </choiceOption >


   <choiceOption key="tsi_gencs_lpscnitv" condition="tsi_gencs_lpscnitv_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiLowPowerScanInterval"
      baseType="uint32_t"
      toolTip=""
      description="Low-Power Mode Scan Interval" >
      <choice name="1 ms interval"    value="0"  enum="1ms"   />
      <choice name="5 ms interval"    value="1"  enum="5ms"   />
      <choice name="10 ms interval"   value="2"  enum="10ms"  />
      <choice name="15 ms interval"   value="3"  enum="15ms"  />
      <choice name="20 ms interval"   value="4"  enum="20ms"  />
      <choice name="30 ms interval"   value="5"  enum="30ms"  />
      <choice name="40 ms interval"   value="6"  enum="40ms"  />
      <choice name="50 ms interval"   value="7"  enum="50ms"  />
      <choice name="75 ms interval"   value="8"  enum="75ms"  />
      <choice name="100 ms interval"  value="9"  enum="100ms" />
      <choice name="125 ms interval"  value="10" enum="125ms" />
      <choice name="150 ms interval"  value="11" enum="150ms" />
      <choice name="200 ms interval"  value="12" enum="200ms" />
      <choice name="300 ms interval"  value="13" enum="300ms" />
      <choice name="400 ms interval"  value="14" enum="400ms" />
      <choice name="500 ms interval"  value="15" enum="500ms" />
   </choiceOption >

   <binaryOption key="tsi_gencs_lpclks" condition="tsi_gencs_lpclks_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiLowPowerClockSource"
      baseType="uint32_t"
      toolTip=""
      description="Low-Power Mode Clock Source" >
      <choice name="LPOCLK"      value="0" enum="LpoClk"
              toolTip="Low Power Oscillator (PMC 1kHz oscillator)" />
      <choice name="VLPOSCCLK"   value="1" enum="Erclk32k"
              toolTip="External 32K Oscillator (RTC or main oscillator in 32K mode)" />
   </binaryOption >

   <binaryOption key="tsi_gencs_eosf" condition="tsi_gencs_eosf_present"
      hidden="true"
      derived="true"
      typeName="TsiEndOfScanFlag"
      baseType="uint32_t"
      description="End of Scan Flag"
      toolTip="This flag is set when all active electrodes are finished scanning\n
               after a scan trigger.\n
               Write 1 , when this flag is set, to clear it." >
      <choice name="Scan not complete"  value="0" enum="ScanNotComplete"/>
      <choice name="Scan complete"      value="1" enum="ScanComplete"/>
   </binaryOption >

   <binaryOption key="tsi_gencs_scnip" condition="tsi_gencs_scnip_present"
      hidden="true"
      derived="true"
      typeName="TsiScanInProgess"
      baseType="uint32_t"
      description="Scan In Progress status"
      toolTip="This read-only bit indicates if scan is in progress.\n
               This bit will get asserted after the analogue bias circuit is\n
               stable after a trigger and it changes automatically by the TSI." >
      <choice name="Idle - No scan in progress"  value="0" enum="NoScanInProgress"/>
      <choice name="Busy - Scan in progress"     value="1" enum="ScanInProgress"/>
   </binaryOption >

   <binaryOption key="tsi_gencs_exterf" condition="tsi_gencs_exterf_present"
      hidden="true"
      typeName="TsiElectrodeError"
      baseType="uint32_t"
      toolTip="Indicates that the external electrode appears shorted\n
               Write 1 to clear"
      description="External Electrode Error" >
      <choice name="No fault"          value="0" enum="NoFault"/>
      <choice name="Short to VDD/VSS"  value="1" enum="ShortToVddVss"/>
   </binaryOption >

   <binaryOption key="tsi_gencs_ovrf" condition="tsi_gencs_ovrf_present"
      hidden="true"
      typeName="TsiOverrun"
      baseType="uint32_t"
      toolTip="This flag is set when a scan trigger occurs while a scan is still in progress.\n
               Write 1 to clear"
      description="Overrun error Flag" >
      <choice name="No overrun"        value="0" enum="NoOverrun"/>
      <choice name="Overrun occurred"  value="1" enum="OverrunOccurred"/>
   </binaryOption >

   <!-- _____________ SCANC __________________ -->

   <intOption key="tsi_scanc_smod" condition="tsi_scanc_smod_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiScanPeriod"
      baseType="uint32_t"
      description="Scan Period Modulus"
      toolTip="Modulus == 0 indicates continuous mode"
      value="8"
      min="0" max="255" />

   <choiceOption key="tsi_scanc_refchrg" condition="tsi_scanc_refchrg_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiReferenceChargeCurrent"
      baseType="uint32_t"
      toolTip="Charge current in uA"
      description="Reference Oscillator Charge Current select" >
      <choice value="0"  name="2 uA"  enum="2uA"/>
      <choice value="1"  name="4 uA"  enum="4uA"/>
      <choice value="2"  name="6 uA"  enum="6uA"/>
      <choice value="3"  name="8 uA"  enum="8uA"/>
      <choice value="4"  name="10 uA" enum="10uA"/>
      <choice value="5"  name="12 uA" enum="12uA"/>
      <choice value="6"  name="14 uA" enum="14uA"/>
      <choice value="7"  name="16 uA" enum="16uA"/>
      <choice value="8"  name="18 uA" enum="18uA"/>
      <choice value="9"  name="20 uA" enum="20uA"/>
      <choice value="10" name="22 uA" enum="22uA"/>
      <choice value="11" name="24 uA" enum="24uA"/>
      <choice value="12" name="26 uA" enum="26uA"/>
      <choice value="13" name="28 uA" enum="28uA"/>
      <choice value="14" name="30 uA" enum="30uA"/>
      <choice value="15" name="32 uA" enum="32uA"/>
   </choiceOption>

   <choiceOption key="tsi_scanc_extchrg" condition="tsi_scanc_extchrg_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiExternalChargeCurrent"
      baseType="uint32_t"
      toolTip="Charge current in uA"
      description="External Oscillator Charge Current select"
      derivedFrom="tsi_scanc_refchrg" />

   <choiceOption key="tsi_scanc_amclks" condition="tsi_scanc_amclks_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiClockSource"
      baseType="uint32_t"
      toolTip=""
      description="Active Mode Clock Source" >
      <choice name="LPOSCCLK"    value="0" enum="LpoClk"/>
      <choice name="MCGIRCLK"    value="1" enum="McgirClk"/>
      <choice name="OSCERCLK"    value="2" enum="OscerClk"/>
   </choiceOption >

   <choiceOption key="tsi_scanc_ampsc" condition="tsi_scanc_ampsc_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiClockDivider"
      baseType="uint32_t"
      toolTip="Input Clock Source division factor"
      description="Active Mode Prescaler" >
      <choice name="Divided by 1"    value="0" enum="DivBy1"/>
      <choice name="Divided by 2"    value="1" enum="DivBy2"/>
      <choice name="Divided by 4"    value="2" enum="DivBy4"/>
      <choice name="Divided by 8"    value="3" enum="DivBy8"/>
      <choice name="Divided by 16"   value="4" enum="DivBy16"/>
      <choice name="Divided by 32"   value="5" enum="DivBy32"/>
      <choice name="Divided by 64"   value="6" enum="DivBy64"/>
      <choice name="Divided by 128"  value="7" enum="DivBy128"/>
   </choiceOption >

   <!-- _____________ PEN __________________ -->

   <choiceOption key="tsi_pen_num"
      hidden="true"
      valueFormat="%s"
      typeName="TsiInput"
      baseType="uint32_t"
      description="TSI input"
      toolTip="Used to select a TSI input"
      >
      <choiceExpansion value="%(i)"
                       name='@SignalDescriptionFromIndex(%(i),"^(.*?)\|(.*?)\|(.*?)\|(.*?)\|(.*?)$","$4")'
                       enum='=Prettify(OnlyMappablePinOfSignal("TSI0_CH%(i)"))'
                       signal="TSI0_CH%(i)"
                       keys="i" dim="16" />
   </choiceOption>

   <choiceOption key="tsi_pen_enum"
      hidden="true"
      valueFormat="TSI_PEN_PEN(%s)"
      description="Channels enabled as TSI inputs"
      toolTip="Bitmask representing the selected channels"
      typeName="PinEnableMask"
      baseType="uint32_t" >
      <choiceExpansion value="1U&lt;&lt;%(i)"
                       name='@SignalDescriptionFromIndex(%(i),"^(.*?)\|(.*?)\|(.*?)\|(.*?)\|(.*?)$","$4")'
                       enum='=Prettify(OnlyMappablePinOfSignal("TSI0_CH%(i)"))'
                       signal="TSI0_CH%(i)"
                       keys="i" dim="16" />
   </choiceOption>

   <bitmaskOption key="tsi_pen_pen" condition="tsi_pen_pen_present"
      enabledBy="enablePeripheralSupport"
      derivedFrom="tsi_pen_enum"
      value="0"
      bitmask="0xFFFF"
      bitList='@SignalList("^TSI\d_(CH\d+)\|(.*?)\|(.*?)\|(.*?)\|(.*?)\|(.*?)$","$6")'
      bitDescription='@SignalList("^(TSI\d_CH\d+)\|(.*?)\|(.*?)\|(.*?)\|(.*?)$","$4")'
      />

   <choiceOption key="tsi_pen_lpsp" condition="tsi_pen_lpsp_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiLowPowerInput"
      valueFormat="TSI_PEN_LPSP(%s)"
      baseType="uint32_t"
      toolTip="Selects which input is active in low-power mode"
      description="Low-Power Scan Pin"
      derivedFrom="tsi_pen_num"
   />

   <!-- _____________ THRESHOLD __________________ -->

   <intOption key="tsi_threshold_lthh"
      enabledBy="enablePeripheralSupport"
      description="Low Power Channel Low Threshold value"
      toolTip="Determines the low threshold for the channel active in low power mode"
      typeName="TsiLowThreshold"
      baseType="uint32_t"
      min="0" max="15625" value="0" />

   <intOption key="tsi_threshold_hthh"
      enabledBy="enablePeripheralSupport"
      description="Low Power Channel High Threshold value"
      toolTip="Determines the high threshold for the channel active in low power mode"
      typeName="TsiHighThreshold"
      baseType="uint32_t"
      min="0" max="15625" value="0" />

<!-- Graphic here -->

   <template><![CDATA[
      \t/**
      \t * Get input clock when configured in Active mode
      \t *
      \t * @return frequency on Hz
      \t */
      \tstatic uint32_t getInputClockFrequency() {
      \t   switch(tsi->SCANC&TSI_SCANC_AMCLKS_MASK) {
      \t      case TSI_SCANC_AMCLKS(0):  return SimInfo::getLpoClock();
      \t      case TSI_SCANC_AMCLKS(1):  return McgInfo::getMcgIrClock();
      \t      case TSI_SCANC_AMCLKS(2):  return Osc0Info::getOscerClock();
      \t   }
      \t   return 0;
      \t}

      \t/**
      \t * Get input clock when configured in low power mode
      \t *
      \t * @return frequency on Hz
      \t */
      \tstatic uint32_t getLowPowerInputClockFrequency() {
      \t   switch(tsi->GENCS&TSI_GENCS_LPCLKS_MASK) {
      \t      case TSI_GENCS_LPCLKS(0):  return SimInfo::getLpoClock();
      \t      case TSI_GENCS_LPCLKS(1):  return SimInfo::getErc32kClock();
      \t   }
      \t   return 0;
      \t}\n\n
   ]]></template>

   <!--   __________ Getters and Setters _______________________________ -->

   <for keys="field           : set   : get   : clear : genCode                 : name"
        values="
         tsi_genc_scanmode    : true  : true  : false : enableGettersAndSetters : ScanMode;
         tsi_gencs_stpe       : true  : true  : false : enableGettersAndSetters : LowPowerOperation;
         tsi_gencs_int        : true  : true  : false : enableGettersAndSetters : EventSource;
         tsi_gencs_erie       : true  : true  : false : enableGettersAndSetters : ErrorAction;
         tsi_gencs_ps         : true  : true  : false : enableGettersAndSetters : ElectrodePrescaler;
         tsi_gencs_nscn       : true  : true  : false : enableGettersAndSetters : ConsecutiveScan;
         tsi_gencs_lpscnitv   : true  : true  : false : enableGettersAndSetters : LowPowerScanInterval;
         tsi_gencs_lpclks     : true  : true  : false : enableGettersAndSetters : LowPowerClockSource;
         tsi_gencs_eosf       : false : true  : true  : enableGettersAndSetters : EndOfScanFlag;
         tsi_gencs_outrgf     : false : true  : true  : enableGettersAndSetters : OutOfRangeFlag;
         tsi_gencs_exterf     : false : true  : true  : enableGettersAndSetters : ElectrodeErrorFlag;
         tsi_gencs_ovrf       : false : true  : true  : enableGettersAndSetters : OverrunFlag;
         tsi_gencs_scnip      : false : true  : false : enableGettersAndSetters : ScanInProgress;
         tsi_gencs_swts       : true  : false : false : true                    : StartScan;

         tsi_pen_lpsp         : true  : true  : false : enableGettersAndSetters : LowPowerScanPin;

         tsi_scanc_refchrg    : true  : true  : false : enableGettersAndSetters : ReferenceCharge;
         tsi_scanc_extchrg    : true  : true  : false : enableGettersAndSetters : ExternalCharge;
         tsi_scanc_ampsc      : true  : true  : false : enableGettersAndSetters : ActiveModePrescaler;
         tsi_scanc_smod       : true  : true  : false : enableGettersAndSetters : ScanModulus;
         tsi_scanc_amclks     : true  : true  : false : enableGettersAndSetters : ActiveModeClockSource;

         tsi_threshold_lthh   : true  : true  : false : enableGettersAndSetters : LowThreshold;
         tsi_threshold_hthh   : true  : true  : false : enableGettersAndSetters : HighThreshold" >

      <variableTemplate variables="%(field)" condition="%(set)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t * (%(field))
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(get)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Get %description
         \t * (%(field))
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %returnType get%(name)() {
         \t   return %fieldExtract;
         \t}
         \t\n
      ]]></variableTemplate>
      <variableTemplate variables="%(field)" condition="%(clear)" codeGenCondition="%(genCode)"
      ><![CDATA[
         \t/**
         \t * Clear %description
         \t * (%(field))
         \t *
         \t */
         \tstatic void clear%(name)() {
         \t   %register = %register|%mask;
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate variables="tsi_pen_num" codeGenCondition="enableGettersAndSetters"
   ><![CDATA[
      \t/**
      \t * Enable %description
      \t *
      %paramDescription
      \t */
      \tstatic void enablePin(%params) {
      \t   %register = %register | TSI_PEN_PEN(1U<<%paramExpression);
      \t}
      \t
      \t/**
      \t * Disable %description
      \t *
      %paramDescription
      \t */
      \tstatic void disablePin(%params) {
      \t   %register = %register & ~TSI_PEN_PEN(1U<<%paramExpression);
      \t}
      \t\n
   ]]></variableTemplate>

   <!-- ____ Interrupt handling _____________ -->

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * $(_Class) interrupt handler
      \t * Passes control to call-back function
      \t */
      \tstatic void irqHandler() {
      \t
      \t   // Capture status
      \t   uint32_t status = tsi->GENCS;
      \t
      \t   status &= TSI_GENCS_SCNIP_MASK|TSI_GENCS_EOSF_MASK|TSI_GENCS_OUTRGF_MASK|TSI_GENCS_OVRF_MASK|TSI_GENCS_EXTERF_MASK;
      \t
      \t   if ((status&(TSI_GENCS_EOSF_MASK|TSI_GENCS_OUTRGF_MASK|TSI_GENCS_OVRF_MASK|TSI_GENCS_EXTERF_MASK)) == 0) {
      \t      // Ignore spurious interrupts?
      \t      return;
      \t   }
      \t   // Clear flags
      \t   tsi->GENCS = tsi->GENCS | status; // w1c found flags
      \t   if (status == (TSI_GENCS_SCNIP_MASK|TSI_GENCS_EOSF_MASK)) {
      \t      // Ignore EOSF unless SCNIP is clear to avoid multiple events due to errata e3926
      \t      // This assumes that there is at least some idle time between sequences - as there should be
      \t      return;
      \t   }
      \t   // Execute call-back
      \t   sCallback(status);
      \t}
      \t\n
   ]]>
   </template>

   <!--   __________ TSI Init class _______________________________ -->

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   TsiScanMode_Disabled ,           // (tsi_gencs_scanmode) Select scan mode - Disabled
      \t *   TsiStopMode_Disabled ,           // (tsi_gencs_stpe) TSI STOP Enable - Disabled in low power
      \t *   TsiErrorAction_None ,            // (tsi_gencs_erie) Action on Error - None
      \t *   TsiElectrodePrescaler_DivBy8 ,   // (tsi_gencs_ps) Prescaler for Electrode Oscillator Frequency - Divide by 8
      \t *   TsiLowPowerScanInterval_1ms ,    // (tsi_gencs_lpscnitv) Low-Power Mode Scan Interval - 1 ms interval
      \t *   TsiLowPowerClockSource_LpoClk ,  // (tsi_gencs_lpclks) Low-Power Mode Clock Source - LPOCLK
      \t *   TsiClockSource_LpoClk ,          // (tsi_scanc_amclks) Active Mode Clock Source - LPOSCCLK
      \t *   TsiClockDivider_DivBy1 ,         // (tsi_scanc_ampsc) Active Mode Prescaler - Divided by 1
      \t *   TsiConsecutiveScan_1Time ,       // (tsi_gencs_nscn) Consecutive Scan number - Scan Electrode 1 time
      \t *   TsiScanPeriod(8) ,               // (tsi_scanc_smod) Scan Period Modulus
      \t *   TsiReferenceChargeCurrent_16uA , // (tsi_scanc_refchrg) Reference Oscillator Charge Current select - 16 uA
      \t *   TsiExternalChargeCurrent_16uA ,  // (tsi_scanc_extchrg) External Oscillator Charge Current select - 16 uA
      \t *
      \t *   TsiLowThreshold(0) ,             // (tsi_threshold_lthh) Low Power Channel Low Threshold value
      \t *   TsiHighThreshold(0) ,            // (tsi_threshold_hthh) Low Power Channel High Threshold value
      \t *   TsiLowPowerInput_Ptb18,          // (tsi_pen_lpsp) Low-Power Scan Pin - TsiElectrodeA [PTB18(Touch1)]
      \t *
      \t *   TsiInput_Ptb0,    // Input Channel 0
      \t *   TsiInput_Ptb1,    // Input Channel 6
      \t *   TsiInput_Ptc2,    // Input Channel 15
      \t *
      \t *   NvicPriority_Normal,
      \t *   tsiCallback,
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="irqHandlingMethod"
   ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <for keys=" type        : variables                                            : init    "
       values="%baseType   : tsi_gencs_lpclks,tsi_gencs_lpscnitv,tsi_gencs_nscn,
                             tsi_gencs_ps,
                             tsi_gencs_scanmode,tsi_gencs_tsiie,tsi_gencs_erie,
                             tsi_gencs_esor,tsi_gencs_stm,tsi_gencs_stpe          :   0      ;
               %baseType   : tsi_scanc_refchrg,tsi_scanc_extchrg,tsi_scanc_smod,
                             tsi_scanc_amclks,tsi_scanc_ampsc                     :   0      ;
               %baseType   : tsi_pen_lpsp,tsi_pen_pen                             :   0      ;
               %baseType   : tsi_threshold_lthh,tsi_threshold_hthh                :   0      " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoIrqGuard)"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>


   <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)"
      variables="tsi_pen_num"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    *
      \t    * @note this is additive and does not change other pin selections
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %registerName | (1U<<%paramExpression);
      \t   }
      \t\n
   ]]>
   </variableTemplate>
   <for keys="r"
      values="
            tsi_gencs_scanmode;
            tsi_gencs_stpe;
            tsi_gencs_int;
            tsi_gencs_erie;
            tsi_gencs_ps;
            tsi_gencs_lpscnitv;
            tsi_gencs_lpclks;

            tsi_pen_lpsp;

            tsi_scanc_refchrg;
            tsi_scanc_extchrg;
            tsi_scanc_amclks;
            tsi_scanc_ampsc
            " >
      <variableTemplate where="basicInfo" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%(r))
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <for keys="r"
      values="
            tsi_gencs_nscn;
            tsi_scanc_smod;
            tsi_threshold_lthh;
            tsi_threshold_hthh
            " >
      <variableTemplate where="basicInfo" discardRepeats="true" codeGenCondition="$(_BasicInfoGuard)"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%paramType0 value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask0) | %macro0(value);
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <!-- ____ Init class Configure method ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral
      \t   enable();
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t   // Only set call-backs if feature enabled
      \t   setCallback(init.callbackFunction);
      \t   enableNvicInterrupts(init.irqlevel);
      \t\n
   ]]></template>
   <for keys=
             " var                                                    : statement            "
      values=" tsi_gencs_lpclks,tsi_gencs_lpscnitv,tsi_gencs_nscn,
               tsi_gencs_ps,

               tsi_gencs_tsien,tsi_gencs_tsiie,tsi_gencs_erie,
               tsi_gencs_esor,tsi_gencs_stm,tsi_gencs_stpe,
               tsi_gencs_scanmode,
               tsi_gencs_int,tsi_gencs_erie                           : %configRegAssignment ;

               tsi_scanc_refchrg,tsi_scanc_extchrg,tsi_scanc_smod,
               tsi_scanc_amclks,tsi_scanc_ampsc                       : %configRegAssignment ;

               tsi_pen_lpsp,tsi_pen_num,tsi_pen_pen                   : %configRegAssignment ;

               tsi_threshold_lthh,tsi_threshold_hthh                  : %configRegAssignment " >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      padToComments="35"
      variables="
            tsi_gencs_scanmode,
            tsi_gencs_stpe,
            tsi_gencs_int,
            tsi_gencs_erie,
            tsi_gencs_ps,
            tsi_gencs_lpscnitv,
            tsi_gencs_lpclks,
            tsi_scanc_amclks,
            tsi_scanc_ampsc,
            tsi_gencs_nscn,
            tsi_scanc_smod,
            tsi_scanc_refchrg,
            tsi_scanc_extchrg,
            tsi_threshold_lthh,
            tsi_threshold_hthh,
            tsi_pen_lpsp
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initNonZeroValues\n
   ]]></variableTemplate>
   <for keys="i" dim="16" >
      <equation key="pin"         value='=Prettify(OnlyMappablePinOfSignal("TSI0_CH%(i)"))' />
      <equation key="description" value="Input Channel %(i)" />
      <!--
      <printVar key="pin"/>
      <printVar key="description"/>
       -->
      <template codeGenCondition="enablePeripheralSupport&amp;&amp;((tsi_pen_pen&amp;(1&lt;&lt;%(i)))!=0)"
         immediateVariables="pin,description"
      ><![CDATA[
         \t   TsiInput_$(pin), // $(description)\n
      ]]></template>
   </for>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t};
      \t\n
   ]]></template>

   <template where="basicInfo" codeGenCondition="$(_BasicInfoGuard)" >
   <![CDATA[
      \t}; // class $(_BasicInfo)::Init
      \t\n
   ]]>
   </template>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \ttypedef $(_Baseclass)Base_T<$(_Info)> $(_Class);\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="tsi_files" >
      <copy source="Project_Headers/tsi-MK.h"     target="Project_Headers/tsi.h"        overwrite="true" derived="true" />
      <copy source="Snippets/tsi-mk-example.cpp"  target="Snippets/tsi-mk-example.cpp"  overwrite="true" derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="These settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
