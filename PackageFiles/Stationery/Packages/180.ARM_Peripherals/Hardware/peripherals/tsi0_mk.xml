<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- tsi0_mk.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="Touch Sensing Input" >

   <constant key="irq_parameters"            type="String"  value="&quot;uint32_t status&quot;"  />
   <constant key="irq_dummy_parameters"      type="String"  value="&quot;uint32_t&quot;"  />
   <constant key="irq_call"                  type="String"  value="&quot;status&quot;"  />
   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <template><![CDATA[
      \t//! Base value for PCR (excluding MUX value)
      \tstatic constexpr uint32_t defaultPcrValue  = 0;\n\n
   ]]></template>

   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Class)BasicInfo&quot;" />

   <!-- ************* GENCS ****************** -->

   <choiceOption key="tsi_gencs_scanmode" condition="tsi_gencs_tsien_present&amp;&amp;tsi_gencs_stm_present&amp;&amp;tsi_gencs_swts_present"
      enabledBy="enablePeripheralSupport"
      valueFormat="TSI_GENCS_TSIEN(%s),TSI_GENCS_STM(%s),TSI_GENCS_SWTS(%s)"
      typeName="TsiScanMode"
      description="Select scan mode"
      toolTip="Selects between software triggered or automatic hardare scanning"
   >
      <choice value="0,0,0," name="Disabled"                                  enum="Disabled"  />
      <choice value="1,0,1," name="Software triggered single scan"            enum="Triggered" />
      <choice value="1,1,0," name="Hardware scanning (repeated periodically)" enum="Periodic"  />
   </choiceOption>

   <binaryOption key="tsi_gencs_stpe" condition="tsi_gencs_stpe_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiStopMode"
      toolTip="Controls operation while in Low Power Modes (STOP, VLPS, LLS and VLLS{3,2,1})"
      description="TSI STOP Enable" >
      <choice name="Disabled in low power"  value="0" enum="Disabled"/>
      <choice name="Enabled in low power"   value="1" enum="Enabled" />
   </binaryOption >

   <choiceOption key="tsi_gencs_int" condition="tsi_gencs_erie_present&amp;&amp;tsi_gencs_esor_present"
      enabledBy="irqHandlingMethod"
      valueFormat="TSI_GENCS_TSIIE(%s),TSI_GENCS_ESOR(%s)"
      typeName="TsiEventSource"
      toolTip="Selects which source to generate interrupts"
      description="TSI event source" >
      <choice value="0,0" name="Disabled"       enum="Disabled"   />
      <choice value="1,0" name="Out Of Range"   enum="OutOfRange" />
      <choice value="1,1" name="End Of Scan"    enum="EndOfScan"  />
   </choiceOption>

   <binaryOption key="tsi_gencs_erie" condition="tsi_gencs_erie_present"
      enabledBy="irqHandlingMethod"
      typeName="TsiErrorInterrupt"
      toolTip="Caused either by a Short or Overrun Error"
      description="Error Interrupt Enable" >
      <choice name="Interrupt disabled"  value="0" enum="Disabled"/>
      <choice name="Interrupt enabled"   value="1" enum="Enabled"/>
   </binaryOption >

   <choiceOption key="tsi_gencs_ps" condition="tsi_gencs_ps_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiElectrodePrescaler"
      toolTip="Only be changed if the TSI module is disabled"
      description="Electrode Oscillator Prescaler" >
      <choice name="Divide by 1"    value="0" enum="DivBy1"/>
      <choice name="Divide by 2"    value="1" enum="DivBy2"/>
      <choice name="Divide by 4"    value="2" enum="DivBy4"/>
      <choice name="Divide by 8"    value="3" enum="DivBy8"/>
      <choice name="Divide by 16"   value="4" enum="DivBy16"/>
      <choice name="Divide by 32"   value="5" enum="DivBy32"/>
      <choice name="Divide by 64"   value="6" enum="DivBy64"/>
      <choice name="Divide by 128"  value="7" enum="DivBy128"/>
   </choiceOption >

   <intOption key="tsi_gencs_nscn"
      enabledBy="enablePeripheralSupport"
      enumType="uint8_t"
      typeName="TsiConsecutiveScan"
      description="Consecutive Scan number"
      toolTip="Number of Consecutive Scans Per Electrode"
      value="8"
      min="1" max="32" />

   <choiceOption key="tsi_gencs_lpscnitv" condition="tsi_gencs_lpscnitv_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiLowPowerScanInterval"
      toolTip=""
      description="Low-Power Mode Scan Interval" >
      <choice name="1 ms interval"    value="0"  enum="1ms"   />
      <choice name="5 ms interval"    value="1"  enum="5ms"   />
      <choice name="10 ms interval"   value="2"  enum="10ms"  />
      <choice name="15 ms interval"   value="3"  enum="15ms"  />
      <choice name="20 ms interval"   value="4"  enum="20ms"  />
      <choice name="30 ms interval"   value="5"  enum="30ms"  />
      <choice name="40 ms interval"   value="6"  enum="40ms"  />
      <choice name="50 ms interval"   value="7"  enum="50ms"  />
      <choice name="75 ms interval"   value="8"  enum="75ms"  />
      <choice name="100 ms interval"  value="9"  enum="100ms" />
      <choice name="125 ms interval"  value="10" enum="125ms" />
      <choice name="150 ms interval"  value="11" enum="150ms" />
      <choice name="200 ms interval"  value="12" enum="200ms" />
      <choice name="300 ms interval"  value="13" enum="300ms" />
      <choice name="400 ms interval"  value="14" enum="400ms" />
      <choice name="500 ms interval"  value="15" enum="500ms" />
   </choiceOption >

   <binaryOption key="tsi_gencs_lpclks" condition="tsi_gencs_lpclks_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiLowPowerClockSource"
      toolTip=""
      description="Low-Power Mode Clock Source" >
      <choice name="LPOCLK"      value="0" enum="LpoClk"
              toolTip="Low Power Oscillator (PMC 1kHz oscillator)" />
      <choice name="VLPOSCCLK"   value="1" enum="Erclk32k"
              toolTip="External 32K Oscillator (RTC or main oscillator in 32K mode)" />
   </binaryOption >

   <binaryOption key="tsi_gencs_eosf" condition="tsi_gencs_eosf_present"
      hidden="true"
      typeName="TsiEndOfScan"
      toolTip="This flag is set when End of Scan is reached.\n
               Write 1 to clear"
      description="End of Scan Flag" >
      <choice name="Not end of scan"  value="0" enum="NotEndOfScan"/>
      <choice name="End of scan"      value="1" enum="EndOfScan"/>
   </binaryOption >

   <binaryOption key="tsi_gencs_outrgf" condition="tsi_gencs_outrgf_present"
      hidden="true"
      typeName="TsiOutOfRange"
      toolTip="This flag is set when Out of Range is detected.\n
               Write 1 to clear"
      description="Out of Range Flag" >
      <choice name="In Range"               value="0" enum="InRange"/>
      <choice name="Out of Range detected"  value="1" enum="OutOfRangeDetected"/>
   </binaryOption >

   <binaryOption key="tsi_gencs_exterf" condition="tsi_gencs_exterf_present"
      hidden="true"
      typeName="TsiElectrodeError"
      toolTip="Indicates that the external electrode appears shorted\n
               Write 1 to clear"
      description="External Electrode Error" >
      <choice name="No fault"          value="0" enum="NoFault"/>
      <choice name="Short to VDD/VSS"  value="1" enum="ShortToVddVss"/>
   </binaryOption >

   <binaryOption key="tsi_gencs_ovrf" condition="tsi_gencs_ovrf_present"
      hidden="true"
      typeName="TsiOverrun"
      toolTip="This flag is set when a scan trigger occurs while a scan is still in progress.\n
               Write 1 to clear"
      description="Overrun error Flag" >
      <choice name="No overrun"        value="0" enum="NoOverrun"/>
      <choice name="Overrun occurred"  value="1" enum="OverrunOccurred"/>
   </binaryOption >

   <binaryOption key="tsi_gencs_scnip" condition="tsi_gencs_scnip_present"
      hidden="true"
      typeName="TsiScanInProgess"
      toolTip="This flag is set while a scan is in progress"
      description="Scan In Progress status" >
      <choice name="No active scan" value="0" enum="Inactive" />
      <choice name="Active scan"    value="1" enum="Active"   />
   </binaryOption >

   <!-- ************* SCANC ****************** -->

   <intOption key="tsi_scanc_smod" condition="tsi_scanc_smod_present"
      enabledBy="enablePeripheralSupport"
      enumType="uint8_t"
      typeName="TsiScanPeriod"
      description="Scan Period Modulus"
      toolTip="Modulus == 0 indicates continuous mode"
      value="8"
      min="0" max="255" />

   <choiceOption key="tsi_scanc_refchrg" condition="tsi_scanc_refchrg_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiReferenceChargeCurrent"
      toolTip="Charge current in uA"
      description="Reference Oscillator Charge Current select" >
      <choice value="0"  name="2 uA"  enum="2uA"/>
      <choice value="1"  name="4 uA"  enum="4uA"/>
      <choice value="2"  name="6 uA"  enum="6uA"/>
      <choice value="3"  name="8 uA"  enum="8uA"/>
      <choice value="4"  name="10 uA" enum="10uA"/>
      <choice value="5"  name="12 uA" enum="12uA"/>
      <choice value="6"  name="14 uA" enum="14uA"/>
      <choice value="7"  name="16 uA" enum="16uA"/>
      <choice value="8"  name="18 uA" enum="18uA"/>
      <choice value="9"  name="20 uA" enum="20uA"/>
      <choice value="10" name="22 uA" enum="22uA"/>
      <choice value="11" name="24 uA" enum="24uA"/>
      <choice value="12" name="26 uA" enum="26uA"/>
      <choice value="13" name="28 uA" enum="28uA"/>
      <choice value="14" name="30 uA" enum="30uA"/>
      <choice value="15" name="32 uA" enum="32uA"/>
   </choiceOption>

   <choiceOption key="tsi_scanc_extchrg" condition="tsi_scanc_extchrg_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiExternalChargeCurrent"
      toolTip="Charge current in uA"
      description="External Oscillator Charge Current select"
      derivedFrom="tsi_scanc_refchrg" />

   <choiceOption key="tsi_scanc_amclks" condition="tsi_scanc_amclks_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiClockSource"
      toolTip=""
      description="Active Mode Clock Source" >
      <choice name="LPOSCCLK"    value="0" enum="LpoClk"/>
      <choice name="MCGIRCLK"    value="1" enum="McgirClk"/>
      <choice name="OSCERCLK"    value="2" enum="OscerClk"/>
   </choiceOption >

   <choiceOption key="tsi_scanc_ampsc" condition="tsi_scanc_ampsc_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiClockDivider"
      toolTip="Input Clock Source division factor"
      description="Active Mode Prescaler" >
      <choice name="Divided by 1"    value="0" enum="DivBy1"/>
      <choice name="Divided by 2"    value="1" enum="DivBy2"/>
      <choice name="Divided by 4"    value="2" enum="DivBy4"/>
      <choice name="Divided by 8"    value="3" enum="DivBy8"/>
      <choice name="Divided by 16"   value="4" enum="DivBy16"/>
      <choice name="Divided by 32"   value="5" enum="DivBy32"/>
      <choice name="Divided by 64"   value="6" enum="DivBy64"/>
      <choice name="Divided by 128"  value="7" enum="DivBy128"/>
   </choiceOption >

   <!-- ************* PEN ****************** -->

   <choiceOption key="tsi_pen_num"
      hidden="true"
      valueFormat="%s"
      typeName="TsiInput"
      description="TSI input"
      toolTip="Used to select a TSI input" >
      <choice value="0"  name="Input 0"  enum="0"  />
      <choice value="1"  name="Input 1"  enum="1"  />
      <choice value="2"  name="Input 2"  enum="2"  />
      <choice value="3"  name="Input 3"  enum="3"  />
      <choice value="4"  name="Input 4"  enum="4"  />
      <choice value="5"  name="Input 5"  enum="5"  />
      <choice value="6"  name="Input 6"  enum="6"  />
      <choice value="7"  name="Input 7"  enum="7"  />
      <choice value="8"  name="Input 8"  enum="8"  />
      <choice value="9"  name="Input 9"  enum="9"  />
      <choice value="10" name="Input 10" enum="10" />
      <choice value="11" name="Input 11" enum="11" />
      <choice value="12" name="Input 12" enum="12" />
      <choice value="13" name="Input 13" enum="13" />
      <choice value="14" name="Input 14" enum="14" />
      <choice value="15" name="Input 15" enum="15" />
   </choiceOption>

   <bitmaskOption key="tsi_pen_pen" condition="tsi_pen_pen_present"
      enabledBy="enablePeripheralSupport"
      description="Channels enabled as TSI inputs"
      toolTip="Bitmask representing the selected channels"
      value="0"
      bitmask="0xFFFF"
      bitList="CH%i"
      />

   <choiceOption key="tsi_pen_lpsp" condition="tsi_pen_lpsp_present"
      enabledBy="enablePeripheralSupport"
      typeName="TsiLowPowerInput"
      toolTip="Selects which input is active in low-power mode"
      description="Low-Power Scan Pin"
      derivedFrom="tsi_pen_num"
   />

   <!-- ************* THRESHOLD ****************** -->

   <intOption key="tsi_threshold_lthh"
      enabledBy="enablePeripheralSupport"
      description="Low Power Channel Low Threshold value"
      toolTip="Determines the low threshold for the channel active in low power mode"
      enumType="uint16_t"
      typeName="TsiLowThreshold"
      min="0" max="15625" value="0" />

   <intOption key="tsi_threshold_hthh"
      enabledBy="enablePeripheralSupport"
      description="Low Power Channel High Threshold value"
      toolTip="Determines the high threshold for the channel active in low power mode"
      enumType="uint16_t"
      typeName="TsiHighThreshold"
      min="0" max="15625" value="0" />

<!-- Graphic here -->

   <!--   ========== class $(_Class)Info =============================== -->

   <!--   ========== Getters and Setters =============================== -->
   <template><![CDATA[
      \t/**
      \t * Get input clock when configured in Active mode
      \t *
      \t * @return frequency on Hz
      \t */
      \tstatic uint32_t getInputClockFrequency() {
      \t   switch(tsi->SCANC&TSI_SCANC_AMCLKS_MASK) {
      \t      case TSI_SCANC_AMCLKS(0):  return PmcInfo::getLpoClock();
      \t      case TSI_SCANC_AMCLKS(1):  return McgInfo::getMcgIrClock();
      \t      case TSI_SCANC_AMCLKS(2):  return Osc0Info::getOscerClock();
      \t   }
      \t   return 0;
      \t}

      \t/**
      \t * Get input clock when configured in low power mode
      \t *
      \t * @return frequency on Hz
      \t */
      \tstatic uint32_t getLowPowerInputClockFrequency() {
      \t   switch(tsi->GENCS&TSI_GENCS_LPCLKS_MASK) {
      \t      case TSI_GENCS_LPCLKS(0):  return PmcInfo::getLpoClock();
      \t      case TSI_GENCS_LPCLKS(1):  return SimInfo::getErc32kClock();
      \t   }
      \t   return 0;
      \t}\n\n
   ]]></template>

   <for keys="field:name"
        values="
         tsi_genc_scanmode    : ScanMode;
         tsi_gencs_stpe       : LowPowerOperation;
         tsi_gencs_int        : EventSource;
         tsi_gencs_erie       : ErrorAction;
         tsi_gencs_ps         : ElectrodePrescaler;
         tsi_gencs_lpscnitv   : LowPowerScanInterval;
         tsi_gencs_lpclks     : LowPowerClockSource;
         tsi_gencs_eosf       : EndOfScanFlag;
         tsi_gencs_outrgf     : OutOfRangeFlag;
         tsi_gencs_exterf     : ElectrodeErrorFlag;
         tsi_gencs_ovrf       : OverrunFlag;
         tsi_gencs_scnip      : ScanInProgress;

         tsi_pen_lpsp         : LowPowerScanPin;

         tsi_scanc_refchrg    : ReferenceCharge;
         tsi_scanc_extchrg    : ExternalCharge;
         tsi_scanc_ampsc      : ActiveModePrescaler" >

      <variableTemplate variables="%(field)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType(%register&%mask);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <for keys="field:name"
        values="
         tsi_gencs_nscn       : ConsecutiveScan;

         tsi_scanc_smod       : ScanModulus;
         tsi_scanc_amclks     : ActiveModeClockSource;

         tsi_threshold_lthh   : LowThreshold;
         tsi_threshold_hthh   : HighThreshold" >

      <variableTemplate variables="%(field)" codeGenCondition="enableGettersAndSetters"
      ><![CDATA[
         \t/**
         \t * Set %description
         \t *
         %paramDescription
         \t */
         \tstatic void set%(name)(%params) {
         \t   %fieldAssignment
         \t}
         \t
         \t/**
         \t * Get %description
         \t *
         \t * @return %tooltip
         \t */
         \tstatic %paramType get%(name)() {
         \t   return %paramType((%register&%mask)>>%macro0_SHIFT);
         \t}
         \t\n
      ]]></variableTemplate>
   </for>

   <variableTemplate variables="tsi_pen_num" codeGenCondition="enableGettersAndSetters"
   ><![CDATA[
      \t/**
      \t * Enable %description
      \t *
      %paramDescription
      \t */
      \tstatic void enablePin(%params) {
      \t   %register = %register | TSI_PEN_PEN(1U<<%paramExpression);
      \t}
      \t
      \t/**
      \t * Disable %description
      \t *
      %paramDescription
      \t */
      \tstatic void disablePin(%params) {
      \t   %register = %register & ~TSI_PEN_PEN(1U<<%paramExpression);
      \t}
      \t\n
   ]]></variableTemplate>

   <!--   ========== class $(_Class)BasicInfo =============================== -->

   <template namespace="usbdm" ><![CDATA[
      class $(_Class)BasicInfo {

      public:\n
   ]]></template>

   <!--   ========== Interrupt handling =============================== -->

   <variableTemplate namespace="usbdm" codeGenCondition="enablePeripheralSupport"
      variables="irqHandlingMethod"
   ><![CDATA[
       \t//! Common class based callback code has been generated for this class of peripheral
       \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
       \t\n
   ]]></variableTemplate>

   <template namespace="usbdm" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Baseclass) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for ISR */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Set interrupt callback function.
      \t *
      \t * @param[in]  $(_basename)Callback Callback function to execute on interrupt
      \t *                             Use nullptr to remove callback.
      \t */
      \tstatic void setCallback(CallbackFunction $(_basename)Callback) {
      \t   if ($(_basename)Callback == nullptr) {
      \t      $(_basename)Callback = unhandledCallback;
      \t   }
      \t   // Allow either no handler set yet, removing handler or setting same handler
      \t   usbdm_assert(
      \t         (sCallback == unhandledCallback) || ($(_basename)Callback == unhandledCallback)||(sCallback == $(_basename)Callback) ,
      \t         "Handler already set");
      \t   sCallback = $(_basename)Callback;
      \t}
      \t
      \t/**
      \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
      \t */
      \tstatic void irqHandler() {
      \t
      \t   // Capture flags
      \t   uint32_t status = tsi->GENCS;
      \t
      \t   status &= TSI_GENCS_SCNIP_MASK|TSI_GENCS_EOSF_MASK|TSI_GENCS_OUTRGF_MASK|TSI_GENCS_OVRF_MASK|TSI_GENCS_EXTERF_MASK;
      \t
      \t   if ((status&(TSI_GENCS_EOSF_MASK|TSI_GENCS_OUTRGF_MASK|TSI_GENCS_OVRF_MASK|TSI_GENCS_EXTERF_MASK)) == 0) {
      \t      // Ignore spurious interrupts?
      \t      return;
      \t   }
      \t   // Clear flags
      \t   tsi->GENCS = tsi->GENCS | status; // w1c found flags
      \t   if (status == (TSI_GENCS_SCNIP_MASK|TSI_GENCS_EOSF_MASK)) {
      \t      // Ignore EOSF unless SCNIP is clear to avoid multiple events due to errata e3926
      \t      // This assumes that there is at least some idle time between sequences - as there should be
      \t      return;
      \t   }
      \t   // Execute call-back
      \t   sCallback(status);
      \t}
      \t\n
   ]]>
   </template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t
      \t/**
      \t * Callback for programmatically set handler for $(_Class)
      \t */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = $(_Class)Info::unhandledCallback;
      \t\n
   ]]>
   </template>

   <!--   ========== TSI Init class =============================== -->

   <template namespace="usbdm" discardRepeats="true" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
      \t *   TsiScanMode_Periodic ,              // Select scan mode - Periodic
      \t *   TsiStopMode_Disabled ,              // TSI STOP Enable - Disabled in low power
      \t *   TsiEventSource_EndOfScan ,          // TSI event source - End Of Scan
      \t *   TsiErrorInterrupt_Enabled ,         // Error Interrupt Enable - Interrupt enabled
      \t *   TsiElectrodePrescaler_DivBy2 ,      // Electrode Oscillator Prescaler - Divide by 8
      \t *   TsiConsecutiveScan(8),
      \t *   TsiLowPowerScanInterval_1ms ,       // Low-Power Mode Scan Interval - 1 ms interval
      \t *   TsiLowPowerClockSource_LpoClk ,     // Low-Power Mode Clock Source - LPOCLK
      \t *   TsiClockSource_LpoClk ,             // Active Mode Clock Source - LPOSCCLK
      \t *   TsiScanPeriod(8) ,                  // Scan Period Modulus
      \t *   TsiReferenceChargeCurrent_16uA ,    // Reference Oscillator Charge Current select
      \t *   TsiExternalChargeCurrent_16uA ,     // External Oscillator Charge Current select
      \t *
      \t *   ElectrodeA::TSI_INPUT,              // Channels enabled as TSI inputs
      \t *   ElectrodeB::TSI_INPUT,
      \t *
      \t *   ElectrodeA::TSI_LOWPOWER_INPUT ,    // Low-Power Scan Pin
      \t *   TsiLowThreshold(0) ,                // Low Power Channel Low Threshold value
      \t *   TsiHighThreshold(0),                // Low Power Channel High Threshold value
      \t *
      \t *   NvicPriority_Normal,
      \t *   tsiCallback,
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]></template>

   <!--   Member variables -->

   <variableTemplate namespace="usbdm" codeGenCondition="irqHandlingMethod"
      variables="irqHandlingMethod"
    ><![CDATA[
      \t   /// %description
      \t   %paramType %paramName = nullptr;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="tsi_gencs_lpclks,tsi_gencs_lpscnitv,tsi_gencs_nscn,tsi_gencs_ps,tsi_gencs_eosf,tsi_gencs_outrgf,tsi_gencs_exterf,tsi_gencs_ovrf,tsi_gencs_swts,tsi_gencs_tsien,tsi_gencs_tsiie,tsi_gencs_erie,tsi_gencs_esor,tsi_gencs_stm,tsi_gencs_stpe"
   ><![CDATA[
      \t   /// General Control and Status Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="tsi_scanc_refchrg,tsi_scanc_extchrg,tsi_scanc_smod,tsi_scanc_amclks,tsi_scanc_ampsc"
   ><![CDATA[
      \t   /// SCAN Control Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="tsi_pen_lpsp,tsi_pen_pen"
   ><![CDATA[
      \t   /// Pin Enable Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="tsi_threshold_lthh,tsi_threshold_hthh"
   ><![CDATA[
      \t   /// Low Power Channel Threshold Register
      \t   uint32_t %registerName = 0;\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="/PCR/nvic_irqLevel,irqLevel"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %symbolicExpression1;
      \t\n
   ]]></variableTemplate>

   <!--   Constructors -->

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>


   <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="tsi_pen_num"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    *
      \t    * @note this is additive and does not change other pin selections
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %registerName | (1U<<%paramExpression);
      \t   }
      \t\n
   ]]>
   </variableTemplate>
   <for keys="r"
      values="
            tsi_gencs_scanmode;
            tsi_gencs_stpe;
            tsi_gencs_int;
            tsi_gencs_erie;
            tsi_gencs_ps;
            tsi_gencs_lpscnitv;
            tsi_gencs_lpclks;

            tsi_pen_lpsp;

            tsi_scanc_refchrg;
            tsi_scanc_extchrg;
            tsi_scanc_amclks;
            tsi_scanc_ampsc
            " >
      <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask) | %paramExpression;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <for keys="r"
      values="
            tsi_gencs_nscn;
            tsi_scanc_smod;
            tsi_threshold_lthh;
            tsi_threshold_hthh
            " >
      <variableTemplate namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         \t    * @param value %description
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%paramType0 value, Types... rest) : Init(rest...) {
         \t
         \t      %registerName = (%registerName&~%mask0) | %macro0(value);
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

<!--   Default Initialisation value -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            tsi_gencs_scanmode,
            tsi_gencs_stpe,
            tsi_gencs_int,
            tsi_gencs_erie,
            tsi_gencs_ps,
            tsi_gencs_lpscnitv,
            tsi_gencs_lpclks,
            tsi_scanc_amclks,
            tsi_scanc_ampsc,
            tsi_gencs_nscn,
            tsi_scanc_smod,
            tsi_scanc_refchrg,
            tsi_scanc_extchrg,
            tsi_threshold_lthh,
            tsi_threshold_hthh,
            tsi_pen_lpsp
         "
   ><![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression\n
   ]]></variableTemplate>
   <for keys="input" dim="16" >
      <template codeGenCondition="enablePeripheralSupport&amp;&amp;((tsi_pen_pen&amp;(1&lt;&lt;%(input)))!=0)" ><![CDATA[
         \t   TsiInput_%(input), // Input %(input) enabled\n
      ]]></template>
   </for>
   <template codeGenCondition="enablePeripheralSupport" ><![CDATA[
      \t};
      \t\n
   ]]></template>

<!--   Configure methods -->

   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(Info::DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const typename Info::Init &init) {
      \t   // ..........  Configure ...........
      \t
      \t   // Enable peripheral clock
      \t   Info::enableClock();
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_BASENAME)/irqHandlingMethod"
             condition="/$(_BASENAME)/irqHandlingMethod" >   <![CDATA[
      \t   if constexpr (Info::irqHandlerInstalled) {
      \t      // Only set call-backs if feature enabled
      \t      Info::setCallback(init.callbackFunction);
      \t      enableNvicInterrupts(init.irqlevel);
      \t   }
      \t\n
   ]]></template>
   <template key="/$(_BASENAME)/InitMethod" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t   tsi->GENCS     = init.gencs;
      \t   tsi->SCANC     = init.scanc;
      \t   tsi->PEN       = init.pen;
      \t   tsi->THRESHOLD = init.threshold;
      \t}
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" discardRepeats="true" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
      <![CDATA[
      \t}; // class $(_Baseclass)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <template namespace="usbdm" discardRepeats="true" >
      <![CDATA[
      }; // class $(_Baseclass)BasicInfo\n\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME)
      \t */
      \ttypedef $(_Baseclass)Base_T<$(_Class)Info> $(_Class);\n
   ]]></template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.PeripheralValidator" >
   </validate>

   <projectActionList id="tsi_files" >
      <copy source="Project_Headers/tsi-MK.h"     target="Project_Headers/tsi.h"        overwrite="true" derived="true" />
      <copy source="Snippets/tsi-mk-example.cpp"  target="Snippets/tsi-mk-example.cpp"  overwrite="true" derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ************* SIM configuration ****************** -->
   <category name="Advanced" description="SIM configuration">
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
   </category>
   <deleteVariables variables="_scgc_clock"  mustExist="false" />

   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
