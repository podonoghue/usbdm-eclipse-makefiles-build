<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- lpuart_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="$(_BASENAME)">

   <!-- Enable for this peripheral -->
   <binaryOption key="usedAsConsole"
      description="usedAsConsole"
      toolTip="Indicates if this device is allocated as the Console for I/O"
      ref="/Console/consoleDevice.name==&quot;$(_Baseclass) $(_instance)&quot;"
      locked="true"
      derived="true" >
      <choice value="0" name="Not used as console" />
      <choice value="1" name="Used as console" />
   </binaryOption>

   <binaryOption key="enablePeripheralSupport"
      enabledBy="!usedAsConsole"
      hidden="true"
      description="Enable peripheral support"
      toolTip="Code will also be generated if this UART is used as the console"
      disabledValue="true"
      >
      <choice value="false" name="Minimal code for $(_NAME)"  />
      <choice value="true"  name="Generate code for $(_NAME)"/>
   </binaryOption>

   <constant key="irq_pattern"               type="String"  value="&quot;^$(_BASENAME)%i_?(RxTx)?$&quot;" />
   <constant key="irq_ClassHandler"          type="String"  value="&quot;%c%i::irqHandler&quot;"          />
   <constant key="irq_parameters"            type="String"  value="&quot;&quot;"                      />
   <constant key="irq_dummy_parameters"      type="String"  value="&quot;&quot;"                      />
   <constant key="irq_call"                  type="String"  value="&quot;&quot;"                      />
   <constant key="generateDefault"           type="Boolean" value="false"         />
   <constant key="configureInStartupDefault" type="Boolean" value="false"         />
   <xi:include href="enablePeripheral.xml"  />
   <title />

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * <li>%paramExpression            Parameters ORed together e.g. adcPretrigger|adcRefSel
    * <li>%valueExpression            Numeric variable value e.g. 0x3
    * <li>%symbolicExpression[index]  Symbolic formatted value e.g. AdcCompare_Disabled
    * <li>%variable[index]            Variable name /ADC0/adc_sc2_acfe
    * <li>%macro[index](value)        C register macro e.g. ADC_SC2_ACFGT(value)
    * <li>%description[index]         Description from controlVar e.g. Compare Function Enable
    * <li>%shortDescription[index]    Short description from controlVar e.g. Compare Function Enable
    * <li>%tooltip[index]             Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * <li>%params                     Formatted parameter list for function
    * <li>%paramDescription[index]    Tool-tip from controlVar formatted as param description @param ...
    * <li>%paramType[index]           Based on typeName e.g. AdcCompare (or uint32_t)
    * <li>%paramName[index]           Based on typeName with lower-case first letter adcCompare
    * <li>%fieldAssignment            Expression of form '%register <= (%register & ~%mask)|%paramExpression
    * <li>%maskingExpression          Based on variable etc. Similar to (%register&%mask)
    * <li>%mask[index]                From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * <li>%register[index]            Register associated with variable e.g. adc->APCTL1
    * <li>%registerName[index]        Name of corresponding register (lowercase for Init()) e.g. apctl1
    * <li>%registerNAME[index]        Name of corresponding register (uppercase for Init()) e.g. APCTL1 <br><br>
-->

   <!-- ************* Class Declaration ****************** -->
   <constant key="_class_declaration" type="String"
      value="&quot;$(_Class)Info : public $(_Structname)BasicInfo&quot;" />

   <aliasOption key="/MCG/system_mcgfllclk_clock[]"       optional="true" />
   <aliasOption key="/OSC0/oscer_clock"                   optional="true" />
   <aliasOption key="/MCG/system_mcgirclk_clock[]"        optional="true" />
   <aliasOption key="/SIM/sim_sopt2_pllfllsel[]"          optional="true" locked="false" />
   <aliasOption key="/SIM/sim_sopt2_$(_name)src[]"        optional="true" locked="false" />
   <aliasOption key="/SIM/system_$(_name)_clock[]" 	    optional="true" locked="false" />
   <aliasOption key="/SIM/sim_sopt2_$(_name)src[]"        optional="true" locked="false" />
   <aliasOption key="/SIM/sim_clkdiv3_pllfll[]"           optional="true"/>

   <intOption key="oversampleRatio" condition="lpuart_baud_osr_present"
      description="Number of samples per bit"
      toolTip="This value determines the number of times an Rx bit is sampled.\n
               This also affects the clock divider and hence the range of baud rates available"
       value="8" min="4" max="32"
      />

   <template condition="oversampleRatio" ><![CDATA[
   \t//! Number of samples per bit
   \tstatic constexpr uint32_t oversampleRatio = $(oversampleRatio);\n\n
   ]]></template>

   <choiceOption key="defaultBaudRate"
      valueFormat="%s"
      typeName="UartBaudRate"
      description="$(_BASENAME) default baud rate"
      toolTip="Used by default $(_BASENAME) setup for stdio">
      <choice value="110"     name="110"     enum="110"    />
      <choice value="300"     name="300"     enum="300"    />
      <choice value="600"     name="600"     enum="600"    />
      <choice value="1200"    name="1200"    enum="1200"   />
      <choice value="2400"    name="2400"    enum="2400"   />
      <choice value="4800"    name="4800"    enum="4800"   />
      <choice value="9600"    name="9600"    enum="9600"   />
      <choice value="14400"   name="14400"   enum="14400"  />
      <choice value="19200"   name="19200"   enum="19200"  />
      <choice value="28800"   name="28800"   enum="28800"  />
      <choice value="38400"   name="38400"   enum="38400"  />
      <choice value="56000"   name="56000"   enum="56000"  />
      <choice value="57600"   name="57600"   enum="57600"  />
      <choice value="115200"  name="115200"  enum="115200" isDefault="true" />
   </choiceOption>

   <binaryOption key="$(_basename)Class"
      description="Input buffering"
      toolTip="This option determines whether an interrupt-driven driver\n
               incorporating a queue is used to buffer input data" >
      <choice name="Unbuffered" value="Lpuart_T" />
      <choice name="Buffered"   value="LpuartBuffered_T" />
   </binaryOption>

   <intOption key="receiveBufferSize" description="Size of input buffer"
      toolTip="This value determines the size of the receive buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <intOption key="transmitBufferSize" description="Size of output buffer"
      toolTip="This value determines the size of the transmit buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />


   <!--   ========== class $(_Structname)BasicInfo =============================== -->

   <template where="basicInfo" ><![CDATA[
      class $(_Structname)BasicInfo {

      public:\n
   ]]></template>

   <!--   ========== Interrupt handling =============================== -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="irqHandlingMethod"
   ><![CDATA[
       \t//! Common class based callback code has been generated for this class of peripheral
       \tstatic constexpr bool irqHandlerInstalled = %symbolicExpression;
       \t\n
   ]]></variableTemplate>

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo" >
   <![CDATA[
      \t/**
      \t * Type for Universal Asynchronous Receiver/Transmitter call back function.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_parameters));
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <template codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/** Callback function for Universal Asynchronous Receiver/Transmitter */
      \tstatic CallbackFunction sCallback;
      \t
      \t/**
      \t * Universal Asynchronous Receiver/Transmitter interrupt handler
      \t * Passes control to call-back function
      \t */
      \tstatic void irqHandler() {
      \t
      \t   // Execute call-back
      \t   sCallback($(irq_call));
      \t}
      \t
      \t/**
      \t * Set Universal Asynchronous Receiver/Transmitter callback function.
      \t *
      \t * @param      $(_basename)Callback Callback function to execute on interrupt
      \t *                             Use nullptr to remove callback.
      \t */
      \tstatic void setCallback(CallbackFunction $(_basename)Callback) {
      \t   if ($(_basename)Callback == nullptr) {
      \t      $(_basename)Callback = (CallbackFunction)unhandledCallback;
      \t   }
      \t   // Allow either no handler set yet or removing handler
      \t   usbdm_assert(
      \t         ((void*)sCallback == (void*)unhandledCallback) ||
      \t         ((void*)$(_basename)Callback == (void*)unhandledCallback),
      \t         "Handler already set");
      \t   sCallback = $(_basename)Callback;
      \t}
      \t
      \t\n
   ]]>
   </template>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Callback function for Universal Asynchronous Receiver/Transmitter
      \t */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallback = (CallbackFunction)$(_Class)Info::unhandledCallback;
      \t
      \t\n
   ]]>
   </template>

   <template><![CDATA[
      \t//! Default Baud rate used if not explicitly given
      \tstatic constexpr uint32_t defaultBaudRate = $(defaultBaudRate);
      \t
      \t//! Default buffer size for receive queue when interrupt driven
      \tstatic constexpr unsigned receiveBufferSize = $(receiveBufferSize);
      \t
      \t//! Default buffer size for transmit queue when interrupt driven
      \tstatic constexpr unsigned transmitBufferSize = $(transmitBufferSize);

      #if defined(PCC_PCC_LPUART$(_instance)_CGC_MASK)
      \t//! Default clock source
      \tstatic constexpr PccDiv2Clock defaultClockSource = PccDiv2Clock_Firc;

      \t/**
      \t * Set $(_BASENAME)$(_instance) input clock source.
      \t *
      \t * @param pccDiv2Clock Clock source selection
      \t *
      \t * @note This peripheral uses the DIV2 peripheral clocks e.g. SOSCDIV2_CLK
      \t * @note The peripheral bus clock will be disabled before changing the
      \t         clock and is left disabled.
      \t */
      \tstatic void setClockSource(PccDiv2Clock pccDiv2Clock) {
      \t   PccInfo::setLpuart$(_instance)ClockSource(pccDiv2Clock);
      \t}
      #endif

      \t/**
      \t * Get input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getClockFrequency() {
      #if defined(PCC_PCC_LPUART$(_instance)_CGC_MASK)
      \t   return PccInfo::getLpuart$(_instance)Frequency();
      \t#elif defined(SIM_SOPT2_LPUART$(_instance)SRC_MASK)
      \t   return SimInfo::getLpuart$(_instance)Clock();
      \t#else
      \t   return SimInfo::getLpuartClock();
      #endif
      \t}\n\n
   ]]></template>

   <template key="/$(_BASENAME)/Present"  ><![CDATA[\ ||\ 1]]></template>

   <template where="basicInfo" >
   <![CDATA[
      }; // class $(_Structname)BasicInfo
      \t\n
   ]]>
   </template>

   <!-- ************* Common ****************** -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME) interface
      \t *
      \t * <b>Example</b>
      \t * @code
      \t *  // Instantiate interface
      \t *  USBDM::$(_Class) $(_basename);
      \t *
      \t *  for(int i=0; i++;) {
      \t *     $(_basename).writeln("Hello world ", i);
      \t *  }
      \t *  @endcode
      \t */
      \ttypedef  $(/$(_NAME)/$(_basename)Class:$(_Baseclass)_T)<$(_Class)Info> $(_Class);\n\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.LpuartValidate">
   </validate>

   <projectActionList id="lpuart_files" >
      <copy source="Project_Headers/lpuart.h"        target="Project_Headers/lpuart.h"     overwrite="true"  derived="true" macroReplace="true" />
      <copy source="Project_Headers/uart_queue.h"          target="Project_Headers/uart_queue.h"       overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ************* Startup ****************** -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="Thes settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>
   <deleteVariables variables="_scgc_clock,/SIM/$(_Class)ExternalItems" mustExist="false" />

   <!-- ************* Signal mapping ****************** -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
