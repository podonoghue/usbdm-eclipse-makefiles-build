<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- lpuart_def.xml -->

<!--
    * General substitutions
    *  $(_NAME)         => e.g FTM2 => FTM2
    *  $(_name)         => e.g FTM2 => ftm2
    *  $(_BASENAME)     => e.g FTM0 => FTM, PTA => PT
    *  $(_basename)     => e.g FTM0 => ftm, PTA => pt
    *  $(_Class)        => e.g FTM2 => Ftm2
    *  $(_Baseclass)    => e.g FTM0 => Ftm
    *  $(_instance)     => e.g FTM0 => 0, PTA => A
-->

<!--
    * Template substitutions
    *
    * %valueExpression[index]         Formatted value as numeric e.g. 0x12
    * %symbolicExpression[index] Symbolic formatted value e.g. AdcCompare_Disabled
    * %variable[index]                Variable name /ADC0/adc_sc2_acfe
    * %macro[index](value)            C register macro e.g. ADC_SC2_ACFGT(value)
    * %description[index]             Description from controlVar e.g. Compare Function Enable
    * %shortDescription[index]        Short description from controlVar e.g. Compare Function Enable
    * %tooltip[index]                 Tool-tip from controlVar e.g. Each bit disables the GPIO function
    * %paramDescription[index]        Tool-tip from controlVar formatted as param description @param ...
    * %params                         Formatted parameter list for function
    * %paramType[index]               Based on enumStem or typename e.g. AdcCompare (or uint32_t)
    * %paramName[index]               Based on enumStem with lower-case first letter adcCompare
    * %paramType[index]               As for %paramType
    * %paramName[index]               As for %paramName
    * %valueExpression                Numeric variable value e.g. 0x3
    * %symbolicExpression        Symbolic variable value e.g. AdcCompare_Disabled
    * %fieldAssignment         Based on variable etc. Similar to %register = (%register&~%mask) | %paramName;
    * %maskingExpression       Based on variable etc. Similar to (%register&%mask)
    * %variable[index]                Variable name from condition
    * %mask[index]                    From &lt;mask&gt; or deduced from &lt;controlVarName&gt; e.g. "SIM_SOPT_REG_MASK" (_MASK is added)
    * %register[index]                Register associated with variable e.g. adc->APCTL1
    * %registerName[index]            Name of corresponding register (lowercase for Init()) e.g. apctl1 <br><br>
-->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="$(_BASENAME)">

   <xi:include href="default_instance.xml"/>

   <xi:include href="mapPinsOption_on.xml"/>

   <aliasOption key="/PCC/pcc_$(_name)"                   optional="true" locked="false"/>

   <aliasOption key="/MCG/system_mcgfllclk_clock[]"       optional="true" />
   <aliasOption key="/OSC0/oscer_clock"                   optional="true" />
   <aliasOption key="/MCG/system_mcgirclk_clock[]"        optional="true" />
   <aliasOption key="/SIM/sim_sopt2_pllfllsel[]"          optional="true" locked="false" />
   <aliasOption key="/SIM/sim_sopt2_$(_name)src[]"        optional="true" locked="false" />
   <aliasOption key="/SIM/system_$(_name)_clock[]" 	    optional="true" locked="false" />
   <aliasOption key="/SIM/sim_sopt2_$(_name)src[]"        optional="true" locked="false" />
   <aliasOption key="/SIM/sim_clkdiv3_pllfll[]"           optional="true"/>

   <intOption key="oversampleRatio" condition="lpuart_baud_osr_present"
      description="Number of samples per bit"
      toolTip="This value determines the number of times an Rx bit is sampled.\n
               This also affects the clock divider and hence the range of baud rates available"
       value="8" min="4" max="32"
      />

   <template condition="oversampleRatio" ><![CDATA[
   \t//! Number of samples per bit
   \tstatic constexpr uint32_t oversampleRatio = $(oversampleRatio);\n\n
   ]]></template>

   <choiceOption key="defaultBaudRate"
      valueFormat="%s"
      typeName="UartBaudRate"
      description="$(_BASENAME) default baud rate"
      toolTip="Used by default $(_BASENAME) setup for stdio">
      <choice value="110"     name="110"     enum="110"    />
      <choice value="300"     name="300"     enum="300"    />
      <choice value="600"     name="600"     enum="600"    />
      <choice value="1200"    name="1200"    enum="1200"   />
      <choice value="2400"    name="2400"    enum="2400"   />
      <choice value="4800"    name="4800"    enum="4800"   />
      <choice value="9600"    name="9600"    enum="9600"   />
      <choice value="14400"   name="14400"   enum="14400"  />
      <choice value="19200"   name="19200"   enum="19200"  />
      <choice value="28800"   name="28800"   enum="28800"  />
      <choice value="38400"   name="38400"   enum="38400"  />
      <choice value="56000"   name="56000"   enum="56000"  />
      <choice value="57600"   name="57600"   enum="57600"  />
      <choice value="115200"  name="115200"  enum="115200" isDefault="true" />
   </choiceOption>

   <binaryOption key="$(_basename)Class"
      description="Input buffering"
      toolTip="This option determines whether an interrupt-driven driver\n
               incorporating a queue is used to buffer input data" >
      <choice name="Unbuffered" value="Lpuart_T" />
      <choice name="Buffered"   value="LpuartBuffered_T" />
   </binaryOption>

   <intOption key="receiveBufferSize" description="Size of input buffer"
      toolTip="This value determines the size of the receive buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <intOption key="transmitBufferSize" description="Size of output buffer"
      toolTip="This value determines the size of the transmit buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <category name="Advanced" description="Advanced options">
      <aliasOption key="/SIM/sim_sopt5_$(_name)txsrc" optional="true" locked="false" />
      <aliasOption key="/SIM/sim_sopt5_$(_name)rxsrc" optional="true" locked="false" />
   </category>

   <stringOption key="irq_pattern"        locked="true" value="^$(_BASENAME)%i_?(RxTx)?$" hidden="true" />
   <stringOption key="irq_ClassHandler"   locked="true" value="%c%i::irqHandler" hidden="true" />
   <xi:include href="irqOptionSubstituted.xml"/>

   <xi:include href="clockOption.xml"/>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.LpuartValidate">
   </validate>

   <projectActionList id = "lpuart_files">
      <copy source="Project_Headers/lpuart.h"        target="Project_Headers/lpuart.h"     overwrite="true"  derived="true" macroReplace="true" />
      <copy source="Project_Headers/uart_queue.h"          target="Project_Headers/uart_queue.h"       overwrite="true"  derived="true" />
   </projectActionList>

   <template><![CDATA[
      \t//! Default Baud rate used if not explicitly given
      \tstatic constexpr uint32_t defaultBaudRate = $(defaultBaudRate);
      \t
      \t//! Default buffer size for receive queue when interrupt driven
      \tstatic constexpr unsigned receiveBufferSize = $(receiveBufferSize);
      \t
      \t//! Default buffer size for transmit queue when interrupt driven
      \tstatic constexpr unsigned transmitBufferSize = $(transmitBufferSize);

      #if defined(PCC_PCC_LPUART$(_instance)_CGC_MASK)
      \t//! Default clock source
      \tstatic constexpr PccDiv2Clock defaultClockSource = PccDiv2Clock_Firc;

      \t/**
      \t * Set $(_BASENAME)$(_instance) input clock source.
      \t *
      \t * @param pccDiv2Clock Clock source selection
      \t *
      \t * @note This peripheral uses the DIV2 peripheral clocks e.g. SOSCDIV2_CLK
      \t * @note The peripheral bus clock will be disabled before changing the
      \t         clock and is left disabled.
      \t */
      \tstatic void setClockSource(PccDiv2Clock pccDiv2Clock) {
      \t   PccInfo::setLpuart$(_instance)ClockSource(pccDiv2Clock);
      \t}
      #endif

      \t/**
      \t * Get input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getClockFrequency() {
      #if defined(PCC_PCC_LPUART$(_instance)_CGC_MASK)
      \t   return PccInfo::getLpuart$(_instance)Frequency();
      \t#elif defined(SIM_SOPT2_LPUART$(_instance)SRC_MASK)
      \t   return SimInfo::getLpuart$(_instance)Clock();
      \t#else
      \t   return SimInfo::getLpuartClock();
      #endif
      \t}\n\n
   ]]></template>

   <template key="/$(_BASENAME)/Present" namespace="all"  ><![CDATA[\ ||\ 1]]></template>

   <template key="/$(_BASENAME)/declarations" namespace="all"  ><![CDATA[
      \t/**
      \t * Class representing $(_NAME) interface
      \t *
      \t * <b>Example</b>
      \t * @code
      \t *  // Instantiate interface
      \t *  USBDM::$(_Class) $(_basename);
      \t *
      \t *  for(int i=0; i++;) {
      \t *     $(_basename).writeln("Hello world ", i);
      \t *  }
      \t *  @endcode
      \t */
      \ttypedef  $(/$(_NAME)/$(_basename)Class:$(_Baseclass)_T)<$(_Class)Info> $(_Class);\n\n
   ]]></template>

   <signals/>
</peripheralPage>
