<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- lpuart_def.xml -->
<!--
Devices using this peripheral: 
-->
<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="UART">

   <xi:include href="_default_instance.xml"/>

   <xi:include href="_mapPinsOption_on.xml"/>

   <aliasOption key="/PCC/pcc_lpuart$(_instance)"          optional="true" constant="false"/> 

   <aliasOption key="/MCG/system_mcgfllclk_clock"          optional="true" /> 
   <aliasOption key="/OSC0/oscer_clock"                    optional="true" /> 
   <aliasOption key="/MCG/system_mcgirclk_clock"           optional="true" /> 
   <aliasOption key="/SIM/sim_sopt2_pllfllsel"             optional="true" constant="false" /> 
   <aliasOption key="/SIM/sim_sopt2_lpuartsrc"             optional="true" constant="false" />
   <aliasOption key="/SIM/system_lpuart_clock" 	           optional="true" constant="false" />
   <aliasOption key="/SIM/sim_sopt2_lpuart$(_instance)src" optional="true" constant="false" />
   <aliasOption key="/SIM/sim_clkdiv3_pllfll"              optional="true"/>
   
   <intOption name="oversampleRatio" description="Number of samples per bit" 
      toolTip="This value determines the number of times an Rx bit is sampled.\n
               This also affects the clock divider and hence the range of baud rates available."
       value="8" min="4" max="32"
      />

   <template><![CDATA[
   \t//! Number of samples per bit
   \tstatic constexpr uint32_t oversampleRatio = $(oversampleRatio);\n\n
   ]]></template>

   <choiceOption name="defaultBaudRate" 
      description="UART default baud rate"
      toolTip="Used by default UART setup for stdio">
      <choice value="110"     name="110" />
      <choice value="300"     name="300" />
      <choice value="600"     name="600" />
      <choice value="1200"    name="1200" />
      <choice value="2400"    name="2400" />
      <choice value="4800"    name="4800" />
      <choice value="9600"    name="9600" />
      <choice value="14400"   name="14400" />
      <choice value="19200"   name="19200" />
      <choice value="28800"   name="28800" />
      <choice value="38400"   name="38400" />
      <choice value="56000"   name="56000" />
      <choice value="57600"   name="57600" />
      <choice value="115200"  name="115200" isDefault="true" />
   </choiceOption>

   <binaryOption name="lpuartClass" 
      description="Input buffering"
      toolTip="This option determines whether an interrupt-driven driver\n 
               incorporating a queue is used to buffer input data" >
      <choice name="Unbuffered" value="Lpuart_T" />
      <choice name="Buffered"   value="LpuartBuffered_T" />
   </binaryOption>
   
   <intOption name="receiveBufferSize" description="Size of input buffer" 
      toolTip="This value determines the size of the receive buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <intOption name="transmitBufferSize" description="Size of output buffer" 
      toolTip="This value determines the size of the transmit buffer\n
               for the interrupt driven driver version  "
       value="50" min="1" max="1000"
      />

   <category name="Advanced" description="Advanced options">
      <aliasOption key="/SIM/sim_sopt5_lpuart$(_instance)txsrc"  constant="false" optional="true" />
      <aliasOption key="/SIM/sim_sopt5_lpuart$(_instance)rxsrc"  constant="false" optional="true" />
   </category>
   
   <stringOption name="irq_pattern"        constant="true" value="^LPUART%i_?(RxTx)?$" hidden="true" />
   <stringOption name="irq_classHandler"   constant="true" value="%c%i::irqHandler" hidden="true" />
   <xi:include href="_irqOptionSubstituted.xml"/>
   
   <xi:include href="_clockOption.xml"/>
      
   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.LpuartValidate">
   </validate>

   <projectActionList id = "lpuart_files">
      <copy source="Project_Headers/lpuart.h"      target="Project_Headers/lpuart.h"        overwrite="true"  derived="true" macroReplace="true" />
      <copy source="Project_Headers/uart_queue.h"  target="Project_Headers/uart_queue.h"    overwrite="true"  derived="true" />
   </projectActionList>
         
   <template><![CDATA[
      \t//! Default Baud rate used if not explicitly given
      \tstatic constexpr uint32_t defaultBaudRate = $(defaultBaudRate);
   
      \t//! Default buffer size for receive queue when interrupt driven
      \tstatic constexpr unsigned receiveBufferSize = $(receiveBufferSize);

      \t//! Default buffer size for transmit queue when interrupt driven
      \tstatic constexpr unsigned transmitBufferSize = $(transmitBufferSize);

      #if defined(PCC_PCC_LPUART$(_instance)_CGC_MASK)
      \t//! Default clock source
      \tstatic constexpr PccDiv2Clock defaultClockSource = PccDiv2Clock_Firc;
   
      \t/**
      \t * Set LPUART$(_instance) input clock source.
      \t *
      \t * @param pccDiv2Clock Clock source selection
      \t *
      \t * @note This peripheral uses the DIV2 peripheral clocks e.g. SOSCDIV2_CLK 
      \t * @note The peripheral bus clock will be disabled before changing the 
      \t         clock and is left disabled.
      \t */
      \tstatic void setClockSource(PccDiv2Clock pccDiv2Clock) {
      \t   PccInfo::setLpuart$(_instance)ClockSource(pccDiv2Clock);
      \t}
      #endif
   
      \t/**
      \t * Get input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic uint32_t getClockFrequency() {
      #if defined(PCC_PCC_LPUART$(_instance)_CGC_MASK)
      \t   return PccInfo::getLpuart$(_instance)Frequency();
      \t#elif defined(SIM_SOPT2_LPUART$(_instance)SRC_MASK)
      \t   return SimInfo::getLpuart$(_instance)Clock();
      \t#else
      \t   return SimInfo::getLpuartClock();
      #endif
      \t}\n\n
   ]]></template>
   
   <template name="/LPUART/Present" namespace="all"  ><![CDATA[\ ||\ 1]]></template>

   <template name="/LPUART/declarations" namespace="all"  ><![CDATA[
      \t/**
      \t * Class representing $(_name) interface
      \t *
      \t * <b>Example</b>
      \t * @code
      \t *  // Instantiate interface
      \t *  USBDM::$(_class) lpuart;
      \t *
      \t *  for(int i=0; i++;) {
      \t *     lpuart.write("Hello world ", i);
      \t *  }
      \t *  @endcode
      \t */
      \ttypedef  $(/$(_name)/lpuartClass:$(_base_class)_T)<$(_class)Info> $(_class);\n\n
   ]]></template>

   <signals/>
</peripheralPage>
