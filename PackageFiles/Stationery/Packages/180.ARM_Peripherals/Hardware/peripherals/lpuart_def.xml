<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE peripheralPage SYSTEM "_menu.dtd" >
<!-- lpuart_def.xml -->

<peripheralPage xmlns:xi="http://www.w3.org/2001/XInclude" name="_instance" description="$(_BASENAME)">

   <!-- Enable for this peripheral -->
   <binaryOption key="usedAsConsole"
      description="usedAsConsole"
      toolTip="Indicates if this device is allocated as the Console for I/O"
      ref='(/Console/consoleEnable)&amp;&amp;(/Console/consoleDevice.name=="$(_Baseclass) $(_instance)")'
      locked="true"
      derived="true" >
      <choice value="0" name="Not used as console" />
      <choice value="1" name="Used as console" />
   </binaryOption>

   <binaryOption key="enablePeripheralSupport"
      enabledBy="!usedAsConsole"
      hidden="true"
      description="Enable peripheral support"
      toolTip="Code will also be generated if this LPUART is used as the console"
      disabledValue="true"
      >
      <choice value="false" name="Minimal code for $(_NAME)"  />
      <choice value="true"  name="Generate code for $(_NAME)"/>
   </binaryOption>

   <constant key="irq_pattern"               type="String"  value='"^$(_BASENAME)%i_?((RxTx|Error|Lon)|.*)?$"'  />
   <constant key="irq_ClassHandler"          type="String"  value='"%c%i::$2_irqHandler"'                        />
   <constant key="irq_parameters"            type="String"  value='""'     />
   <constant key="irq_dummy_parameters"      type="String"  value='""'     />
   <constant key="irq_call"                  type="String"  value='""'     />
   <constant key="generateDefault"           type="Boolean" value="false"  />
   <constant key="configureInStartupDefault" type="Boolean" value="false"  />
   <xi:include href="enablePeripheral.xml"  />

   <!-- ____ Class Declaration ________ -->
   <constant key="_class_declaration" type="String"
      value='"$(_Class)Info : public $(_Structname)BasicInfo"' />

   <title description="Clock Configuration"/>
   <aliasOption key="/MCG/system_mcgfllclk_clock[]"       optional="true" />
   <aliasOption key="/SIM/system_peripheral_clock[]"      optional="true" />
   <aliasOption key="/OSC0/oscer_clock"                   optional="true" />
   <aliasOption key="/MCG/system_mcgirclk_clock[]"        optional="true" />
   <aliasOption key="/SIM/sim_sopt2_pllfllsel[]"          optional="true" locked="false" />
   <aliasOption key="/SIM/sim_sopt2_$(_name)src[]"        optional="true" locked="false" />
   <aliasOption key="/SIM/system_$(_name)_clock[]" 	    optional="true" locked="false" />
   <aliasOption key="/SIM/sim_clkdiv3_pllfll[]"           optional="true"/>

   <title description="Configuration"/>
   <intOption key="lpuart_baud_osr" condition="lpuart_baud_osr_present"
      enabledBy="enablePeripheralSupport"
      typeName="LpuartBaudOsr"
      baseType="uint8_t"
      description="Over Sampling Ratio"
      toolTip="This field configures the oversampling ratio for the receiver.\n
      This field should only be changed when the transmitter and receiver are both disabled"
      value="8" min="4" max="32"
   />

   <choiceOption key="lpuart_baudrate"
      enabledBy="/$(_STRUCTNAME)/generateSharedInfo"
      valueFormat="%s"
      typeName="UartBaudRate"
      baseType="uint32_t"
      description="LPUART baud rate"
      toolTip="Baud rate for LPUART\n
               Values available will depend on clock source frequency" >
      <choice value="110"     name="110"     enum="110"    />
      <choice value="300"     name="300"     enum="300"    />
      <choice value="600"     name="600"     enum="600"    />
      <choice value="1200"    name="1200"    enum="1200"   />
      <choice value="2400"    name="2400"    enum="2400"   />
      <choice value="4800"    name="4800"    enum="4800"   />
      <choice value="9600"    name="9600"    enum="9600"   />
      <choice value="14400"   name="14400"   enum="14400"  />
      <choice value="19200"   name="19200"   enum="19200"  />
      <choice value="28800"   name="28800"   enum="28800"  />
      <choice value="38400"   name="38400"   enum="38400"  />
      <choice value="56000"   name="56000"   enum="56000"  />
      <choice value="57600"   name="57600"   enum="57600"  />
      <choice value="115200"  name="115200"  enum="115200" isDefault="true" />
   </choiceOption>

   <!-- ____ class $(_Structname)BasicInfo ____________ -->

   <template where="basicInfo" ><![CDATA[
      class $(_Structname)BasicInfo {
      \t
      public:\n
   ]]></template>

   <!-- ____ Interrupt handling _____________ -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo" >
   <![CDATA[
      \t/**
      \t * Type definition for $(_Baseclass) interrupt call back.
      \t */
      \ttypedef void (*CallbackFunction)($(irq_dummy_parameters));
      \t
      \t/**
      \t * Callback to catch unhandled interrupt
      \t */
      \tstatic void unhandledCallback($(irq_dummy_parameters)) {
      \t   setAndCheckErrorCode(E_NO_HANDLER);
      \t}
      \t\n
   ]]>
   </template>

   <variableTemplate codeGenCondition="irqHandlingMethod"
      variables="irq_enum" >
   <![CDATA[
      \t/** Callback functions for $(_Baseclass) */
      \tstatic CallbackFunction sCallbacks[irqCount];
      \t
      \t/**
      \t * Set interrupt callback function.
      \t *
      %paramDescription0
      \t * @param $(_basename)Callback Callback function to execute on interrupt
      \t *                     Use nullptr to remove callback.
      \t */
      \tstatic void setCallback(%param0, CallbackFunction $(_basename)Callback) {
      \t   if ($(_basename)Callback == nullptr) {
      \t      $(_basename)Callback = unhandledCallback;
      \t   }
      \t   // Allow either no handler set yet or removing handler
      \t   usbdm_assert(
      \t         ((void*)sCallback == (void*)unhandledCallback) ||
      \t         ((void*)$(_basename)Callback == (void*)unhandledCallback),
      \t         "Handler already set");
      \t   sCallbacks[%paramName0] = $(_basename)Callback;
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <for keys="irqName" values="=_irqNums" >

      <constant key="prettyIrqName" value='Prettify(ReplaceAll("%(irqName)", "$(_NAME)_([a-z|A-Z|0-9]+)_IRQn", "$1"))' type="String"/>

      <variableTemplate codeGenCondition="irqHandlingMethod"
         variables="irq_enum"
         immediateVariables="prettyIrqName"
         >
      <![CDATA[
         \t/**
         \t * $(_BASENAME) interrupt handler -  Calls $(_BASENAME) callback
         \t *
         \t * @tparam channel Channel number
         \t */
         \tstatic void $(prettyIrqName)_irqHandler() {
         \t
         \t   // Execute call-back
         \t   sCallbacks[$(_Class)IrqNum_$(prettyIrqName)]($(irq_call));
         \t}
         \t\n
      ]]>
      </variableTemplate>
      <deleteVariables variables="prettyIrqName" />
   </for>

   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" >
   <![CDATA[
      \t/**
      \t * Callback table of programmatically set handlers for $(_Class)
      \t */
      \t$(_Class)Info::CallbackFunction $(_Class)Info::sCallbacks[] = {\n
   ]]></template>
   <for keys="ch" dim="=_irqCount" >
      <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" ><![CDATA[
         \t   $(_Class)Info::unhandledCallback,\n
      ]]></template>
   </for>
   <template key="/HARDWARE/StaticObjects" codeGenCondition="irqHandlingMethod" ><![CDATA[
      \t};\n\n
   ]]></template>

   <template><![CDATA[
      \t/**
      \t * Clear LPUART error status
      \t * This also discards the current received data value
      \t */
      \tstatic void clearError() {
      \t      lpuart->STAT = lpuart->STAT |LPUART_STAT_FE_MASK|LPUART_STAT_NF_MASK|LPUART_STAT_PF_MASK|LPUART_STAT_OR_MASK;
      \t}
      \t\n
   ]]></template>

   <template><![CDATA[
      \t/**
      \t * Get input clock frequency
      \t *
      \t * @return Input clock frequency as a uint32_t in Hz
      \t */
      \tstatic inline uint32_t getInputClockFrequency() {
      \t   return SimInfo::getLpuart$(_instance)Clock();
      \t}\n\n
   ]]></template>

   <!-- ____  BAUD rate calculations ____________________ -->

   <variableTemplate where="basicInfo" variables="lpuart_baudrate, lpuart_baud_osr" condition="lpuart_baud_osr"
   params=", overSample" >
   <![CDATA[
      \t/**
      \t * Set baud rate
      \t * (for LPUART with variable prescaler)
      \t *
      \t * @param lpuart           LPUART hardware instance pointer
      \t * @param clockFrequency   LPUART clock frequency
      %paramDescription
      \t */
      \tstatic void setBaudRate(
      \t      volatile $(_STRUCTNAME)_Type *const $(_basename),
      \t      uint32_t     clockFrequency, %params) {
      \t
      \t   // Disable LPUART before changing registers
      \t   uint32_t ctrl = lpuart->CTRL;
      \t   lpuart->CTRL = 0;
      \t
      \t   /*
      \t    * Baudrate = ClockFrequency / (OverSample x Divider)
      \t    * Divider  = ClockFrequency / (OverSample x Baudrate)
      \t    */
      \t   // Calculate LPUART divisor with rounding
      \t   uint32_t divisor = (clockFrequency<<1)/(%paramName0 * %paramName1);
      \t   divisor = (divisor>>1)|(divisor&0b1);
      \t
      \t   // Set Baud rate register
      \t   lpuart->BAUD = (lpuart->BAUD&~(LPUART_BAUD_SBR_MASK|LPUART_BAUD_OSR_MASK))|
      \t         LPUART_BAUD_SBR(divisor)|LPUART_BAUD_OSR(%paramName1-1);
      \t
      \t   // Restore LPUART settings
      \t   lpuart->CTRL = ctrl;
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <variableTemplate where="info" variables="lpuart_baudrate" >
   <![CDATA[
      \t/**
      \t * Set baud rate
      \t *
      %paramDescription
      \t */
      \tstatic void setBaudRate(%params) {
      \t
      \t   $(_Structname)BasicInfo::setBaudRate(lpuart, getInputClockFrequency(), %paramName);
      \t}
      \t\n
   ]]>
   </variableTemplate>

   <!-- ________ LPUART Init class ____________________________ -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t/**
      \t * Class used to do initialisation of the $(_Baseclass)
      \t *
      \t * This class has a templated constructor that accepts various values.
      \t * Parameters available may vary with device - see $(_Class)::DefaultInitValue for relevant example.
      \t * Omitted parameters default to zero (disabled) or unchanged if initialiser is provided as last parameter.
      \t *
      \t * @note This constructor may be used to create a const instance in Flash
      \t *
      \t * Example:
      \t * @code
      \t * ///
      \t * /// $(_NAME) call-back
      \t * ///
      \t * /// @param status  Status reflecting active inputs
      \t * ///
      \t * void $(_name)Callback(ErrorCode ec) {
      \t *    ....
      \t * }
      \t *
      \t * static const $(_Class)::Init $(_name)Init {
      \t *
      \t *   // Setup values
XXXXXXXXXXXXXXXXXXXXXX
      \t *
      \t *   $(_name)Callback,                 // Call-back to execute on event - call-back function name
      \t *   NvicPriority_Low,                 // Priority for interrupt - Low
      \t *
      \t *   // Optional base value to start with (must be last parameter)
      \t *   $(_Class)::DefaultInitValue   // Used as base value modified by above
      \t * };
      \t *
      \t * // Initialise $(_Class) from values specified above
      \t * $(_Class)::configure($(_name)Init)
      \t * @endcode
      \t */
      \tclass Init {
      \t
      \tpublic:
      \t   /**
      \t    * Copy Constructor
      \t    */
      \t   constexpr Init(const Init &other) = default;
      \t
      \t   /**
      \t    * Default Constructor
      \t    */
      \t   constexpr Init() = default;
      \t\n
   ]]>
   </template>

   <!-- ____ Init class Member variables ________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      condition="false"
      variables="irqHandlingMethod"
   ><![CDATA[
      \t   /// %description
      \t   %params = nullptr;\n\n
   ]]></variableTemplate>

   <for keys=" type        : variables                                            : init    "
       values="%returnType : lpuart_baudrate                                      :   UartBaudRate(0)      ;

               %baseType   : lpuart_baud_maen1,lpuart_baud_maen2,lpuart_baud_m10,
                             lpuart_baud_osr,lpuart_baud_tdmae,lpuart_baud_rdmae,
                             lpuart_baud_matcfg,lpuart_baud_bothedge,lpuart_baud_resyncdis,
                             lpuart_baud_lbkdie,lpuart_baud_rxedgie,lpuart_baud_sbns,
                             lpuart_baud_sbr                                      :   0      ;
               %baseType   : lpuart_stat_lbkdif,lpuart_stat_rxedgif,lpuart_stat_msbf,
                             lpuart_stat_rxinv,lpuart_stat_rwuid,lpuart_stat_brk13,
                             lpuart_stat_lbkde,lpuart_stat_idle,lpuart_stat_or,
                             lpuart_stat_nf,lpuart_stat_fe,lpuart_stat_pf,
                             lpuart_stat_ma1f,lpuart_stat_ma2f                    :   0      ;
               %baseType   : lpuart_ctrl_r8t9,lpuart_ctrl_r9t8,lpuart_ctrl_txdir,
                             lpuart_ctrl_txinv,lpuart_ctrl_orie,lpuart_ctrl_neie,
                             lpuart_ctrl_feie,lpuart_ctrl_peie,lpuart_ctrl_tie,
                             lpuart_ctrl_tcie,lpuart_ctrl_rie,lpuart_ctrl_ilie,
                             lpuart_ctrl_te,lpuart_ctrl_re,lpuart_ctrl_rwu,
                             lpuart_ctrl_sbk,lpuart_ctrl_ma1ie,lpuart_ctrl_ma2ie,
                             lpuart_ctrl_idlecfg,lpuart_ctrl_loops,lpuart_ctrl_dozeen,
                             lpuart_ctrl_rsrc,lpuart_ctrl_m,lpuart_ctrl_wake,
                             lpuart_ctrl_ilt,lpuart_ctrl_pe,lpuart_ctrl_pt        :   0      ;
               %baseType   : lpuart_data_fretsc,lpuart_data_rt                    :   0      ;
               %baseType   : lpuart_match_ma2,lpuart_match_ma1                    :   0      " >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(variables)"
         linePadding="xxx"
      ><![CDATA[
         %multilineDescription
         \t   %(type) %registerName = %(init);\n\n
      ]]></variableTemplate>
   </for>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      variables="/PCR/nvic_irqLevel,irqLevel"
      condition="false"
   ><![CDATA[
      \t   /// %description
      \t   %paramType %registerName0 = %defaultValue;
      \t\n
   ]]></variableTemplate>

   <!-- ____ Init class Constructors ____________ -->

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      condition="false"
      variables="irqHandlingMethod"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      this->%paramName0 = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedIrqInfo"
      condition="false"
      variables="/PCR/nvic_irqLevel"
      linePadding="xxx"
   ><![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t
      \t      %registerName = %paramExpression;
      \t   }\n\n
   ]]></variableTemplate>

   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="uart_c5_tdmas"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    * (uart_c5_tdmas)
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t   c2 = (c2 & ~UART_C2_TIE_MASK)   | %paramExpression;
      \t   c5 = (c5 & ~UART_C5_TDMAS_MASK) | (%paramExpression>>8);
      \t   }
      \t\n
   ]]>
   </variableTemplate>
   <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
      variables="uart_c5_rdmas"
      linePadding="xxx" >
   <![CDATA[
      \t   /**
      \t    * Constructor for %description
      \t    * (uart_c5_rdmas)
      \t    *
      \t    * @tparam   Types
      \t    * @param    rest
      \t    *
      %paramDescription
      \t    */
      \t   template <typename... Types>
      \t   constexpr Init(%params, Types... rest) : Init(rest...) {
      \t   c2 = (c2 & ~UART_C2_RIE_MASK)   | %paramExpression;
      \t   c5 = (c5 & ~UART_C5_RDMAS_MASK) | (%paramExpression>>8);
      \t   }
      \t\n
   ]]>
   </variableTemplate>
   <for keys="r"
      values="
            lpuart_baudrate;
            lpuart_baud_maen1;lpuart_baud_maen2;lpuart_baud_m10;
            lpuart_baud_osr;lpuart_baud_tdmae;lpuart_baud_rdmae;
            lpuart_baud_matcfg;lpuart_baud_bothedge;lpuart_baud_resyncdis;
            lpuart_baud_lbkdie;lpuart_baud_rxedgie;lpuart_baud_sbns;
            lpuart_baud_sbr;
            lpuart_stat_lbkdif;lpuart_stat_rxedgif;lpuart_stat_msbf;
            lpuart_stat_rxinv;lpuart_stat_rwuid;lpuart_stat_brk13;
            lpuart_stat_lbkde;lpuart_stat_idle;lpuart_stat_or;
            lpuart_stat_nf;lpuart_stat_fe;lpuart_stat_pf;
            lpuart_stat_ma1f;lpuart_stat_ma2f;
            lpuart_ctrl_r8t9;lpuart_ctrl_r9t8;lpuart_ctrl_txdir;
            lpuart_ctrl_txinv;lpuart_ctrl_orie;lpuart_ctrl_neie;
            lpuart_ctrl_feie;lpuart_ctrl_peie;lpuart_ctrl_tie;
            lpuart_ctrl_tcie;lpuart_ctrl_rie;lpuart_ctrl_ilie;
            lpuart_ctrl_te;lpuart_ctrl_re;lpuart_ctrl_rwu;
            lpuart_ctrl_sbk;lpuart_ctrl_ma1ie;lpuart_ctrl_ma2ie;
            lpuart_ctrl_idlecfg;lpuart_ctrl_loops;lpuart_ctrl_dozeen;
            lpuart_ctrl_rsrc;lpuart_ctrl_m;lpuart_ctrl_wake;
            lpuart_ctrl_ilt;lpuart_ctrl_pe;lpuart_ctrl_pt;
            lpuart_data_fretsc;lpuart_data_rt;
            lpuart_match_ma2;lpuart_match_ma1" >
      <variableTemplate where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo"
         variables="%(r)"
         linePadding="xxx" >
      <![CDATA[
         \t   /**
         \t    * Constructor for %description
         \t    * (%(r))
         \t    *
         \t    * @tparam   Types
         \t    * @param    rest
         \t    *
         %paramDescription
         \t    */
         \t   template <typename... Types>
         \t   constexpr Init(%params, Types... rest) : Init(rest...) {
         \t
         \t      %constructorFieldAssignment;
         \t   }
         \t\n
      ]]>
      </variableTemplate>
   </for>

   <!-- ____ Init class Configure method ____ -->

   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Configure with default settings.
      \t * Configuration determined from Configure.usbdmProject
      \t */
      \tstatic inline void defaultConfigure() {
      \t
      \t   // Update settings
      \t   configure(DefaultInitValue);
      \t}
      \t
      \t/**
      \t * Configure $(_BASENAME) from values specified in init
      \t *
      \t * @param init Class containing initialisation values
      \t */
      \tstatic void configure(const Init &init) {
      \t
      \t   // Enable peripheral clock
      \t   enable();
      \t\n
   ]]></template>
   <template codeGenCondition="irqHandlingMethod"
      condition="false" >
   <![CDATA[
      \t   // Only set call-backs if feature enabled
      \t   setCallback(init.callbackFunction);
      \t   enableNvicInterrupts(init.irqlevel);
      \t\n
   ]]></template>
   <for keys=
             " var                                                    : statement            "
      values=" lpuart_baud_maen1,lpuart_baud_maen2,lpuart_baud_m10,
               lpuart_baud_osr,lpuart_baud_tdmae,lpuart_baud_rdmae,
               lpuart_baud_matcfg,lpuart_baud_bothedge,lpuart_baud_resyncdis,
               lpuart_baud_lbkdie,lpuart_baud_rxedgie,lpuart_baud_sbns,
               lpuart_baud_sbr                                        : %configRegAssignment ;
               lpuart_stat_lbkdif,lpuart_stat_rxedgif,lpuart_stat_msbf,
               lpuart_stat_rxinv,lpuart_stat_rwuid,lpuart_stat_brk13,
               lpuart_stat_lbkde,lpuart_stat_idle,lpuart_stat_or,
               lpuart_stat_nf,lpuart_stat_fe,lpuart_stat_pf,
               lpuart_stat_ma1f,lpuart_stat_ma2f                      : %configRegAssignment ;
               lpuart_ctrl_r8t9,lpuart_ctrl_r9t8,lpuart_ctrl_txdir,
               lpuart_ctrl_txinv,lpuart_ctrl_orie,lpuart_ctrl_neie,
               lpuart_ctrl_feie,lpuart_ctrl_peie,lpuart_ctrl_tie,
               lpuart_ctrl_tcie,lpuart_ctrl_rie,lpuart_ctrl_ilie,
               lpuart_ctrl_te,lpuart_ctrl_re,lpuart_ctrl_rwu,
               lpuart_ctrl_sbk,lpuart_ctrl_ma1ie,lpuart_ctrl_ma2ie,
               lpuart_ctrl_idlecfg,lpuart_ctrl_loops,lpuart_ctrl_dozeen,
               lpuart_ctrl_rsrc,lpuart_ctrl_m,lpuart_ctrl_wake,
               lpuart_ctrl_ilt,lpuart_ctrl_pe,lpuart_ctrl_pt          : %configRegAssignment ;
               lpuart_data_fretsc,lpuart_data_rt                      : %configRegAssignment ;
               lpuart_match_ma2,lpuart_match_ma1                      : %configRegAssignment ;

               lpuart_baudrate                                       : setBaudRate(init.baudrate)" >
      <variableTemplate codeGenCondition="enablePeripheralSupport"
      variables="%(var)"
      linePadding="xxx"
      ><![CDATA[
         \t
         %multilineDescription
         \t   %(statement);\n
      ]]></variableTemplate>
   </for>
   <template codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t}
      \t\n
   ]]>
   </template>

   <!-- ____  Default Initialisation value ____ -->

   <variableTemplate codeGenCondition="enablePeripheralSupport"
      separator=","
      terminator=","
      variables="
            lpuart_baudrate,
            lpuart_baud_maen1,lpuart_baud_maen2,lpuart_baud_m10,
            lpuart_baud_osr,lpuart_baud_tdmae,lpuart_baud_rdmae,
            lpuart_baud_matcfg,lpuart_baud_bothedge,lpuart_baud_resyncdis,
            lpuart_baud_lbkdie,lpuart_baud_rxedgie,lpuart_baud_sbns,
            lpuart_baud_sbr,
            lpuart_stat_lbkdif,lpuart_stat_rxedgif,lpuart_stat_msbf,
            lpuart_stat_rxinv,lpuart_stat_rwuid,lpuart_stat_brk13,
            lpuart_stat_lbkde,lpuart_stat_idle,lpuart_stat_or,
            lpuart_stat_nf,lpuart_stat_fe,lpuart_stat_pf,
            lpuart_stat_ma1f,lpuart_stat_ma2f,
            lpuart_ctrl_r8t9,lpuart_ctrl_r9t8,lpuart_ctrl_txdir,
            lpuart_ctrl_txinv,lpuart_ctrl_orie,lpuart_ctrl_neie,
            lpuart_ctrl_feie,lpuart_ctrl_peie,lpuart_ctrl_tie,
            lpuart_ctrl_tcie,lpuart_ctrl_rie,lpuart_ctrl_ilie,
            lpuart_ctrl_te,lpuart_ctrl_re,lpuart_ctrl_rwu,
            lpuart_ctrl_sbk,lpuart_ctrl_ma1ie,lpuart_ctrl_ma2ie,
            lpuart_ctrl_idlecfg,lpuart_ctrl_loops,lpuart_ctrl_dozeen,
            lpuart_ctrl_rsrc,lpuart_ctrl_m,lpuart_ctrl_wake,
            lpuart_ctrl_ilt,lpuart_ctrl_pe,lpuart_ctrl_pt,
            lpuart_data_fretsc,lpuart_data_rt,
            lpuart_match_ma2,lpuart_match_ma1" >
   <![CDATA[
      \t/**
      \t * Default initialisation value for $(_Class)
      \t * This value is created from Configure.usbdmProject settings
      \t */
      \tstatic constexpr Init DefaultInitValue = {%initExpression
      \t};
      \t\n
   ]]></variableTemplate>

   <!-- ____ End of Info classes __________________ -->

   <template where="basicInfo" codeGenCondition="/$(_STRUCTNAME)/generateSharedInfo" >
   <![CDATA[
      \t}; // class $(_Structname)BasicInfo::Init
      \t\n
   ]]>
   </template>

   <template where="basicInfo" >
   <![CDATA[
      }; // class $(_Structname)BasicInfo
      \t\n
   ]]>
   </template>

   <!-- ____ Common __________________ -->

   <template key="/$(_BASENAME)/declarations" codeGenCondition="enablePeripheralSupport" >
   <![CDATA[
      \t/**
      \t * Class representing $(_NAME) interface
      \t *
      \t * <b>Example</b>
      \t * @code
      \t *  // Instantiate interface
      \t *  USBDM::$(_Class) $(_basename);
      \t *
      \t *  for(int i=0; i++;) {
      \t *     $(_basename).writeln("Hello world ", i);
      \t *  }
      \t *  @endcode
      \t */
      \tclass $(_Class) : public $(_Baseclass)_T<$(_Class)Info> {};
      \t\n
   ]]>
   </template>

   <validate
      class="net.sourceforge.usbdm.deviceEditor.validators.LpuartValidate">
   </validate>

   <projectActionList id="lpuart_files" >
      <copy source="Project_Headers/lpuart.h"        target="Project_Headers/lpuart.h"      overwrite="true"  derived="true" macroReplace="true" />
      <copy source="Project_Headers/uart_queue.h"    target="Project_Headers/uart_queue.h"  overwrite="true"  derived="true" />
   </projectActionList>

   <!-- ____ Startup __________________ -->

   <template key="/SYSTEM/Includes" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
      <![CDATA[#include "$(_basename).h"\n
   ]]></template>

   <template key="/SYSTEM/Startup" condition="configurePeripheralInStartUp" codeGenCondition="configurePeripheralInStartUp" >
   <![CDATA[
      \t/*  Initialise $(_Class) */
      \tUSBDM::$(_Class)::defaultConfigure();\n
   ]]></template>

   <!-- ____ SIM configuration __________________ -->

   <category name="Advanced" description="SIM configuration"
      toolTip="These settings only have effect if the SIM configuration is enabled" >
      <title description="$(_BASENAME) Shared" />
      <for keys="v" values="=/SIM/$(_Baseclass)ExternalItems" condition="/SIM/$(_Baseclass)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
      <title description="$(_NAME) Specific" />
      <aliasOption key="=_scgc_clock" locked="false" condition="_scgc_clock" />
      <for keys="v" values="=/SIM/$(_Class)ExternalItems" condition="/SIM/$(_Class)ExternalItems" >
         <aliasOption key="/SIM/%(v)"           optional="true" locked="false" />
      </for>
   </category>

   <!--  ____ Signal mapping __________________ -->
   <signals enabledBy="enablePeripheralSupport" locked="!/PCR/_present" />

</peripheralPage>
