/**
 * @file     mcm.h (180.ARM_Peripherals/Project_Headers/mcm.h)
 * @brief    Miscellaneous Control Module
 *
 * @version  V4.12.1.80
 * @date     13 April 2016
 */

#ifndef HEADER_MCM_H
#define HEADER_MCM_H
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "pin_mapping.h"

namespace USBDM {

/**
 * @addtogroup MCM_Group MCM, Miscellaneous Control Module
 * @brief Abstraction for Miscellaneous Control Module
 * @{
 */

/**
 * Template class providing a base for Miscellaneous Control Module
 */
class McmBase : public McmInfo {

public:
$(/MCM/DefaultFlashInitValue: // /MCM/DefaultFlashInitValue not found)
$(/MCM/DefaultSramAccessInitValue: // /MCM/DefaultSramAccessInitValue not found)
$(/MCM/DefaultFloatingPointIrqInitValue: // /MCM/DefaultFloatingPointIrqInitValue not found)

#if $(/MCM/generateSharedIrqInfo:false)
   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note Only usable with static objects.
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match McmCallbackFunction
    *    void callback() {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * static AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Mcm::wrapCallback<AClass, &AClass::callback, aClass>();
    * // Use as callback
    * Mcm::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(), T &object>
   static CallbackFunction wrapCallback() {
      static CallbackFunction fn = []() {
         (object.*callback)();
      };
      return fn;
   }

   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note There is a considerable space and time overhead to using this method
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match McmCallbackFunction
    *    void callback() {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Mcm::wrapCallback<AClass, &AClass::callback>(aClass);
    * // Use as callback
    * Mcm::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)()>
   static CallbackFunction wrapCallback(T &object) {
      static T &obj = object;
      static CallbackFunction fn = []() {
         (obj.*callback)();
      };
      return fn;
   }
#endif

};

$(/MCM/declarations: // No declarations found)
/**
 * End MCM_Group
 * @}
 */

} // End namespace USBDM

#endif /* HEADER_MCM_H */
