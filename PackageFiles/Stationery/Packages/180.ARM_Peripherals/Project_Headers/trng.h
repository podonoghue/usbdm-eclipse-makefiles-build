/**
 * @file     trng.h (180.ARM_Peripherals/Project_Headers/trng.h)
 * @brief    True Random Number Generator
 *
 * @version  V4.12.1.230
 * @date     13 April 2016
 */

#ifndef HEADER_TRNG_H_
#define HEADER_TRNG_H_
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "derivative.h"
#include "pin_mapping.h"

namespace USBDM {

/**
 * @addtogroup TRNG_Group TRNG, Random Number Generator Accelerator
 * @brief Abstraction for Random Number Generator Accelerator
 * @{
 */

#if $(/TRNG/enablePeripheralSupport:false) // /TRNG/enablePeripheralSupport

/**
 * Template class representing the Random Number Generator Accelerator.
 *
 * TRNG is a digital integrated circuit capable of generating 32-bit random numbers.
 * The random bits are generated using shift registers with clocks derived from two free-running,
 * independent ring oscillators. The configuration of the shift registers ensures statistically
 * good data, that is, data that looks random. The oscillators, with their unknown
 * frequencies and independent phases, provide the means of generating the required
 * entropy needed to create random data.
 *
 * @tparam info      Information class for TRNG
 */
template<class Info>
class TrngBase_T : public Info {

public:
   /**
    * Hardware instance pointer
    *
    * @return Reference to TRNG hardware
    */
   static constexpr HardwarePtr<TRNG_Type> trng = Info::baseAddress;

$(/TRNG/InitMethod:// /TRNG/InitMethod not found)
};

$(/TRNG/declarations: // No declarations found)
#endif  // /TRNG/enablePeripheralSupport
/**
 * End TRNG_Group
 * @}
 */
} // End namespace USBDM

#endif /* HEADER_TRNG_H_ */
