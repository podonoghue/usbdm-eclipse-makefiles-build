/**
 * @file     trng.h (180.ARM_Peripherals/Project_Headers/trng.h)
 * @brief    True Random Number Generator
 *
 * @version  V4.12.1.230
 * @date     13 April 2016
 */

#ifndef HEADER_TRNG_H_
#define HEADER_TRNG_H_
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "derivative.h"
#include "pin_mapping.h"

namespace USBDM {

/**
 * @addtogroup TRNG_Group TRNG, True Random Number Generator
 * @brief Abstraction for True Random Number Generator
 * @{
 */
 
/**
 * Type definition for TRNG interrupt call back
 *
 * @param[in]  status Struct indicating interrupt source and state
 */
typedef void (*TRNGCallbackFunction)();

/**
 * Template class representing the Random Number Generator Accelerator.
 *
 * TRNG is a digital integrated circuit capable of generating 32-bit random numbers.
 * The random bits are generated using shift registers with clocks derived from two free-running,
 * independent ring oscillators. The configuration of the shift registers ensures statistically
 * good data, that is, data that looks random. The oscillators, with their unknown
 * frequencies and independent phases, provide the means of generating the required
 * entropy needed to create random data.
 *
 * @tparam info      Information class for TRNG
 */
template<class Info>
class TrngBase_T {

protected:
   /**
    * Callback to catch unhandled interrupt
    */
   static void unhandledCallback() {
      setAndCheckErrorCode(E_NO_HANDLER);
   }

   /** Callback function for ISR */
   static TRNGCallbackFunction callback;

public:
   /**
    * Hardware instance pointer
    *
    * @return Reference to TRNG hardware
    */
   static __attribute__((always_inline)) volatile TRNG_Type &trng() { return Info::trng(); }

   /**
    * IRQ handler
    */
   static void irqHandler() {
      // Call handler
      callback();
   }

   /**
    * Set callback function
    *
    * @param[in]  theCallback Callback function to execute on interrupt
    */
   static void setCallback(TRNGCallbackFunction theCallback) {
      if (theCallback == nullptr) {
         theCallback = unhandledCallback;
      }
      callback = theCallback;
   }

public:

   /**
    * Basic enable TRNG.
    *
    * Includes enabling clock
    */
   static void enable() {

      // Enable clock to TRNG interface
      Info::enableClock();
   }

   /**
    * Enable with default settings.
    */
   static void defaultConfigure() {
      enable();
   }

   /**
    * Configure TRNG.
    *
    * @param[in] trngHighAssurance  Controls High Assurance mode
    * @param[in] trngMode           Controls Sleep mode
    * @param[in] trngInterrupt      Controls Interrupt Mask
    */
   static __attribute__((always_inline)) void configure() {
   }

   /**
    * Specifies an entropy value that TRNG uses in addition to its ring oscillators
    * to seed its pseudo-random algorithm.
    *
    * @param[in] entropyValue Entropy value used for TRNG calculation
    *
    * @note Specifying a value for this field is optional but recommended.
    * You can write to this field at any time during operation.
    */
   static void writeEntropyValue(uint32_t entropyValue) {
   }

   /**
    * Disable interface to TRNG.
    */
   static void disable() {
      Info::disableClock();
   }

   /**
    * Clear interrupt flag.
    */
   static void clearInterruptFlag() {
   }
   
   /**
    * Enable interrupts in NVIC
    */
   static void enableNvicInterrupts() {
      NVIC_EnableIRQ(Info::irqNums[0]);
   }

   /**
    * Enable and set priority of interrupts in NVIC
    * Any pending NVIC interrupts are first cleared.
    *
    * @param[in]  nvicPriority  Interrupt priority
    */
   static void enableNvicInterrupts(NvicPriority nvicPriority) {
      enableNvicInterrupt(Info::irqNums[0], nvicPriority);
   }

   /**
    * Disable interrupts in NVIC
    */
   static void disableNvicInterrupts() {
      NVIC_DisableIRQ(Info::irqNums[0]);
   }
};

template<class Info> TRNGCallbackFunction TrngBase_T<Info>::callback = TrngBase_T<Info>::unhandledCallback;

#if defined(USBDM_TRNG_IS_DEFINED)
class Trng : public TrngBase_T<TrngInfo> {};
#endif

#if defined(USBDM_TRNG0_IS_DEFINED)
class Trng0 : public TrngBase_T<Trng0Info> {};
$(/TRNG0/Declarations:   // No declarations Found)
#endif

/**
 * End TRNG_Group
 * @}
 */
} // End namespace USBDM

#endif /* HEADER_TRNG_H_ */
