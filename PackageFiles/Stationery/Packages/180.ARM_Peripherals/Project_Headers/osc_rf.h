/**
 * @file     osc_rf.h (180.ARM_Peripherals/Project_Headers/osc_rf.h)
 * @brief    OscRfillator interface
 *
 * @version  V4.12.1.80
 * @date     13 April 2016
 */

#ifndef HEADER_OSC_H
#define HEADER_OSC_H
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "hardware.h"

namespace USBDM {
/**
 * @addtogroup OSC_Group OSC, Crystal OscRfillator
 * @brief Abstraction for Crystal OscRfillator
 * @{
 */

/**
 * Controls the modes in which the oscillator will operate
 */
enum OscRunMode {
   OscRunMode_Soc                             = RSIM_CONTROL_RF_OSC_EN(0b0000), //!< Oscillator will be controlled by the SoC, pin or link layer
   OscRunMode_Run_Wait                        = RSIM_CONTROL_RF_OSC_EN(0b0001), //!< Oscillator enabled in Run/Wait
   OscRunMode_Run_Wait_Stop                   = RSIM_CONTROL_RF_OSC_EN(0b0011), //!< Oscillator enabled in Run/Wait/Stop
   OscRunMode_Run_Wait_Stop_Vlp_Run_Wait      = RSIM_CONTROL_RF_OSC_EN(0b0111), //!< Oscillator enabled in Run/Wait/Stop/VLPR/VLPW
   OscRunMode_Run_Wait_Stop_Vlp_Run_Wait_Stop = RSIM_CONTROL_RF_OSC_EN(0b1111), //!< Oscillator enabled in Run/Wait/Stop/VLPR/VLPW/VLPS
};

/**
 * Template class providing interface to OscRfillator
 *
 * @tparam info      Information class for OSC
 *
 * @code
 * using osc = OscRfBase_T<OscRfInfo>;
 *
 *  osc::configure();
 *
 * @endcode
 */
template <class Info>
class OscRfBase_T {

protected:
   static constexpr volatile OSC_Type *osc = Info::osc;

public:
   /**
    * Configures all mapped pins associated with this peripheral
    */
   static void __attribute__((always_inline)) configureAllPins() {
      // Configure pins
      Info::initPCRs();
   }

   /**
    * Initialise OSC to default settings.
    * Configures all OSC pins
    */
   static void defaultConfigure() {
      if (Info::mapPinsOnEnable) {
         configureAllPins();
      }
      // Configure RF OSC
      RSIM->CONTROL = (RSIM->CONTROL&~RSIM_CONTROL_RF_OSC_EN_MASK)|RSIM_CONTROL_RF_OSC_EN(Osc0Info::rf_osc_en);
   }

   /**
    * Set up the OSC out of reset.
    */
   static void initialise() {
      defaultConfigure();
   }

   /**
    *
    * @param oscRunMode Modes in which the oscillator will operate
    */
   static void setOscillatorRunModes(OscRunMode oscRunMode) {
      RSIM->CONTROL = (RSIM->CONTROL&~RSIM_CONTROL_RF_OSC_EN_MASK)|oscRunMode;
   }
};

#ifdef USBDM_OSC0_IS_DEFINED
/**
 * Class providing interface to OscRfillator
 */
class Osc0 : public OscRfBase_T<Osc0Info> {};
$(/OSC0/Declarations:   // No declarations Found)
#endif

/**
 * End OSC_Group
 * @}
 */
} // End namespace USBDM

#endif /* HEADER_OSC_H */
