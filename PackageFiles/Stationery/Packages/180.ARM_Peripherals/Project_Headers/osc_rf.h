/**
 * @file     osc_rf.h (180.ARM_Peripherals/Project_Headers/osc_rf.h)
 * @brief    OscRfillator interface
 */

#ifndef HEADER_OSC_H
#define HEADER_OSC_H

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "pin_mapping.h"

namespace USBDM {
/**
 * @addtogroup OSC_Group OSC, Crystal OscRfillator
 * @brief Abstraction for Crystal OscRfillator
 * @{
 */
$(/OSC/peripheral_h_definition:// $/OSC/peripheral_h_definition not found)

/**
 * Template class providing interface to OscRfillator
 *
 * @tparam info      Information class for OSC
 *
 * @code
 * using osc = OscBase_T<OscRfInfo>;
 *
 *  osc::configure();
 *
 * @endcode
 */
template <class Info>
class OscBase_T : public Info {

private:
   /** Class to static check OSC signal is mapped to a pin - Assumes existence */
   template<int xtalPin> class CheckPinMapped {
   private:
      // Check mapping - no need to check existence
      static constexpr bool Test1 = (Info::info[xtalPin].gpioBit >= 0);

      static_assert(Test1, "OSC XTAL/EXTAL signal is not mapped to a pin - Modify Configure.usbdm");

   public:
      /// Dummy for inline checking
      static constexpr bool checker = false;
   };

   // Dummy function as no IRQ
   void disableNvicInterrupts() {}

protected:
   /** Hardware instance */
   static constexpr HardwarePtr<OSC_Type> osc = Info::baseAddress;

public:
   $(/OSC/classInfo: // No class Info found)

   /**
    * Set up the OSC out of reset.
    */
   static void initialise() {
      Info::defaultConfigure();
   }
};

$(/OSC_RF/declarations: // No declarations found)
/**
 * End OSC_Group
 * @}
 */
} // End namespace USBDM

#endif /* HEADER_OSC_H */
