/**
 * @file     uart.h (180.ARM_Peripherals/Project_Headers/uart.h)
 * @brief    Universal Asynchronous Receiver/Transmitter interface
 */

#ifndef INCLUDE_USBDM_UART_H_
#define INCLUDE_USBDM_UART_H_

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include <stdint.h>
#include "derivative.h"
#include "pin_mapping.h"
#include "formatted_io.h"
#include "uart_queue.h"
#ifdef __CMSIS_RTOS
#include "cmsis.h"
#endif

$(/UART/prototypes:// $/UART/prototypes not found)

namespace USBDM {

/**
 * @addtogroup UART_Group UART, Universal Asynchronous Receiver/Transmitter
 * @brief C++ Class allowing access to UART interface
 * @{
 */
$(/UART/peripheral_h_definition:// $/UART/peripheral_h_definition not found)
#if $(/UART/_BasicInfoGuard) // /UART/_BasicInfoGuard

/**
 * @brief Abstract Base class for UART interface
 */
class Uart : public FormattedIO {

private:
   Uart() = delete;
   Uart(const Uart&) = delete;
   Uart(Uart&&) = delete;

protected:
#ifdef __CMSIS_RTOS
   /**
    * Obtain UART mutex.
    *
    * @param[in]  milliseconds How long to wait in milliseconds. Use osWaitForever for indefinite wait
    *
    * @return osOK:                    The mutex has been obtain.
    * @return osErrorTimeoutResource:  The mutex could not be obtained in the given time.
    * @return osErrorResource:         The mutex could not be obtained when no timeout was specified.
    * @return osErrorParameter:        The parameter mutex_id is incorrect.
    * @return osErrorISR:              Cannot be called from interrupt service routines.
    *
    * @note The USBDM error code will also be set on error
    */
   virtual osStatus startTransaction(int milliseconds=osWaitForever) = 0;

   /**
    * Release UART mutex.
    *
    * @return osOK:              The mutex has been correctly released.
    * @return osErrorResource:   The mutex was not obtained before.
    * @return osErrorISR:        Cannot be called from interrupt service routines.
    *
    * @note The USBDM error code will also be set on error
    */
   virtual osStatus endTransaction() = 0;
#else
   /**
    * Obtain UART - dummy routine (non RTOS)
    */
   int startTransaction(int =0) {
      return 0;
   }
   /**
    * Release UART - dummy routine (non RTOS)
    */
   int endTransaction() {
      return 0;
   }
#endif

   /**
    * Check if character is available
    *
    * @return true  Character available i.e. _readChar() will not block
    * @return false No character available
    */
   virtual bool _isCharAvailable() override {
      return (uart->S1 & UART_S1_RDRF_MASK);
   }

   /**
    * Receives a single character (blocking)
    *
    * @return Character received
    */
   virtual int _readChar() override {

      // Get status from UART
      uint8_t status;
      do {
         // Get status from UART
         status = uart->S1;
         // Clear & ignore pending errors
         if ((status & (UART_S1_FE_MASK|UART_S1_OR_MASK|UART_S1_PF_MASK|UART_S1_NF_MASK)) != 0) {
            clearError();
         }
         // Check for Rx buffer full
      } while ((status & UART_S1_RDRF_MASK) == 0);
      return (uint8_t)(uart->D);
   }

   /**
    * Writes a character (blocking)
    *
    * @param[in]  ch - character to send
    */
   virtual void _writeChar(char ch) override {
      while ((uart->S1 & UART_S1_TDRE_MASK) == 0) {
         // Wait for Tx buffer empty
         __asm__("nop");
      }
      uart->D = ch;
      if (ch=='\n') {
         _writeChar('\r');
      }
   }

public:

   /**
    * UART hardware instance
    */
   const HardwarePtr<UART_Type> uart;

   /**
    * Construct UART interface
    *
    * @param[in]  baseAddress Base address of UART hardware
    */
   Uart(uint32_t baseAddress) : uart((baseAddress)) {
   }

   /**
    * Destructor
    */
   virtual ~Uart() {
   }

   /**
    * Set baud rate for interface
    *
    * @param[in]  uartBaudRate  Interface speed in bits-per-second
    */
   virtual void setBaudRate(UartBaudRate uartBaudRate) = 0;

   /**
    * Clear UART error status
    */
   virtual void clearError() = 0;
$(/UART/commonMethods: // /UART/commonMethods found)
   /**
    *  Flush output data
    */
   virtual Uart &flushOutput() override {
      while ((uart->S1 & UART_S1_TC_MASK) == 0) {
      // Wait until transmission of last character is complete
      }
      return *this;
   };

   /**
    *  Flush input data
    */
   virtual Uart &flushInput() override {
      (void)uart->D;
      return (Uart &)FormattedIO::flushInput();
   };
};

/**
 * @brief Template class representing an UART interface
 *
 * @tparam Info   Class describing UART hardware
 */
template<class Info> class Uart_T : public Uart, public Info {

private:
   Uart_T(const Uart_T&) = delete;
   Uart_T(Uart_T&&) = delete;

public:
   /** Get reference to hardware as struct */
   static volatile UART_Type &uartPtr() { return Info::uart(); }

   /** Base address of hardware as uint32_t */
   static constexpr uint32_t uartBase = Info::baseAddress;

   /** Address of DATA register as uint32_t */
   static constexpr uint32_t uartD = Info::baseAddress + offsetof(UART_Type, D);

#ifdef __CMSIS_RTOS
protected:
   /**
    * Mutex to protect access\n
    * Using a static accessor function avoids issues with static object initialisation order
    *
    * @return mutex
    */
   static CMSIS::Mutex &mutex(int =0) {
      /** Mutex to protect access - static so per UART */
      static CMSIS::Mutex mutex;
      return mutex;
   }

public:
   /**
    * Obtain UART mutex.
    *
    * @param[in]  milliseconds How long to wait in milliseconds. Use osWaitForever for indefinite wait
    *
    * @return osOK:                    The mutex has been obtain.
    * @return osErrorTimeoutResource:  The mutex could not be obtained in the given time.
    * @return osErrorResource:         The mutex could not be obtained when no timeout was specified.
    * @return osErrorParameter:        The parameter mutex_id is incorrect.
    * @return osErrorISR:              Cannot be called from interrupt service routines.
    *
    * @note The USBDM error code will also be set on error
    */
   virtual osStatus startTransaction(int milliseconds=osWaitForever) override {
      // Obtain mutex
      osStatus status = mutex().wait(milliseconds);
      if (status != osOK) {
         CMSIS::setCmsisErrorCode(status);
      }
      return status;
   }

   /**
    * Release UART mutex
    *
    * @return osOK:              The mutex has been correctly released.
    * @return osErrorResource:   The mutex was not obtained before.
    * @return osErrorISR:        Cannot be called from interrupt service routines.
    *
    * @note The USBDM error code will also be set on error
    */
   virtual osStatus endTransaction() override {
      // Release mutex
      osStatus status = mutex().release();
      if (status != osOK) {
         CMSIS::setCmsisErrorCode(status);
      }
      return status;
   }
#endif

   /**
    * Set baud rate for interface
    *
    * @param[in]  uartBaudRate  Interface speed in bits-per-second
    */
   virtual void setBaudRate(UartBaudRate uartBaudRate) override {
      Info::setBaudRate(uartBaudRate);
   }

public:
   $(/UART/classInfo: // No class Info found)

   /**
    * Construct UART interface
    */
   Uart_T() : Uart(Info::baseAddress) {
#ifdef PORT_PCR_MUX
      // Check pin assignments
      static_assert(Info::info[0].pinIndex >= PinIndex::MIN_PIN_INDEX, "Uart_Tx has not been assigned to a pin - Modify Configure.usbdm");
      static_assert(Info::info[1].pinIndex >= PinIndex::MIN_PIN_INDEX, "Uart_Rx has not been assigned to a pin - Modify Configure.usbdm");
#endif

      initialise();
   }

   void initialise() {

      // Enable clock to UART interface
      Info::enableClock();

      if constexpr (Info::mapPinsOnEnable) {
         Info::configureAllPins();
      }
      uart->C2 = UART_C2_TE(1)|UART_C2_RE(1);
   }

   /**
    * Destructor
    */
   ~Uart_T() {}

protected:
   /**
    * Clear UART error status
    */
   virtual void clearError() override {
      Info::clearError();
   }

public:
};

#if 0
/**
 * @brief Abstract template class representing a buffered UART interface with associated hardware
 *
 * @tparam Info   Class describing UART hardware
 */
template<class Info, int rxSize=Info::receiveBufferSize, int txSize=Info::transmitBufferSize>
class UartBuffered_T : public Uart_T<Info> {

private:
   UartBuffered_T(const UartBuffered_T&) = delete;
   UartBuffered_T(UartBuffered_T&&) = delete;

public:
   using Info::uart;

   UartBuffered_T() : Uart_T<Info>() {
      Uart::setReceiveFullAction(UartRxFullAction_Interrupt);
      Uart_T<Info>::enableNvicInterrupts(Info::irqLevel);
   }

   virtual ~UartBuffered_T() {
      Uart::setReceiveFullAction(UartRxFullAction_None);
      Uart::setTransmitEmptyAction(UartTxEmptyAction_None);
   }

protected:
   /**
    * Queue for Buffered reception (if used)
    */
   static UartQueue<char, rxSize> rxQueue;
   /**
    * Queue for Buffered transmission (if used)
    */
   static UartQueue<char, txSize> txQueue;

   /** Lock variable for writes */
   static volatile uint32_t fWriteLock;

   /** Lock variable for reads */
   static volatile uint32_t fReadLock;

   /**
    * Writes a character (blocking on queue full)
    *
    * @param[in]  ch - character to send
    */
   virtual void _writeChar(char ch) override {
      lock(&fWriteLock);
      // Add character to buffer
      while (!txQueue.enQueueDiscardOnFull(ch)) {
         __asm__("nop");
      }
      uart->C2 = uart->C2 | UART_C2_TIE_MASK;
      unlock(&fWriteLock);
      if (ch=='\n') {
        _writeChar('\r');
      }
   }

   /**
    * Receives a single character (blocking on queue empty)
    *
    * @return Character received
    */
   virtual int _readChar() override {
      lock(&fReadLock);
      while (rxQueue.isEmpty()) {
         __asm__("nop");
      }
      char t = rxQueue.deQueue();
      unlock(&fReadLock);
      return t;
   }

   /**
    * Check if character is available
    *
    * @return true  Character available i.e. _readChar() will not block
    * @return false No character available
    */
   virtual bool _isCharAvailable() override {
      return (!rxQueue.isEmpty());
   }

public:
   /**
    * Receive/Transmit IRQ handler (MKL)
    */
   static void irqHandler()  {
      uint8_t status = Info::uart->S1;
      if (status & UART_S1_RDRF_MASK) {
         // Receive data register full - save data
         rxQueue.enQueueDiscardOnFull(Info::uart->D);
      }
      if (status & UART_S1_TDRE_MASK) {
         // Transmitter ready
         if (txQueue.isEmpty()) {
            // No data available - disable further transmit interrupts
            Info::uart->C2 = Info::uart->C2 & ~UART_C2_TIE_MASK;
         }
         else {
            // Transmit next byte
            Info::uart->D = txQueue.deQueue();
         }
      }
   }

   /**
    * Receive/Transmit IRQ handler (MK)
    */
   static void irqRxTxHandler()  {
      uint8_t status = Info::uart->S1;
      if (status & UART_S1_RDRF_MASK) {
         // Receive data register full - save data
         rxQueue.enQueueDiscardOnFull(Info::uart->D);
      }
      if (status & UART_S1_TDRE_MASK) {
         // Transmitter ready
         if (txQueue.isEmpty()) {
            // No data available - disable further transmit interrupts
            Info::uart->C2 = Info::uart->C2 & ~UART_C2_TIE_MASK;
         }
         else {
            // Transmit next byte
            Info::uart->D = txQueue.deQueue();
         }
      }
   }

   /**
    * Error IRQ handler (MK)
    */
   static void irqErrorHandler() {
      // Ignore errors
      clearError();
   }

   /**
    *  Flush output data.
    *  This blocks until all pending data has been sent
    */
   virtual UartBuffered_T &flushOutput() override {
      while (!txQueue.isEmpty()) {
         // Wait until queue empty
      }
      while ((uart->S1 & UART_S1_TC_MASK) == 0) {
         // Wait until transmission of last character is complete
      }
      return *this;
   }

   /**
    *  Flush input data
    */
   virtual UartBuffered_T &flushInput() override {
      rxQueue.clear();
      return (UartBuffered_T &)Uart_T<Info>::flushInput();
   }

};


/**
 * Virtual class for buffered UART
 *
 * - No BRFA field (Baud Rate Fine Adjust)
 * - No OSR field (Over Sampling Ratio) i.e. Fixed x16 over-sample
 * - Buffered
 *
 * @tparam Info Info class providing clock frequency etc.
 */
template<class Info, int rxSize=Info::receiveBufferSize, int txSize=Info::transmitBufferSize>
class UartBuffered : public UartBuffered_T<Info, rxSize, txSize> {

private:
   UartBuffered(const UartBuffered&) = delete;
   UartBuffered(UartBuffered&&) = delete;

public:
   /**
    * Construct UART interface
    *
    * @param[in]  baudrate         Interface speed in bits-per-second
    */
   UartBuffered(unsigned baudrate=Info::defaultBaudRate) : UartBuffered_T<Info, rxSize, txSize>() {
      setBaudRate(baudrate);
   }
   /**
    * Destructor
    */
   virtual ~UartBuffered() {
   }
   /**
    * Set baud factor value for interface
    *
    * This is calculated from baud rate and LPUART clock frequency
    *
    * @param[in]  baudrate Interface speed in bits-per-second
    */
   virtual void setBaudRate(unsigned baudrate) override {
      // Over-sample ratio - fixed in hardware
      static constexpr int OVER_SAMPLE = 16;

      Uart::setBaudRate_basic(baudrate, Info::getInputClockFrequency(), OVER_SAMPLE);
   }
};

template<class Info, int rxSize, int txSize> UartQueue<char, rxSize> UartBuffered_T<Info, rxSize, txSize>::rxQueue;
template<class Info, int rxSize, int txSize> UartQueue<char, txSize> UartBuffered_T<Info, rxSize, txSize>::txQueue;
template<class Info, int rxSize, int txSize> volatile uint32_t   UartBuffered_T<Info, rxSize, txSize>::fReadLock  = 0;
template<class Info, int rxSize, int txSize> volatile uint32_t   UartBuffered_T<Info, rxSize, txSize>::fWriteLock = 0;
#endif

$(/UART/declarations: // No declarations found)
#endif // /UART/_BasicInfoGuard

/**
 * End UART_Group
 * @}
 */

} // End namespace USBDM

#endif /* INCLUDE_USBDM_UART_H_ */
