/**
 * @file     i2s.h (180.ARM_Peripherals/Project_Headers/i2s.h)
 * @brief    I2S interface
 */

#ifndef HEADER_I2S_H
#define HEADER_I2S_H

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include <stdint.h>
#include "derivative.h"
#include "pin_mapping.h"
#ifdef __CMSIS_RTOS
#include "cmsis.h"
#endif

#if $(/I2S/_BasicInfoGuard) // /I2S/_BasicInfoGuard

namespace USBDM {

/**
 * @addtogroup I2S_Group I2S, Synchronous Audio Interface
 * @brief C++ Class allowing access to I2S interface
 * @{
 */
$(/I2S/peripheral_h_definition:// $/I2S/peripheral_h_definition not found)

/**
 * Virtual Base class for I2S interface
 */
class I2s {

protected:
   const HardwarePtr<I2S_Type> i2s;                 //!< I2S hardware instance

   /**
    * Construct I2S interface
    *
    * @param[in]  i2s     Base address of I2S hardware
    */
   I2s(uint32_t i2s) : i2s(i2s) {
   }

   /**
    * Destructor
    */
   ~I2s() {}

public:
};

/**
 * @brief Template class representing an I2S interface
 *
 * <b>Example</b>
 *
 * @code
 *  @endcode
 *
 * @tparam Info            Class describing I2S hardware
 */
template<class Info> class I2sBase_T : public I2s, public Info {

public:
   // Handle on I2S hardware
   static constexpr volatile I2S_Type *I2S = Info::i2s;

   // I2S SCL (clock) Pin
   using sclGpio = GpioTable_T<Info, 0, USBDM::ActiveLow>; // Inactive is high

   // I2S SDA (data) Pin
   using sdaGpio = GpioTable_T<Info, 1, USBDM::ActiveHigh>;

   /** Used by ISR to obtain handle of object */
   static I2S_Type *thisPtr;

public:
   $(/I2S/classInfo: // No class Info found)

   /**
    * Construct I2S interface
    *
    * @param[in]  bps        Tx/Rx rate
    * @param[in]  myAddress  Address of this device on bus (not currently used)
    */
   I2sBase_T(unsigned bps=400000, uint8_t myAddress=0) : I2s(Info::baseAddress) {
   (void)bps; (void)myAddress;

#ifdef DEBUG_BUILD
      // Check pin assignments
//      static_assert(Info::info[0].gpioBit != UNMAPPED_PCR, "I2Sx_SCL has not been assigned to a pin - Modify Configure.usbdm");
//      static_assert(Info::info[1].gpioBit != UNMAPPED_PCR, "I2Sx_SDA has not been assigned to a pin - Modify Configure.usbdm");
#endif

   }

   /**
    * Destructor
    */
   virtual ~I2sBase_T() {}

$(/I2S/InitMethod: // No declarations found)
};

/** Used by ISR to obtain handle of object */
template<class Info> I2S_Type *I2sBase_T<Info>::thisPtr = 0;

$(/I2S/declarations: // No declarations found)
/**
 * End I2S_Group
 * @}
 */

} // End namespace USBDM

#endif // /I2S/_BasicInfoGuard

#endif /* HEADER_I2S_H */
