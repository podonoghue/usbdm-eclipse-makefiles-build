/**
 * @file     mcg.h (180.ARM_Peripherals/Project_Headers/mgc.h)
 * @brief    Abstraction layer for MCG interface
 */

#ifndef INCLUDE_USBDM_MCG_H_ 
#define INCLUDE_USBDM_MCG_H_

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "derivative.h"
#include "system.h"

$(/MCG/prototypes:// $/MCG/prototypes not found)

namespace USBDM {

/**
 * @addtogroup MCG_Group MCG, Multipurpose Clock Generator
 * @brief Abstraction for Multipurpose Clock Generator
 * @{
 */

$(/MCG/peripheral_h_definition:// $/MCG/peripheral_h_definition not found)
/**
 * Clock configurations
 */
enum ClockConfig : uint8_t {
$(/MCG/ClockConfig: #error ClockConfig not found)
   ClockConfig_default = 0,
};

// Forward declaration
enum SmcRunMode : uint8_t;

$(/MCG/ClockInfoType:#error ClockInfoType not found)

class ClockChangeCallback {

friend class Mcg;

private:
      // Pointer to next in chain
      ClockChangeCallback *next = nullptr;

public:
      virtual ~ClockChangeCallback() = default;

      /**
       * This method is overridden to obtain notification before clock change
       */
      virtual void beforeClockChange(){}

      /**
       * This method is overridden to obtain notification after clock change
       */
      virtual void afterClockChange(){};
};

/**
 * @brief Class representing the MCG
 *
 * <b>Example</b>
 * @code
 *    Mcg::initialise();
 * @endcode
 */
class Mcg : public McgInfo {

private:
#if $(/MCG/enableClockChangeNotifications:false)
   static ClockChangeCallback *clockChangeCallbackQueue;

   static void notifyBeforeClockChange() {
      ClockChangeCallback *p = clockChangeCallbackQueue;
      while (p != nullptr) {
         p->beforeClockChange();
         p = p->next;
      }
   }
   static void notifyAfterClockChange() {
      ClockChangeCallback *p = clockChangeCallbackQueue;
      while (p != nullptr) {
         p->afterClockChange();
         p = p->next;
      }
   }

public:
   /**
    * Add callback for clock configuration changes
    *
    * @param callback Call-back class to notify on clock configuration changes
    */
   static void addClockChangeCallback(ClockChangeCallback &callback) {
      callback.next = clockChangeCallbackQueue;
      clockChangeCallbackQueue = &callback;
   }
#endif

private:

   /** Hardware instance */
   static constexpr HardwarePtr<MCG_Type> mcg = McgInfo::baseAddress;

$(/MCG/privateMethods: // No private methods found)

public:

$(/MCG/publicMethods: // No public methods found)

   /**
    * Table of clock settings
    */
   static const ClockInfo clockInfo[];

   /** Current clock mode (FEI out of reset) */
   static McgClockMode currentClockMode;

   /**
    * Update SystemCoreClock variable
    *
    * Updates the SystemCoreClock variable with current core Clock retrieved from CPU registers.
    */
   static void SystemCoreClockUpdate(void);

#if $(/MCG/_BasicInfoGuard:false) // /MCG/_BasicInfoGuard

   /**
    * Write main MCG registers from clockInfo
    * - Clock monitors are masked out
    * - PLL is not selected (C6.PLLS=0)
    * - Not low power (C2.LP = 0 since clockInfo.C2 does not include LP)
    * - TRIM bits are preserved (C2.FCFTRIM, C4.FCTRIM, C4.SCFTRIM)
    * - Bugfix version: Errata e7993
    *
    * @param clockInfo  Clock settings information
    * @param bugFix     Mask to flip MCG.C4 value
    */
   static void writeMainRegs(const ClockInfo &clockInfo, uint8_t bugFix);

   /**
    * Transition from current clock mode to mode given
    *
    * @param[in]  clockInfo Clock mode to transition to
    *
    * @return E_NO_ERROR          on success
    * @return E_CLOCK_INIT_FAILED on failure
    */
   static ErrorCode clockTransition(const ClockInfo &clockInfo);

   /**
    * Get current clock mode
    *
    * @return
    */
   static McgClockMode getClockMode() {
      return currentClockMode;
   }

   /**
    * Get name for clock mode
    *
    * @return Pointer to static string
    */
   static const char *getClockModeName(McgClockMode);

   /**
    * Get name for current clock mode
    *
    * @return Pointer to static string
    */
   static const char *getClockModeName() {
      return getClockModeName(getClockMode());
   }

   /**
    *  Configure the MCG for given mode
    *
    *  @param[in]  settingNumber Clock setting number
    */
   static void configure(ClockConfig settingNumber=ClockConfig_default) {
      clockTransition(clockInfo[settingNumber]);
   }

   /**
    *   Finalise the MCG
    */
   static void finalise() {
      clockTransition(clockInfo[ClockConfig_default]);
   }

#endif

   /**
    * Initialise MCG as part of startup sequence
    */
   static void startupConfigure();

$(/MCG/InitMethod: // No /MCG/InitMethod methods found)
};

$(/MCG/declarations: // /MCG/No declarations methods found)

/**
 * @}
 */

} // End namespace USBDM

#endif /* INCLUDE_USBDM_MCG_H_ */
