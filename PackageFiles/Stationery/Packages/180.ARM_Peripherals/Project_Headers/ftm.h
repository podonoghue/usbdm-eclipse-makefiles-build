/**
 * @file     ftm.h (180.ARM_Peripherals/Project_Headers/ftm.h)
 * @brief    Flexitimer Timer Module
 *
 * @version  V4.12.1.80
 * @date     13 April 2016
 *      Author: podonoghue
 */
#ifndef HEADER_FTM_H
#define HEADER_FTM_H

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include <stddef.h>
#include <cmath>
#include "pin_mapping.h"

#if $(/FTM/enablePeripheralSupport) // /FTM/enablePeripheralSupport

/*
 * Default port information
 */
namespace USBDM {

/**
 * @addtogroup FTM_Group FTM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */

/**
 * Selects pairs of channels for some operations
 */
enum FtmChannelPair {
   FtmChannelPair_0_1 = (1<<0), ///< Channel Pair select for channels 0 and 1
   FtmChannelPair_2_3 = (1<<1), ///< Channel Pair select for channels 2 and 3
   FtmChannelPair_4_5 = (1<<2), ///< Channel Pair select for channels 4 and 5
   FtmChannelPair_6_7 = (1<<3), ///< Channel Pair select for channels 6 and 6
};

/**
 * Controls value forced to pin by forceChannelOutputs()
 */
enum FtmChannelForce {    // Enable|Value
   FtmChannelForce_Release = 0x00|(0x00<<8), ///< Release channel output
   FtmChannelForce_Low     = 0xFF|(0x00<<8), ///< Force channel output low
   FtmChannelForce_High    = 0xFF|(0xFF<<8), ///< Force channel output high
};

/**
 * Provides shared methods.
 */
class FtmBase {

private:
   FtmBase(const FtmBase&) = delete;
   FtmBase(FtmBase&&) = delete;

public:
#if $(/PCR/_present:false) // /PCR/_present
   CreatePeripheralPinChecker("FTM");
#endif

protected:
   // Constructor
   constexpr FtmBase(uint32_t baseAddress) : ftm(baseAddress) {};
   ~FtmBase() = default;

   /** Allow access owning FTM */
   const HardwarePtr<FTM_Type> ftm;

   /**
    * Limit index to permitted pin index range
    * Used to prevent noise from static assertion checks that detect a condition already detected in a more useful fashion.
    *
    * @tparam Inf    Associated info table
    * @param index   Index to limit
    *
    * @return Index limited to permitted range
    */
   template <class Inf>
   static inline constexpr int limitIndex(int index) {
      if (index<0) {
         return 0;
      }
      if (index>(Inf::numSignals-1)) {
         return Inf::numSignals-1;
      }
      return index;
   }

   /**
    * Callback to catch unhandled interrupt
    */
   static void unhandledCallback() {
      setAndCheckErrorCode(E_NO_HANDLER);
   }

   /**
    * Get Timer input frequency.
    *
    * @param ftmClockSource Clock source
    *
    * @return Clock frequency in Hz
    */
   virtual float getInputClockFrequencyVirtual(FtmClockSource ftmClockSource) const = 0;

public:
   /**
    * Structure for FTM channel.
    */
   struct FtmChannelRegs {
      __IO uint32_t  CnSC; /**< 000C: Channel  Status and Control */
      __IO uint32_t  CnV;  /**< 0010: Channel  Value              */
   };

/*
 *   // Member functions (mirrored)
 */
$(/FTM/non_static_functions:  // /FTM/non_static_functions not found)
};

class FtmChannel : public FtmBase {

private:
   FtmChannel(const FtmChannel&) = delete;
   FtmChannel(FtmChannel&&) = delete;

protected:
   // Empty constructor
   constexpr FtmChannel(uint32_t baseAddress, FtmChannelNum channelNum) :
   FtmBase(baseAddress),
   channelRegs((uint32_t)(ftm->CONTROLS+channelNum)),
   CHANNEL(channelNum),
   CHANNEL_MASK(1<<channelNum) {
   }
   ~FtmChannel() = default;

public:
   /** Allow access to FTM channel registers */
   const HardwarePtr<FtmBase::FtmChannelRegs> channelRegs;

   /** Timer channel number */
   const FtmChannelNum CHANNEL;

   /** Mask for Timer channel */
   const uint32_t CHANNEL_MASK;

$(/FTM_CHANNEL/non_static_functions:  // /FTM_CHANNEL/non_static_functions not found)
};

/**
 * Base class representing a FTM.
 *
 *
 * @tparam Info  Class describing FTM hardware instance
 */
template<class Info>
class FtmBase_T : public FtmBase, public Info  {

private:
   /**
    * This class is not intended to be instantiated
    */
   FtmBase_T(const FtmBase_T&) = delete;
   FtmBase_T(FtmBase_T&&) = delete;

#if $(/FTM/irqHandlingMethod:false) // /FTM/irqHandlingMethod
   typedef typename Info::ChannelCallbackFunction ChannelCallbackFunction;
#endif

public:

   // Empty constructor
   constexpr FtmBase_T() : FtmBase(Info::baseAddress) {}
   virtual ~FtmBase_T() = default;

   /** Maximum counter value in ticks */
   static constexpr Ticks MaximumPeriodInTicks = Ticks(FTM_MOD_MOD_MASK);

   /** Hardware instance pointer */
   static constexpr HardwarePtr<FTM_Type> ftm = Info::baseAddress;

   /** @return Base address of FTM hardware as uint32_t */
   static constexpr uint32_t ftmBase() { return Info::baseAddress; }
   /** @return Base address of FTM.SC register as uint32_t */
   static constexpr uint32_t ftmSC() { return ftmBase() + offsetof(FTM_Type, SC); }
   /** @return Base address of FTM.CNT register as uint32_t */
   static constexpr uint32_t ftmCNT() { return ftmBase() + offsetof(FTM_Type, CNT); }
   /** @return Base address of FTM.MOD register as uint32_t */
   static constexpr uint32_t ftmMOD() { return ftmBase() + offsetof(FTM_Type, MOD); }
   /** @return Base address of FTM.CONTROL[n] struct as uint32_t */
   static constexpr uint32_t ftmCONTROL(int index) { return ftmBase() + offsetof(FTM_Type, CONTROLS) + index*sizeof(FTM_Type::CONTROLS[0]); }
   /** @return Base address of FTM.CONTROL[n].CnSC struct as uint32_t */
   static constexpr uint32_t ftmCnSC(int index) { return ftmBase() + offsetof(FTM_Type, CONTROLS) + index*sizeof(FTM_Type::CONTROLS[0])+0; }
   /** @return Base address of FTM.CONTROL[n].CnV struct as uint32_t */
   static constexpr uint32_t ftmCnV(int index) { return ftmBase() + offsetof(FTM_Type, CONTROLS) + index*sizeof(FTM_Type::CONTROLS[0])+sizeof(uint32_t); }

private:
   /** Number of channels mapped to a channel event vector */
   static constexpr unsigned ChannelVectorRatio = Info::NumChannels/Info::NumChannelVectors;

protected:
   /**
    * Get frequency of timer tick
    *
    * @return Timer frequency in Hz
    */
   virtual float getInputClockFrequencyVirtual(FtmClockSource ftmClockSource) const override {
      return Info::getInputClockFrequency(ftmClockSource);
   }

public:

#if $(/FTM/irqHandlingMethod) // /FTM/irqHandlingMethod
   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note Only usable with static objects.
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match ChannelCallbackFunction
    *    void callback(uint8_t status) {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * static AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Ftm0::wrapCallback<AClass, &AClass::callback, aClass>();
    * // Use as callback
    * Ftm0::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(uint8_t), T &object>
   static ChannelCallbackFunction wrapCallback() {
      static ChannelCallbackFunction fn = [](uint8_t status) {
         (object.*callback)(status);
      };
      return fn;
   }

   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note There is a considerable space and time overhead to using this method
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match ChannelCallbackFunction
    *    void callback(uint8_t status) {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Ftm0::wrapCallback<AClass, &AClass::callback>(aClass);
    * // Use as callback
    * Ftm0::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(uint8_t)>
   static ChannelCallbackFunction wrapCallback(T &object) {
      static T &obj = object;
      static ChannelCallbackFunction fn = [](uint8_t status) {
         (obj.*callback)(status);
      };
      return fn;
   }
#endif // /FTM/irqHandlingMethod

public:
$(/FTM/classInfo: // No class Info found)
$(/FTM/InitMethod:// /FTM/InitMethod not found)
$(/FTM/ChannelInitMethod: // /FTM/ChannelInitMethod not found)
$(/FTM/FaultInitMethod: // /FTM/FaultInitMethod not found)

/*
 *   // Static functions (mirrored)
 */
$(/FTM/static_functions:  // /FTM/static_functions not found)

public:
   /**
    * Template class representing a timer channel
    *
    * Example
    * @code
    * // Instantiate the timer and channel being used (for FTM0 & channel 6)
    * using Tmr      = USBDM::Ftm0;
    * using Tmr0_ch6 = Tmr::Channel<6>;
    *
    * // Enable and initialise timer with initial alignment
    * Tmr::configure(FtmAlignment_LeftAlign);
    *
    * // Change timer period (in ticks) (affects ALL channels of timer)
    * Tmr::setPeriod(500);
    *
    * // Configure channel as PWM
    * Tmr0_ch6::configure(FtmChannelMode_PwmHighTruePulses);
    *
    * // Change duty cycle (in percent)
    * Tmr0_ch6.setDutyCycle(45);
    * @endcode
    *
    * @tparam channel FTM timer channel
    */
   template <int channel>
   class Channel :
#if $(/PCR/_present:false) // /PCR/_present
   public PcrTable_T<Info, limitIndex<Info>(channel)>,
#endif
   public FtmChannel, public Info {

   private:
#if $(/PCR/_present:false) // /PCR/_present
      FtmBase::CheckPinExistsAndIsMapped<Info, channel> check;
#endif

      /**
       * This class is not intended to be instantiated
       */
      Channel(const Channel&) = delete;
      Channel(Channel&&) = delete;

   public:
//      typedef typename Info::ChannelInit ChannelInit;

      constexpr Channel() : FtmChannel(Info::baseAddress, (FtmChannelNum)channel) {}
      virtual ~Channel() = default;

   protected:
      /**
       * Get frequency of timer tick
       *
       * @return Timer frequency in Hz
       */
      virtual float getInputClockFrequencyVirtual(FtmClockSource ftmClockSource) const override {
         return Info::getInputClockFrequency(ftmClockSource);
      }

   public:
#if $(/PCR/_present:false) // /PCR/_present
      // GPIO associated with this channel
      template<Polarity polarity>
      using Gpio = GpioTable_T<Info, limitIndex<Info>(channel), polarity>; // Inactive is high

      /** Allow access to PCR of associated pin */
      using Pcr = PcrTable_T<Info, limitIndex<Info>(channel)>;
#endif

      /** Allow access owning FTM */
      using OwningFtm = FtmBase_T<Info>;

      /** Allow access to FTM hardware */
      static constexpr HardwarePtr<FTM_Type> ftm = Info::baseAddress;

      /** @return Base address of FTM.CONTROL struct as uint32_t */
      static constexpr uint32_t ftmCONTROL() { return ftmBase() + offsetof(FTM_Type, CONTROLS[channel]); }

      /** @return Address of FTM.CONTROL.CnSC as uint32_t */
      static constexpr uint32_t ftmCnSC() { return ftmCONTROL()+0; }

      /** @return Address of FTM.CONTROL.CnV as uint32_t */
      static constexpr uint32_t ftmCnV() { return ftmCONTROL()+sizeof(uint32_t); }

      /**
       * Structure for FTM channel.
       */
      struct FtmChannelRegs {
         __IO uint32_t  CnSC; /**< 000C: Channel  Status and Control */
         __IO uint32_t  CnV;  /**< 0010: Channel  Value              */
      };

      /**
       * Allows access to FTM channel registers.
       *
       * @return Reference to the FTM channel registers
       */
      static __attribute__((always_inline)) volatile FtmChannelRegs &channelRegs() {
         return *reinterpret_cast<FtmChannelRegs *>(&OwningFtm::ftm->CONTROLS[CHANNEL]);
      }

      /** Timer channel number */
      static constexpr FtmChannelNum CHANNEL = (FtmChannelNum) channel;

      /** Mask for Timer channel */
      static constexpr uint32_t CHANNEL_MASK = 1<<channel;

      /**
       * Configure channel and sets mode.
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      static void defaultConfigure() {
         Info::configure(OwningFtm::DefaultChannelInitValues[channel]);
      }

      /**
       * Configure channel from Init data
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       *
       * @param channelInit (channel number is ignored)
       */
      static void configure(const typename Info::ChannelInit &channelInit) {
         Info::configure(FtmChannelNum(channel), channelInit);
      }
      
$(/FTM_CHANNEL/static_functions:  // /FTM_CHANNEL/static_functions not found)
#if false // /FTM/irqHandlingMethod
   /**
    * Set channel event callback function
    *
    * @param[in] callback Callback function to execute on channel event interrupt.
    *                     Use nullptr to remove callback.
    *
    * @return E_NO_ERROR            No error
    * @return E_HANDLER_ALREADY_SET Handler already set
    *
    * @note Channel callbacks may be shared by multiple channels of the timer.\n
    *       It is necessary to identify the originating channel in the callback
    */
   static ErrorCode setChannelCallback(ChannelCallbackFunction callback) {
      if constexpr (Info::individualChannelCallbacks) {
         return OwningFtm::setChannelCallback(channel, callback);
      }
      else {
         return OwningFtm::setChannelCallback(callback);
      }
   }
#endif // /FTM/irqHandlingMethod
#if $(/PCR/_present:false) // /PCR/_present
   /*******************************
    *  PIN Functions
    *******************************/
   /**
    * Set callback for Pin IRQ.
    *
    * @param[in] callback The function to call on Pin interrupt.
    *                     nullptr to indicate none
    *
    * @note There is a single callback function for all pins on the related port.
    */
   static __attribute__((always_inline)) void setPinCallback(PinCallbackFunction callback) {
      FtmBase::CheckPinExistsAndIsMapped<Info, channel> check;
      static_assert(Pcr::HANDLER_INSTALLED, "Gpio associated with FTM channel not configured for PIN interrupts - Modify Configure.usbdm");
      Pcr::setPinCallback(callback);
   }

#if defined(PORT_PCR_ODE_MASK) and defined (PORT_PCR_SRE_MASK)
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    * @param[in] pinDriveMode     One of PinDriveMode_PushPull, PinDriveMode_OpenDrain
    * @param[in] pinSlewRate      One of PinSlewRate_Slow, PinSlewRate_Fast
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue,
         PinDriveMode      pinDriveMode      = Pcr::defaultPcrValue,
         PinSlewRate       pinSlewRate       = Pcr::defaultPcrValue) {

      FtmBase::CheckPinExistsAndIsMapped<Info, channel>::check();

#ifdef FTM_SC_PWMEN0_SHIFT
      // Enable output pin in FTM
      ftm->SC = ftm->SC | (1<<(channel+FTM_SC_PWMEN0_SHIFT));
#endif
      Pcr::setPCR(pinDriveStrength|pinDriveMode|pinSlewRate);
   }
#elif defined(PORT_PCR_ODE_ASK)
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    * @param[in] pinDriveMode     One of PinDriveMode_PushPull, PinDriveMode_OpenDrain
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue,
         PinDriveMode      pinDriveMode      = Pcr::defaultPcrValue) {

      FtmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();

#ifdef FTM_SC_PWMEN0_SHIFT
      // Enable output pin in FTM
      ftm->SC = ftm->SC | (1<<(channel+FTM_SC_PWMEN0_SHIFT));
#endif
      Pcr::setPCR(pinDriveStrength|pinDriveMode);
   }
#elif defined(PORT_PCR_SRE_MASK)
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    * @param[in] pinSlewRate      One of PinSlewRate_Slow, PinSlewRate_Fast
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue,
         PinSlewRate       pinSlewRate       = Pcr::defaultPcrValue) {

      FtmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();

#ifdef FTM_SC_PWMEN0_SHIFT
      // Enable output pin in FTM
      ftm->SC = ftm->SC | (1<<(channel+FTM_SC_PWMEN0_SHIFT));
#endif
      Pcr::setPCR(pinDriveStrength|pinSlewRate);
   }
#else
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue) {

      FtmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();

#ifdef FTM_SC_PWMEN0_SHIFT
      // Enable output pin in FTM
      ftm->SC = ftm->SC | (1<<(channel+FTM_SC_PWMEN0_SHIFT));
#endif

      Pcr::setPCR(pinDriveStrength);
   }
#endif

      /**
       * @brief
       * Set subset of Pin Control Register Attributes associated with input direction \n
       * Mux value is set appropriately for the pin function being used. Other attributes are cleared.\n
       * The clock to the port will be enabled before changing the PCR.
       *
       * @param[in] pinPull          One of PinPull_None, PinPull_Up, PinPull_Down
       * @param[in] pinAction        One of PinAction_None, etc
       * @param[in] pinFilter        One of PinFilter_None, PinFilter_Passive
       *
       *  @note see also configureDigitalFilter(), enableDigitalFilter(), disableDigitalFilter()
       */
      static void setInput(
            PinPull           pinPull           = Pcr::defaultPcrValue,
            PinAction         pinAction         = Pcr::defaultPcrValue,
            PinFilter         pinFilter         = Pcr::defaultPcrValue) {

         FtmBase::CheckPinExistsAndIsMapped<Info, channel> check;

#ifdef FTM_SC_PWMEN0_SHIFT
         // Disable output pin in FTM
         ftm->SC = ftm->SC & ~(1<<(channel+FTM_SC_PWMEN0_SHIFT));
#endif

         Pcr::setInput(pinPull,pinAction,pinFilter);
      }
#endif

   };

   /**
    * Default configuration using settings from Configure.usbdmProject
    */
   static void defaultConfigure() {

     configure(Info::DefaultInitValue);

     NVIC_SetPriority(Info::irqNums[0], Info::irqLevel);
   }

};

#ifdef FTM_QDCTRL_QUADEN_MASK

/**
 * Template class representing a FTM configured as a Quadrature decoder
 *
 * @tparam info      Information class for FTM
 *
 * @code
 *  using FtmQuadDecoder = FtmQuadDecoder_T<Ftm0Info>;
 *
 *  // Enable decoder
 *  FtmQuadDecoder::configure();
 *
 *  // Set pin filters
 *  FtmQuadDecoder::enableFilter(15);
 *
 *  // Reset position to zero
 *  // Movement will be +/- relative to this initial position
 *  FtmQuadDecoder::resetPosition();
 *
 *  for(;;) {
 *     console.write("Position =").writeln(QuadDecoder.getPosition());
 *  }
 * @endcode
 */
template <class Info>
class FtmQuadDecoder_T : protected FtmBase_T<Info> {

private:
   FtmQuadDecoder_T(const FtmQuadDecoder_T&) = delete;
   FtmQuadDecoder_T(FtmQuadDecoder_T&&) = delete;

   FtmBase::CheckPinExistsAndIsMapped<typename Info::InfoQUAD, 0> check0;
   FtmBase::CheckPinExistsAndIsMapped<typename Info::InfoQUAD, 1> check1;

public:
   // Default constructor
   FtmQuadDecoder_T() = default;

   /**
    * Set common fault and Timer Overflow Callback function\n
    *
    * @param[in] theCallback Callback function to execute when timer overflows. \n
    *                        nullptr to indicate none
    */
   void setCallback(typename Info::CallbackFunction theCallback) {
      FtmBase_T<Info>::setCallback(theCallback);
   }

   // Make these visible
   using Info::QuadInit;
   using Info::DefaultQuadInitValue;

   /** Hardware instance pointer */
   static constexpr HardwarePtr<FTMQUAD_Type> ftm = Info::baseAddress;

   /** Allow more convenient access associated Ftm */
   using OwningFtm = FtmBase_T<Info>;

   /** Allow access to PCR of associated phase-A pin */
   using Pcr0 = PcrTable_T<typename Info::InfoQUAD, 0>;

   /** Allow access to PCR of associated phase-B pin */
   using Pcr1 = PcrTable_T<typename Info::InfoQUAD, 1>;

   /**
    * Set Pin Control Register (PCR) values for PHA and PHB inputs.
    * This will map the pin to the Quadrature function (mux value) \n
    * The clock to the port will be enabled before changing the PCR
    *
    * @param[in] pinPull          One of PinPull_None, PinPull_Up, PinPull_Down
    * @param[in] pinAction        One of PinAction_None, etc (defaults to PinAction_None)
    * @param[in] pinFilter        One of PinFilter_None, PinFilter_Passive (defaults to PinFilter_None)
    */
   static void setInput(
         PinPull           pinPull           = Pcr0::defaultPcrValue,
         PinAction         pinAction         = Pcr0::defaultPcrValue,
         PinFilter         pinFilter         = Pcr0::defaultPcrValue) {

      Pcr0::setPCR(pinPull|pinAction|pinFilter);
      Pcr1::setPCR(pinPull|pinAction|pinFilter);
   }

   /**
    * Set polarity of Quadrature inputs.
    *
    * @param polarity Polarity of the two inputs
    */
   static void setPolarity(Polarity polarity) {
      if (polarity == ActiveHigh) {
         ftm->QDCTRL = ftm->QDCTRL & ~(FTM_QDCTRL_PHAPOL_MASK|FTM_QDCTRL_PHBPOL_MASK);
      }
      else {
         ftm->QDCTRL = ftm->QDCTRL | (FTM_QDCTRL_PHAPOL_MASK|FTM_QDCTRL_PHBPOL_MASK);
      }
   }

   /**
    * Set Quadrature mode
    *
    * @param quadratureMode   Mode of operation for the decoder
    */
   static void setMode(FtmQuadratureMode quadratureMode = FtmQuadratureMode_Phase_AB_Mode) {
      if (quadratureMode) {
         ftm->QDCTRL = ftm->QDCTRL | FTM_QDCTRL_QUADMODE_MASK;
      }
      else {
         ftm->QDCTRL = ftm->QDCTRL & ~FTM_QDCTRL_QUADMODE_MASK;
      }
   }

   /**
    * Set TOI Callback function\n
    * Note that one callback is shared by all channels of the FTM
    *
    * @param[in] theCallback Callback function to execute when timer overflows. \n
    *                        nullptr to indicate none
    */
   static __attribute__((always_inline)) void setTimerOverflowCallback(typename Info::CallbackFunction theCallback) {
      OwningFtm::setTimerOverflowCallback(theCallback);
   }

   /**
    * Enable Timer Overflow interrupts
    */
   static __attribute__((always_inline)) void enableTimerOverflowInterrupts() {
      OwningFtm::enableTimerOverflowInterrupts();
   }

   /**
    * Disable Timer Overflow interrupts
    */
   static __attribute__((always_inline)) void disableTimerOverflowInterrupts() {
      OwningFtm::disableTimerOverflowInterrupts();
   }

   /**
    * Configures all mapped pins associated with this peripheral
    */
   static void configureAllPins() {
      // Configure pins
      Info::InfoQUAD::initPCRs();
   }

   /**
    * Disabled all mapped pins associated with FTM
    *
    * @note Only the lower 16-bits of the PCR registers are modified
    */
   static void disableAllPins() {
      // Configure pins
      Info::InfoQUAD::clearPCRs();
   }

   /**
    * Basic enable of FTM
    * Includes enabling clock and configuring all pins if mapPinsOnEnable is selected in configuration
    */
   static void enable() {
      // Enable clock to peripheral
      Info::enableClock();

      if constexpr (Info::mapPinsOnEnable) {
         configureAllPins();
      }
   }

   /**
    * Disables the clock to FTM and all mappable pins
    */
   static void disable() {

      disableNvicInterrupts();

      if constexpr (Info::mapPinsOnEnable) {
         disableAllPins();
      }

      // Disable FTM (clock source disabled)
      ftm->QDCTRL = 0;

      // Disable clock to peripheral interface
      Info::disableClock();
   }

$(/FTM/QuadInitMethod:// /FTM/InitMethod not found)

   using Info::configure;

   /**
    * Basic configuration of Quadrature decoder.
    * Includes configuring all pins if
    * mapPinsOnEnable setting is true
    *
    * @param ftmPrescale       Prescale value applied to the output of the quadrature decode before the counter.
    * @param ftmQuadratureMode Selects the encoding mode used to decode the input changes.
    */
   static void configure(
         FtmPrescale       ftmPrescale       = FtmPrescale_DivBy1,
         FtmQuadratureMode ftmQuadratureMode = FtmQuadratureMode_Phase_AB_Mode
         ) {
      // Assertions placed here so only checked if FtmQuadDecoder actually used
      static_assert(Info::InfoQUAD::info[0].pinIndex >= PinIndex::MIN_PIN_INDEX, "FtmQuadDecoder PHA is not mapped to a pin - Modify Configure.usbdm");
      static_assert(Info::InfoQUAD::info[1].pinIndex >= PinIndex::MIN_PIN_INDEX, "FtmQuadDecoder PHB is not mapped to a pin - Modify Configure.usbdm");

      enable();

      // Disable so immediate effect
      ftm->SC = 0;
      (void)ftm->SC;
      ftm->SC = FtmClockSource_Disabled|ftmPrescale;

      ftm->QDCTRL =
            FTM_QDCTRL_QUADEN_MASK|      // Enable Quadrature decoder
            ftmQuadratureMode;           // Quadrature mode
      ftm->CONF   = FTM_CONF_BDMMODE(3);
   }

   /**
    * Enable/disables filtering of quadrature inputs
    *
    * @param[in] filterValue 0=>disable, 1..15 filter length
    */
   static void enableFilter(int filterValue=7) {
      if (filterValue>0) {
         ftm->FILTER = ftm->FILTER | FTM_FILTER_CH0FVAL(filterValue)| FTM_FILTER_CH1FVAL(filterValue);
         ftm->QDCTRL = ftm->QDCTRL | FTM_QDCTRL_PHAFLTREN_MASK|FTM_QDCTRL_PHBFLTREN_MASK;
      }
      else {
         ftm->QDCTRL = ftm->QDCTRL & ~(FTM_QDCTRL_PHAFLTREN_MASK|FTM_QDCTRL_PHBFLTREN_MASK);
      }
   }

   /**
    * Reset position to zero
    */
   static void resetPosition() {
      // Note: writing ANY value clears CNT (cannot set value)
      ftm->CNT = 0;
   }

   /**
    * Get Quadrature decoder position
    *
    * @return Signed number representing position relative to reference location
    *
    * @note This can be viewed as a signed number +/- relative to the initial position.
    * @note This can be viewed as an unsigned number counting up from 0
    *       with overflow at 0xFFFF and underflow at 0.
    */
   static int16_t getPosition() {
      return (int16_t)(ftm->CNT);
   }

   /**
    * Get Quadrature decoder overflow direction.
    * This would be used in the overflow callback.
    *
    * @return Timer overflow direction. true => increasing, false => decreasing.
    *
    * @note Overflow occurs at MOD -> CNTIN, Underflow occurs at CNTIN -> MOD.
    */
   static bool getOverflowDirection() {
      return (bool)(ftm->QDCTRL & FTM_QDCTRL_TOFDIR_MASK);
   }
};
#endif // defined(FTM_QDCTRL_QUADEN_MASK)

$(/FTM/declarations: // No declarations found)
$(/FTM/quadDeclarations: // No declarations found)
/**
 * End FTM_Group
 * @}
 */

} // End namespace USBDM

#endif // /FTM/enablePeripheralSupport

#endif /* HEADER_FTM_H */

