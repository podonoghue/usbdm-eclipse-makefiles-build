/**
 * @file      pit.h  (180.ARM_Peripherals/Project_Headers/pit-MKL.h)
 *
 * @brief    Programmable Interrupt Timer interface
 */

#ifndef INCLUDE_USBDM_PIT_H_
#define INCLUDE_USBDM_PIT_H_

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "math.h"
#include "derivative.h"
#include "system.h"
#include "pin_mapping.h"

#if $(/PIT/_BasicInfoGuard) // /PIT/_BasicInfoGuard

namespace USBDM {

/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Abstraction for Programmable Interrupt Timer
 * @{
 */
$(/PIT/peripheral_h_definition:// $/PIT/peripheral_h_definition not found)

/**
 * Calculate a PIT channel number using an offset from an existing number
 *
 * @param pitChannelNum Base channel to use
 * @param offset  Offset from base channel
 *
 * @return  PIT channel number calculated from channel+offset
 */
constexpr PitChannelNum inline operator+(PitChannelNum pitChannelNum, unsigned offset) {
   return PitChannelNum(unsigned(pitChannelNum) + offset);
}

/**
 * Calculate a PIT channel number using an offset from an existing number
 *
 * @param pitChannelNum Base channel to use
 * @param offset  Offset from base channel
 *
 * @return  PIT channel number calculated from channel+offset
 */
constexpr PitChannelNum inline operator+(PitChannelNum pitChannelNum, int offset) {
   return PitChannelNum(unsigned(pitChannelNum) + unsigned(offset));
}

/**
 * @brief Class representing a Programmable Interrupt  Timer
 *
 * <b>Example</b>
 * @code
 *
 * @endcode
 */
template<class Info>
class PitBase_T : public Info {

private:
   /**
    * This class is not intended to be instantiated
    */
   PitBase_T(const PitBase_T&) = delete;
   PitBase_T(PitBase_T&&) = delete;

   /** Bit-mask of allocated channels */
   static uint32_t allocatedChannels;

protected:

   /** Default TCTRL value for timer channel */
   static constexpr uint32_t PIT_TCTRL_DEFAULT_VALUE = (PIT_TCTRL_TEN_MASK);

   /** Callback functions for ISRs */
   static CallbackFunction sCallbacks[Info::NumChannels];
   
   /** Bitmask used to indicate a channel call-back is one-shot */
   static uint8_t clearOnEvent;
   
$(/PIT/protectedMethods: // /PIT/protectedMethods not found)
public:
   /// Defaulted constructor
   constexpr PitBase_T() = default;

$(/PIT/publicMethods: // /PIT/publicMethods not found)
   /**
    * Allocate PIT channel.
    *
    * @return PitChannelNum_None - No suitable channel available.  Error code set.
    * @return Channel number     - Number of allocated channel
    */
   static PitChannelNum allocateChannel() {
      CriticalSection cs;
      unsigned channelNum = __builtin_ffs(allocatedChannels);
      if ((channelNum == 0)||(--channelNum>=Info::NumChannels)) {
         setErrorCode(E_NO_RESOURCE);
         return PitChannelNum_None;
      }
      allocatedChannels &= ~(1<<channelNum);
      return (PitChannelNum) channelNum;
   }

#if $(/DMA/_BasicInfoGuard:false) // (/DMA/_BasicInfoGuard) not found
   /**
    * Allocate PIT channel associated with DMA channel.
    * This is a channel that may be used to throttle the associated DMA channel.
    *
    * @param dmaChannelNum DMA channel being used.
    *
    * @return PitChannelNum_None - No suitable channel available.  Error code set.
    * @return Channel number     - Number of allocated channel
    */
   static PitChannelNum allocateDmaAssociatedChannel(DmaChannelNum dmaChannelNum) {
      const uint32_t channelMask = (1<<dmaChannelNum);
      usbdm_assert(dmaChannelNum<Info::NumChannels, "No PIT channel associated with DMA channel");
      CriticalSection cs;
      usbdm_assert((allocatedChannels & channelMask) != 0, "PIT channel already allocated");
      if ((allocatedChannels & channelMask) == 0) {
         setErrorCode(E_NO_RESOURCE);
         return PitChannelNum_None;
      }
      allocatedChannels &= ~channelMask;
      return (PitChannelNum) dmaChannelNum;
   }
#endif

   /**
    * Free PIT channel.
    * Disables the channel.
    *
    * @param pitChannelNum Channel to release
    */
   static void freeChannel(PitChannelNum pitChannelNum) {
      if (pitChannelNum == PitChannelNum_None) {
         return;
      }
      const uint32_t channelMask = (1<<pitChannelNum);
      usbdm_assert(pitChannelNum<Info::NumChannels, "Illegal PIT channel");
      usbdm_assert((allocatedChannels & channelMask) == 0, "Freeing unallocated PIT channel");

      disableChannel(pitChannelNum);
      CriticalSection cs;
      allocatedChannels |= channelMask;
   }

   /**
    * Enable/disable channel interrupts
    *
    * @param[in]  pitChannelNum Channel being modified
    * @param[in]  enable  True => enable, False => disable
    */
   static void setChannelAction(PitChannelNum pitChannelNum, PitChannelAction pitChannelAction) {
      pit->CHANNEL[pitChannelNum].TCTRL = pit->CHANNEL[pitChannelNum].TCTRL | pitChannelAction;
   }

#if $(/PIT/_CommonInfoIrqGuard:false) // /PIT/_CommonInfoIrqGuard not found

   /**
    * PIT interrupt handler -  Calls PIT callback
    * Used when all channels share a single handler (needs to poll channel flags)
    */
   static void irqHandler() {
      for (unsigned channel=0; channel<Info::NumChannels; channel++) {
         if (pit->CHANNEL[channel].TFLG & PIT_TFLG_TIF_MASK) {
            // Clear interrupt flag
            pit->CHANNEL[channel].TFLG = PIT_TFLG_TIF_MASK;
            // Do call-back
            sCallbacks[channel]();
         }
      }
   }

   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note Only usable with static objects.
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match CallbackFunction
    *    void callback() {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * static AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Pit::wrapCallback<AClass, &AClass::callback, aClass>();
    * // Use as callback
    * Pit::Channel<0>::oneShot(fn, 1.5*USBDM::seconds);
    * @endcode
    */
   template<class T, void(T::*callback)(), T &object>
   static typename Info::CallbackFunction wrapCallback() {
      static typename Info::CallbackFunction fn = []() {
         (object.*callback)();
      };
      return fn;
   }

   /**
    * Set interrupt callback
    *
    *  @param[in]  pitChannelNum   Channel to configure
    *  @param[in]  callback        Callback function to be executed on interrupt.\n
    *                              Use nullptr to remove callback.
    */
   static void setCallback(PitChannelNum pitChannelNum, CallbackFunction callback) {
      static_assert(Info::irqHandlerInstalled, "PIT not configure for interrupts - Modify Configure.usbdm");
      if (callback == nullptr) {
         callback = unhandledCallback;
      }
      sCallbacks[pitChannelNum] = callback;
   }

   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note There is a considerable space and time overhead to using this method
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match CallbackFunction
    *    void callback() {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Pit::wrapCallback<AClass, &AClass::callback>(aClass);
    * // Use as callback
    * Pit::Channel<0>::oneShot(fn, 1.5*USBDM::seconds);
    * @endcode
    */
   template<class T, void(T::*callback)()>
   static typename Info::CallbackFunction wrapCallback(T &object) {
      static T &obj = object;
      static typename Info::CallbackFunction fn = []() {
         (obj.*callback)();
      };
      return fn;
   }
#endif

protected:
   /** Pointer to hardware */
   static constexpr HardwarePtr<PIT_Type> pit = Info::baseAddress;

public:
   /**
    * Basic enable of PIT
    */
   static void enable() {
      // Enable clock
      Info::enableClock();
      __DMB();
   }

   /**
    *  Enable the PIT with default settings.
    *  All channels are enabled with default settings.
    */
   static void defaultConfigure() {
      enable();

      // Enable timer
      pit->MCR = Info::mcr;
      for (PitChannelNum pitChannelNum = PitChannelNum_0;
            pitChannelNum < Info::NumChannels;
            pitChannelNum = pitChannelNum+1) {
         configureChannel(pitChannelNum, Info::pit_ldval);
         sCallbacks[pitChannelNum] = unhandledCallback;
      }
      enableNvicInterrupts(Info::irqLevel);
   }

   /**
    *  Enables and configures the PIT.
    *  This also disables all channel interrupts and channel reservations.
    *
    *  @param[in]  pitDebugMode  Determined whether the PIT halts when suspended during debug
    */
   static void configure(PitDebugMode pitDebugMode=PitDebugMode_Stop) {
      enable();
      disableNvicInterrupts();
      for (PitChannelNum pitChannelNum = PitChannelNum_0;
            pitChannelNum < Info::NumChannels;
            pitChannelNum = pitChannelNum+1) {
         sCallbacks[pitChannelNum] = unhandledCallback;
      }
      pit->MCR = pitDebugMode|PIT_MCR_MDIS(0); // MDIS cleared => enabled!
      allocatedChannels = -1;
   }

   /**
    *  Enables and configures the PIT if not already done.
    *  This also disables all channel interrupts and channel reservations if newly configured.
    *
    *  @param[in]  pitDebugMode  Determined whether the PIT halts when suspended during debug
    */
   static void configureIfNeeded(PitDebugMode pitDebugMode=PitDebugMode_Stop) {
      enable();
      // Check if disabled and configure if so
      if ((pit->MCR & PIT_MCR_MDIS_MASK) != 0) {
         configure(pitDebugMode);
      }
   }

   /**
    *   Disable the PIT (all channels)
    */
   static void disable() {
      pit->MCR = PIT_MCR_MDIS(1);
      Info::disableClock();
   }

   /**
    * Enable interrupts in NVIC
    */
   static void enableNvicInterrupts() {
      NVIC_EnableIRQ(Info::irqNums[0]);
   }

   /**
    * Enable and set priority of interrupts in NVIC
    * Any pending NVIC interrupts are first cleared.
    *
    * @param[in]  nvicPriority  Interrupt priority
    */
   static void enableNvicInterrupts(NvicPriority nvicPriority) {
      enableNvicInterrupt(Info::irqNums[0], nvicPriority);
   }

   /**
    * Disable interrupts in NVIC
    */
   static void disableNvicInterrupts() {
      NVIC_DisableIRQ(Info::irqNums[0]);
   }

   /**
    *  Enable the PIT channel
    *
    *  @param[in]  pitChannelNum   Channel to enable
    */
   static void enableChannel(const PitChannelNum pitChannelNum) {
      pit->CHANNEL[pitChannelNum].TCTRL = pit->CHANNEL[pitChannelNum].TCTRL | PIT_TCTRL_TEN_MASK;
   }

   /**
    *   Disable the PIT channel
    *
    *   @param[in]  pitChannelNum Channel to disable
    */
   static void disableChannel(PitChannelNum pitChannelNum) {

      // Disable timer channel
      pit->CHANNEL[pitChannelNum].TCTRL = pit->CHANNEL[pitChannelNum].TCTRL & ~PIT_TCTRL_TEN_MASK;
   }

   /**
    *  Configure the PIT channel
    *
    *  @param[in]  pitChannelNum     Channel to configure
    *  @param[in]  tickInterval      Interval in timer ticks (usually bus clock period)
    *  @param[in]  pitChannelAction  Action to take on timer event
    *
    *  @note The timer channel is disabled before configuring so that period changes have
    *        immediate effect.
    */
   static void configureChannel(
         PitChannelNum     pitChannelNum,
         Ticks             tickInterval,
         PitChannelAction  pitChannelAction=PitChannelAction_None) {

      usbdm_assert((unsigned)tickInterval>0, "Interval too short");

      pit->CHANNEL[pitChannelNum].TCTRL = 0;
      pit->CHANNEL[pitChannelNum].LDVAL = (unsigned)tickInterval-1;
      pit->CHANNEL[pitChannelNum].TFLG  = PIT_TFLG_TIF_MASK;
      pit->CHANNEL[pitChannelNum].TCTRL = pitChannelAction|PIT_TCTRL_TEN(1);
   }

#if $(/PIT/secondsSupport:false) // /PIT/secondsSupport
   /**
    *  Configure the PIT channel in seconds
    *
    *  @param[in]  pitChannelNum     Channel to configure
    *  @param[in]  intervalInSeconds Interval in seconds
    *  @param[in]  pitChannelAction  Action to take on timer event
    *
    *  @note The timer channel is disabled before configuring so that period changes have
    *        immediate effect.
    */
   static void configureChannel(
         PitChannelNum     pitChannelNum,
         Seconds           intervalInSeconds,
         PitChannelAction  pitChannelAction=PitChannelAction_None) {

      configureChannel(pitChannelNum, convertSecondsToTicks(intervalInSeconds), pitChannelAction);
   }
#endif

   /**
    *  Configure the PIT channel in milliseconds
    *
    *  @param[in]  pitChannelNum    Channel to configure
    *  @param[in]  milliseconds     Interval in seconds
    *  @param[in]  pitChannelAction Action to take on timer event
    *
    *  @note The timer channel is disabled before configuring so that period changes have
    *        immediate effect.
    */
   static void configureChannelInMilliseconds(
         PitChannelNum     pitChannelNum,
         unsigned          milliseconds,
         PitChannelAction  pitChannelAction=PitChannelAction_None) {

      configureChannel(pitChannelNum, convertMillisecondsToTicks(milliseconds), pitChannelAction);
   }

   /**
    *  Configure the PIT channel in microseconds
    *
    *  @param[in]  pitChannelNum    Channel to configure
    *  @param[in]  microseconds     Interval in microseconds
    *  @param[in]  pitChannelAction Action to take on timer event
    *
    *  @note The timer channel is disabled before configuring so that period changes have
    *        immediate effect.
    */
   static void configureChannelInMicroseconds(
         PitChannelNum     pitChannelNum,
         unsigned          microseconds,
         PitChannelAction     pitChannelAction=PitChannelAction_None) {

      configureChannel(pitChannelNum, convertMicrosecondsToTicks(microseconds), pitChannelAction);
   }

#if $(/PIT/secondsSupport:false) // /PIT/secondsSupport
   /**
    * Convert time in ticks to time in seconds
    *
    * @param[in] ticks Time interval in ticks
    *
    * @return Time interval in seconds
    */
   static Seconds convertTicksToSeconds(Ticks ticks) {
      return Seconds(((float)(unsigned)ticks)/Info::getClockFrequency());
   }

   /**
    * Converts time in seconds to time in ticks
    *
    * @param[in] seconds Time interval in seconds
    *
    * @return Time interval in ticks
    *
    * @note Will set error code if calculated value is unsuitable
    */
   static Ticks convertSecondsToTicks(Seconds seconds) {
      float intervalInTicks = rintf((float)seconds*Info::getClockFrequency());
      usbdm_assert(intervalInTicks <= 0xFFFFFFFFUL, "Interval is too long");
      usbdm_assert(intervalInTicks > 0, "Interval is too short");
      if (intervalInTicks > 0xFFFFFFFFUL) {
         setErrorCode(E_TOO_LARGE);
      }
      if (intervalInTicks <= 0) {
         setErrorCode(E_TOO_SMALL);
      }
      return Ticks(intervalInTicks);
   }
#endif // /PIT/secondsSupport

   /**
    * Convert time in ticks to time in microseconds
    *
    * @param[in] ticks Time interval in ticks
    *
    * @return Time interval in microseconds
    */
   static unsigned convertTicksToMilliseconds(Ticks ticks) {
      return (unsigned)((1000UL * (unsigned)ticks)/Info::getClockFrequency());
   }

   /**
    * Convert time in ticks to time in milliseconds
    *
    * @param[in] ticks Time interval in ticks
    *
    * @return Time interval in milliseconds
    */
   static unsigned convertTicksToMicroseconds(Ticks ticks) {
      return (unsigned)((1000000UL * (unsigned)ticks)/Info::getClockFrequency());
   }

   /**
    * Converts time in milliseconds to time in ticks
    *
    * @param[in] milliseconds Time interval in milliseconds
    *
    * @return Time interval in ticks
    *
    * @note Will set error code if calculated value is unsuitable
    */
   static Ticks convertMillisecondsToTicks(unsigned milliseconds) {
      unsigned long intervalInTicks = milliseconds*(Info::getClockFrequency()/1000);
      usbdm_assert(intervalInTicks <= 0xFFFFFFFFUL, "Interval is too long");
      usbdm_assert(intervalInTicks > 0, "Interval is too short");
      if (intervalInTicks > 0xFFFFFFFFUL) {
         setErrorCode(E_TOO_LARGE);
      }
      if (intervalInTicks <= 0) {
         setErrorCode(E_TOO_SMALL);
      }
      return Ticks((unsigned)intervalInTicks);
   }

   /**
    * Converts time in microseconds to time in ticks
    *
    * @param[in] microseconds Time interval in microseconds
    *
    * @return Time interval in ticks
    *
    * @note Will set error code if calculated value is unsuitable
    */
   static Ticks convertMicrosecondsToTicks(unsigned microseconds) {
      unsigned long intervalInTicks = microseconds*(Info::getClockFrequency()/1000000);
      usbdm_assert(intervalInTicks <= 0xFFFFFFFFUL, "Interval is too long");
      usbdm_assert(intervalInTicks > 0, "Interval is too short");
      if (intervalInTicks > 0xFFFFFFFFUL) {
         setErrorCode(E_TOO_LARGE);
      }
      if (intervalInTicks <= 0) {
         setErrorCode(E_TOO_SMALL);
      }
      return Ticks((unsigned)intervalInTicks);
   }

   /**
    * Set period in Ticks
    *
    * @param[in]  pitChannelNum Channel being modified
    * @param[in]  ticks         Interval in ticks
    *
    * @note If the timer is currently enabled this value will be loaded on the next expiration.
    *       To have immediate effect it is necessary to use configureChannel().
    */
   static void setPeriod(PitChannelNum pitChannelNum, Ticks ticks) {
      pit->CHANNEL[pitChannelNum].LDVAL = (unsigned)ticks-1;
   }

   /**
    * Set period in microseconds
    *
    * @param[in]  pitChannelNum Channel being modified
    * @param[in]  microseconds  Interval in microseconds
    *
    * @note If the timer is currently enabled this value will be loaded on the next expiration.
    *       To have immediate effect it is necessary to use configureChannel().
    */
   static void setPeriodInMicroseconds(PitChannelNum pitChannelNum, uint32_t microseconds) {
      setPeriod(pitChannelNum, convertMicrosecondsToTicks(microseconds));
   }

   /**
    * Set period in milliseconds
    *
    * @param[in]  pitChannelNum Channel being modified
    * @param[in]  milliseconds  Interval in milliseconds
    *
    * @note If the timer is currently enabled this value will be loaded on the next expiration.
    *       To have immediate effect it is necessary to use configureChannel().
    */
   static void setPeriodInMilliseconds(PitChannelNum pitChannelNum, uint32_t milliseconds) {
      setPeriod(pitChannelNum, convertMillisecondsToTicks(milliseconds));
   }

#if $(/PIT/secondsSupport:false) // /PIT/secondsSupport
   /**
    * Set period in seconds
    *
    * @param[in]  pitChannelNum Channel being modified
    * @param[in]  interval Interval in seconds
    *
    * @note If the timer is currently enabled this value will be loaded on the next expiration.
    *       To have immediate effect it is necessary to use configureChannel().
    */
   static void setPeriod(PitChannelNum pitChannelNum, Seconds interval) {
      setPeriod(pitChannelNum, Ticks((float)interval*Info::getClockFrequency()));
   }
#endif

   /**
    *  Use a PIT channel to implement a busy-wait delay
    *
    *  @param[in]  pitChannelNum   Channel to use
    *  @param[in]  interval        Interval to wait in timer ticks (usually bus clock period)
    *
    *  @note Function doesn't return until interval has expired
    */
   static void delay(PitChannelNum pitChannelNum, Ticks interval) {
      configureChannel(pitChannelNum, interval);
      while (pit->CHANNEL[pitChannelNum].TFLG == 0) {
         __NOP();
      }
      disableChannel(pitChannelNum);
   }

#if $(/PIT/secondsSupport:false) // /PIT/secondsSupport
   /**
    *  Use a PIT channel to implement a busy-wait delay
    *
    *  @param[in]  pitChannelNum   Channel to use
    *  @param[in]  interval        Interval to wait in seconds
    *
    *  @note Function doesn't return until interval has expired
    */
   static void delay(PitChannelNum pitChannelNum, Seconds interval) {
      configureChannel(pitChannelNum, interval);
      while (pit->CHANNEL[pitChannelNum].TFLG == 0) {
         __NOP();
      }
      disableChannel(pitChannelNum);
   }
#endif // /PIT/secondsSupport

#if $(/PIT/_CommonInfoIrqGuard:false) // /PIT/_CommonInfoIrqGuard
#if $(/PIT/secondsSupport:false) // /PIT/secondsSupport
   /**
    * Set one-shot timer callback.
    *
    *  @note It is necessary to enable NVIC interrupts beforehand
    *
    *  @param[in]  pitChannelNum     Channel to configure
    *  @param[in]  callback          Callback function to be executed on timeout
    *  @param[in]  interval          Interval in seconds until callback is executed
    */
   static void oneShot(PitChannelNum pitChannelNum, CallbackFunction callback, Seconds interval) {
      clearOnEvent |= (1<<pitChannelNum);
      setCallback(pitChannelNum, callback);
      configureChannel(pitChannelNum, interval, PitChannelIrq_Enabled);
   }

   /**
    * Set one-shot timer callback in microseconds
    *
    *  @note It is necessary to enable NVIC interrupts beforehand
    *
    *  @param[in]  pitChannelNum     Channel to configure
    *  @param[in]  callback          Callback function to be executed on timeout
    *  @param[in]  microseconds      Interval in milliseconds
    */
   static void oneShotInMicroseconds(PitChannelNum pitChannelNum, CallbackFunction callback, uint32_t microseconds) {
      clearOnEvent |= (1<<pitChannelNum);
      setCallback(pitChannelNum, callback);
      configureChannelInMicroseconds(pitChannelNum, microseconds, PitChannelIrq_Enabled);
   }

   /**
    * Set one-shot timer callback in milliseconds
    *
    *  @note It is necessary to enable NVIC interrupts beforehand
    *
    *  @param[in]  pitChannelNum     Channel to configure
    *  @param[in]  callback          Callback function to be executed on timeout
    *  @param[in]  milliseconds      Interval in milliseconds
    */
   static void oneShotInMilliseconds(PitChannelNum pitChannelNum, CallbackFunction callback, uint32_t milliseconds) {
      clearOnEvent |= (1<<pitChannelNum);
      setCallback(pitChannelNum, callback);
      configureChannelInMilliseconds(pitChannelNum, milliseconds, PitChannelIrq_Enabled);
   }

   /**
    * Set one-shot timer callback
    *
    *  @note It is necessary to enable NVIC interrupts beforehand
    *
    *  @param[in]  pitChannelNum     Channel to configure
    *  @param[in]  callback          Callback function to be executed on timeout
    *  @param[in]  tickInterval      Interval in timer ticks (usually bus clock period)
    */
   static void oneShot(PitChannelNum pitChannelNum, CallbackFunction callback, Ticks tickInterval) {
      clearOnEvent |= (1<<pitChannelNum);
      setCallback(pitChannelNum, callback);
      configureChannel(pitChannelNum, tickInterval, PitChannelIrq_Enabled);
   }
#endif // /PIT/_CommonInfoIrqGuard

   /**
    * Class representing a PIT channel.
    * This version may be instantiated and passed as a reference
    */
   class PitChannel {

   public:

      // PIT Owning this channel
      using Owner = PitBase_T<Info>;

      constexpr PitChannel(PitChannelNum channel) : chan(channel) {}

      /** Timer channel number */
      const PitChannelNum chan;

      /**
       * Set callback on event
       *
       *  @param[in]  callback          Callback function to be executed on timeout
       */
      void setCallback(CallbackFunction callback) const {
         PitBase_T<Info>::setCallback(chan, callback);
      }

      /**
       *  Configure the PIT channel
       *
       *  @param[in]  interval          Interval in timer ticks (usually bus clock)
       *  @param[in]  pitChannelIrq     Whether to enable interrupts
       *
       *  @note The timer channel is disabled before configuring so that period changes
       *        have immediate effect.
       */
      void configure(
            Ticks            interval,
            PitChannelIrq     pitChannelIrq=PitChannelIrq_Disabled) const {

         PitBase_T<Info>::configureChannel(chan, interval, pitChannelIrq);
      }

      /**
       *  Configure the PIT channel
       *
       *  @param[in]  interval          Interval in seconds
       *  @param[in]  pitChannelIrq     Whether to enable interrupts
       *
       *  @note The timer channel is disabled before configuring so that period changes
       *        have immediate effect.
       */
      void configure(
            Seconds           interval,
            PitChannelIrq     pitChannelIrq=PitChannelIrq_Disabled) const {

         PitBase_T<Info>::configureChannel(chan, interval, pitChannelIrq);
      }

      /**
       * Set period in seconds
       *
       * @param[in]  interval Interval in seconds
       *
       * @note If the timer is currently enabled this value will be loaded on the next expiration.
       *       To have immediate effect it is necessary to use configure().
       */
      void setPeriod(Seconds interval) const {
         PitBase_T<Info>::setPeriod(chan, interval);
      }

      /**
       * Set period in ticks
       *
       * @param[in]  interval Interval in ticks
       *
       * @note If the timer is currently enabled this value will be loaded on the next expiration.
       *       To have immediate effect it is necessary to use configure().
       */
      void setPeriod(Ticks interval) const {
         PitBase_T<Info>::setPeriod(chan, interval);
      }

      /**
       * Set period in microseconds
       *
       * @param[in]  microseconds Interval in microseconds
       *
       * @note If the timer is currently enabled this value will be loaded on the next expiration.
       *       To have immediate effect it is necessary to use configure().
       */
      void setPeriodInMicroseconds(uint32_t microseconds) const {
         unsigned long interval = ((unsigned long)microseconds*Info::getClockFrequency())/1000000;
         usbdm_assert(interval<0xFFFFFFFFUL,"Interval too long");
         PitBase_T<Info>::setPeriod(chan, Ticks((unsigned)microseconds));
      }

      /**
       *  Enables and configures the PIT if not already done.
       *  This also disables all channel interrupts and channel reservations if newly configured.
       *
       *  @param[in]  pitDebugMode  Determined whether the PIT halts when suspended during debug
       */
      void  configureIfNeeded(PitDebugMode pitDebugMode=PitDebugMode_Stop) const {
         PitBase_T<Info>::configureIfNeeded(pitDebugMode);
      }

      /**
       *   Enable the PIT channel
       */
      void enable() const {
         PitBase_T<Info>::enableChannel(chan);
      }

      /**
       *   Disable the PIT channel
       */
      void disable() const {
         PitBase_T<Info>::disableChannel(chan);
      }

      /**
       * Enable/disable channel interrupts.
       *
       * @param[in]  enable  True => enable, False => disable
       *
       * @note It is also necessary to modify NVIC using enableNvicInterrupts().
       */
      void enableInterrupts(bool enable=true) const {
         PitBase_T<Info>::enableInterrupts(chan, enable);
      }

      /**
       * Enable interrupts in NVIC
       */
      void enableNvicInterrupts() const {
         PitBase_T<Info>::enableNvicInterrupts(chan);
      }

      /**
       * Enable and set priority of interrupts in NVIC
       * Any pending NVIC interrupts are first cleared.
       *
       * @param[in]  nvicPriority  Interrupt priority
       */
      void enableNvicInterrupts(NvicPriority nvicPriority) const {
         PitBase_T<Info>::enableNvicInterrupts(chan, nvicPriority);
      }

      /**
       * Disable interrupts in NVIC
       */
      void disableNvicInterrupts() const {
         PitBase_T<Info>::disableNvicInterrupts(chan);
      }

      /**
       *  Use a PIT channel to implement a busy-wait delay
       *
       *  @param[in]  interval  Interval to wait in timer ticks (usually bus clock period)
       *
       *  @note Function doesn't return until interval has expired
       */
      void delay(Ticks interval) const {
         PitBase_T<Info>::delay(chan, interval);
      }

      /**
       *  Use a PIT channel to implement a busy-wait delay
       *
       *  @param[in]  interval  Interval to wait in seconds
       *
       *  @note Function doesn't return until interval has expired
       */
      void delay(Seconds interval) const {
         PitBase_T<Info>::delay(chan, interval);
      }

      /**
       * Set one-shot timer callback.
       *
       *  @note It is necessary to enable NVIC interrupts beforehand
       *
       *  @param[in]  callback          Callback function to be executed on timeout.
       *  @param[in]  interval          Interval in seconds until callback is executed
       */
      void  oneShot(CallbackFunction callback, Seconds interval) const {
         PitBase_T<Info>::oneShot(chan, callback, interval);
      }

      /**
       * Set one-shot timer callback in microseconds
       *
       *  @note It is necessary to enable NVIC interrupts beforehand
       *
       *  @param[in]  callback          Callback function to be executed on timeout.
       *  @param[in]  microseconds      Interval in milliseconds
       */
      void oneShotInMicroseconds(CallbackFunction callback, uint32_t microseconds) const {
         PitBase_T<Info>::oneShotInMicroseconds(chan, callback, microseconds);
      }

      /**
       * Set one-shot timer callback in milliseconds
       *
       *  @note It is necessary to enable NVIC interrupts beforehand
       *
       *  @param[in]  callback          Callback function to be executed on timeout.
       *  @param[in]  milliseconds      Interval in milliseconds
       */
      void oneShotInMilliseconds(CallbackFunction callback, uint32_t milliseconds) const {
         PitBase_T<Info>::oneShotInMilliseconds(chan, callback, milliseconds);
      }

      /**
       * Set one-shot timer callback
       *
       *  @note It is necessary to enable NVIC interrupts beforehand
       *
       *  @param[in]  callback          Callback function to be executed on timeout.
       *  @param[in]  tickInterval      Interval in timer ticks (usually bus clock period)
       */
      void oneShot(CallbackFunction callback, Ticks tickInterval) const {
         PitBase_T<Info>::oneShot(chan, callback, tickInterval);
      }

   };

   /**
    * Class representing a PIT channel
    * This version is a template and may not be instantiated.
    * It is a type only with static member methodes.
    *
    * @tparam channel Timer channel number
    */
   template <int channel>
   class Channel : public PitChannel {

   private:
      Channel(const Channel&) = delete;
      Channel(Channel&&) = delete;

   public:

      constexpr Channel() : PitChannel(CHANNEL) {};

      /** Timer channel number */
      static constexpr PitChannelNum CHANNEL = (PitChannelNum)channel;

      /**
       * Set callback on event
       *
       *  @param[in]  callback          Callback function to be executed on timeout
       */
      static void setCallback(CallbackFunction callback) {
         PitBase_T<Info>::setCallback(CHANNEL, callback);
      }

      /**
        * Set class member as callback function
        *
        * @tparam T         Type of the object containing the callback member function
        * @tparam callback  Member function pointer
        * @tparam object    Object containing the member function
        *
        * @return  Pointer to a function suitable for the use as a callback
        *
        * @code
        * class AClass {
        * public:
        *    int y;
        *
        *    // Member function used as callback
        *    // This function must match CallbackFunction
        *    void callback() {
        *       ...;
        *    }
        * };
        * ...
        * // Instance of class containing callback member function
        * AClass aClass;
        * ...
        * // Wrap member function and set as callback
        * Pit::Channel<0>::setCallback<AClass, &AClass::callback, aClass>();
        * @endcode
        */
       template<class T, void(T::*callback)(), T &object>
       static void setCallback() {
          PitBase_T<Info>::setCallback(CHANNEL, wrapCallback<T, callback, object>());
       }

      /**
       * PIT interrupt handler - Calls PIT callback
       * Used when each channel has an individual handler
       */
      static void irqHandler() {
         // Clear interrupt flag
         PitBase_T<Info>::pit->CHANNEL[channel].TFLG = PIT_TFLG_TIF_MASK;

         if (clearOnEvent&(1<<channel)) {
            disable();
            clearOnEvent &= ~(1<<channel);
         }
         sCallbacks[channel]();
      }

      /**
       *  Configure the PIT channel
       *
       *  @param[in]  interval          Interval in timer ticks (usually bus clock)
       *  @param[in]  pitChannelIrq     Whether to enable interrupts
       *
       *  @note The timer channel is disabled before configuring so that period changes
       *        have immediate effect.
       */
      static void configure(
            Ticks             interval,
            PitChannelIrq     pitChannelIrq=PitChannelIrq_Disabled) {

         PitBase_T<Info>::configureChannel(CHANNEL, interval, pitChannelIrq);
      }

      /**
       *  Configure the PIT channel
       *
       *  @param[in]  interval          Interval in seconds
       *  @param[in]  pitChannelIrq     Whether to enable interrupts
       *
       *  @note The timer channel is disabled before configuring so that period changes
       *        have immediate effect.
       */
      static void configure(
            Seconds           interval,
            PitChannelIrq     pitChannelIrq=PitChannelIrq_Disabled) {

         PitBase_T<Info>::configureChannel(CHANNEL, interval, pitChannelIrq);
      }

      /**
       * Set period in seconds
       *
       * @param[in]  interval Interval in seconds
       *
       * @note If the timer is currently enabled this value will be loaded on the next expiration.
       *       To have immediate effect it is necessary to use configure().
       */
      static void setPeriod(Seconds interval) {
         PitBase_T<Info>::setPeriod(CHANNEL, interval);
      }

      /**
       * Set period in ticks
       *
       * @param[in]  interval Interval in ticks
       *
       * @note If the timer is currently enabled this value will be loaded on the next expiration.
       *       To have immediate effect it is necessary to use configure().
       */
      static void setPeriod(Ticks interval) {
         PitBase_T<Info>::setPeriod(CHANNEL, interval);
      }

      /**
       * Set period in microseconds
       *
       * @param[in]  microseconds Interval in microseconds
       *
       * @note If the timer is currently enabled this value will be loaded on the next expiration.
       *       To have immediate effect it is necessary to use configure().
       */
      static void setPeriodInMicroseconds(uint32_t microseconds) {
         unsigned long interval = ((unsigned long)microseconds*Info::getClockFrequency())/1000000;
         usbdm_assert(interval<0xFFFFFFFFUL,"Interval too long");
         PitBase_T<Info>::setPeriod(CHANNEL, Ticks((unsigned)interval));
      }

      /**
       *  Enables and configures the PIT if not already done.
       *  This also disables all channel interrupts and channel reservations if newly configured.
       *
       *  @param[in]  pitDebugMode  Determined whether the PIT halts when suspended during debug
       */
      static void  configureIfNeeded(PitDebugMode pitDebugMode=PitDebugMode_Stop) {
         PitBase_T<Info>::configureIfNeeded(pitDebugMode);
      }

      /**
       *   Enable the PIT channel
       */
      static void enable() {
         PitBase_T<Info>::enableChannel(CHANNEL);
      }

      /**
       *   Disable the PIT channel
       */
      static void disable() {
         PitBase_T<Info>::disableChannel(CHANNEL);
      }

      /**
       * Enable/disable channel interrupts.
       *
       * @param[in]  enable  True => enable, False => disable
       *
       * @note It is also necessary to modify NVIC using enableNvicInterrupts().
       */
      static void enableInterrupts(bool enable=true) {
         PitBase_T<Info>::enableInterrupts(CHANNEL, enable);
      }

      /**
       *  Use a PIT channel to implement a busy-wait delay
       *
       *  @param[in]  interval  Interval to wait in timer ticks (usually bus clock period)
       *
       *  @note Function doesn't return until interval has expired
       */
      static void delay(Ticks interval) {
         PitBase_T<Info>::delay(CHANNEL, interval);
      }

      /**
       *  Use a PIT channel to implement a busy-wait delay
       *
       *  @param[in]  interval  Interval to wait in seconds
       *
       *  @note Function doesn't return until interval has expired
       */
      static void delay(Seconds interval) {
         PitBase_T<Info>::delay(CHANNEL, interval);
      }

      /**
       * Set one-shot timer callback.
       *
       *  @note It is necessary to enable NVIC interrupts beforehand
       *
       *  @param[in]  callback          Callback function to be executed on timeout.
       *  @param[in]  interval          Interval in seconds until callback is executed
       */
      static void  oneShot(CallbackFunction callback, Seconds interval) {
         PitBase_T<Info>::oneShot(CHANNEL, callback, interval);
      }

      /**
       * Set one-shot timer callback in microseconds
       *
       *  @note It is necessary to enable NVIC interrupts beforehand
       *
       *  @param[in]  callback          Callback function to be executed on timeout.
       *  @param[in]  microseconds      Interval in milliseconds
       */
      static void oneShotInMicroseconds(CallbackFunction callback, uint32_t microseconds) {
         PitBase_T<Info>::oneShotInMicroseconds(CHANNEL, callback, microseconds);
      }

      /**
       * Set one-shot timer callback in milliseconds
       *
       *  @note It is necessary to enable NVIC interrupts beforehand
       *
       *  @param[in]  callback          Callback function to be executed on timeout.
       *  @param[in]  milliseconds      Interval in milliseconds
       */
      static void oneShotInMilliseconds(CallbackFunction callback, uint32_t milliseconds) {
         PitBase_T<Info>::oneShotInMilliseconds(CHANNEL, callback, milliseconds);
      }

      /**
       * Set one-shot timer callback
       *
       *  @note It is necessary to enable NVIC interrupts beforehand
       *
       *  @param[in]  callback          Callback function to be executed on timeout.
       *  @param[in]  tickInterval      Interval in timer ticks (usually bus clock period)
       */
      static void oneShot(CallbackFunction callback, Ticks tickInterval) {
         PitBase_T<Info>::oneShot(CHANNEL, callback, tickInterval);
      }

   };
   
$(/PIT/InitMethod: // /PIT/InitMethod Not found)
}; // class PitBase_T

/** Bit-mask of allocated channels */
template<class Info> uint32_t PitBase_T<Info>::allocatedChannels = -1;

$(/PIT/CallBackDefinition: // /PIT/CallBackDefinition Not found)
/** Bitmask used to indicate a channel call-back is one-shot */
template<class Info> uint8_t PitBase_T<Info>::clearOnEvent = 0;

$(/PIT/staticDefinitions:  // No static definitions found)

$(/PIT/declarations:  // No declarations found)
/**
 * @}
 */

} // End namespace USBDM

#endif // /PIT/_BasicInfoGuard

#endif /* INCLUDE_USBDM_PIT_H_ */
