/**
 * @file      ics.h (180.ARM_Peripherals/Project_Headers/ics.h)
 *
 * @brief    Abstraction layer for ICS interface
 *
 * @version  V4.12.1.80
 * @date     13 April 2016
 */

#ifndef INCLUDE_USBDM_ICS_H_
#define INCLUDE_USBDM_ICS_H_
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "derivative.h"
#include "system.h"
#include "pin_mapping.h"

namespace USBDM {

/**
 * @addtogroup ICS_Group ICS, Multipurpose Clock Generator
 * @brief Abstraction for Multipurpose Clock Generator
 * @{
 */

/** ICSFFCLK - Fixed frequency clock (input to FLL) */
extern volatile uint32_t SystemIcsFFClock;

/** ICSOUTCLK - Primary output from ICS, various sources */
extern volatile uint32_t SystemIcsOutClock;

/** ICSFLLCLK - Output of FLL */
extern volatile uint32_t SystemIcsFllClock;

/**
 * Clock configurations
 */
enum ClockConfig : uint8_t {
$(/ICS/ClockConfig: #error ClockConfig not found)
   ClockConfig_default = 0,
};

$(/ICS/ClockInfoType:#error ClockInfoType not found)
class ClockChangeCallback {

friend class Ics;

private:
      // Pointer to next in chain
      ClockChangeCallback *next = nullptr;

public:
      virtual ~ClockChangeCallback() = default;

      /**
       * This method is overridden to obtain notification before clock change
       */
      virtual void beforeClockChange(){}

      /**
       * This method is overridden to obtain notification after clock change
       */
      virtual void afterClockChange(){};
};

/**
 * Type definition for ICS interrupt call back
 */
typedef void (*ICSCallbackFunction)(void);

/**
 * @brief Class representing the ICS
 *
 * <b>Example</b>
 * @code
 *    Ics::initialise();
 * @endcode
 */
class Ics {

private:
#if $(/ICS/configureClocks:false)
   static ClockChangeCallback *clockChangeCallbackQueue;

   static void notifyBeforeClockChange() {
      ClockChangeCallback *p = clockChangeCallbackQueue;
      while (p != nullptr) {
         p->beforeClockChange();
         p = p->next;
      }
   }
   static void notifyAfterClockChange() {
      ClockChangeCallback *p = clockChangeCallbackQueue;
      while (p != nullptr) {
         p->afterClockChange();
         p = p->next;
      }
   }
#endif

#if $(/ICS/configureClocks:false)
public:
   /**
    * Add callback for clock configuration changes
    *
    * @param callback Call-back class to notify on clock configuration changes
    */
   static void addClockChangeCallback(ClockChangeCallback &callback) {
      callback.next = clockChangeCallbackQueue;
      clockChangeCallbackQueue = &callback;
   }
#endif

private:
   /** Callback function for ISR */
   static ICSCallbackFunction callback;

   /** Hardware instance */
   static constexpr HardwarePtr<ICS_Type> ics = IcsInfo::baseAddress;

$(/ICS/privateMethods: // No private methods found)

public:

$(/ICS/publicMethods: // No public methods found)

   /**
    * Table of clock settings
    */
   static const ClockInfo clockInfo[];

   /**
    * Transition from current clock mode to mode given
    *
    * @param[in]  clockInfo Clock mode to transition to
    *
    * @return E_NO_ERROR          on success
    * @return E_CLOCK_INIT_FAILED on failure
    */
   static ErrorCode clockTransition(const ClockInfo &clockInfo);

   /**
    * Update SystemCoreClock variable
    *
    * Updates the SystemCoreClock variable with current core Clock retrieved from CPU registers.
    */
   static void SystemCoreClockUpdate(void);

   /**
    * Enable interrupts in NVIC
    */
   static void enableNvicInterrupts() {
      NVIC_EnableIRQ(IcsInfo::irqNums[0]);
   }

   /**
    * Enable and set priority of interrupts in NVIC
    * Any pending NVIC interrupts are first cleared.
    *
    * @param[in]  nvicPriority  Interrupt priority
    */
   static void enableNvicInterrupts(NvicPriority nvicPriority) {
      enableNvicInterrupt(IcsInfo::irqNums[0], nvicPriority);
   }

   /**
    * Disable interrupts in NVIC
    */
   static void disableNvicInterrupts() {
      NVIC_DisableIRQ(IcsInfo::irqNums[0]);
   }
   /**
    * ICS interrupt handler -  Calls ICS callback
    */
   static void irqHandler() {
      if (callback != 0) {
         callback();
      }
   }

   /**
    * Set callback for ISR
    *
    * @param[in]  callback The function to call from stub ISR
    */
   static void setCallback(ICSCallbackFunction callback) {
      Ics::callback = callback;
   }

   /** Current clock mode (FEI out of reset) */
   static IcsClockMode currentClockMode;

   /**
    * Get current clock mode
    *
    * @return
    */
   static IcsClockMode getClockMode() {
      return currentClockMode;
   }

   /**
    * Get name for clock mode
    *
    * @return Pointer to static string
    */
   static const char *getClockModeName(IcsClockMode);

   /**
    * Get name for current clock mode
    *
    * @return Pointer to static string
    */
   static const char *getClockModeName() {
      return getClockModeName(getClockMode());
   }

   /**
    *  Configure the ICS for given mode
    *
    *  @param[in]  settingNumber CLock setting number
    */
   static void configure(ClockConfig settingNumber=ClockConfig_default) {
      clockTransition(clockInfo[settingNumber]);
   }

   /**
    *   Finalise the ICS
    */
   static void finalise() {
      clockTransition(clockInfo[ClockConfig_default]);
   }

   /**
    * Initialise ICS to default settings.
    */
   static void defaultConfigure();

   /**
    * Set up the OSC out of reset.
    */
   static void initialise() {
      defaultConfigure();
   }

};

/**
 * @}
 */

} // End namespace USBDM

#endif /* INCLUDE_USBDM_ICS_H_ */
