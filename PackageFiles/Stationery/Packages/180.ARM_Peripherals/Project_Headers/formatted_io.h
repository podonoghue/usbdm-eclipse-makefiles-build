/****************************************************************************************************//**
 * @file     formatted_io.h (180.ARM_Peripherals/Project_Headers/formatted_io.h)
 * @brief    Formatted I/O
 *
 * @version  V0.0
 * @date     2015/06
 *
 *******************************************************************************************************/

#ifndef HEADER_FORMATTED_IO_H
#define HEADER_FORMATTED_IO_H
/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include <stdint.h>
#include <math.h>
#include <ctype.h>      // isspace() etc
#include "pin_mapping.h"

#if defined(__FREE_RTOS)
#include "FreeRTOS.h"
#include "semphr.h"
#elif defined(__CMSIS_RTOS)
#include "cmsis.h"
#endif

namespace USBDM {

/**
 * @addtogroup FORMATTED_IO_Group Formatted Input/Output
 * @brief C++ Class allowing input and output of basic types as character streams
 * @{
 */

/**
 * Enumeration selecting radix for integer types with << or >> operators
 */
enum class Radix : uint8_t {
   Radix_2       = 2,         //!< Convert as binary number
   Radix_8       = 8,         //!< Convert as octal number
   Radix_10      = 10,        //!< Convert as decimal number
   Radix_16      = 16,        //!< Convert as hexadecimal number
   Radix_Default = Radix_10,  //!< Default radix (10)
};

constexpr Radix Radix_2  = Radix::Radix_2;
constexpr Radix Radix_8  = Radix::Radix_8;
constexpr Radix Radix_10 = Radix::Radix_10;
constexpr Radix Radix_16 = Radix::Radix_16;

enum WhiteSpaceType {
   /**
    * With operator<< Discard input white-space characters
    */
   WhiteSpace
};

enum EndOfLineType {
   /**
    * With operator<< Discard input until end-of-line \n
    * With operator>> Write end-of-line
    */
   EndOfLine
};

/**
 * Padding for integers
 */
enum class Padding : uint8_t {
   Padding_None ,         //!< No padding
   Padding_LeadingSpaces, //!< Pad with leading spaces
   Padding_LeadingZeroes, //!< Pad with leading zeroes
   Padding_TrailingSpaces,//!< Pad with trailing spaces
};

static constexpr Padding Padding_None           = Padding::Padding_None;
static constexpr Padding Padding_LeadingSpaces  = Padding::Padding_LeadingSpaces;
static constexpr Padding Padding_LeadingZeroes  = Padding::Padding_LeadingZeroes;
static constexpr Padding Padding_TrailingSpaces = Padding::Padding_TrailingSpaces;

/**
 * Precision for floats
 */
enum class Precision : uint8_t {
   Precision_1 = 1,
   Precision_2 = 2,
   Precision_3 = 3,
   Precision_4 = 4,
   Precision_5 = 5,
};

static constexpr Precision Precision_1 = Precision::Precision_1;
static constexpr Precision Precision_2 = Precision::Precision_2;
static constexpr Precision Precision_3 = Precision::Precision_3;
static constexpr Precision Precision_4 = Precision::Precision_4;
static constexpr Precision Precision_5 = Precision::Precision_5;

/**
 * Width for integers
 */
enum class Width : uint8_t {
   Width_auto = 0, //!< Width_auto
   Width_1    = 1,
   Width_2    = 2,
   Width_3    = 3,
   Width_4    = 4,
   Width_5    = 5,
   Width_6    = 6,
   Width_7    = 7,
   Width_8    = 8,
   Width_9    = 9,
   Width_10   = 10,
   Width_11   = 11,
   Width_12   = 12,
   Width_13   = 13,
   Width_14   = 14,
   Width_15   = 15,
};

static constexpr Width Width_auto = Width::Width_auto;
static constexpr Width Width_1    = Width::Width_1;
static constexpr Width Width_2    = Width::Width_2;
static constexpr Width Width_3    = Width::Width_3;
static constexpr Width Width_4    = Width::Width_4;
static constexpr Width Width_5    = Width::Width_5;
static constexpr Width Width_6    = Width::Width_6;
static constexpr Width Width_7    = Width::Width_7;
static constexpr Width Width_8    = Width::Width_8;
static constexpr Width Width_9    = Width::Width_9;
static constexpr Width Width_10   = Width::Width_10;
static constexpr Width Width_11   = Width::Width_11;
static constexpr Width Width_12   = Width::Width_12;
static constexpr Width Width_13   = Width::Width_13;
static constexpr Width Width_14   = Width::Width_14;
static constexpr Width Width_15   = Width::Width_15;

enum EchoMode : bool {
   /*
    * For use with operator<< and operator>>
    */
   EchoMode_Off = false, //!< Turn echo off
   EchoMode_On  = true,  //!< Turn echo on
};

enum FlushType {
   /**
    * With operator<< Discard queued input \n
    * With operator>> Wait until queued data is transmitted.
    */
   Flush
};

struct IntegerFormat {

public:
   /**
    * Copy Constructor
    */
   constexpr IntegerFormat(const IntegerFormat &other) = default;

   /**
    * Default Constructor
    */
   constexpr IntegerFormat() = default;

   /** Padding for integers  */
   Padding fPadding = Padding_None;

   /** Current radix for integers */
   Radix fRadix = Radix_10;

   /** Width used for integers numbers  */
   Width fWidth = Width_auto;

   /**
    * Constructor for Padding in IntegerFormat
    *
    * @tparam   Types
    * @param    rest
    *
    * @param padding Padding for integers
    */
   template <typename... Types>
   constexpr IntegerFormat(Padding padding, Types... rest) : IntegerFormat(rest...) {
      fPadding = padding;
   }

   /**
    * Constructor for Padding in IntegerFormat
    *
    * @tparam   Types
    * @param    rest
    *
    * @param radix Radix for integers
    */
   template <typename... Types>
   constexpr IntegerFormat(Radix radix, Types... rest) : IntegerFormat(rest...) {
      fRadix = radix;
   }

   /**
    * Constructor for width in IntegerFormat
    *
    * @tparam   Types
    * @param    rest
    *
    * @param width Width for integers
    */
   template <typename... Types>
   constexpr IntegerFormat(Width width, Types... rest) : IntegerFormat(rest...) {
      fWidth = width;
   }

};

struct FloatFormat {


public:
   /**
    * Copy Constructor
    */
   constexpr FloatFormat(const FloatFormat &other) = default;

   /**
    * Default Constructor
    */
   constexpr FloatFormat() = default;

   /** Precision multiplier used for floating point numbers (10^fFloatPrecision) */
   unsigned fFloatPrecisionMultiplier = 1000;

   /** Float precision */
   Precision fFloatPrecision = Precision_3;

   /** Padding for floats  */
   Padding fPadding = Padding_None;

   /** Width used for floats  */
   Width fWidth = Width_auto;

   /**
    * Constructor for padding in FloatFormat
    *
    * @tparam   Types
    * @param    rest
    *
    * @param padding How to pad on the left of the number
    */
   template <typename... Types>
   constexpr FloatFormat(Padding padding, Types... rest) : FloatFormat(rest...) {
      fPadding = padding;
   }

   /**
    * Constructor for width in FloatFormat
    *
    * @tparam   Types
    * @param    rest
    *
    * @param width Number of characters to the left of decimal point (ignored for padding_None)
    */
   template <typename... Types>
   constexpr FloatFormat(Width width, Types... rest) : FloatFormat(rest...) {
      fWidth = width;
   }

   static constexpr int calculateMultiplier(Precision precision) {
      int prec = int(precision);
      int multiplier = 1;
      while (prec-->0) {
         multiplier *= 10;
      }
      return multiplier;
   }

   /**
    * Constructor for precision in FloatFormat
    *
    * @tparam   Types
    * @param    rest
    *
    * @param precision Number of digits to the right of decimal point
    */
   template <typename... Types>
   constexpr FloatFormat(Precision precision, Types... rest) : FloatFormat(rest...) {

      fFloatPrecision           = precision;
      fFloatPrecisionMultiplier = calculateMultiplier(precision);
   }

   /**
    * Set format for floating point numbers
    *
    * @param precision Number of digits to the right of decimal point
    * @param padding   How to pad on the left of the number
    * @param width     Number of characters to the left of decimal point (ignored for padding_None)
    *
    * @return Reference to self
    */
   FloatFormat &setFloatFormat(
         Precision precision,
         Padding   padding  = Padding_None,
         Width     width    = Width_auto) {

      usbdm_assert(padding != Padding_TrailingSpaces, "Not supported format");

      fFloatPrecision           = precision;
      fFloatPrecisionMultiplier = calculateMultiplier(precision);
      fPadding = padding;
      fWidth   = width;
      return *this;
   }

};

/**
 * Virtual Base class for formatted IO
 */
class FormattedIO {

protected:
   /**
    * Construct formatter interface
    */
   FormattedIO() {
#if defined (__FREE_RTOS) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configUSE_RECURSIVE_MUTEXES == 1 )
      mutex = xSemaphoreCreateRecursiveMutex();
#elif defined(__CMSIS_RTOS)
      mutex = new CMSIS::Mutex();
#endif
   }

   /**
    * Destructor
    */
   virtual ~FormattedIO() {
#if defined (__FREE_RTOS) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configUSE_RECURSIVE_MUTEXES == 1 )
      vSemaphoreDelete(mutex);
#elif defined(__CMSIS_RTOS)
      delete mutex;
#endif
   }

   /**
    * Current float format
    */
   FloatFormat   fFloatFormat;

   /**
    * Current integer format
    */
   IntegerFormat fIntegerFormat;

   /**
    * Echo settings
    */
   bool fEcho = true;

   /**
    * One character look-ahead
    */
   int16_t lookAhead = -1;

   /**
    * Indicate in error state
    */
   bool inErrorState = false;

#if defined (__FREE_RTOS) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configUSE_RECURSIVE_MUTEXES == 1 )
   SemaphoreHandle_t mutex;
#elif defined(__CMSIS_RTOS)
   CMSIS::Mutex* mutex;
#endif

   /**
    * Convert character to digit in given radix
    *
    * @param[in] ch    The character to convert
    * @param[in] radix The radix to use
    *
    * @return >=0 Digit in range 0 - (radix-1)
    * @return <0  Invalid character for radix
    */
   static int convertDigit(int ch, Radix radix) {
      unsigned digit = ch - '0';
      if (digit<10) {
         return (digit<static_cast<unsigned>(radix))?digit:-1;
      }
      digit = ch-'a'+10;
      if (digit<static_cast<unsigned>(radix)) {
         return digit;
      }
      digit = ch-'A'+10;
      if (digit<static_cast<unsigned>(radix)) {
         return digit;
      }
      return -1;
   }

   /**
    * Check if character is available
    *
    * @return true  Character available i.e. _readChar() will not block
    * @return false No character available
    */
   virtual bool _isCharAvailable() {
      return false;
   }

   /**
    * Receives a character (blocking)
    *
    * @return Character received
    */
   virtual int _readChar() {
      return -1;
   }

   /**
    * Writes a character (blocking)
    *
    * @param[in]  ch - character to send
    */
   virtual void _writeChar(char ch) {
      (void)ch;
   }

public:
   /**
    * Get current integer settings e.g width, precision etc
    *
    * @param[out] settings Settings object
    */
   FormattedIO &getFormat(IntegerFormat &settings) {
      settings = fIntegerFormat;
      return *this;
   }

   /**
    * Set current integer settings e.g width, precision etc
    *
    * @param[in] settings Settings object
    */
   FormattedIO &setFormat(const IntegerFormat &settings) {
      fIntegerFormat = settings;
      return *this;
   }

   /**
    * Get current float settings e.g width, precision etc
    *
    * @param[out] settings Settings object
    */
   FormattedIO &getFormat(FloatFormat &settings) {
      settings = fFloatFormat;
      return *this;
   }

   /**
    * Set current float settings e.g width, precision etc
    *
    * @param[in] settings Settings object
    */
   FormattedIO &setFormat(const FloatFormat &settings) {
      fFloatFormat = settings;
      return *this;
   }

   /**
    * Reset to default formatting.
    * Radix = radix_10, width=0, Padding_None
    *
    * @return Reference to self
    */
   FormattedIO &resetFloatFormat() {
      // Default settings
      static constexpr FloatFormat defaultSettings;

      fFloatFormat = defaultSettings;
      return *this;
   }

   /**
    * Reset to default formatting.
    * Radix = radix_10, width=0, Padding_None
    *
    * @return Reference to self
    */
   FormattedIO &resetIntegerFormat() {
      // Default settings
      static constexpr IntegerFormat defaultSettings;

      fIntegerFormat = defaultSettings;
      return *this;
   }

   /**
    *  Flush output data
    */
   virtual FormattedIO &flushOutput() {
      return *this;
   }

   /**
    *  Flush input data
    */
   virtual FormattedIO &flushInput() {
      lookAhead = -1;
      return *this;
   }

   /**
    * Lock the object
    *
    * @note Requires use of RTOS + Mutexes
    */
   FormattedIO &lock() {
#if defined (__FREE_RTOS) && (configSUPPORT_DYNAMIC_ALLOCATION == 1) && (configUSE_RECURSIVE_MUTEXES == 1)
      xSemaphoreTakeRecursive(mutex, portMAX_DELAY);
#elif defined(__CMSIS_RTOS)
      mutex->wait(osWaitForever);
#endif
      return *this;
   }

   /**
    * Unlock the object
    *
    * @note Requires use of RTOS + Mutexes
    */
   void unlock() {
#if defined (__FREE_RTOS) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configUSE_RECURSIVE_MUTEXES == 1 )
      xSemaphoreGiveRecursive(mutex);
#elif defined(__CMSIS_RTOS)
      mutex->release();
#endif
   }

   /**
    * Peek at lookahead (non-blocking).
    *
    * @return <0   No character available
    * @return >=0  The available character
    */
   int __attribute__((noinline)) peek() {
      if (lookAhead>0) {
         return lookAhead;
      }
      if (!_isCharAvailable()) {
         return -1;
      }
      lookAhead = _readChar();
      if (lookAhead == static_cast<uint8_t>('\r')) {
         lookAhead = '\n';
      }
      if (fEcho) {
         _writeChar(lookAhead);
      }
      return lookAhead;
   }

   /**
    * Push a value to the look-ahead buffer
    *
    * @param[in] ch Character to push
    */
   void pushBack(char ch) {
      lookAhead = static_cast<uint8_t>(ch);
   }

   /**
    * Writes a character
    *
    * @param[in]  ch - character to send
    */
   void writeChar(char ch) {
      _writeChar(ch);
   }

   /**
    * Receives a single character
    *
    * @return >0 Character received
    * @return <0 No character available
    */
   int readChar() {
      int ch;
      do {
         ch = peek();
      } while (ch < 0);
      lookAhead = -1;
      return ch;
   }

   /**
    * Set padding for integers
    *
    * @param padding Padding mode
    *
    * @return Reference to self
    */
   FormattedIO &setPadding(Padding padding) {
      fIntegerFormat.fPadding = padding;
      return *this;
   }

   /**
    * Set width for integers
    *
    * @param width Width to use
    *
    * @return Reference to self
    */
   FormattedIO &setWidth(Width width) {
      fIntegerFormat.fWidth = width;
      return *this;
   }

   /**
    * Set precision for floating point numbers
    *
    * @param precision Number of digits to the right of decimal point
    * @param padding   How to pad on the left of the number (Padding_LeadingSpaces, Padding_None, Padding_LeadingZeroes)
    * @param width     Number of characters to the left of decimal point (ignored for padding_None)
    *
    * @return Reference to self
    */
   FormattedIO &setFloatFormat( Precision  precision,
                                Padding    padding  = Padding_None,
                                Width      width    = Width_auto) {

      usbdm_assert(padding != Padding_TrailingSpaces, "Not supported format");

      fFloatFormat.fFloatPrecision           = precision;
      fFloatFormat.fFloatPrecisionMultiplier = FloatFormat::calculateMultiplier(precision);
      fFloatFormat.fPadding = padding;
      fFloatFormat.fWidth   = width;
      return *this;
   }

   /**
    * Converts an unsigned long to a string
    *
    * @param[in] ptr        Buffer to write result (at least 32 characters for binary)
    * @param[in] value      Unsigned long to convert
    * @param[in] radix      Radix for conversion [2..16]
    * @param[in] padding    How to pad the number if smaller than field width
    * @param[in] width      Field width of printed number
    * @param[in] isNegative Write leading '-'
    *
    * @return Pointer to '\0' null character at end of converted number\n
    *         May be used for incrementally writing to a buffer.
    */
   static __attribute__((noinline)) char *ultoa(
         char          *ptr,
         unsigned long  value,
         Radix          radix,
         Padding        padding,
         int            width,
         bool           isNegative
         ) {

#ifdef DEBUG_BUILD
      if (ptr == nullptr) {
         __BKPT();
      }
      if ((static_cast<unsigned>(radix)<2)||(static_cast<unsigned>(radix)>16)) {
         __BKPT();
      }
#endif
      // Save beginning for reversal
      char *beginPtr = ptr;
      // Convert backwards
      do {
         *ptr++ = "0123456789ABCDEF"[value % static_cast<unsigned>(radix)];
         value /= static_cast<unsigned>(radix);
      } while (value != 0);

      // Add leading padding
      switch (padding) {
         case Padding_TrailingSpaces:
         case Padding_None:
            if (isNegative) {
                width--;
                *ptr++ = '-';
             }
             break;
         case Padding_LeadingSpaces:
            if (isNegative) {
               *ptr++ = '-';
            }
            while ((ptr-beginPtr) < width) {
               *ptr++ = ' ';
            }
            break;
         case Padding_LeadingZeroes:
            while ((ptr-beginPtr) < (width-1)) {
               *ptr++ = '0';
            }
            if (isNegative) {
               *ptr++ = '-';
            }
            if ((ptr-beginPtr) < width) {
               *ptr++ = '0';
            }
            break;
      }
      // Reverse digits
      char *endPtr = ptr-1;
      char *tPtr   = beginPtr;
      while (tPtr < endPtr) {
         char t = *tPtr;
         *tPtr++ = *endPtr;
         *endPtr-- = t;
      }
      // Add trailing padding
      if (padding==Padding_TrailingSpaces) {
         while ((ptr-beginPtr) < width) {
            *ptr++ = ' ';
         }
      }
      // Terminate and leave ptr at last digit
      *ptr = '\0';
      return ptr;
   }

   /**
    * Converts an unsigned long to a string
    *
    * @param[in] ptr      Buffer to write result (at least 32 characters for binary)
    * @param[in] value    Unsigned long to convert
    * @param[in] radix    Radix for conversion [2..16] (default 10)
    * @param[in] padding  How to pad the number if smaller than field width
    * @param[in] width    Field width of printed number
    *
    * @return Pointer to '\0' null character at end of converted number\n
    *         May be used for incrementally writing to a buffer.
    */
   static char *ultoa(
         char *ptr,
         unsigned long value,
         Radix radix,
         Padding padding,
         int width=0
         ) {
      return ultoa(ptr, value, radix, padding, width, false);
   }

   /**
    * Converts a long to a string
    *
    * @param[in] ptr      Buffer to write result (at least 32 characters for binary)
    * @param[in] value    Long to convert
    * @param[in] radix    Radix for conversion [2..16] (default 10)
    * @param[in] padding  How to pad the number if smaller than field width
    * @param[in] width    Field width of printed number
    *
    * @return Pointer to '\0' null character at end of converted number\n
    *         May be used for incrementally writing to a buffer.
    */
   static char *ltoa(
         char *ptr,
         long value,
         Radix radix,
         Padding padding,
         int width=0
         ) {
      bool isNegative = value<0;
      if (isNegative) {
         value = -value;
      }
      return ultoa(ptr, value, radix, padding, width, isNegative);
   }

   /**
    * Copies a C string including terminating '\0' character
    *
    * @param[out] dst  Where to copy string
    * @param[in]  src  Source to copy from
    *
    * @return Pointer to '\0' null character at end of concatenated string.\n
    *         May be used for incrementally writing to a buffer.
    */
   static char *strcpy(char *dst, const char *src) {
#ifdef DEBUG_BUILD
      if (dst == nullptr) {
         __BKPT();
      }
#endif
      do {
         *dst++ = *src;
      } while (*src++ != '\0');
      return dst-1;
   }

   /**
    * Write data
    *
    * @param[in]  data     Data to transmit
    * @param[in]  size     Size of transmission data
    */
   void transmit(const uint8_t data[], uint16_t size) {
      while (size-->0) {
         writeChar(*data++);
      }
   }

   /**
    * Receive data
    *
    * @param[out] data     Data buffer for reception
    * @param[in]  size     Size of data to receive
    */
   void receive(uint8_t data[], uint16_t size) {
      while (size-->0) {
         *data++ = readChar();
      }
   }

   /**
    * Receive string until terminator character or buffer full.\n
    * The terminating character is discarded and the string always '\0' terminated
    *
    * @param[out] data       Data buffer for reception
    * @param[in]  size       Size of data buffer (including space for '\0')
    * @param[in]  terminator Terminating character
    *
    * @return number of characters read (excluding terminator)
    *
    * @note Excess characters are discarded once the buffer is full.
    *
    * Usage
    * @code
    *    char buff[100];
    *    int numChars = gets(buff, sizeof(buff));
    * @endcode
    */
   int __attribute__((noinline)) gets(char data[], uint16_t size, char terminator='\n') {
      char *ptr = data;

      char ch;
      do {
         ch = readChar();
         if (ptr<(data+size)) {
            *ptr++ = ch;
         }
      } while(ch != terminator);
      *--ptr = '\0';
      return ptr-data;
   }

   /**
    * Receive string until terminator character or buffer full.\n
    * The terminating character is discarded and the string always '\0' terminated
    *
    * @param[out] data       Data buffer for reception (size is inferred from this parameter)
    * @param[in]  terminator Terminating character
    *
    * @return number of characters read (excluding terminator)
    *
    * @note Excess characters are discarded once the buffer is full.
    *
    * Usage
    * @code
    *    char buff[100];
    *    int numChars = gets(buff);
    * @endcode
    */
   template<size_t N>
   int __attribute__((noinline)) gets(char (&data)[N], char terminator='\n') {
      return gets(data, N, terminator);
   }

protected:
    /**
    * Write a character
    *
    * @param[in]  ch - character to send
    *
    * @return Reference to self
    */
   FormattedIO &private_write(char ch) {
      writeChar(ch);
      return *this;
   }

   /**
    * Write an end-of-line
    *
    * @return Reference to self
    */
   FormattedIO &private_writeln() {
      return private_write('\n');
   }

   /**
    * Write a C string
    *
    * @param[in]  str   String to print
    * @param[in]  width Width of string (either truncated or padded to this width)
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(const char *str, Width width) {
      int width_ = int(width);
      while ((*str != '\0') && (width_-->0)) {
         private_write(*str++);
      }
      while (width_-->0) {
         private_write(' ');
      }
      return *this;
   }

   /**
    * Write a C string
    *
    * @param[in]  str String to print
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(const char *str) {
      while (*str != '\0') {
         private_write(*str++);
      }
      return *this;
   }

   /**
    * Write a boolean value
    *
    * @param[in]  b Boolean to print
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(bool b) {
      return private_write(b?"true":"false");
   }

   /**
    * Write an unsigned long integer
    *
    * @param[in]  value Unsigned long to print
    * @param[in]  width Width to use
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(unsigned long value, Width width) {
      char buff[35];
      ultoa(buff, value, fIntegerFormat.fRadix, fIntegerFormat.fPadding, int(width), false);
      return private_write(buff);
   }

   /**
    * Write an unsigned long integer
    *
    * @param[in]  value Unsigned long to print
    * @param[in]  radix Radix for conversion [2..16]
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(unsigned long value, Radix radix) {
      char buff[35];
      ultoa(buff, value, radix, fIntegerFormat.fPadding, int(fIntegerFormat.fWidth), false);
      return private_write(buff);
   }

   /**
    * Write an unsigned long integer
    *
    * @param[in]  value  Unsigned long to print
    * @param[in]  format How to format number
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(unsigned long value, const IntegerFormat &format) {
      char buff[35];
      ultoa(buff, value, format.fRadix, format.fPadding, int(format.fWidth), false);
      return private_write(buff);
   }

   /**
    * Write an unsigned long integer
    *
    * @param[in]  value Unsigned long to print
    *
    * @return Reference to self
    */
   FormattedIO &private_write(unsigned long value) {
      return private_write(value, fIntegerFormat);
   }

   /**
    * Write an unsigned long integer
    *
    * @param[in]  value Unsigned long to print
    * @param[in]  width Width to use
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(long value, Width width) {
      char buff[35];
      ultoa(buff, static_cast<unsigned long>(value), fIntegerFormat.fRadix, fIntegerFormat.fPadding, int(width), false);
      return private_write(buff);
   }

   /**
    * Write a long integer
    *
    * @param[in]  value Long to print
    * @param[in]  radix Radix for conversion [2..16]
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(long value, Radix radix) {
      char buff[35];
      bool isNegative = value < 0;
      if (isNegative) {
         value = -value;
      }
      ultoa(buff, static_cast<unsigned long>(value), radix, fIntegerFormat.fPadding, (int)fIntegerFormat.fWidth, isNegative);
      return private_write(buff);
   }

   /**
    * Write an unsigned long integer
    *
    * @param[in]  value  Unsigned long to print
    * @param[in]  format How to format number
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(long value, const IntegerFormat &format) {
      char buff[35];
      ultoa(buff, static_cast<unsigned long>(value), format.fRadix, format.fPadding, int(format.fWidth), false);
      return private_write(buff);
   }

   /**
    * Write a long integer
    *
    * @param[in]  value Long to print
    *
    * @return Reference to self
    */
   FormattedIO &private_write(long value) {
      return private_write(value, fIntegerFormat);
   }

   /**
    * Write an unsigned integer
    *
    * @param[in]  value Unsigned to print
    * @param[in]  width Width to use
    *
    * @return Reference to self
    */
   FormattedIO &private_write(unsigned value, Width width) {
      return private_write(static_cast<unsigned long>(value), width);
   }

   /**
    * Write an unsigned integer
    *
    * @param[in]  value Unsigned to print
    * @param[in]  radix Radix for conversion [2..16]
    *
    * @return Reference to self
    */
   FormattedIO &private_write(unsigned value, Radix radix) {
      return private_write(static_cast<unsigned long>(value), radix);
   }

   /**
    * Write an unsigned integer
    *
    * @param[in]  value    Unsigned to print
    * @param[in]  format   Format for printing
    *
    * @return Reference to self
    */
   FormattedIO &private_write(unsigned value, const IntegerFormat &format) {
      return private_write(static_cast<unsigned long>(value), format);
   }

   /**
    * Write an unsigned integer
    *
    * @param[in]  value Unsigned to print
    *
    * @return Reference to self
    */
   FormattedIO &private_write(unsigned value) {
      return private_write(static_cast<unsigned long>(value), fIntegerFormat);
   }

   /**
    * Write an integer
    *
    * @param[in]  value Integer to print
    * @param[in]  width Width to use
    *
    * @return Reference to self
    */
   FormattedIO &private_write(int value, Width width) {
      return private_write(static_cast<long>(value), width);
   }

   /**
    * Write an integer
    *
    * @param[in]  value Integer to print
    * @param[in]  radix Radix for conversion [2..16]
    *
    * @return Reference to self
    */
   FormattedIO &private_write(int value, Radix radix) {
      return private_write(static_cast<long>(value), radix);
   }

   /**
    * Write an integer
    *
    * @param[in]  value    Integer to print
    * @param[in]  format   Format for printing
    *
    * @return Reference to self
    */
   FormattedIO &private_write(int value, const IntegerFormat &format) {
      return private_write(static_cast<long>(value), format);
   }

   /**
    * Write an integer
    *
    * @param[in]  value Integer to print
    *
    * @return Reference to self
    */
   FormattedIO &private_write(int value) {
      return private_write(static_cast<long>(value), fIntegerFormat);
   }

   /**
    * Write an unsigned long integer
    *
    * @param[in]  value Unsigned long to print
    * @param[in]  width Width to use
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(const void *value, Width width) {
      return private_write(reinterpret_cast<unsigned long>(value), width);
   }

   /**
    * Write a long integer
    *
    * @param[in]  value Long to print
    * @param[in]  radix Radix for conversion [2..16]
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(const void * value, Radix radix) {
      return private_write(reinterpret_cast<unsigned long>(value), radix);
   }

   /**
    * Write an unsigned long integer
    *
    * @param[in]  value  Unsigned long to print
    * @param[in]  format How to format number
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(const void * value, const IntegerFormat &format) {
      return private_write(reinterpret_cast<unsigned long>(value), format);
   }

   /**
    * Write an pointer value
    *
    * @param[in]  value Pointer value to print
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(const void *value) {
      return private_write(reinterpret_cast<unsigned long>(value), Radix_16);
   }

#if 0
   /**
    * Write a double
    *
    * @param[in]  value Double to print
    *
    * @return Reference to self
    *
    * @note Uses snprintf() which is large.
    * @note To use this function it is necessary to enable floating point printing\n
    *       in the linker options (Support %f format in printf -u _print_float)).
    */
   FormattedIO &private_write(double value) {
      char buff[20];
      snprintf(buff, sizeof(buff), "%f", value);
      return private_write(buff);
   }
#else
   /**
    * Write a double - Limited to 3 decimal places
    *
    * @param[in]  value Double to print
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &private_write(double value, const FloatFormat &format) {
      char buff[20];
      if (isnan(value)) {
         return private_write("Nan");
      }
      bool isNegative = value<0;
      if (isNegative) {
         value = -value;
      }
      int exponent=0;
      auto x = value*format.fFloatPrecisionMultiplier;
      if (x>4294967295) {
         // Change to scientific notation
         // Scale down mantissa within range (otherwise overflows long)
         while (x>=format.fFloatPrecisionMultiplier*10) {
            exponent++;
            x /= 10;
         }
      }
      if ((x!=0) && (x<1)) {
         // Change to scientific notation
         while (x<=(format.fFloatPrecisionMultiplier/10.0)) {
            exponent--;
            x *= 10;
         }
      }
      auto y = round(x);
      unsigned long scaledValue = static_cast<unsigned long>(y);
      if (exponent != 0) {

      }

      ultoa(buff, scaledValue/format.fFloatPrecisionMultiplier, Radix_10, format.fPadding, int(format.fWidth), isNegative);
      if (int(format.fFloatPrecision)>0) {
         private_write(buff).private_write('.');
         ultoa(buff,
               (scaledValue)%int(format.fFloatPrecisionMultiplier),
               Radix_10, Padding_LeadingZeroes, int(format.fFloatPrecision));
      }
      private_write(buff);
      if (exponent != 0) {
         private_write("E").private_write(exponent);
      }
      return *this;
   }
#endif

   /**
    * Write a Double
    *
    * @param[in]  value Double to print
    *
    * @return Reference to self
    */
   FormattedIO &private_write(double value) {
      return private_write(value, fFloatFormat);
   }

   /**
    * Write a float
    *
    * @param[in]  value Float to print
    *
    * @return Reference to self
    */
   FormattedIO &private_write(float value, const FloatFormat &format) {
      return private_write(static_cast<double>(value), format);
   }

   /**
    * Write a float
    *
    * @param[in]  value Float to print
    *
    * @return Reference to self
    */
   FormattedIO &private_write(float value) {
      return private_write(static_cast<double>(value));
   }

   /**
    * Write a C string
    *
    * @param array
    * @return
    */
   template <size_t N>
   FormattedIO &private_write(const char (&array)[N]) {
      return private_write((const char*)array);
   }

   /**************************************************************************/

   /**
    * Write an unsigned long integer with newline
    *
    * @param[in]  value Value to print
    * @param[in]  width Width to use
    *
    * @return Reference to self
    */
   template<typename T>
   FormattedIO __attribute__((noinline)) &private_writeln(T value, Width width) {
      private_write(value, width);
      return private_writeln();
   }

   /**
    * Write an unsigned long integer with newline
    *
    * @param[in]  value Value to print
    * @param[in]  radix Radix for conversion [2..16]
    *
    * @return Reference to self
    */
   template<typename T>
   FormattedIO __attribute__((noinline)) &private_writeln(T value, Radix radix) {
      private_write(value, radix);
      return private_writeln();
   }

   /**
    * Write an unsigned long integer
    *
    * @param[in]  value Value to print
    * @param[in]  format How to format number
    *
    * @return Reference to self
    */
   template<typename T>
   FormattedIO __attribute__((noinline)) &private_writeln(T value, const IntegerFormat &format) {
      private_write(value, format);
      return private_writeln();
   }

   /**
    * Write an unsigned long integer with newline
    *
    * @param[in]  value Value to print
    *
    * @return Reference to self
    */
   template<typename T>
   FormattedIO &private_writeln(T value) {
      private_write(value);
      return private_writeln();
   }

   void convertToEngineeringNotation(double value, bool &isNegative, unsigned &mantissa, int &exponent) {
      isNegative = value<0;
      if (isNegative) {
         value = -value;
      }
      exponent = 0;
      mantissa = 0;
      if (value == 0) {
         return;
      }
      // Scale [1..999]
      while (value>=1000) {
         exponent += 3;
         value /= 1000;
      }
      while (value<1) {
         exponent -= 3;
         value *= 1000;
      }
      // Round - may push number out of [1..999]
      // Note: number is also scaled by precision
      mantissa = round(value*fFloatFormat.fFloatPrecisionMultiplier);

      // Check if nudged out of range
      if (mantissa>=(1000*fFloatFormat.fFloatPrecisionMultiplier)) {
         mantissa = round(mantissa/1000.0);
         exponent += 3;
      }
   }

   /**************************************************************************/

#if (USE_DIMENSION_CHECK)
   /**
    * Write a Seconds variable
    *
    * @param[in]  value Seconds to print
    *
    * @return Reference to self
    */
   FormattedIO &private_write(const Seconds value) {
      unsigned mantissa;
      int      exponent;
      bool     isNegative;

      convertToEngineeringNotation(value.getValue(), isNegative, mantissa, exponent);

      const char *units = " s";
      if (exponent<-6) {
         exponent += 9;
         units =  " ns";
      }
      else if (exponent<-3) {
         exponent += 6;
         units =  " us";
      }
      else if (exponent<0) {
         exponent += 3;
         units =  " ms";
      }
      private_write(mantissa/fFormat.fFloatPrecisionMultiplier);
      private_write('.');
      char buff[10];
      ultoa(buff, mantissa%fFormat.fFloatPrecisionMultiplier, Radix_10, Padding_LeadingZeroes, fFormat.fFloatPrecision);
      private_write(buff);

      if (exponent != 0) {
         private_write('E');
         private_write(exponent);
      }
      private_write(units);
      return *this;
   }

   /**
    * Write a Seconds variable
    *
    * @param[in]  value Seconds to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(const Seconds value) {
      return private_write(value);
   }

   /**
    * Write a Seconds variable with newline
    *
    * @param[in]  value Seconds to print
    *
    * @return Reference to self
    */
   FormattedIO &private_writeln(const Seconds value) {
      return private_write(value).private_writeln();
   }

   /**
    * Write a Ticks variable
    *
    * @param[in]  value Ticks to print
    *
    * @return Reference to self
    */
   FormattedIO &private_write(const Ticks value) {
      return private_write(value.getValue()).private_write(" ticks");
   }

   /**
    * Write a Ticks variable
    *
    * @param[in]  value Ticks to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(const Ticks value) {
      return private_write(value);
   }

   /**
    * Write a Ticks variable with newline
    *
    * @param[in]  value Ticks to print
    *
    * @return Reference to self
    */
   FormattedIO &private_writeln(const Ticks value) {
      return private_write(value).private_writeln();
   }

   /**
    * Write a Hertz variable
    *
    * @param[in]  value Hertz to print
    *
    * @return Reference to self
    */
   FormattedIO &private_write(const Hertz value) {
      unsigned mantissa;
      int      exponent;
      bool     isNegative;

      convertToEngineeringNotation(value.getValue(), isNegative, mantissa, exponent);

      const char *units = " Hz";
      if (exponent>=6) {
         exponent -= 6;
         units =  " MHz";
      }
      else if (exponent>=3) {
         exponent -= 3;
         units =  " kHz";
      }
      private_write(mantissa/fFormat.fFloatPrecisionMultiplier);
      private_write('.');
      char buff[10];
      ultoa(buff, mantissa%fFormat.fFloatPrecisionMultiplier, Radix_10, Padding_LeadingZeroes, fFormat.fFloatPrecision);
      private_write(buff);
      if (exponent != 0) {
         private_write('E');
         private_write(exponent);
      }
      private_write(units);
      return *this;
   }

   /**
    * Write a Hertz variable with newline
    *
    * @param[in]  value Hertz to print
    *
    * @return Reference to self
    */
   FormattedIO &private_writeln(const Hertz value) {
      return private_write(value).private_writeln();
   }

   /**
    * Write a Hertz variable
    *
    * @param[in]  value Hertz to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(const Hertz value) {
      return private_write(value);
   }
#endif

public:
   /**
    * Write a character
    *
    * @param[in]  ch Character to print
    *
    * @return Reference to self
     */
   FormattedIO &operator <<(char ch) {
      return private_write(ch);
   }

   /**
    * Write a boolean value
    *
    * @param[in]  b Boolean to print
    *
    * @return Reference to self
     */
   FormattedIO &operator <<(bool b) {
      return private_write(b);
   }

   /**
    * Write a C string
    *
    * @param[in]  str String to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(const char *str) {
      return private_write(str);
   }

   /**
    * Write an unsigned long integer
    *
    * @param[in]  value Unsigned long to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(unsigned long value) {
      return private_write(value, fIntegerFormat.fRadix);
   }

   /**
    * Write a long integer
    *
    * @param[in]  value Long to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(long value) {
      return private_write(value, fIntegerFormat.fRadix);
   }

   /**
    * Write an unsigned integer
    *
    * @param[in]  value Unsigned to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(unsigned int value) {
      return private_write(value, fIntegerFormat.fRadix);
   }

   /**
    * Write an integer
    *
    * @param[in]  value Integer to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(int value) {
      return private_write(value, fIntegerFormat.fRadix);
   }

   /**
    * Write a pointer value
    *
    * @param[in]  value Pointer value to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(const void *value) {
      return private_write(reinterpret_cast<unsigned long>(value), fIntegerFormat.fRadix);
   }

   /**
    * Write a float
    *
    * @param[in]  value Float to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(float value) {
      return private_write(static_cast<double>(value));
   }

   /**
    * Write a double
    *
    * @param[in]  value Double to print
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(double value) {
      return private_write(value);
   }

   /**
    * Sets the conversion radix for integer types
    *
    * @param[in] radix Radix to set
    *
    * @return Reference to self
    *
    * @note Only applies for operator<< methods
    */
   FormattedIO &operator <<(Radix radix) {
      fIntegerFormat.fRadix = radix;
      return *this;
   }

   /**
    * Write end-of-line
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(EndOfLineType) {
      return private_writeln();
   }

   /**
    * Enable/Disable echoing of input characters
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(EchoMode echoMode) {
      return setEcho(echoMode);
   }

   /**
    * Enable/Disable echoing of input characters
    *
    * @return Reference to self
    */
   FormattedIO &operator >>(EchoMode echoMode) {
      return setEcho(echoMode);
   }

   /**
    * Flush output data
    *
    * @return Reference to self
    */
   FormattedIO &operator <<(FlushType) {
      flushOutput();
      return *this;
   }

   /**
    * Null function (for debug)
    *
    * @return Reference to self
    */
   FormattedIO &null() {
      return *this;
   }

   /**
    * Discard white-space from the input
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &skipWhiteSpace() {
      int ch;
      do {
         ch = readChar();
      } while (isspace(ch));
      pushBack(ch);
      return *this;
   }

   /**
    * Discard input until end-of-line (inclusive)
    *
    * @return Reference to self
    */
   FormattedIO __attribute__((noinline)) &readln() {
      while (readChar() != '\n') {
         __asm__("nop");
      }
      return *this;
   }

   /**
    * Read a character from the input
    *
    * @param[out] ch Where to place character read
    *
    * @return Reference to self
    */
   FormattedIO &read(char &ch) {
      ch = readChar();
      return *this;
   }

   /**
    * Get and clear error state
    *
    * @return false No error
    * @return true  Operation failed since last checked e.g. illegal digit at start of number
    */
   bool __attribute__((noinline)) isError() {
      bool t = inErrorState;
      inErrorState = false;
      return t;
   }

   /**
    * Controls echoing of input characters
    *
    * @param echoMode
    *
    * @return Reference to self
    */
   FormattedIO &setEcho(EchoMode echoMode=EchoMode_On) {
      fEcho = echoMode;
      return *this;
   }

   /**
    * Receives an unsigned long
    *
    * @param[out] value Where to place value read
    * @param[in]  radix The radix to use
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO __attribute__((noinline)) &read(unsigned long &value, Radix radix) {
      // Skip white space
      int ch;
      do {
         ch = readChar();
      } while (isspace(ch));

      // Check if sign character
      bool negative = (ch == '-');
      if (negative) {
         // Discard  '-'
         ch = readChar();
      }

      // Parse number
      value = 0;
      int digitCount = 0;
      do {
         int digit = convertDigit(ch, radix);
         if (digit<0) {
            break;
         }
         digitCount++;
         value *= static_cast<unsigned>(radix);
         value += digit;
         ch = readChar();
      } while (true);

      // Must have at least 1 digit
      inErrorState = (digitCount<=0);

      // Push back 1st non-digit
      pushBack(ch);
      if (negative) {
         value = -value;
      }
      return *this;
   }
   /**
    * Receives an unsigned long
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &read(unsigned long &value) {
      return read(value, fIntegerFormat.fRadix);
   }

   /**
    * Receives an unsigned long and then discards characters until end of line.
    *
    * @param[out] value Where to place value read
    * @param[in]  radix The radix to use
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &readln(unsigned long &value, Radix radix) {
      read(value, radix);
      return readln();
   }
   /**
    * Receives an unsigned long and then discards characters until end of line.
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &readln(unsigned long &value) {
      return readln(value,fIntegerFormat.fRadix);
   }

   /**
    * Receives a long
    *
    * @param[out] value Where to place value read
    * @param[in]  radix The radix to use
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &read(long &value, Radix radix) {
      unsigned long temp;
      read(temp, radix);
      value = temp;
      return *this;
   }
   /**
    * Receives a long
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &read(long &value) {
      return read(value,fIntegerFormat.fRadix);
   }

   /**
    * Receives a long and then discards characters until end of line.
    *
    * @param[out] value Where to place value read
    * @param[in]  radix The radix to use
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &readln(long &value, Radix radix) {
      read(value, radix);
      return readln();
   }
   /**
    * Receives a long and then discards characters until end of line.
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &readln(long &value) {
      return readln(value, fIntegerFormat.fRadix);
   }

   /**
    * Receives an unsigned integer
    *
    * @param[out] value Where to place value read
    * @param[in]  radix The radix to use
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &read(unsigned int &value, Radix radix) {
      unsigned long temp;
      read(temp, radix);
      value = temp;
      return *this;
   }
   /**
    * Receives an unsigned integer
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &read(unsigned int &value) {
      return read(value, fIntegerFormat.fRadix);
   }

   /**
    * Receives an unsigned integer and then discards characters until end of line.
    *
    * @param[out] value Where to place value read
    * @param[in]  radix The radix to use
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &readln(unsigned &value, Radix radix) {
      read(value, radix);
      return readln();
   }
   /**
    * Receives an unsigned integer and then discards characters until end of line.
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &readln(unsigned &value) {
      return readln(value, fIntegerFormat.fRadix);
   }

   /**
    * Receives an integer
    *
    * @param[out] value Where to place value read
    * @param[in]  radix The radix to use
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &read(int &value, Radix radix) {
      long temp;
      read(temp, radix);
      value = temp;
      return *this;
   }
   /**
    * Receives an integer
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &read(int &value) {
      return read(value, fIntegerFormat.fRadix);
   }

   /**
    * Receives an integer and then discards characters until end of line.
    *
    * @param[out] value Where to place value read
    * @param[in]  radix The radix to use
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &readln(int &value, Radix radix) {
      read(value, radix);
      return readln();
   }
   /**
    * Receives an integer and then discards characters until end of line.
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &readln(int &value) {
      return readln(value, fIntegerFormat.fRadix);
   }

   /**
    * Discard white-space from the input
    *
    * @return Reference to self
    */
   FormattedIO &operator >>(WhiteSpaceType) {
      return skipWhiteSpace();
   }

   /**
    * Discard input until end-of-line
    *
    * @return Reference to self
    */
   FormattedIO &operator >>(EndOfLineType) {
      while (readChar() != '\n') {
         __asm__("nop");
      }
      return *this;
   }

   /**
    * Flush input data
    *
    * @return Reference to self
    */
   FormattedIO &operator >>(FlushType) {
      flushInput();
      return *this;
   }

   /**
    * Sets the conversion radix for integer types
    *
    * @param[in]  radix Radix to set
    *
    * @return Reference to self
    *
    * @note Only applies for operator<< methods
    */
   FormattedIO &operator >>(Radix radix) {
      fIntegerFormat.fRadix = radix;
      return *this;
   }

   /**
    * Receives a single character
    *
    * @param[out] ch Where to place character read
    *
    * @return Reference to self
    */
   FormattedIO &operator >>(char &ch) {
      ch = readChar();
      return *this;
   }

   /**
    * Receives an unsigned long
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &operator >>(unsigned long &value) {
      return read(value, fIntegerFormat.fRadix);
   }

   /**
    * Receives a long
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &operator >>(long &value) {
      return read(value, fIntegerFormat.fRadix);
   }

   /**
    * Receives an unsigned long
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &operator >>(unsigned int &value) {
      return read(value, fIntegerFormat.fRadix);
   }

   /**
    * Receives an integer
    *
    * @param[out] value Where to place value read
    *
    * @return Reference to self
    *
    * @note Skips leading whitespace
    */
   FormattedIO &operator >>(int &value) {
      return read(value, fIntegerFormat.fRadix);
   }

   /**
    * Get conversion radix for given base
    *
    * @param[in]  radix Base to convert to radix [2..16]
    *
    * @return Radix corresponding to base
    */
   static constexpr Radix radix(unsigned radix) {
      return static_cast<Radix>(radix);
   }

   /**
    * Create field width object
    *
    * @code
    * Uart0 myUart;
    * myUart<<Uart0::width(10)<<123;
    * @endcode
    *
    * @param[in]  width Integer to convert to width
    *
    * @return Width corresponding to width
    */
   static constexpr Width width(int width) {
      return static_cast<Width>(width);
   }

   /**
    * Set float printing format
    *
    * @param ioSettings    Setting to apply
    *
    * @return Reference to self
    */
   FormattedIO &operator<<(const FloatFormat &floatFormat) {
      fFloatFormat = floatFormat;
      return *this;
   }

   /**
    * Set integer printing format
    *
    * @param ioSettings    Setting to apply
    *
    * @return Reference to self
    */
   FormattedIO &operator<<(const IntegerFormat &integerFormat) {
      fIntegerFormat = integerFormat;
      return *this;
   }

   /**
    * Set width for integers
    *
    * @param[in] width
    *
    * @return Reference to self
    */
   FormattedIO &operator<<(Width width) {
      setWidth(width);
      return *this;
   }

   /**
    * Set padding for integers
    *
    * @param[in] padding
    *
    * @return Reference to self
    */
   FormattedIO &operator<<(Padding padding) {
      setPadding(padding);
      return *this;
   }

   /**
    * Write an integral array
    *
    * @param[in]  array Pointer to array to print
    * @param[in]  size  Number of elements in array
    * @param[in]  radix Radix for conversion
    *
    * @return Reference to self
    */
   template <typename T>
   FormattedIO &writeArray(const T array[], size_t size, Radix radix) {
      unsigned itemCount = 0;
      const char *prefix="";
      switch(radix) {
         case Radix_2:  prefix = "0b"; break;
         case Radix_8:  prefix = "0";  break;
         case Radix_16: prefix = "0x"; break;
         case Radix_10:                break;
         default:                      break;
      }
      private_write("{ ");
      for(unsigned index=0; index<size; index++) {
         if (itemCount>=10) {
            itemCount = 0;
            private_write("\n  ");
         }
         itemCount++;
         private_write(prefix);
         private_write(array[index], radix);
         private_write(", ");
      }
      private_write('}');
      return *this;
   }

   /**
    * Write an integral array with newline
    *
    * @param[in]  array Pointer to array to print
    * @param[in]  size  Number of elements in array
    * @param[in]  radix Radix for conversion
    *
    * @return Reference to self
    */
   template <typename T>
   __attribute__((always_inline))
   FormattedIO &writelnArray(const T array[], size_t size, Radix radix) {
      writeArray(array, size, radix);
      return private_writeln();
   }

   /**
    * Write an integral array
    *
    * @param[in]  array Reference to array to print
    * @param[in]  radix Radix for conversion
    *
    * @return Reference to self
    */
   template <typename T, size_t N>
   __attribute__((always_inline))
   FormattedIO &writeArray(const T (&array)[N], Radix radix) {
      return writeArray(array, N, radix);
   }

   /**
    * Write an integral array with newline
    *
    * @param[in]  array Reference to array to print
    * @param[in]  radix Radix for conversion
    *
    * @return Reference to self
    */
   template <typename T, size_t N>
   __attribute__((always_inline))
   FormattedIO &writelnArray(const T (&array)[N], Radix radix) {
      writeArray(array, N, radix);
      return private_writeln();
   }

   /**
    * Write an array
    *
    * @param[in]  array        Pointer to array to print
    * @param[in]  size         Number of elements in array
    *
    * @return Reference to self
    */
   template <typename T>
   FormattedIO &writeArray(const T array[], size_t size) {
      unsigned itemCount = 0;
      private_write("{ ");
      for(unsigned index=0; index<size; index++) {
         if (itemCount>=10) {
            itemCount = 0;
            private_write("\n  ");
         }
         itemCount++;
         private_write(array[index]);
         private_write(", ");
      }
      private_write('}');
      return *this;
   }

   /**
    * Write an array with newline
    *
    * @param[in]  array Pointer to array to print
    * @param[in]  size  Number of elements in array
    *
    * @return Reference to self
    */
   template <typename T>
   __attribute__((always_inline))
   FormattedIO &writelnArray(const T array[], size_t size) {
      writeArray(array, size);
      return private_writeln();
   }

   /**
    * Write an array
    *
    * @param[in]  array Reference to array to print
    *
    * @return Reference to self
    */
   template <typename T, size_t N>
   __attribute__((always_inline))
   FormattedIO &writeArray(const T (&array)[N]) {
      return writeArray(array, N);
   }

   /**
    * Write an array with newline
    *
    * @param[in]  array Reference to array to print
    *
    * @return Reference to self
    */
   template <typename T, size_t N>
   __attribute__((always_inline))
   FormattedIO &writelnArray(const T (&array)[N]) {
      return writelnArray(array, N);
   }

   /**
    * Print an array as a hex table.
    * The indexes shown are for byte offsets suitable for a memory dump.
    *
    * @param data          Array to print
    * @param size          Size of array in elements
    * @param visibleIndex The starting index to print for the array. Should be multiple of sizeof(data[]).
    */
   template <typename T>
   void writeArray(T *data, uint32_t size, uint32_t visibleIndex) {
      usbdm_assert((visibleIndex%sizeof(T))==0, "visibleIndex should be multiple of sizeof(data[])");
      unsigned rowMask;
      unsigned offset;

      switch(sizeof(T)) {
         case 1  :
            offset = (visibleIndex/sizeof(T))&0xF;
            visibleIndex &= ~0xF;
            rowMask = 0xF;  break;
         case 2  :
            offset = (visibleIndex/sizeof(T))&0x7;
            visibleIndex &= ~0xF;
            rowMask = 0x7; break;
         default :
            offset = (visibleIndex/sizeof(T))&0x7;
            visibleIndex &= ~0x1F;
            rowMask = 0x7; break;
      }
      setPadding(Padding_TrailingSpaces).setWidth(Width(2*sizeof(T)));
      private_write("          ");
      for (unsigned index=0; index<=(rowMask*sizeof(T)); index+=sizeof(T)) {
         private_write(index, Radix_16).private_write(" ");
      }
      private_writeln();
      setPadding(Padding_LeadingZeroes);
      bool needNewline = true;
      size += offset;
      for (unsigned index=0; index<size; index++) {
         if (needNewline) {
            setWidth(Width_8);
            private_write(visibleIndex+index*sizeof(T), Radix_16).private_write(": ");
         }
         if (index<offset) {
            switch(sizeof(T)) {
               case 1  : private_write("   ");       break;
               case 2  : private_write("     ");     break;
               default : private_write("         "); break;
            }
         }
         else {
            setWidth(Width(2*sizeof(T)));
            private_write(data[index-offset], Radix_16).private_write(" ");
         }
         needNewline = (((index+1)&rowMask)==0);
         if (needNewline) {
            private_writeln();
         }
      }
      private_writeln().resetIntegerFormat();
   }

   /**
    * Function to write a newline
    *
    * @tparam T      Type of value (inferred)
    * @param arg     Argument to write
    *
    * @return Reference to self
    */
   __attribute__((always_inline))
   FormattedIO &writeln() {
      return private_writeln();
   }

   /**
    * Recursive template function to write a value in given radix with following args and newline
    *
    * @tparam T      Type of value (inferred)
    * @tparam Args   Type of remaining args (inferred)
    * @param  arg    Argument to write
    * @param  radix  Radix to use
    * @param  args   Remaining args to write
    *
    * @return Reference to self
    */
   template<typename T, typename... Args>
   __attribute__((always_inline))
   FormattedIO &writeln(T arg, Radix radix, Args... args ) {
      private_write(arg, radix);
      return writeln(args...);
   }

   /**
    * Recursive template function to write a value in given radix with following args and newline
    *
    * @tparam T      Type of value (inferred)
    * @tparam Args   Type of remaining args (inferred)
    * @param  arg    Argument to write
    * @param  width  Width to use
    * @param  args   Remaining args to write
    *
    * @return Reference to self
    */
   template<typename T, typename... Args>
   __attribute__((always_inline))
   FormattedIO &writeln(T arg, Width width, Args... args ) {
      private_write(arg, width);
      return writeln(args...);
   }

   /**
    * Recursive template function to write a value in given radix with following args and newline
    *
    * @tparam T      Type of value (inferred)
    * @tparam Args   Type of remaining args (inferred)
    * @param  arg    Argument to write
    * @param  format Format for printing
    * @param  args   Remaining args to write
    *
    * @return Reference to self
    */
   template<typename T, typename... Args>
   __attribute__((always_inline))
   FormattedIO &writeln(T arg, const IntegerFormat &format, Args... args ) {
      private_write(arg, format);
      return writeln(args...);
   }

   /**
    * Recursive template function to write a value in given radix with following args and newline
    *
    * @tparam T      Type of value (inferred)
    * @tparam Args   Type of remaining args (inferred)
    * @param  arg    Argument to write
    * @param  format Format for printing
    * @param  args   Remaining args to write
    *
    * @return Reference to self
    */
   template<typename T, typename... Args>
   __attribute__((always_inline))
   FormattedIO &writeln(T arg, const FloatFormat &format, Args... args ) {
      private_write(arg, format);
      return writeln(args...);
   }

   /**
    * Recursive template function to write a value with following args and newline
    *
    * @tparam T      Type of value (inferred)
    * @tparam Args   Type of remaining args (inferred)
    * @param  arg    Argument to write
    * @param  args   Remaining args to write
    *
    * @return Reference to self
    */
   template<typename T, typename... Args>
   __attribute__((always_inline))
   FormattedIO &writeln(T arg, Args... args) {
      private_write(arg);
      return writeln(args...);
   }

   /**
    * Template function to write a value in given radix with following args
    *
    * @tparam T      Type of value (inferred)
    * @tparam Args   Type of remaining args (inferred)
    * @param  arg    Argument to write
    * @param  radix  Radix to use
    * @param  args   Remaining args to write
    *
    * @return Reference to self
    */
   template<typename T, typename... Args>
   __attribute__((always_inline))
   FormattedIO &write(T arg, Radix radix, Args... args ) {
      private_write(arg, radix);
      if constexpr(sizeof...(args) > 0) {
         return write(args...);
      }
      return *this;
   }

   /**
    * Template function to write a value in given radix with following args
    *
    * @tparam T      Type of value (inferred)
    * @tparam Args   Type of remaining args (inferred)
    * @param  arg    Argument to write
    * @param  width  Width to use
    * @param  args   Remaining args to write
    *
    * @return Reference to self
    */
   template<typename T, typename... Args>
   __attribute__((always_inline))
   FormattedIO &write(T arg, Width width, Args... args ) {
      private_write(arg, width);
      if constexpr(sizeof...(args) > 0) {
         return write(args...);
      }
      return *this;
   }

   /**
    * Template function to write a value in given radix with following args
    *
    * @tparam T      Type of value (inferred)
    * @tparam Args   Type of remaining args (inferred)
    * @param  arg    Argument to write
    * @param  format Format for printing
    * @param  args   Remaining args to write
    *
    * @return Reference to self
    */
   template<typename T, typename... Args>
   __attribute__((always_inline))
   FormattedIO &write(T arg, const IntegerFormat &format, Args... args ) {
      private_write(arg, format);
      if constexpr(sizeof...(args) > 0) {
         return write(args...);
      }
      return *this;
   }

   /**
    * Template function to write a value in given radix with following args
    *
    * @tparam T      Type of value (inferred)
    * @tparam Args   Type of remaining args (inferred)
    * @param  arg    Argument to write
    * @param  format Format for printing
    * @param  args   Remaining args to write
    *
    * @return Reference to self
    */
   template<typename T, typename... Args>
   __attribute__((always_inline))
   FormattedIO &write(T arg, const FloatFormat &format, Args... args ) {
      private_write(arg, format);
      if constexpr(sizeof...(args) > 0) {
         return write(args...);
      }
      return *this;
   }

   /**
    * Recursive template function to write a value with following args
    *
    * @tparam T      Type of value (inferred)
    * @tparam Args   Type of remaining args (inferred)
    * @param  arg    Argument to write
    * @param  args   Remaining args to write
    *
    * @return Reference to self
    */
   template<typename T, typename... Args>
   __attribute__((always_inline))
   FormattedIO &write(T arg, Args... args) {
      private_write(arg);
      if constexpr(sizeof...(args) > 0) {
         return write(args...);
      }
      return *this;
   }
};

/**
 * End FORMATTED_IO_Group
 * @}
 */

} // End namespace USBDM

#endif /* HEADER_FORMATTED_IO_H */
