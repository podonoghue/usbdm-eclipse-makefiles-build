/**
 * @file     sdhc.h (180.ARM_Peripherals/Project_Headers/sdhc.h)
 * @brief    Secured digital host controller
 *
 * @version  V4.12.1.230
 * @date     13 April 2016
 */

#ifndef HEADER_SDHC_H_
#define HEADER_SDHC_H_
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "derivative.h"
#include "pin_mapping.h"

namespace USBDM {

/**
 * @addtogroup SDHC_Group SDHC, Secured digital host controller
 * @brief Abstraction for USB Secured digital host controller
 * @{
 */

/**
 * Type definition for SDHC interrupt call back
 */
typedef void (*SDHCCallbackFunction)();

/**
 * Template class representing the Secured digital host controller
 *
 * @tparam info      Information class for SDHC
 */
template<class Info>
class SdhcBase_T {

protected:
   /**
    * Callback to catch unhandled interrupt
    */
   static void unhandledCallback() {
      setAndCheckErrorCode(E_NO_HANDLER);
   }

   /** Callback function for ISR */
   static SDHCCallbackFunction callback;

public:
   /**
    * Hardware instance pointer.
    *
    * @return Reference to SDHC hardware
    */
   static __attribute__((always_inline)) volatile SDHC_Type &sdhc() { return Info::sdhc(); }

   /**
    * IRQ handler
    */
   static void irqHandler() {
      // Call handler
      callback();
   }

   /**
    * Set callback function.
    *
    * @param[in]  theCallback Callback function to execute on interrupt
    *
    * @note It is expected that the callback will clear the status flag that triggered the interrupt. See getStatus().
    */
   static void setCallback(SDHCCallbackFunction theCallback) {
      if (theCallback == nullptr) {
         theCallback = unhandledCallback;
      }
      callback = theCallback;
   }

public:

   /**
    * Basic enable SDHC.
    */
   static void enable() {

      // Enable clock to CMP interface
      Info::enableClock();
   }

   /**
    * Enable with default settings.
    * Includes configuring all pins
    */
   static void defaultConfigure() {
      enable();
   }

   /**
    * Disable interface to SDHC
    */
   static void disable() {
      Info::disableClock();
   }

   /**
    * Enable interrupts in NVIC
    */
   static void enableNvicInterrupts() {
      NVIC_EnableIRQ(Info::irqNums[0]);
   }

   /**
    * Enable and set priority of interrupts in NVIC
    * Any pending NVIC interrupts are first cleared.
    *
    * @param[in]  nvicPriority  Interrupt priority
    */
   static void enableNvicInterrupts(NvicPriority nvicPriority) {
      enableNvicInterrupt(Info::irqNums[0], nvicPriority);
   }

   /**
    * Disable interrupts in NVIC
    */
   static void disableNvicInterrupts() {
      NVIC_DisableIRQ(Info::irqNums[0]);
   }

};

template<class Info> SDHCCallbackFunction SdhcBase_T<Info>::callback = SdhcBase_T<Info>::unhandledCallback;

#if defined(USBDM_SDHC0_IS_DEFINED)
class Sdhc0 : public SdhcBase_T<Sdhc0Info> {};
$(/SDHC0/Declarations:   // No declarations Found)
#endif

/**
 * End SDHC_Group
 * @}
 */
} // End namespace USBDM

#endif /* HEADER_SDHC_H_ */
