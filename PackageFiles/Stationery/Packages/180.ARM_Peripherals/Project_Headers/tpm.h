/**
 * @file     tpm.h (180.ARM_Peripherals/Project_Headers/tpm.h)
 * @brief    Flexitimer Timer Module
 *
 * @version  V4.12.1.80
 * @date     13 April 2016
 *      Author: podonoghue
 */
#ifndef HEADER_TPM_H
#define HEADER_TPM_H

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include <stddef.h>
#include <cmath>
#include "pin_mapping.h"

/*
 * Default port information
 */
namespace USBDM {

/**
 * @addtogroup TPM_Group TPM, PWM, Input capture and Output compare
 * @brief Pins used for PWM, Input capture and Output compare
 * @{
 */

/**
 * Controls basic operation of PWM/Input capture/Output compare
 */
enum TpmChMode {
   TpmChMode_Disabled                = TPM_CnSC_MS(0)|TPM_CnSC_ELS(0), //!< Channel disabled
   TpmChMode_InputCaptureRisingEdge  = TPM_CnSC_MS(0)|TPM_CnSC_ELS(1), //!< Capture rising edge
   TpmChMode_InputCaptureFallingEdge = TPM_CnSC_MS(0)|TPM_CnSC_ELS(2), //!< Capture falling edge
   TpmChMode_InputCaptureEitherEdge  = TPM_CnSC_MS(0)|TPM_CnSC_ELS(3), //!< Capture both rising and falling edges
   TpmChMode_OutputCompare           = TPM_CnSC_MS(1),                 //!< Output compare operation without pin action
   TpmChMode_OutputCompareToggle     = TPM_CnSC_MS(1)|TPM_CnSC_ELS(1), //!< Toggle pin on output compare
   TpmChMode_OutputCompareClear      = TPM_CnSC_MS(1)|TPM_CnSC_ELS(2), //!< Clear pin on output compare
   TpmChMode_OutputCompareSet        = TPM_CnSC_MS(1)|TPM_CnSC_ELS(3), //!< Set pin on output compare
   TpmChMode_PwmHighTruePulses       = TPM_CnSC_MS(2)|TPM_CnSC_ELS(2), //!< PWM with high-true pulses
   TpmChMode_PwmLowTruePulses        = TPM_CnSC_MS(2)|TPM_CnSC_ELS(1), //!< PWM with low-true pulses
};

/*
 * Enabled Timer interrupt or DMA
 */
enum TpmChannelAction {
   TpmChannelAction_None   = TPM_CnSC_CHIE(0), //!< No action on event
   TpmChannelAction_Irq    = TPM_CnSC_CHIE(1), //!< Interrupt on event
#ifdef TPM_CnSC_DMA
   TpmChannelAction_Dma    = TPM_CnSC_CHIE(1)|TPM_CnSC_DMA(1), //!< DMA on event
#endif
};


/**
 * Type definition for timer overflow interrupt call back
 */
typedef void (*TpmCallbackFunction)();
/**
 * Type definition for channel interrupt call back
 *
 * @param[in] status Flags indicating interrupt source channel(s)
 */
typedef void (*TpmChannelCallbackFunction)(uint8_t status);

/**
 * Provides shared methods.
 */
class TpmBase {

private:
   TpmBase(const TpmBase&) = delete;
   TpmBase(TpmBase&&) = delete;

public:

   /** Class to static check channel exists - it does not check that it is mapped to a pin */
   template<class Info, int channel> class CheckChannel {
      // Tests are chained so only a single assertion can fail so as to reduce noise

      // Out of bounds value for function index
      static constexpr bool Test1 = (channel>=0) && (channel<(Info::numSignals));
      // Non-existent function
      static constexpr bool Test2 = !Test1 || (Info::info[channel].gpioBit != INVALID_PCR);

      static_assert(Test1, "Illegal TPM channel - Check Configure.usbdm for available channels");
      static_assert(Test2, "TPM channel doesn't exist in this device/package - Check Configure.usbdm for available channels");

   public:
      /** Dummy function to allow convenient in-line checking */
      static constexpr void check() {}
   };

   /** Class to static check channel exists and is mapped to a pin */
   template<class Info, int channel> class CheckChannelExistsAndMapped {
      // Tests are chained so only a single assertion can fail so as to reduce noise

      // Out of bounds value for function index
      static constexpr bool Test1 = (channel>=0) && (channel<(Info::numSignals));
      // Function is not currently mapped to a pin
      static constexpr bool Test2 = !Test1 || (Info::info[channel].gpioBit != UNMAPPED_PCR);
      // Non-existent function and catch-all. (should be INVALID_PCR)
      static constexpr bool Test3 = !Test1 || !Test2 || (Info::info[channel].gpioBit >= 0);

      static_assert(Test1, "Illegal TPM channel - Check Configure.usbdm for available inputs");
      static_assert(Test2, "TPM input is not mapped to a pin - Modify Configure.usbdm");
      static_assert(Test3, "TPM channel doesn't exist in this device/package - Check Configure.usbdm for available input pins");

   public:
      /** Dummy function to allow convenient in-line checking */
      static constexpr void check() {}
   };

   /** Class to static check channel is mapped to a pin - Ignores non-existence etc. */
   template<class Info, int channel> class CheckChannelIsMappedToPinOnly {

      // Out of bounds value for function index
      static constexpr bool Test1 = (channel>=0) && (channel<(Info::numSignals));
      // Function is not currently mapped to a pin
      static constexpr bool Test2 = !Test1 || (Info::info[channel].gpioBit != UNMAPPED_PCR);

      static_assert(Test2, "TPM channel is not mapped to a pin - Modify Configure.usbdm");

   public:
      /** Dummy function to allow convenient in-line checking */
      static constexpr void check() {}
   };

protected:
   // Constructor
   constexpr TpmBase(uint32_t baseAddress) : tpm(baseAddress) {};
   ~TpmBase() = default;

   /** Allow access owning TPM */
   const HardwarePtr<TPM_Type> tpm;

   /**
    * Limit index to permitted pin index range
    * Used to prevent noise from static assertion checks that detect a condition already detected in a more useful fashion.
    *
    * @tparam Inf    Associated info table
    * @param index   Index to limit
    *
    * @return Index limited to permitted range
    */
   template <class Inf>
   static inline constexpr int limitIndex(int index) {
      if (index<0) {
         return 0;
      }
      if (index>(Inf::numSignals-1)) {
         return Inf::numSignals-1;
      }
      return index;
   }

   /**
    * Callback to catch unhandled interrupt
    *
    * @param mask Mask identifying channel
    */
   static void unhandledChannelCallback(uint8_t mask) {
      (void)mask;
      setAndCheckErrorCode(E_NO_HANDLER);
   }
   /**
    * Callback to catch unhandled interrupt
    */
   static void unhandledCallback() {
      setAndCheckErrorCode(E_NO_HANDLER);
   }

   /**
    * Get Timer input frequency.
    *
    * @return Clock frequency in Hz
    */
   virtual float getInputClockFrequencyVirtual() const = 0;

public:
   /**
    * Structure for TPM channel.
    */
   struct TpmChannelRegs {
      __IO uint32_t  CnSC; /**< 000C: Channel  Status and Control */
      __IO uint32_t  CnV;  /**< 0010: Channel  Value              */
   };

$(/TPM/non_static_functions:  // /TPM/non_static_functions not found)
   /**
    * Set period.
    *
    * @param[in] period   Period in ticks (<65535)
    * @param[in] suspend  Whether to suspend timer during change.
    *
    * @return E_NO_ERROR       Success
    * @return E_TOO_LARGE      Requested period is too large
    *
    * @note Prescaler is not affected.
    * @note Assumes prescale has been set to an appropriate value.
    * @note Only rudimentary range checking.
    * @note This function will affect all channels of the timer.
    * @note This value is write-buffered and updated by MOD synchronisation
    *       unless suspend is true.
    */
   ErrorCode setPeriod(Ticks period, bool suspend=false) const {

      // Check if CPWMS is set (affects period)
      bool centreAlign = (tpm->SC&TPM_SC_CPWMS_MASK);

      if (centreAlign) {
         // Centre-aligned period is 2*MOD value but MOD is
         // limited to 0x7FFF for sensible PWM operation

         // Halve with rounding
         period = (period+1_ticks)/2U;
         if ((unsigned)period > 0x7FFFUL) {
            // Attempt to set too long a period
            usbdm_assert(false, "Interval is too long");
            return setErrorCode(E_TOO_LARGE);
         }
      }
      else {
         // Left-aligned period is MOD+1 value
         period = period-1_ticks;
         if ((unsigned)period > 0xFFFF) {
            // Attempt to set too long a period
            usbdm_assert(false, "Interval is too long");
            return setErrorCode(E_TOO_LARGE);
         }
      }
      uint32_t sc;
      if (suspend) {
         sc = tpm->SC;
         tpm->SC = 0;
      }
      // Change modulo
      tpm->MOD = (unsigned)period;

      if (suspend) {
         // Restart timer
         tpm->SC = sc;
      }
      // OK period
      return E_NO_ERROR;
   }

   /**
    * Calculate TPM timing parameters to achieve a given period
    *
    * @param period           Period in seconds
    * @param pPrescalerValue  Calculated prescaler value (for SC register)
    * @param pPeriodInTicks   Calculated period in ticks.
    *
    * @return E_NO_ERROR   Success.
    * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
    * @return E_TOO_LARGE  Requested period is too large.
    */
   ErrorCode calculateTimingParameters(Seconds period, unsigned &pPrescalerValue, Ticks &pPeriodInTicks) const {
      float inputClock = getInputClockFrequencyVirtual();
      unsigned prescaleFactor=1;
      unsigned prescalerValue=0;

      // Maximum period value in ticks
      uint32_t maxPeriodInTicks = 65536;

      // Check if CPWMS is set (affects period calculation)
      if (tpm->SC&TPM_SC_CPWMS_MASK) {
         // Centre-aligned period is ~double the MOD value but MOD is
         // limited to 0x7FFF for sensible PWM operation so
         // period in ticks is limited to 2*0x7FFF
         maxPeriodInTicks = 65534;
      }
      while (prescalerValue<=7) {
         float    clock = inputClock/prescaleFactor;
         uint32_t periodInTicks   = round((float)period*clock);
         if (periodInTicks <= 10) {
            usbdm_assert(false, "Interval is too short");
            // Too short a period for minimum resolution
            return setErrorCode(E_TOO_SMALL);
         }
         if (periodInTicks <= maxPeriodInTicks) {
            pPrescalerValue = prescalerValue;
            pPeriodInTicks  = periodInTicks;
            return E_NO_ERROR;
         }
         prescalerValue++;
         prescaleFactor <<= 1;
      }
      // Too long a period
      usbdm_assert(false, "Interval is too long");
      return setErrorCode(E_TOO_LARGE);
   }

   /**
    * Set period
    *
    * @param[in] period   Period in seconds as a float
    *
    * @return E_NO_ERROR  => success
    * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
    * @return E_TOO_LARGE  Requested period is too large.
    *
    * @note This function will affect all channels of the timer.
    * @note Adjusts Timer pre-scaler to appropriate value.
    * @note The counter modulo value (MOD) is modified to obtain the requested period
    * @note The Timer is stopped while being modified.
    * @note The Timer counter is restarted from zero
    */
   ErrorCode setPeriod(Seconds period) const {

      unsigned prescalerValue = 0;
      Ticks    periodInTicks;
      ErrorCode rc = calculateTimingParameters(period, prescalerValue, periodInTicks);

      if (rc != E_NO_ERROR) {
         return rc;
      }
      // Disable timer to change prescaler and period
      uint32_t sc = tpm->SC;
      tpm->SC = 0;
      (void)tpm->SC;
      setPeriod(periodInTicks, false);

      // Restart counter
      tpm->CNT   = 0;

      tpm->SC  = (sc&~TPM_SC_PS_MASK)|TPM_SC_PS(prescalerValue);

      return E_NO_ERROR;
   }

   /**
    * Set maximum interval for input-capture or output compare.
    * Input Capture and Output Compare will be able to operate over
    * at least this period without overflow.
    *
    * @param[in] interval Interval in seconds as a float
    *
    * @return E_NO_ERROR  => success
    * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
    * @return E_TOO_LARGE  Requested period is too large.
    *
    * @note This function will affect all channels of the timer.
    * @note Adjusts Timer pre-scaler to appropriate value.
    * @note Counter is configured for free-running mode i.e. 0-65535
    * @note The Timer is stopped while being modified.
    * @note The Timer counter is restarted from zero
    */
   ErrorCode setMaximumInterval(Seconds interval) const {

      unsigned prescalerValue;
      Ticks    periodInTicks;
      ErrorCode rc = calculateTimingParameters(interval, prescalerValue, periodInTicks);

      if (rc != E_NO_ERROR) {
         return rc;
      }
      // Disable timer to change prescaler and period
      uint32_t sc = tpm->SC;
      tpm->SC = 0;
      (void)tpm->SC;

      // Configure for free-running mode
      // This is the usual value for IC or OC set-up
      tpm->MOD = 0;

      // Restart counter
      tpm->CNT   = 0;

      tpm->SC  = (sc&~TPM_SC_PS_MASK)|TPM_SC_PS(prescalerValue);

      return E_NO_ERROR;
   }

   /**
    * Get frequency of timer tick
    *
    * @return Timer frequency in Hz
    */
   float getTickFrequencyAsFloat() const {

      // Calculate timer prescale factor
      int prescaleFactor = 1<<((tpm->SC&TPM_SC_PS_MASK)>>TPM_SC_PS_SHIFT);

      return static_cast<float>(getInputClockFrequencyVirtual())/prescaleFactor;
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   uint32_t getTickFrequencyAsInt() const {

      // Calculate timer prescale factor
      int prescaleFactor = 1<<((tpm->SC&TPM_SC_PS_MASK)>>TPM_SC_PS_SHIFT);

      return getInputClockFrequencyVirtual()/prescaleFactor;
   }

   /**
    * Set approximate frequency of timer tick
    *
    * @param[in] frequency Frequency as a float
    * @param[in] tolerance Tolerance in percent
    *
    * @return E_NO_ERROR       Success
    * @return E_ILLEGAL_PARAM  Failed to find suitable pre-scaler values
    *
    * @note Adjusts Timer pre-scaler to appropriate value.
    * @note This function will affect all channels of the timer.
    */
   ErrorCode setTickFrequency(float frequency, float tolerance) const {
      float inputClockFrequency = getInputClockFrequencyVirtual();

      int prescaleFactor=1;
      int prescalerValue=0;
      while (prescalerValue<=7) {
         float tickFrequency = inputClockFrequency/prescaleFactor;

         if ((100*std::abs((tickFrequency/frequency)-1)) < tolerance) {
            // Clear SC so immediate effect on prescale change
            uint32_t sc = tpm->SC&~TPM_SC_PS_MASK;
            tpm->SC = 0;
            (void)tpm->SC;
            tpm->SC = sc|TPM_SC_PS(prescalerValue);
            return E_NO_ERROR;
         }
         prescalerValue++;
         prescaleFactor <<= 1;
      }
      // Too long a period
      return setErrorCode(E_ILLEGAL_PARAM);
   }

   /**
    * Convert time in microseconds to time in ticks
    *
    * @param[in] time Time in microseconds
    *
    * @return Time in ticks
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    * @note Will set error code if calculated value is less the Timer minimum resolution
    */
   Ticks convertMicrosecondsToTicks(int time) const {

      // Calculate period
      uint32_t tickRate = getTickFrequencyAsInt();
      uint64_t rv       = (static_cast<uint64_t>(time)*tickRate)/1000000;
      usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv == 0) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
      return Ticks((unsigned)rv);
   }

   /**
    * Converts time in seconds to time in ticks
    *
    * @param[in] seconds Time interval in seconds
    *
    * @return Time in ticks
    *
    * @note Assumes prescale has been chosen as a appropriate value (see setMaximumInterval()). \n
    * @note Will set error code if calculated value is less the minimum resolution
    */
   Ticks convertSecondsToTicks(Seconds seconds) const {

      // Calculate period
      float    tickRate = getTickFrequencyAsFloat();
      uint64_t rv       = rintf((float)seconds*tickRate);
      usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv == 0) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
      return Ticks((unsigned)rv);
   }

   /**
    * Convert time in ticks to time in microseconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in microseconds
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    */
   uint32_t convertTicksToMicroseconds(Ticks timeInTicks) const {

      // Calculate period
      uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000000)/getTickFrequencyAsInt();
#ifdef DEBUG_BUILD
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv == 0) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
#endif
      return rv;
   }

   /**
    * Convert time in ticks to time in milliseconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in milliseconds
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    */
   uint32_t convertTicksToMilliseconds(Ticks timeInTicks) const {

      // Calculate period
      uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000)/getTickFrequencyAsInt();
#ifdef DEBUG_BUILD
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv == 0) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
#endif
      return rv;
   }

   /**
    * Convert time in ticks to time in seconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in seconds
    */
   Seconds convertTicksToSeconds(Ticks timeInTicks) {
      return (unsigned)timeInTicks/getTickFrequencyAsFloat();
   }

   /**
    * Get Timer count
    *
    * @return Timer count value
    */
   Ticks getTime() {
      return Ticks((unsigned)(tpm->CNT));
   }

   /**
    * Reset counter to initial value
    */
   void resetTime() const {
      // Note: writing ANY value loads CNT from CNTIN
      tpm->CNT = 0;
   }

   /**
    * Get timer event flags
    *
    * @return Flags indicating if an event has occurred on a channel
    *         There is one bit for each channel
    */
   unsigned getInterruptFlags() const {
      return tpm->STATUS;
   }

   /**
    * Clear selected timer event flags
    *
    * @param channelMask Mask indicating which channel flags to clear
    *                    There is one bit for each channel
	*
	* @note Flags will not be cleared if the channel is configured for DMA
    */
   void clearSelectedInterruptFlags(uint32_t channelMask) const {
      (void)tpm->STATUS;
      tpm->STATUS = ~channelMask;
   }

   /**
    * Get and clear timer event flags
    *
    * @return Flags indicating if an event has occurred on a channel
    *         There is one bit for each channel
    *
    * @note Only flags captured in the return value are cleared
	* @note Flags will not be cleared if the channel is configured for DMA
    */
   unsigned getAndClearInterruptFlags() const {
      // Note requires read and write zero to clear flags
      // so only flags captured in status are cleared
      unsigned status = tpm->STATUS;
      tpm->STATUS = ~status;
      return status;
   }

   /**
    * Enable/disable Timer Overflow interrupts
    */
   void enableTimerOverflowInterrupts() const {
      tpm->SC = tpm->SC | TPM_SC_TOIE_MASK;
   }

   /**
    * Disable Timer Overflow interrupts
    */
   void disableTimerOverflowInterrupts() const {
      tpm->SC = tpm->SC & ~TPM_SC_TOIE_MASK;
   }

   /**
    * Set PWM duty cycle.
    * Higher precision float version
    *
    * @param[in] dutyCycle  Duty-cycle as percentage (float)
    * @param[in] channel    Timer channel
    *
    * @note The actual CnV register update may be delayed by the register synchronisation mechanism
    */
   void setDutyCycle(float dutyCycle, int channel) const {
      if (tpm->SC&TPM_SC_CPWMS_MASK) {
         tpm->CONTROLS[channel].CnV  = round((dutyCycle*tpm->MOD)/100.0f);
      }
      else {
         tpm->CONTROLS[channel].CnV  = round((dutyCycle*(tpm->MOD+1))/100.0f);
      }
   }

   /**
    * Set PWM duty cycle
    *
    * @param[in] dutyCycle  Duty-cycle as percentage
    * @param[in] channel    Timer channel
    *
    * @note The actual CnV register update may be delayed by the register synchronisation mechanism
    */
   void setDutyCycle(int dutyCycle, int channel) const {
      if (tpm->SC&TPM_SC_CPWMS_MASK) {
         tpm->CONTROLS[channel].CnV  = (dutyCycle*tpm->MOD)/100;
      }
      else {
         tpm->CONTROLS[channel].CnV  = (dutyCycle*(tpm->MOD+1))/100;
      }
   }

   /**
    * Set PWM high time in ticks
    * Assumes value is less than period
    *
    * @param[in] highTime   PWM high time in ticks
    * @param[in] channel    Timer channel
    *
    * @return E_NO_ERROR on success
    * @return E_TOO_LARGE on success
    *
    * @note The actual CnV register update may be delayed by the register synchronisation mechanism
    */
   ErrorCode setHighTime(Ticks highTime, int channel) const {

      if (tpm->SC&TPM_SC_CPWMS_MASK) {
         // In CPWM the pulse width is doubled
         highTime = (highTime+1_ticks)/2U;
      }
#ifdef DEBUG_BUILD
      if ((unsigned)highTime > tpm->MOD) {
         return setErrorCode(E_TOO_LARGE);
      }
#endif
      tpm->CONTROLS[channel].CnV  = (unsigned)highTime;
      return E_NO_ERROR;
   }
};

class TpmChannel : public TpmBase {

private:
   TpmChannel(const TpmChannel&) = delete;
   TpmChannel(TpmChannel&&) = delete;

protected:
   // Empty constructor
   constexpr TpmChannel(uint32_t baseAddress, unsigned channelNum) :
   TpmBase(baseAddress),
   channelRegs((uint32_t)(tpm->CONTROLS+channelNum)),
   CHANNEL(channelNum),
   CHANNEL_MASK(1<<channelNum) {
   }
   ~TpmChannel() = default;

public:
   /** Allow access to TPM channel registers */
   const HardwarePtr<TpmBase::TpmChannelRegs> channelRegs;

   /** Timer channel number */
   const unsigned CHANNEL;

   /** Mask for Timer channel */
   const uint32_t CHANNEL_MASK;

   /**
    * Configure channel.
    * Doesn't affect shared settings of owning Timer
    *
    * @param[in] tpmChMode         Mode of operation for channel
    * @param[in] tpmChannelAction  Whether to enable the interrupt or DMA function on this channel
    *
    * @note This method has the side-effect of clearing the register update synchronisation i.e.
    *       pending CnV register updates are discarded.
    */
   void configure(
         TpmChMode         tpmChMode,
         TpmChannelAction  tpmChannelAction = TpmChannelAction_None) const {

      tpm->CONTROLS[CHANNEL].CnSC = tpmChMode|tpmChannelAction;
   }

   /**
    * Disables timer channel (sets mode to TpmChMode_Disabled)
    */
   void disable() const {
      setMode(TpmChMode_Disabled);
   }

   /**
    * Get channel mode.
    *
    * @return Current mode of operation for the channel
    */
   TpmChMode getMode() const {
      return (TpmChMode)(tpm->CONTROLS[CHANNEL].CnSC &
            (TPM_CnSC_MSA_MASK|TPM_CnSC_ELS_MASK));
   }

   /**
    * Set channel mode
    *
    * @param[in] tpmChMode      Mode of operation for channel
    *
    * @note This method has the side-effect of clearing the register update synchronisation i.e.
    *       pending CnV register updates are discarded.
    */
   void setMode(TpmChMode tpmChMode) const {
      tpm->CONTROLS[CHANNEL].CnSC =
            (tpm->CONTROLS[CHANNEL].CnSC & ~(TPM_CnSC_MSA_MASK|TPM_CnSC_ELS_MASK))|
            tpmChMode;
   }

   /**
    * Set channel action on event.
    *
    * @param[in] tpmChannelAction      Action to take on channel event (DMA or Interrupt)
    *
    * @note This method has the side-effect of clearing the register update synchronisation i.e.
    *       pending CnV register updates are discarded.
    */
   void setAction(TpmChannelAction tpmChannelAction) const {
#if !defined(TPM_CnSC_DMA_MASK)
      static constexpr uint32_t TPM_CnSC_DMA_MASK = 0;
#endif
      tpm->CONTROLS[CHANNEL].CnSC =
            (tpm->CONTROLS[CHANNEL].CnSC & ~(TPM_CnSC_CHIE_MASK|TPM_CnSC_DMA_MASK))|
            tpmChannelAction;
   }

   /**
    * Set PWM high time in ticks.
    * Assumes value is less than period
    *
    * @param[in] highTime   PWM high time in ticks
    *
    * @return E_NO_ERROR on success
    *
    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
    */
   ErrorCode setHighTime(Ticks highTime) const {
      return TpmBase::setHighTime(highTime, CHANNEL);
   }

   /**
    * Set PWM high time in seconds.
    * Higher precision float version
    *
    * @param[in] highTime   PWM high time in seconds
    *
    * @return E_NO_ERROR on success
    *
    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
    */
   ErrorCode setHighTime(Seconds highTime) const {
      return TpmBase::setHighTime(convertSecondsToTicks(highTime), CHANNEL);
   }
   /**
    * Set PWM duty cycle.
    *
    * @param[in] dutyCycle  Duty-cycle as percentage
    *
    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
    */
   void setDutyCycle(int dutyCycle) const {
      TpmBase::setDutyCycle(dutyCycle, CHANNEL);
   }

   /**
    * Set PWM duty cycle
    *
    * @param[in] dutyCycle  Duty-cycle as percentage
    *
    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
    */
   void setDutyCycle(float dutyCycle) const {
      TpmBase::setDutyCycle(dutyCycle, CHANNEL);
   }

   /**
    * Set Timer event time.
    *
    * @param[in] offset  Event time in ticks relative to current event time (i.e. Timer channel CnV value)
    *
    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
    */
   void setDeltaEventTime(Ticks offset) {
      tpm->CONTROLS[CHANNEL].CnV = tpm->CONTROLS[CHANNEL].CnV + (unsigned)offset;
   }

   /**
    * Set Timer event time relative to current timer count value.
    *
    * @param[in] offset  Event time in ticks relative to current time (i.e. Timer CNT value)
    *
    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
    */
   void setRelativeEventTime(Ticks offset) const {
      tpm->CONTROLS[CHANNEL].CnV = tpm->CNT + (unsigned)offset;
   }

   /**
    * Set Absolute Timer event time.
    *
    * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
    *
    * @note The actual CnV register update will be delayed by the register synchronisation mechanism
    */
   void setEventTime(Ticks eventTime) const {
      tpm->CONTROLS[CHANNEL].CnV = (unsigned)eventTime;
   }

   /**
    * Get Absolute Timer event time.
    *
    * @return Absolute time of last event in ticks i.e. value from timer event register
    */
   Ticks getEventTime() const {
      return (unsigned)(tpm->CONTROLS[CHANNEL].CnV);
   }

   /**
    * Get Timer interrupt/event flag.
    *
    * @return true  Indicates an event has occurred on a channel
    * @return false Indicates no event has occurred on a channel since last polled
    */
   bool getInterruptFlag() const {
      return (tpm->STATUS&CHANNEL_MASK) != 0;
   }

   /**
    * Get and Clear Timer channel interrupt flag.
    *
    * @return true  Indicates an event has occurred on a channel
    * @return false Indicates no event has occurred on a channel since last polled
    *
    * @note Only flags captured in the return value are cleared
    */
   bool getAndClearInterruptFlag() const {
      // Note - requires read and write zero to clear flags
      // so only flags captured in status are cleared
      bool status = (tpm->STATUS&CHANNEL_MASK) != 0;
      tpm->STATUS = ~CHANNEL_MASK;
      return status;
   }

   /**
    * Clear interrupt flag on channel.
    */
   void clearInterruptFlag() const {
      // Note - requires read and write zero to clear flag
      tpm->CONTROLS[CHANNEL].CnSC = tpm->CONTROLS[CHANNEL].CnSC &  ~TPM_CnSC_CHF_MASK;
   }

};

/**
 * Base class representing a TPM.
 *
 *
 * @tparam Info  Class describing TPM hardware instance
 */
template<class Info>
class TpmBase_T : public TpmBase, public Info {

private:
   /**
    * This class is not intended to be instantiated
    */
   TpmBase_T(const TpmBase_T&) = delete;
   TpmBase_T(TpmBase_T&&) = delete;

public:

   // Empty constructor
   constexpr TpmBase_T() : TpmBase(Info::baseAddress) {}
   virtual ~TpmBase_T() = default;

   /** Maximum counter value in ticks */
   static constexpr Ticks MaximumPeriodInTicks = 65535_ticks;

   /** Get pointer to TPM hardware as struct */
   static constexpr HardwarePtr<TPM_Type> tpm = Info::baseAddress;

   /** @return Base address of TPM hardware as uint32_t */
   static constexpr uint32_t tpmBase() { return Info::baseAddress; }
   /** @return Base address of TPM.SC register as uint32_t */
   static constexpr uint32_t tpmSC() { return tpmBase() + offsetof(TPM_Type, SC); }
   /** @return Base address of TPM.CNT register as uint32_t */
   static constexpr uint32_t tpmCNT() { return tpmBase() + offsetof(TPM_Type, CNT); }
   /** @return Base address of TPM.MOD register as uint32_t */
   static constexpr uint32_t tpmMOD() { return tpmBase() + offsetof(TPM_Type, MOD); }
   /** @return Base address of TPM.CONTROL[n] struct as uint32_t */
   static constexpr uint32_t tpmCONTROL(int index) { return tpmBase() + offsetof(TPM_Type, CONTROLS) + index*sizeof(TPM_Type::CONTROLS[0]); }
   /** @return Base address of TPM.CONTROL[n].CnSC struct as uint32_t */
   static constexpr uint32_t tpmCnSC(int index) { return tpmBase() + offsetof(TPM_Type, CONTROLS) + index*sizeof(TPM_Type::CONTROLS[0])+0; }
   /** @return Base address of TPM.CONTROL[n].CnV struct as uint32_t */
   static constexpr uint32_t tpmCnV(int index) { return tpmBase() + offsetof(TPM_Type, CONTROLS) + index*sizeof(TPM_Type::CONTROLS[0])+sizeof(uint32_t); }

private:
   /** Callback function for TOI ISR */
   static TpmCallbackFunction sToiCallback;

   /** Callback function for Channel Fault */
   static TpmCallbackFunction sFaultCallback;

   /** Callback function for Channel ISR */
   static TpmChannelCallbackFunction sChannelCallbacks[Info::NumChannelVectors];

   /** Number of channels mapped to a channel event vector */
   static constexpr unsigned ChannelVectorRatio = Info::NumChannels/Info::NumChannelVectors;

protected:
   /**
    * Get frequency of timer tick
    *
    * @return Timer frequency in Hz
    */
   virtual float getInputClockFrequencyVirtual() const override {
      return Info::getInputClockFrequency();
   }

public:
   /**
    * IRQ handler
    */
   static void irqHandler() {
      if ((tpm->SC&(TPM_SC_TOF_MASK|TPM_SC_TOIE_MASK)) == (TPM_SC_TOF_MASK|TPM_SC_TOIE_MASK)) {
         // Clear TOI flag (w1c)
         tpm->SC = tpm->SC | TPM_SC_TOF_MASK;
         sToiCallback();
      }
      // Get status for channels
      uint32_t status = tpm->STATUS;
      if (status) {
         // Clear flags for channel events being handled (w1c register if read)
         tpm->STATUS = status;
         sChannelCallbacks[0](status);
      }
   }

   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note Only usable with static objects.
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match TpmChannelCallbackFunction
    *    void callback(uint8_t status) {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * static AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Tpm0::wrapCallback<AClass, &AClass::callback, aClass>();
    * // Use as callback
    * Tpm0::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(uint8_t), T &object>
   static TpmChannelCallbackFunction wrapCallback() {
      static TpmChannelCallbackFunction fn = [](uint8_t status) {
         (object.*callback)(status);
      };
      return fn;
   }

   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note There is a considerable space and time overhead to using this method
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match TpmChannelCallbackFunction
    *    void callback(uint8_t status) {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Tpm0::wrapCallback<AClass, &AClass::callback>(aClass);
    * // Use as callback
    * Tpm0::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(uint8_t)>
   static TpmChannelCallbackFunction wrapCallback(T &object) {
      static T &obj = object;
      static TpmChannelCallbackFunction fn = [](uint8_t status) {
         (obj.*callback)(status);
      };
      return fn;
   }

   /**
    * Set channel Callback function\n
    * Note that one callback is shared by all channels of the timer
    *
    * @param[in] callback Callback function to execute on channel interrupt.\n
    *                     Use nullptr to remove callback.
    *
    * @return E_NO_ERROR            No error
    * @return E_HANDLER_ALREADY_SET Handler already set
    *
    * @note Channel callbacks may be shared by multiple channels of the timer.
    *       It is necessary to identify the originating channel in the callback
    */
   static ErrorCode setChannelCallback(TpmChannelCallbackFunction callback) {
      static_assert(Info::irqLevel>=0, "TPM not configured for interrupts - Modify Configure.usbdm");
      static_assert(Info::NumChannelVectors == 1, "This function should only be used when all timer channels share a single callback");
      if (callback == nullptr) {
         sChannelCallbacks[0] = unhandledChannelCallback;
         return E_NO_ERROR;
      }
#ifdef DEBUG_BUILD
      // Callback is shared across multiple channels. Check if callback already assigned
      if ((sChannelCallbacks[0] != unhandledChannelCallback) &&
          (sChannelCallbacks[0] != nullptr) &&
          (sChannelCallbacks[0] != callback)) {
         return setErrorCode(ErrorCode::E_HANDLER_ALREADY_SET);
      }
#endif
      sChannelCallbacks[0] = callback;
      return E_NO_ERROR;
   }

   /**
    * Set TOI Callback function\n
    * Note that one callback is shared by all channels of the timer
    *
    * @param[in] theCallback Callback function to execute when timer overflows. \n
    *                        nullptr to indicate none
    */
   static void setTimerOverflowCallback(TpmCallbackFunction theCallback) {
      static_assert(Info::irqLevel>=0, "TPM not configured for interrupts - Modify Configure.usbdmF");
      if (theCallback == nullptr) {
         sToiCallback = unhandledCallback;
         return;
      }
      sToiCallback = theCallback;
   }

public:
 $(/TPM/classInfo: // No class Info found)

   /**
    * Configure with settings from Configure.usbdmProject.
    * Includes configuring all pins
    */
   static void defaultConfigure() {
      enable();

      // Disable so immediate effect
      tpm->SC = 0;
      (void)tpm->SC;
      // Common registers
      tpm->CNT     = 0;
      tpm->MOD     = Info::modulo;
      tpm->SC      = Info::sc;

      enableNvicInterrupts(Info::irqLevel);
   }

   /**
    * Enables clock to peripheral and configures all pins.
    * Configures main operating settings for timer.
    *
    * @param[in] tpmAlignment   Alignment.
    * @param[in] tpmClockSource Clock source for timer.
    * @param[in] tpmPrescale    Clock prescaler. Used to divide input clock.
    */
   static void configure(
         TpmAlignment   tpmAlignment,
         TpmClockSource tpmClockSource = TpmClockSource_SystemTpmClock,
         TpmPrescale    tpmPrescale    = TpmPrescale_DivBy128) {

      enable();

      // Map NULL callback to unhandledChannelCallback
      for (unsigned channel=0; channel<Info::NumChannelVectors; channel++) {
         if (sChannelCallbacks[channel] == nullptr) {
            sChannelCallbacks[channel] = unhandledChannelCallback;
         }
      }

      // Disable so immediate effect
      tpm->SC = 0;
      (void)tpm->SC;
      tpm->SC = tpmAlignment|tpmClockSource|tpmPrescale;
   }

$(/TPM/static_functions:  // /TPM/static_functions not found)
   /**
    * Set period.
    *
    * @param[in] period   Period in ticks (<65535)
    * @param[in] suspend  Whether to suspend timer during change.
    *
    * @return E_NO_ERROR       Success
    * @return E_TOO_LARGE      Requested period is too large
    *
    * @note Prescaler is not affected.
    * @note Assumes prescale has been set to an appropriate value.
    * @note Only rudimentary range checking.
    * @note This function will affect all channels of the timer.
    * @note This value is write-buffered and updated by MOD synchronisation
    *       unless suspend is true.
    */
   static ErrorCode setPeriod(Ticks period, bool suspend=false) {

      // Check if CPWMS is set (affects period)
      bool centreAlign = (tpm->SC&TPM_SC_CPWMS_MASK);

      if (centreAlign) {
         // Centre-aligned period is 2*MOD value but MOD is
         // limited to 0x7FFF for sensible PWM operation

         // Halve with rounding
         period = (period+1_ticks)/2U;
         if ((unsigned)period > 0x7FFFUL) {
            // Attempt to set too long a period
            usbdm_assert(false, "Interval is too long");
            return setErrorCode(E_TOO_LARGE);
         }
      }
      else {
         // Left-aligned period is MOD+1 value
         period = period-1_ticks;
         if ((unsigned)period > 0xFFFF) {
            // Attempt to set too long a period
            usbdm_assert(false, "Interval is too long");
            return setErrorCode(E_TOO_LARGE);
         }
      }
      uint32_t sc;
      if (suspend) {
         sc = tpm->SC;
         tpm->SC = 0;
      }
      // Change modulo
      tpm->MOD = (unsigned)period;

      if (suspend) {
         // Restart timer
         tpm->SC = sc;
      }
      // OK period
      return E_NO_ERROR;
   }

   /**
    * Calculate TPM timing parameters to achieve a given period
    *
    * @param period           Period in seconds
    * @param pPrescalerValue  Calculated prescaler value (for SC register)
    * @param pPeriodInTicks   Calculated period in ticks.
    *
    * @return E_NO_ERROR   Success.
    * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
    * @return E_TOO_LARGE  Requested period is too large.
    */
   static ErrorCode calculateTimingParameters(Seconds period, unsigned &pPrescalerValue, Ticks &pPeriodInTicks) {
      float inputClock = Info::getInputClockFrequency();
      unsigned prescaleFactor=1;
      unsigned prescalerValue=0;

      // Maximum period value in ticks
      uint32_t maxPeriodInTicks = (unsigned)TpmBase_T::MaximumPeriodInTicks;

      // Check if CPWMS is set (affects period calculation)
      if (tpm->SC&TPM_SC_CPWMS_MASK) {
         // Centre-aligned period is ~double the MOD value but MOD is
         // limited to 0x7FFF for sensible PWM operation so
         // period in ticks is limited to 2*0x7FFF
         maxPeriodInTicks = 65534;
      }
      while (prescalerValue<=7) {
         float    clock = inputClock/prescaleFactor;
         unsigned periodInTicks   = round((float)period*clock);
         if (periodInTicks < Info::minimumResolution) {
            usbdm_assert(false, "Interval is too short");
            // Too short a period for minimum resolution
            return setErrorCode(E_TOO_SMALL);
         }
         if (periodInTicks <= maxPeriodInTicks) {
            pPrescalerValue = prescalerValue;
            pPeriodInTicks  = periodInTicks;
            return E_NO_ERROR;
         }
         prescalerValue++;
         prescaleFactor <<= 1;
      }
      // Too long a period
      usbdm_assert(false, "Interval is too long");
      return setErrorCode(E_TOO_LARGE);
   }

   /**
    * Set period
    *
    * @param[in] period   Period in seconds as a float
    *
    * @return E_NO_ERROR  => success
    * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
    * @return E_TOO_LARGE  Requested period is too large.
    *
    * @note This function will affect all channels of the timer.
    * @note Adjusts Timer pre-scaler to appropriate value.
    * @note The counter modulo value (MOD) is modified to obtain the requested period
    * @note The Timer is stopped while being modified.
    * @note The Timer counter is restarted from zero
    */
   static ErrorCode setPeriod(Seconds period) {

      unsigned prescalerValue = 0;
      Ticks    periodInTicks  = 0U;

      ErrorCode rc = calculateTimingParameters(period, prescalerValue, periodInTicks);

      if (rc != E_NO_ERROR) {
         return rc;
      }
      // Disable timer to change prescaler and period
      uint32_t sc = tpm->SC;
      tpm->SC = 0;
      (void)tpm->SC;
      setPeriod(periodInTicks, false);

      // Restart counter
      tpm->CNT   = 0;

      tpm->SC  = (sc&~TPM_SC_PS_MASK)|TPM_SC_PS(prescalerValue);

      return E_NO_ERROR;
   }

   /**
    * Set maximum interval for input-capture or output compare.
    * Input Capture and Output Compare will be able to operate over
    * at least this period without overflow.
    *
    * @param[in] interval Interval in seconds as a float
    *
    * @return E_NO_ERROR  => success
    * @return E_TOO_SMALL  Requested period is too small for resolution (required resolution check to be enabled).
    * @return E_TOO_LARGE  Requested period is too large.
    *
    * @note This function will affect all channels of the timer.
    * @note Adjusts Timer pre-scaler to appropriate value.
    * @note TPM counter is configured for free-running mode i.e. 0-65535
    * @note The Timer is stopped while being modified.
    * @note The Timer counter is restarted from zero
    */
   static ErrorCode setMaximumInterval(Seconds interval) {

      unsigned prescalerValue = 0;
      Ticks    periodInTicks;

      ErrorCode rc = calculateTimingParameters(interval, prescalerValue, periodInTicks);

      if (rc != E_NO_ERROR) {
         return rc;
      }
      // Disable timer to change prescaler and period
      uint32_t sc = tpm->SC;
      tpm->SC = 0;
      (void)tpm->SC;

      // Configure for free-running mode
      // This is the usual value for IC or OC set-up
      tpm->MOD = 0;

      // Restart counter
      tpm->CNT   = 0;

      tpm->SC  = (sc&~TPM_SC_PS_MASK)|TPM_SC_PS(prescalerValue);

      return E_NO_ERROR;
   }

   /**
    * Get frequency of timer tick
    *
    * @return Timer frequency in Hz
    */
   static float getTickFrequencyAsFloat() {

      // Calculate timer prescale factor
      int prescaleFactor = 1<<((tpm->SC&TPM_SC_PS_MASK)>>TPM_SC_PS_SHIFT);

      return static_cast<float>(Info::getInputClockFrequency())/prescaleFactor;
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getTickFrequencyAsInt() {

      // Calculate timer prescale factor
      int prescaleFactor = 1<<((tpm->SC&TPM_SC_PS_MASK)>>TPM_SC_PS_SHIFT);

      return Info::getInputClockFrequency()/prescaleFactor;
   }

   /**
    * Set approximate frequency of timer tick
    *
    * @param[in] frequency Frequency as a float
    * @param[in] tolerance Tolerance in percent
    *
    * @return E_NO_ERROR       Success
    * @return E_ILLEGAL_PARAM  Failed to find suitable pre-scaler values
    *
    * @note Adjusts Timer pre-scaler to appropriate value.
    * @note This function will affect all channels of the timer.
    */
   static ErrorCode setTickFrequency(Hertz frequency, float tolerance) {
      float inputClockFrequency = Info::getInputClockFrequency();

      int prescaleFactor=1;
      int prescalerValue=0;
      while (prescalerValue<=7) {
         float tickFrequency = inputClockFrequency/prescaleFactor;

         if ((100*std::abs((tickFrequency/(float)frequency)-1)) < tolerance) {
            // Clear SC so immediate effect on prescale change
            uint32_t sc = tpm->SC&~TPM_SC_PS_MASK;
            tpm->SC = 0;
            (void)tpm->SC;
            tpm->SC = sc|TPM_SC_PS(prescalerValue);
            return E_NO_ERROR;
         }
         prescalerValue++;
         prescaleFactor <<= 1;
      }
      // Too long a period
      return setErrorCode(E_ILLEGAL_PARAM);
   }

   /**
    * Convert time in microseconds to time in ticks
    *
    * @param[in] time Time in microseconds
    *
    * @return Time in ticks
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    * @note Will set error code if calculated value is less the Timer minimum resolution
    */
   static Ticks convertMicrosecondsToTicks(int time) {

      // Calculate period
      uint32_t tickRate = getTickFrequencyAsInt();
      uint64_t rv       = (static_cast<uint64_t>(time)*tickRate)/1000000;
      usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv < Info::minimumInterval) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
      return (unsigned)rv;
   }

   /**
    * Converts time in seconds to time in ticks
    *
    * @param[in] seconds Time interval in seconds
    *
    * @return Time in ticks
    *
    * @note Assumes prescale has been chosen as a appropriate value (see setMaximumInterval()). \n
    * @note Will set error code if calculated value is less the minimum resolution
    */
   static Ticks convertSecondsToTicks(Seconds seconds) {

      // Calculate period
      float    tickRate = getTickFrequencyAsFloat();
      uint64_t rv       = rintf((float)seconds*tickRate);
      usbdm_assert(rv <= 0xFFFFUL, "Interval is too long");
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv < Info::minimumInterval) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
      return (unsigned)rv;
   }

   /**
    * Convert time in ticks to time in microseconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in microseconds
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    */
   static uint32_t convertTicksToMicroseconds(Ticks timeInTicks) {

      // Calculate period
      uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000000)/getTickFrequencyAsInt();
#ifdef DEBUG_BUILD
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv == 0) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
#endif
      return rv;
   }

   /**
    * Convert time in ticks to time in milliseconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in milliseconds
    *
    * @note Assumes prescale has been chosen as a appropriate value. Rudimentary range checking.
    */
   static uint32_t convertTicksToMilliseconds(Ticks timeInTicks) {

      // Calculate period
      uint64_t rv = (static_cast<uint64_t>((unsigned)timeInTicks)*1000)/getTickFrequencyAsInt();
#ifdef DEBUG_BUILD
      if (rv > 0xFFFFUL) {
         // Attempt to set too long a period
         setErrorCode(E_TOO_LARGE);
      }
      if (rv == 0) {
         // Attempt to set too short a period
         setErrorCode(E_TOO_SMALL);
      }
#endif
      return rv;
   }

   /**
    * Convert time in ticks to time in seconds
    *
    * @param[in] timeInTicks Time in ticks
    *
    * @return Time in seconds
    */
   static Seconds convertTicksToSeconds(Ticks timeInTicks) {
      return static_cast<float>((unsigned)timeInTicks)/getTickFrequencyAsFloat();
   }

   /**
    * Get Timer count
    *
    * @return Timer count value
    */
   static uint16_t getTime() {
      return tpm->CNT;
   }

   /**
    * Reset counter to initial value
    */
   static void resetTime() {
      // Note: writing ANY value loads CNT from CNTIN
      tpm->CNT = 0;
   }

   /**
    * Get timer event flags
    *
    * @return Flags indicating if an event has occurred on a channel
    *         There is one bit for each channel
    */
   static unsigned getInterruptFlags() {
      return tpm->STATUS;
   }

   /**
    * Clear selected timer event flags
    *
    * @param channelMask Mask indicating which channel flags to clear
    *                    There is one bit for each channel
    *
    * @note Flags will not be cleared if the channel is configured for DMA
    */
   static void clearSelectedInterruptFlags(uint32_t channelMask) {
      (void)tpm->STATUS;
      tpm->STATUS = ~channelMask;
   }

   /**
    * Get and clear timer event flags
    *
    * @return Flags indicating if an event has occurred on a channel
    *         There is one bit for each channel
    *
    * @note Only flags captured in the return value are cleared
    * @note Flags will not be cleared if the channel is configured for DMA
    */
   static unsigned getAndClearInterruptFlags() {
      // Note requires read and write zero to clear flags
      // so only flags captured in status are cleared
      unsigned status = tpm->STATUS;
      tpm->STATUS = ~status;
      return status;
   }

   /**
    * Enable/disable Timer Overflow interrupts
    */
   static void enableTimerOverflowInterrupts() {
      tpm->SC = tpm->SC | TPM_SC_TOIE_MASK;
   }

   /**
    * Disable Timer Overflow interrupts
    */
   static void disableTimerOverflowInterrupts() {
      tpm->SC = tpm->SC & ~TPM_SC_TOIE_MASK;
   }


   /*
    * *****************************************************************
    *          Channel functions
    * *****************************************************************
    */
   /**
    * Get Timer event time
    *
    * @param[in] channel    Timer channel
    *
    * @return Absolute time of last event in ticks i.e. value from timer event register
    */
   static Ticks getEventTime(int channel) {
      return (unsigned)(tpm->CONTROLS[channel].CnV);
   }

   /**
    * Set Timer event time
    *
    * This value is write-buffered and updated by Cnv synchronisation.
    *
    * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
    * @param[in] channel    Timer channel
    */
   static void setEventTime(Ticks eventTime, int channel) {
      tpm->CONTROLS[channel].CnV = (unsigned)eventTime;
   }

   /**
    * Set Timer event time relative to current event time
    *
    * @param[in] offset     Event time in ticks relative to current event time (i.e. Timer channel CnV value)
    * @param[in] channel    Timer channel
    *
    * @note This value is write-buffered and updated by CnV synchronisation.
    */
   static void setDeltaEventTime(Ticks offset, int channel) {
      tpm->CONTROLS[channel].CnV = tpm->CONTROLS[channel].CnV + (unsigned)offset;
   }

   /**
    * Set Timer event time relative to current timer count value
    *
    * @param[in] offset     Event time in ticks relative to current time (i.e. Timer CNT value)
    * @param[in] channel    Timer channel
    *
    * @note This value is write-buffered and updated by CnV synchronisation.
    */
   static void setRelativeEventTime(Ticks offset, int channel) {
      tpm->CONTROLS[channel].CnV = tpm->CNT + (unsigned)offset;
   }

   /**
    * Set PWM duty cycle.
    * Higher precision float version
    *
    * @param[in] dutyCycle  Duty-cycle as percentage (float)
    * @param[in] channel    Timer channel
    *
    * @note The actual CnV register update may be delayed by the register synchronisation mechanism
    */
   static void setDutyCycle(float dutyCycle, int channel) {
      if (tpm->SC&TPM_SC_CPWMS_MASK) {
         tpm->CONTROLS[channel].CnV  = round((dutyCycle*tpm->MOD)/100.0f);
      }
      else {
         tpm->CONTROLS[channel].CnV  = round((dutyCycle*(tpm->MOD+1))/100.0f);
      }
   }

   /**
    * Set PWM duty cycle
    *
    * @param[in] dutyCycle  Duty-cycle as percentage
    * @param[in] channel    Timer channel
    *
    * @note The actual CnV register update may be delayed by the register synchronisation mechanism
    */
   static void setDutyCycle(int dutyCycle, int channel) {
      if (tpm->SC&TPM_SC_CPWMS_MASK) {
         tpm->CONTROLS[channel].CnV  = (dutyCycle*tpm->MOD)/100;
      }
      else {
         tpm->CONTROLS[channel].CnV  = (dutyCycle*(tpm->MOD+1))/100;
      }
   }

   /**
    * Set PWM high time in ticks
    * Assumes value is less than period
    *
    * @param[in] highTime   PWM high time in ticks
    * @param[in] channel    Timer channel
    *
    * @return E_NO_ERROR on success
    * @return E_TOO_LARGE on success
    *
    * @note The actual CnV register update may be delayed by the register synchronisation mechanism
    */
   static ErrorCode setHighTime(Ticks highTime, int channel) {
      if (tpm->SC&TPM_SC_CPWMS_MASK) {
         // In CPWM the pulse width is doubled
         highTime = (highTime+1_ticks)/2U;
      }
#ifdef DEBUG_BUILD
      if ((unsigned)highTime > tpm->MOD) {
         return setErrorCode(E_TOO_LARGE);
      }
#endif
      tpm->CONTROLS[channel].CnV  = (unsigned)highTime;
      return E_NO_ERROR;
   }

   /**
    * Set PWM high time in seconds
    *
    * @param[in] highTime   PWM high time in seconds
    * @param[in] channel    Timer channel
    *
    * @return E_NO_ERROR on success
    *
    * @note The actual CnV register update may be delayed by the TPM register synchronisation mechanism
    */
   static ErrorCode setHighTime(Seconds highTime, int channel) {
      return setHighTime(convertSecondsToTicks(highTime), channel);
   }



   /**
    * Enable interrupts in NVIC
    */
   static void enableNvicInterrupts() {
      NVIC_EnableIRQ(Info::irqNums[0]);
   }

   /**
    * Enable and set priority of interrupts in NVIC
    *
    * @param[in]  nvicPriority  Interrupt priority
    *
    * @note Any pending interrupts are cleared before enabling.
    */
   static void enableNvicInterrupts(NvicPriority nvicPriority) {
      enableNvicInterrupt(Info::irqNums[0], nvicPriority);
   }

   /**
    * Disable interrupts in NVIC
    */
   static void disableNvicInterrupts() {
      NVIC_DisableIRQ(Info::irqNums[0]);
   }

public:
   /**
    * Template class representing a timer channel
    *
    * Example
    * @code
    * // Instantiate the timer and channel being used (for TPM0 & channel 6)
    * using Tmr      = USBDM::Tpm0;
    * using Tmr0_ch6 = Tmr::Channel<6>;
    *
    * // Enable and initialise timer with initial alignment
    * Tmr::configure(TpmMode_LeftAlign);
    *
    * // Change timer period (in ticks) (affects ALL channels of timer)
    * Tmr::setPeriod(500);
    *
    * // Configure channel as PWM
    * Tmr0_ch6::configure(TpmChMode_PwmHighTruePulses);
    *
    * // Change duty cycle (in percent)
    * Tmr0_ch6.setDutyCycle(45);
    * @endcode
    *
    * @tparam channel TPM timer channel
    */
   template <int channel>
   class Channel : public PcrTable_T<Info, limitIndex<Info>(channel)>, public TpmChannel {

   private:
      TpmBase::CheckChannel<Info, channel> check;

   private:
      /**
       * This class is not intended to be instantiated
       */
      Channel(const Channel&) = delete;
      Channel(Channel&&) = delete;

   public:

      constexpr Channel() : TpmChannel(Info::baseAddress, channel) {}
      virtual ~Channel() = default;

   protected:
      /**
       * Get frequency of timer tick
       *
       * @return Timer frequency in Hz
       */
      virtual float getInputClockFrequencyVirtual() const override {
         return Info::getInputClockFrequency();
      }

   public:
      // GPIO associated with this channel
      template<Polarity polarity>
      using Gpio = GpioTable_T<Info, limitIndex<Info>(channel), polarity>; // Inactive is high

      /** Allow access to PCR of associated pin */
      using Pcr = PcrTable_T<Info, limitIndex<Info>(channel)>;

      /** Allow access owning TPM */
      using OwningTpm = TpmBase_T<Info>;

      /** @return Base address of TPM.CONTROL struct as uint32_t */
      static constexpr uint32_t tpmCONTROL() { return tpmBase() + offsetof(TPM_Type, CONTROLS[channel]); }

      /** @return Address of TPM.CONTROL.CnSC as uint32_t */
      static constexpr uint32_t tpmCnSC() { return tpmCONTROL()+0; }

      /** @return Address of TPM.CONTROL.CnV as uint32_t */
      static constexpr uint32_t tpmCnV() { return tpmCONTROL()+sizeof(uint32_t); }

      /**
       * Structure for TPM channel.
       */
      struct TpmChannelRegs {
         __IO uint32_t  CnSC; /**< 000C: Channel  Status and Control */
         __IO uint32_t  CnV;  /**< 0010: Channel  Value              */
      };

      /**
       * Allows access to TPM channel registers.
       *
       * @return Reference to the TPM channel registers
       */
      static __attribute__((always_inline)) volatile TpmChannelRegs &channelRegs() {
         return *reinterpret_cast<TpmChannelRegs *>(&OwningTpm::tpm->CONTROLS[CHANNEL]);
      }

      /** Timer channel number */
      static constexpr unsigned CHANNEL      = channel;

      /** Mask for Timer channel */
      static constexpr uint32_t CHANNEL_MASK = 1<<channel;

      /**
       * Configure channel and sets mode.
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      static void defaultConfigure() {

         OwningTpm::tpm->CONTROLS[channel].CnSC = TpmChMode_PwmHighTruePulses|TpmChannelAction_None;
      }

      /**
       * Configure channel.
       * Doesn't affect shared settings of owning Timer
       *
       * @param[in] tpmChMode         Mode of operation for channel
       * @param[in] tpmChannelAction  Whether to enable the interrupt or DMA function on this channel
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      static void configure(
            TpmChMode         tpmChMode,
            TpmChannelAction  tpmChannelAction = TpmChannelAction_None) {

         OwningTpm::tpm->CONTROLS[channel].CnSC = tpmChMode|tpmChannelAction;
      }

      /**
       * Disables timer channel (sets mode to TpmChMode_Disabled)
       */
      static void disable() {
         setMode(TpmChMode_Disabled);
      }

      /**
       * Get channel mode.
       *
       * @return Current mode of operation for the channel
       */
      static TpmChMode getMode() {
         return static_cast<TpmChMode>(OwningTpm::tpm->CONTROLS[channel].CnSC &
               (TPM_CnSC_MS_MASK|TPM_CnSC_ELS_MASK));
      }

      /**
       * Set channel mode
       *
       * @param[in] tpmChMode      Mode of operation for channel
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      static void setMode(TpmChMode tpmChMode) {
         OwningTpm::tpm->CONTROLS[channel].CnSC =
               (OwningTpm::tpm->CONTROLS[channel].CnSC & ~(TPM_CnSC_MS_MASK|TPM_CnSC_ELS_MASK))|tpmChMode;
      }

      /**
       * Set channel action on event.
       *
       * @param[in] tpmChannelAction      Action to take on channel event (DMA or Interrupt)
       *
       * @note This method has the side-effect of clearing the register update synchronisation i.e.
       *       pending CnV register updates are discarded.
       */
      static void setAction(TpmChannelAction tpmChannelAction) {
#ifdef TPM_CnSC_DMA
         OwningTpm::tpm->CONTROLS[channel].CnSC =
               (OwningTpm::tpm->CONTROLS[channel].CnSC & ~(TPM_CnSC_CHIE_MASK|TPM_CnSC_DMA_MASK))|
               tpmChannelAction;
#else
         OwningTpm::tpm->CONTROLS[channel].CnSC =
               (OwningTpm::tpm->CONTROLS[channel].CnSC & ~TPM_CnSC_CHIE_MASK)|tpmChannelAction;
#endif
      }

      /**
       * Set PWM high time in ticks.
       * Assumes value is less than period
       *
       * @param[in] highTime   PWM high time in ticks
       *
       * @return E_NO_ERROR on success
       *
       * @note The actual CnV register update will be delayed by the register synchronisation mechanism
       */
      static ErrorCode setHighTime(Ticks highTime) {
         return OwningTpm::setHighTime(highTime, channel);
      }

      /**
       * Set PWM high time in seconds.
       * Higher precision float version
       *
       * @param[in] highTime   PWM high time in seconds
       *
       * @return E_NO_ERROR on success
       *
       * @note The actual CnV register update will be delayed by the register synchronisation mechanism
       */
      static ErrorCode setHighTime(Seconds highTime) {
         return OwningTpm::setHighTime(highTime, channel);
      }
      /**
       * Set PWM duty cycle.
       *
       * @param[in] dutyCycle  Duty-cycle as percentage
       *
       * @note The actual CnV register update will be delayed by the register synchronisation mechanism
       */
      static void setDutyCycle(int dutyCycle) {
         OwningTpm::setDutyCycle(dutyCycle, channel);
      }

      /**
       * Set PWM duty cycle
       *
       * @param[in] dutyCycle  Duty-cycle as percentage
       *
       * @note The actual CnV register update will be delayed by the register synchronisation mechanism
       */
      static void setDutyCycle(float dutyCycle) {
         OwningTpm::setDutyCycle(dutyCycle, channel);
      }

      /**
       * Set Timer event time.
       *
       * @param[in] offset  Event time in ticks relative to current event time (i.e. Timer channel CnV value)
       *
       * @note The actual CnV register update will be delayed by the register synchronisation mechanism
       */
      static void setDeltaEventTime(Ticks offset) {
         OwningTpm::setDeltaEventTime(offset, channel);
      }

      /**
       * Set Timer event time relative to current timer count value.
       *
       * @param[in] offset  Event time in ticks relative to current time (i.e. Timer CNT value)
       *
       * @note The actual CnV register update will be delayed by the register synchronisation mechanism
       */
      static void setRelativeEventTime(Ticks offset) {
         OwningTpm::setRelativeEventTime(offset, channel);
      }

      /**
       * Set Absolute Timer event time.
       *
       * @param[in] eventTime  Absolute event time in ticks i.e. value to use as timer comparison value
       *
       * @note The actual CnV register update will be delayed by the register synchronisation mechanism
       */
      static void setEventTime(Ticks eventTime) {
         OwningTpm::setEventTime(eventTime, channel);
      }

      /**
       * Get Absolute Timer event time.
       *
       * @return Absolute time of last event in ticks i.e. value from timer event register
       */
      static Ticks getEventTime() {
         return OwningTpm::getEventTime(channel);
      }

      /**
       * Get Timer interrupt/event flag.
       *
       * @return true  Indicates an event has occurred on a channel
       * @return false Indicates no event has occurred on a channel since last polled
       */
      static bool getInterruptFlag() {
         return (OwningTpm::tpm->STATUS&CHANNEL_MASK) != 0;
      }

      /**
       * Get and Clear Timer channel interrupt flag.
       *
       * @return true  Indicates an event has occurred on a channel
       * @return false Indicates no event has occurred on a channel since last polled
       *
       * @note Only flags captured in the return value are cleared
       */
      static bool getAndClearInterruptFlag() {
         // Note - w1c flags
         // so only flags captured in status are cleared
         bool status = (OwningTpm::tpm->STATUS&CHANNEL_MASK) != 0;
         OwningTpm::tpm->STATUS = CHANNEL_MASK;
         return status;
      }

      /**
       * Clear interrupt flag on channel.
       */
      static void clearInterruptFlag() {
         // Note - w1c flags
         OwningTpm::tpm->STATUS = CHANNEL_MASK;
      }




      /*******************************
       *  PIN Functions
       *******************************/
      /**
       * Set callback for Pin IRQ.
       *
       * @param[in] callback The function to call on Pin interrupt.\n
       *                     nullptr to indicate none
       *
       * @note There is a single callback function for all pins on the related port.
       */
      static __attribute__((always_inline)) void setPinCallback(PinCallbackFunction callback) {
         TpmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();
         static_assert(Pcr::HANDLER_INSTALLED, "Gpio associated with TPM channel not configured for PIN interrupts - Modify Configure.usbdm");
         Pcr::setPinCallback(callback);
      }

#if defined(PORT_PCR_ODE_MASK) and defined (PORT_PCR_SRE_MASK)
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    * @param[in] pinDriveMode     One of PinDriveMode_PushPull, PinDriveMode_OpenDrain
    * @param[in] pinSlewRate      One of PinSlewRate_Slow, PinSlewRate_Fast
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue,
         PinDriveMode      pinDriveMode      = Pcr::defaultPcrValue,
         PinSlewRate       pinSlewRate       = Pcr::defaultPcrValue) {

      TpmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();

#ifdef TPM_SC_PWMEN0_SHIFT
      // Enable output pin in TPM
      tpm->SC = tpm->SC | (1<<(channel+TPM_SC_PWMEN0_SHIFT));
#endif
      Pcr::setPCR(pinDriveStrength|pinDriveMode|pinSlewRate);
   }
#elif defined(PORT_PCR_ODE_ASK)
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    * @param[in] pinDriveMode     One of PinDriveMode_PushPull, PinDriveMode_OpenDrain
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue,
         PinDriveMode      pinDriveMode      = Pcr::defaultPcrValue) {

      TpmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();

#ifdef TPM_SC_PWMEN0_SHIFT
      // Enable output pin in TPM
      tpm->SC = tpm->SC | (1<<(channel+TPM_SC_PWMEN0_SHIFT));
#endif
      Pcr::setPCR(pinDriveStrength|pinDriveMode);
   }
#elif defined(PORT_PCR_SRE_MASK)
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    * @param[in] pinSlewRate      One of PinSlewRate_Slow, PinSlewRate_Fast
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue,
         PinSlewRate       pinSlewRate       = Pcr::defaultPcrValue) {

      TpmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();

#ifdef TPM_SC_PWMEN0_SHIFT
      // Enable output pin in TPM
      tpm->SC = tpm->SC | (1<<(channel+TPM_SC_PWMEN0_SHIFT));
#endif
      Pcr::setPCR(pinDriveStrength|pinSlewRate);
   }
#else
   /**
    * @brief
    * Set subset of Pin Control Register Attributes associated with output direction \n
    * Mux value is set appropriately for the pin function being used. Other attributes are cleared.
    * Assumes clock to the port has already been enabled
    *
    * @param[in] pinDriveStrength One of PinDriveStrength_Low, PinDriveStrength_High
    */
   static void setOutput(
         PinDriveStrength  pinDriveStrength  = Pcr::defaultPcrValue) {

      TpmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();

#ifdef TPM_SC_PWMEN0_SHIFT
      // Enable output pin in TPM
      tpm->SC = tpm->SC | (1<<(channel+TPM_SC_PWMEN0_SHIFT));
#endif

      Pcr::setPCR(pinDriveStrength);
   }
#endif

      /**
       * @brief
       * Set subset of Pin Control Register Attributes associated with input direction \n
       * Mux value is set appropriately for the pin function being used. Other attributes are cleared.\n
       * The clock to the port will be enabled before changing the PCR.
       *
       * @param[in] pinPull          One of PinPull_None, PinPull_Up, PinPull_Down
       * @param[in] pinAction        One of PinAction_None, etc
       * @param[in] pinFilter        One of PinFilter_None, PinFilter_Passive
       *
       *  @note see also configureDigitalFilter(), enableDigitalFilter(), disableDigitalFilter()
       */
      static void setInput(
            PinPull           pinPull           = Pcr::defaultPcrValue,
            PinAction         pinAction         = Pcr::defaultPcrValue,
            PinFilter         pinFilter         = Pcr::defaultPcrValue) {

         TpmBase::CheckChannelIsMappedToPinOnly<Info, channel>::check();
//         TpmBase::CheckChannelExistsAndMapped<Info, channel>::check(); // More noisy errors

#ifdef TPM_SC_PWMEN0_SHIFT
         // Disable output pin in TPM
         tpm->SC = tpm->SC & ~(1<<(channel+TPM_SC_PWMEN0_SHIFT));
#endif

         Pcr::setInput(pinPull,pinAction,pinFilter);
      }

   };

};

template<class Info> TpmCallbackFunction         TpmBase_T<Info>::sToiCallback        = TpmBase_T<Info>::unhandledCallback;
template<class Info> TpmChannelCallbackFunction  TpmBase_T<Info>::sChannelCallbacks[] = {nullptr};

#ifdef TPM_QDCTRL_QUADEN_MASK
/**
 *  Quadrature Decoder Mode\n
 *  Selects the encoding mode used in the Quadrature Decoder mode.
 */
enum TpmQuadratureMode {
   TpmQuadratureMode_Phase_AB_Mode        = TPM_QDCTRL_QUADMODE(0),   //!< Phase A and phase B encoding mode.
   TpmQuadratureMode_Count_Direction_Mode = TPM_QDCTRL_QUADMODE(1),   //!< Count and direction encoding mode.
};

/**
 * Template class representing a TPM configured as a Quadrature decoder
 *
 * @tparam info      Information class for TPM
 *
 * @code
 *  using TpmQuadDecoder = TpmQuadDecoder_T<Tpm0Info>;
 *
 *  // Enable decoder
 *  TpmQuadDecoder::configure();
 *
 *  // Set pin filters
 *  TpmQuadDecoder::enableFilter(15);
 *
 *  // Reset position to zero
 *  // Movement will be +/- relative to this initial position
 *  TpmQuadDecoder::resetPosition();
 *
 *  for(;;) {
 *     console.write("Position =").writeln(QuadDecoder.getPosition());
 *  }
 * @endcode
 */
template <class Info>
class TpmQuadDecoder_T {

private:
   TpmQuadDecoder_T(const TpmQuadDecoder_T&) = delete;
   TpmQuadDecoder_T(TpmQuadDecoder_T&&) = delete;

   TpmBase::CheckChannel<typename Info::InfoQUAD, 0> checkQ0;
   TpmBase::CheckChannel<typename Info::InfoQUAD, 1> checkQ1;

public:
   // Default constructor
   TpmQuadDecoder_T() = default;

   /** Hardware instance pointer */
   static constexpr HardwarePtr<TPM_Type> tpm = Info::baseAddress;

   /** Allow more convenient access associated Tpm */
   using Tpm = TpmBase_T<Info>;

   /** Allow access to PCR of associated phase-A pin */
   using Pcr0 = PcrTable_T<typename Info::InfoQUAD, 0>;

   /** Allow access to PCR of associated phase-B pin */
   using Pcr1 = PcrTable_T<typename Info::InfoQUAD, 1>;

   /**
    * Set Pin Control Register (PCR) values for PHA and PHB inputs.
    * This will map the pin to the Quadrature function (mux value) \n
    * The clock to the port will be enabled before changing the PCR
    *
    * @param[in] pinPull          One of PinPull_None, PinPull_Up, PinPull_Down
    * @param[in] pinAction        One of PinAction_None, etc (defaults to PinAction_None)
    * @param[in] pinFilter        One of PinFilter_None, PinFilter_Passive (defaults to PinFilter_None)
    */
   static void setInput(
         PinPull           pinPull           = Pcr0::defaultPcrValue,
         PinAction         pinAction         = Pcr0::defaultPcrValue,
         PinFilter         pinFilter         = Pcr0::defaultPcrValue) {

      Pcr0::setPCR(pinPull|pinAction|pinFilter);
      Pcr1::setPCR(pinPull|pinAction|pinFilter);
   }

   /**
    * Set TOI Callback function\n
    * Note that one callback is shared by all channels of the TPM
    *
    * @param[in] theCallback Callback function to execute when timer overflows. \n
    *                        nullptr to indicate none
    */
   static __attribute__((always_inline)) void setTimerOverflowCallback(TpmCallbackFunction theCallback) {
      Tpm::setTimerOverflowCallback(theCallback);
   }

   /**
    * Enable Timer Overflow interrupts
    */
   static __attribute__((always_inline)) void enableTimerOverflowInterrupts() {
      Tpm::enableTimerOverflowInterrupts();
   }

   /**
    * Disable Timer Overflow interrupts
    */
   static __attribute__((always_inline)) void disableTimerOverflowInterrupts() {
      Tpm::disableTimerOverflowInterrupts();
   }

   /**
    * Enable interrupts in NVIC
    */
   static void enableNvicInterrupts() {
      NVIC_EnableIRQ(Info::irqNums[0]);
   }

   /**
    * Enable and set priority of interrupts in NVIC
    *
    * @param[in]  nvicPriority  Interrupt priority
    *
    * @note Any pending interrupts are cleared before enabling.
    */
   static void enableNvicInterrupts(NvicPriority nvicPriority) {
      enableNvicInterrupt(Info::irqNums[0], nvicPriority);
   }

   /**
    * Disable interrupts in NVIC
    */
   static void disableNvicInterrupts() {
      NVIC_DisableIRQ(Info::irqNums[0]);
   }

   /**
    * Configures all mapped pins associated with this peripheral
    */
   static void configureAllPins() {
      // Configure pins
      Info::InfoQUAD::initPCRs();
   }

   /**
    * Disabled all mapped pins associated with TPM
    *
    * @note Only the lower 16-bits of the PCR registers are modified
    */
   static void disableAllPins() {
      // Configure pins
      Info::InfoQUAD::clearPCRs();
   }

   /**
    * Basic enable of TPM
    * Includes enabling clock and configuring all pins if mapPinsOnEnable is selected in configuration
    */
   static void enable() {
      // Enable clock to peripheral
      Info::enableClock();

      if constexpr (Info::mapPinsOnEnable) {
         configureAllPins();
      }
   }

   /**
    * Disables the clock to TPM and all mappable pins
    */
   static void disable() {

      disableNvicInterrupts();

      if constexpr (Info::mapPinsOnEnable) {
         disableAllPins();
      }

      // Disable TPM (clock source disabled)
      tpm->QDCTRL = 0;

      // Disable clock to peripheral interface
      Info::disableClock();
   }

   /**
    * Basic configuration of Quadrature decoder.
    * Includes configuring all pins if
    * mapPinsOnEnable setting is true
    *
    * @param tpmPrescale       Prescale value applied to the output of the quadrature decode before the counter.
    * @param tpmQuadratureMode Selects the encoding mode used to decode the input changes.
    */
   static void configure(
         TpmPrescale       tpmPrescale       = TpmPrescale_DivBy1,
         TpmQuadratureMode tpmQuadratureMode = TpmQuadratureMode_Phase_AB_Mode
         ) {
      // Assertions placed here so only checked if TpmQuadDecoder actually used
      static_assert(Info::InfoQUAD::info[0].gpioBit >= 0, "TpmQuadDecoder PHA is not mapped to a pin - Modify Configure.usbdm");
      static_assert(Info::InfoQUAD::info[1].gpioBit >= 0, "TpmQuadDecoder PHB is not mapped to a pin - Modify Configure.usbdm");

      enable();

      // Disable so immediate effect
      tpm->SC = 0;
      (void)tpm->SC;
      tpm->SC = TpmClockSource_Disabled|tpmPrescale;

      tpm->QDCTRL =
            TPM_QDCTRL_QUADEN_MASK|      // Enable Quadrature decoder
            tpmQuadratureMode;           // Quadrature mode
      tpm->CONF   = TPM_CONF_DBGMODE(3);
   }

   /**
    * Reset position to zero
    */
   static void resetPosition() {
      // Note: writing ANY value clears CNT (cannot set value)
      tpm->CNT = 0;
   }

   /**
    * Get Quadrature decoder position
    *
    * @return Signed number representing position relative to reference location
    *
    * @note This can be viewed as a signed number +/- relative to the initial position.
    * @note This can be viewed as an unsigned number counting up from 0
    *       with overflow at 0xFFFF and underflow at 0.
    */
   static int16_t getPosition() {
      return (int16_t)(tpm->CNT);
   }

   /**
    * Get Quadrature decoder overflow direction.
    * This would be used in the overflow callback.
    *
    * @return Timer overflow direction. true => increasing, false => decreasing.
    *
    * @note Overflow occurs at MOD -> CNTIN, Underflow occurs at CNTIN -> MOD.
    */
   static bool getOverflowDirection() {
      return (bool)(tpm->QDCTRL & TPM_QDCTRL_TOFDIR_MASK);
   }
};
#endif // defined(TPM_QDCTRL_QUADEN_MASK)

$(/TPM/declarations: // No declarations found)
$(/TPM/quadDeclarations: // No declarations found)
/**
 * End TPM_Group
 * @}
 */

} // End namespace USBDM

#endif /* HEADER_TPM_H */

