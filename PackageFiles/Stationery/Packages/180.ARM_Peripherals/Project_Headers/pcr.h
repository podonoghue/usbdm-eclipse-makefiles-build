/**
 * @file     pcr.h (180.ARM_Peripherals/Project_Headers/pcr.h)
 * @brief    Port Control Register interface
 *
 * @version  V4.12.1.80
 * @date     13 April 2016
 */
#ifndef HEADER_PCR_H
#define HEADER_PCR_H
/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include <stddef.h>
#include <math.h>
#include <algorithm>
#include "derivative.h"
#include "error.h"

#if __cplusplus <= 201703L
#define consteval constexpr
#endif

// Variable Argument Macro (VA_MACRO) up to 10 arguments
#define USBDM_COUNT_ARGUMENTS_(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, value, ...) value
#define USBDM_COUNT_ARGUMENTS(...) USBDM_COUNT_ARGUMENTS_( __VA_ARGS__ __VA_OPT__(,) 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

#define USBDM_CONCAT_(left, right) left ## right
#define USBDM_CONCAT(left, right)  USBDM_CONCAT_(left, right)

#define USBDM_VA_MACRO(MACRO, ...) USBDM_CONCAT(MACRO, USBDM_COUNT_ARGUMENTS(__VA_ARGS__))(__VA_ARGS__)

/*
 * Default port information
 */
namespace USBDM {

#if __GNUC__ > 10
// USBDM makes extensive use of enums as bit masks
#pragma GCC diagnostic ignored "-Wdeprecated-enum-enum-conversion"
#endif

#pragma GCC push_options
#pragma GCC optimize ("Os")

#define USE_DIMENSION_CHECK $(/HARDWARE/useTypeSystemForTimers)
#if (USE_DIMENSION_CHECK)
class Ticks {

private:
   unsigned value = 0;

public:
   constexpr Ticks()                   = default;
   constexpr Ticks(const Ticks& other) = default;

   constexpr Ticks(int value)          : value(value) {}
   constexpr Ticks(unsigned value)     : value(value) {}
   constexpr Ticks(long value)         : value((unsigned)value) {}
   constexpr Ticks(unsigned long value): value((unsigned)value) {}
   constexpr Ticks(float    value)     : value(roundf(value)) {}
   constexpr Ticks(double    value)    : value(roundf(value)) {}
   Ticks(const volatile Ticks& other)  : value(other.value) {}

   Ticks &operator =(const Ticks &other) = default;

   auto &operator =(float other)                  {value = other;       return *this; }
   auto &operator =(const volatile Ticks &other)  {value = other.value; return *this; }

   void  operator =(const Ticks &other) volatile  {value = other.value; }

   constexpr auto getValue() const { return value; }
   unsigned getValue() const volatile { return value; }

   constexpr auto operator *(unsigned other) const { return Ticks(value*other); }
   constexpr auto operator *(float    other) const { return Ticks(value*other); }

   constexpr auto operator /(unsigned other) const { return Ticks(value/other); }
   constexpr auto operator /(float    other) const { return Ticks(value/other); }
   constexpr auto operator /(Ticks    other) const { return (value/other.getValue()); }

   constexpr auto operator +(const Ticks &other)    const { return Ticks(value+other.value); }
   constexpr auto operator +(const unsigned other)  const { return Ticks(value+other); }
   constexpr auto operator +(const int other)       const { return Ticks(value+(unsigned)other); }

   constexpr auto operator -(const Ticks &other)    const { return Ticks(value-other.value); }
   constexpr auto operator -(const unsigned other)  const { return Ticks(value-other); }
   constexpr auto operator -(const int other)       const { return Ticks(value-(unsigned)other); }

   constexpr auto operator ==(const Ticks &other)   const { return value==other.value; }
   constexpr auto operator ==(const unsigned other) const { return value==other; }

   constexpr operator unsigned() const { return value; }
   explicit operator unsigned() const volatile { return value; }
};

class Seconds {

private:
   float value = 0.0;

public:
   constexpr Seconds()                       = default;
   constexpr Seconds(const Seconds& other)   = default;

//   constexpr Seconds(int value)              : value((float)value) {}
//   constexpr Seconds(unsigned value)         : value((float)value) {}
//   constexpr Seconds(long value)             : value((float)value) {}
//   constexpr Seconds(unsigned long value)    : value((float)value) {}
   constexpr Seconds(double value)           : value((float)value) {}
   Seconds(const volatile Seconds& other)    : value(other.getValue()) {}

   Seconds &operator =(const Seconds &other) = default;

   auto &operator =(float other)                    {value = other;       return *this; }
   auto &operator =(const volatile Seconds &other)  {value = other.value; return *this; }

   void  operator =(const Seconds &other) volatile {value = other.value; }

   constexpr auto getValue() const { return value; }
   float getValue() const volatile { return value; }

   constexpr auto operator *(float other)    const { return Seconds(value*other); }
   constexpr auto operator *(unsigned other) const { return Seconds(value*other); }
   constexpr auto operator *(int other)      const { return Seconds(value*other); }

   constexpr auto operator /(float other)    const { return Seconds(value/other); }
   constexpr auto operator /(unsigned other) const { return Seconds(value/other); }
   constexpr auto operator /(int other)      const { return Seconds(value/other); }

   constexpr auto operator /(Seconds other) const { return float(value/other.getValue()); }

   constexpr auto operator +(Seconds other)  const { return Seconds(value+other.value); }
   constexpr auto operator +(float other)    const { return Seconds(value+other); }
   constexpr auto operator +(unsigned other) const { return Seconds(value+other); }
   constexpr auto operator +(int other)      const { return Seconds(value+other); }

   constexpr auto operator -(Seconds other)  const { return Seconds(value-other.value); }
   constexpr auto operator -(float other)    const { return Seconds(value-other); }
   constexpr auto operator -(unsigned other) const { return Seconds(value-other); }
   constexpr auto operator -(int other)      const { return Seconds(value-other); }

   constexpr auto operator ==(const Seconds &other) const { return value==other.value; }
   constexpr auto operator ==(const float other)    const { return value==other; }
   constexpr auto operator ==(const unsigned other) const { return value==other; }
   constexpr auto operator ==(int other)            const { return value==other; }

   constexpr auto operator <(const Seconds &other) const { return value<other.value; }
   constexpr auto operator <(const float other)    const { return value<other; }
   constexpr auto operator <(const unsigned other) const { return value<other; }
   constexpr auto operator <(int other)            const { return value<other; }

   constexpr auto operator <=(const Seconds &other) const { return value<=other.value; }
   constexpr auto operator <=(const float other)    const { return value<=other; }
   constexpr auto operator <=(const unsigned other) const { return value<=other; }
   constexpr auto operator <=(int other)            const { return value<=other; }

   constexpr auto operator >(const Seconds &other) const { return value>other.value; }
   constexpr auto operator >(const float other)    const { return value>other; }
   constexpr auto operator >(const unsigned other) const { return value>other; }
   constexpr auto operator >(int other)            const { return value>other; }

   constexpr auto operator >=(const Seconds &other) const { return value>=other.value; }
   constexpr auto operator >=(const float other)    const { return value>=other; }
   constexpr auto operator >=(const unsigned other) const { return value>=other; }
   constexpr auto operator >=(int other)            const { return value>=other; }

   constexpr operator float() const { return value; }
   explicit operator float() const volatile { return value; }
};

class Hertz {
private:
   float value = 0.0;

public:
   constexpr Hertz()                      = default;
   constexpr Hertz(const Hertz& other)    = default;

//   constexpr Hertz(int value)             : value((float)value) {}
//   constexpr Hertz(unsigned value)        : value((float)value) {}
//   constexpr Hertz(long value)            : value((float)value) {}
//   constexpr Hertz(unsigned long value)   : value((float)value) {}
//   constexpr Hertz(float value)           : value((float)value) {}
   constexpr Hertz(double value)          : value((float)value) {}
   Hertz(const volatile Hertz& other)     : value(other.value) {}

   Hertz &operator =(const Hertz &other) = default;

   auto &operator =(float other)                 {value = other;       return *this; }
   auto &operator =(const volatile Hertz &other) {value = other.value; return *this; }

   void  operator =(const Hertz &other) volatile {value = other.value; }

   constexpr auto getValue() const { return value; }
   float getValue() const volatile { return value; }

   constexpr auto operator *(float other)    const { return Hertz(value*other); }
   constexpr auto operator *(unsigned other) const { return Hertz(value*other); }
   constexpr auto operator *(int other)      const { return Hertz(value*other); }

   constexpr auto operator /(float other)    const { return Hertz(value/other); }
   constexpr auto operator /(unsigned other) const { return Hertz(value/other); }
   constexpr auto operator /(int other)      const { return Hertz(value/other); }

   constexpr auto operator /(Hertz other) const { return (float)(value/other.getValue()); }

   constexpr auto operator +(Hertz other) const { return Hertz(value+other.value); }
   constexpr auto operator -(Hertz other) const { return Hertz(value+other.value); }

   constexpr auto operator ==(const Hertz &other)   const { return value==other.value; }
   constexpr auto operator ==(const float other)    const { return value==other; }
   constexpr auto operator ==(const unsigned other) const { return value==other; }
   constexpr auto operator ==(int other)            const { return value==other; }

   constexpr auto operator <(const Hertz &other)   const { return value<other.value; }
   constexpr auto operator <(const float other)    const { return value<other; }
   constexpr auto operator <(const unsigned other) const { return value<other; }
   constexpr auto operator <(int other)            const { return value<other; }

   constexpr auto operator <=(const Hertz &other)   const { return value<=other.value; }
   constexpr auto operator <=(const float other)    const { return value<=other; }
   constexpr auto operator <=(const unsigned other) const { return value<=other; }
   constexpr auto operator <=(int other)            const { return value<=other; }

   constexpr auto operator >(const Hertz &other)   const { return value>other.value; }
   constexpr auto operator >(const float other)    const { return value>other; }
   constexpr auto operator >(const unsigned other) const { return value>other; }
   constexpr auto operator >(int other)            const { return value>other; }

   constexpr auto operator >=(const Hertz &other)   const { return value>=other.value; }
   constexpr auto operator >=(const float other)    const { return value>=other; }
   constexpr auto operator >=(const unsigned other) const { return value>=other; }
   constexpr auto operator >=(int other)            const { return value>=other; }

   constexpr operator float()    const { return value; }
   constexpr operator unsigned() const { return (int)round(value); }
};

constexpr auto operator *(float left,     Seconds right)  { return Seconds(left*right.getValue()); }
constexpr auto operator *(unsigned left,  Seconds right)  { return Seconds(left*right.getValue()); }
constexpr auto operator *(int left,       Seconds right)  { return Seconds(left*right.getValue()); }

constexpr auto operator *(float left,     Hertz right)    { return Hertz(left*right.getValue()); }
constexpr auto operator *(unsigned left,  Hertz right)    { return Hertz(left*right.getValue()); }
constexpr auto operator *(int left,       Hertz right)    { return Hertz(left*right.getValue()); }
constexpr auto operator *(Ticks left,     Hertz right)    { return Hertz(left*right.getValue()); }
constexpr auto operator *(Seconds left,   Hertz right)    { return Ticks(left.getValue()*right.getValue()); }

constexpr auto operator /(float left,     Seconds right) { return Hertz(left/right.getValue()); }
constexpr auto operator /(unsigned left,  Seconds right) { return Hertz(left/right.getValue()); }
constexpr auto operator /(int left,       Seconds right) { return Hertz(left/right.getValue()); }

constexpr auto operator /(float left,     Hertz right)   { return Seconds(left/right.getValue()); }
constexpr auto operator /(unsigned left,  Hertz right)   { return Seconds(left/right.getValue()); }
constexpr auto operator /(int left,       Hertz right)   { return Seconds(left/right.getValue()); }
constexpr auto operator /(Ticks left,     Hertz right)   { return Seconds(left.getValue()/right.getValue()); }

#else
   using Ticks    = unsigned;
   using Seconds  = float;
   using Hertz    = float;
#endif

/**
 * Convenience class for sharing storage of time measurements in ticks and seconds
 */
union Seconds_Ticks {
   ///  Time in seconds or Ticks
   uint32_t value;

   constexpr Seconds_Ticks() : value(0) {}

   constexpr Seconds toSeconds() const { return __builtin_bit_cast(float, value); }
   constexpr Ticks   toTicks()   const { return value; }

   constexpr void fromSeconds(Seconds seconds) { value = __builtin_bit_cast(unsigned, seconds.getValue()); }
   constexpr void fromTicks(Ticks ticks)       { value = ticks.getValue(); }

};

   /*
    * Allows writing numbers with units e.g. 100_ms
    */
   consteval auto operator"" _ticks(unsigned long long int num) { return static_cast<Ticks>((unsigned)num); };
   consteval auto operator"" _ticks(long double num)            { return static_cast<Ticks>((float)num); };

   consteval auto operator"" _s(unsigned long long int num)     { return static_cast<Seconds>((double)num); };
   consteval auto operator"" _s(long double num)                { return static_cast<Seconds>((double)num); };

   consteval auto operator"" _ms(unsigned long long int num)    { return static_cast<Seconds>((double)(num*0.001)); };
   consteval auto operator"" _ms(long double num)               { return static_cast<Seconds>((double)(num*0.001)); };

   consteval auto operator"" _us(unsigned long long int num)    { return static_cast<Seconds>((double)(num*0.000001)); };
   consteval auto operator"" _us(long double num)               { return static_cast<Seconds>((double)(num*0.000001)); };

   consteval auto operator"" _ns(unsigned long long int num)    { return static_cast<Seconds>((double)(num*0.000000001)); };
   consteval auto operator"" _ns(long double num)               { return static_cast<Seconds>((double)(num*0.000000001)); };

   consteval auto operator"" _Hz(unsigned long long int num)    { return static_cast<Hertz>((double)num); };
   consteval auto operator"" _Hz(long double num)               { return static_cast<Hertz>((double)num); };

   consteval auto operator"" _kHz(unsigned long long int num)   { return static_cast<Hertz>((double)(num*1000)); };
   consteval auto operator"" _kHz(long double num)              { return static_cast<Hertz>((double)(num*1000)); };

   consteval auto operator"" _MHz(unsigned long long int num)   { return static_cast<Hertz>((double)(num*1000000)); };
   consteval auto operator"" _MHz(long double num)              { return static_cast<Hertz>((double)(num*1000000)); };

//   consteval auto operator"" _percent(unsigned long long int num)  { return static_cast<double>(num)*0.01; };
//   consteval auto operator"" _percent(long double num)             { return static_cast<double>(num)*0.01; };

$(/PCR/nvicPriority: // /PCR/nvicPriority not found)
/**
 * Class to wrap a memory address as an array
 *
 * @tparam T         Type of array element
 * @tparam address   Memory address of start of array
 * @tparam size      Size of array (in elements)
 */
template<typename T, uint32_t address, size_t Size>
class MemoryAddressWrapper {

public:

   static constexpr size_t size = Size;

   /**
    * Array access
    *
    * @return Reference to element of type T
    *
    * @note The const below refers to the MemoryAddressWrapper being const not the implied array
    */
   constexpr T & __attribute__((always_inline)) operator[](size_t index) const {
      usbdm_assert(index<size, "Index out of range");
      return (reinterpret_cast<T *>(address))[index];
   }

};

/**
 * This is to allow use of hardware pointers in classes with a constexpr constructor !
 *
 * @tparam T  The type of the hardware to create a pointer for
 */
template<typename T>
class HardwarePtr {

private:
   HardwarePtr() = delete;
   HardwarePtr(const HardwarePtr&) = delete;
   HardwarePtr(HardwarePtr&&) = delete;

   // Address of hardware
   const uintptr_t ptr;

public:
   /**
    * Constructor for hardware pointer
    *
    * @param ptr  Address of hardware to be wrapped.
    */
   constexpr __attribute__((always_inline))  HardwarePtr(uintptr_t ptr) : ptr(ptr){};

   /**
    * Convert to pointer to the hardware
    *
    * @return Hardware pointer
    */
   constexpr auto __attribute__((always_inline))  operator->() const { return reinterpret_cast<volatile T *>(ptr);}

   /**
    * Convert to reference to the hardware
    *
    * @return Hardware pointer
    */
   constexpr auto & __attribute__((always_inline))  operator*() const { return *reinterpret_cast<volatile T *>(ptr);}

   /**
    * Convert to uint32_t
    *
    * @return uint32
    */
   constexpr __attribute__((always_inline))  operator uint32_t() const { return ptr; }
};

/**
 * Enable and set priority of interrupts in NVIC.
 *
 * @param[in]  irqNum        Interrupt number
 * @param[in]  nvicPriority  Interrupt priority
 *
 * @note Any pending interrupts are cleared before enabling.
 */
void enableNvicInterrupt(IRQn_Type irqNum, uint32_t nvicPriority);

/**
 * @addtogroup PeripheralPinTables Peripheral Information Classes
 * @brief Provides information about pins used by a peripheral
 * @{
 */

/**
 * Used to indicate or control the polarity of an I/O with selectable polarity
 */
enum Polarity : uint32_t {
   ActiveLow  = 0xFFFFFFFFU,  ///< Signal is active low i.e. Active => Low level, Inactive => High level
   ActiveHigh = 0x00000000U,  ///< Signal is active high i.e. Active => High level, Inactive => Low level
};

/** Pin number indicating the function has a fixed mapping to a pin */
constexpr   int8_t FIXED_NO_PCR         = 0x00;

/** Pin number indicating the function doesn't exist. Note: -ve value*/
constexpr   int8_t INVALID_PCR          = static_cast<int8_t>(0xA5);

/** Pin number indicating the function is not currently mapped to a pin. Note: -ve value */
constexpr   int8_t UNMAPPED_PCR         = static_cast<int8_t>(0xA4);

#ifdef PCC
/**
 * Enable clock to selected ports
 *
 * @param[in] pccAddress Address of PCC register for port to enable
 */
static inline void enablePortClocks(uint32_t pccAddress) {
   *(volatile uint32_t *)pccAddress = *(volatile uint32_t *)pccAddress | PCC_PCCn_CGC_MASK;
   __DMB();
};

/**
 * Disable clock to selected ports
 *
 * @param[in] pccAddress Address of PCC register for port to disable
 */
static inline void disablePortClocks(uint32_t pccAddress) {
   *(volatile uint32_t *)pccAddress = *(volatile uint32_t *)pccAddress & ~PCC_PCCn_CGC_MASK;
   __DMB();
};

#endif

#ifndef PORT_PCR_LK
/**
 * Some devices don't have LK function on pin
 */
#define PORT_PCR_LK(x) (0)
#endif

#ifndef PORT_PCR_DSE
/**
 * Some devices don't have DSE function on pin
 */
#define PORT_PCR_DSE(x) (0)
#endif

#ifndef PORT_PCR_ODE
/**
 * Some devices don't have ODE function on pin
 * The open-drain mode is automatically selected when I2C function is selected for the pin
 */
#define PORT_PCR_ODE(x) 0
#endif

#ifndef PORT_PCR_PE
/**
 * Some devices don't have PE function on pin
 */
#define PORT_PCR_PE(x) 0
#endif

#ifndef PORT_PCR_PS
/**
 * Some devices don't have PS function on pin
 */
#define PORT_PCR_PS(x) 0
#endif

#ifndef PORT_PCR_SRE
/**
 * Some devices don't have PS function on pin
 */
#define PORT_PCR_SRE(x) 0
#endif

#ifndef PORT_PCR_PFE
/**
 * Some devices don't have PFE function on pin
 */
#define PORT_PCR_PFE(x) 0
#endif

/**
 * PCR value
 */
enum class PcrValue : uint32_t {
   // Using an ENUM prevents automatic conversions from uint32_t to PcrValue
};

constexpr uint32_t operator ~(PcrValue pcrValue) {
   return ~static_cast<uint32_t>(pcrValue);
}

constexpr uint32_t operator &(PcrValue pcrValue, uint32_t mask) {
   return static_cast<uint32_t>(pcrValue) & mask;
}

constexpr bool operator ==(PcrValue pcrValue, uint32_t mask) {
   return static_cast<uint32_t>(pcrValue) & mask;
}

$(/PCR/pcr_enums: // /PCR/pcr_enums not found)


template<typename ... V>
constexpr PcrValue pcrOr(const V &... v) {
  std::common_type_t<PcrValue> result = {};
  (void)std::initializer_list<uint32_t>{ (result = (result | v), 0U)... };
  return result;
}

/**
 * Force a PcrValue to refer to the GPIO function i.e. MUX field = PinMux_Gpio
 *
 * @param op   PCR value to base result on
 *
 * @return  Modified PCR value
 */
constexpr PcrValue gpioPcrValue(PcrValue op) {
   return (PcrValue)((op&~PORT_PCR_MUX_MASK)|PinMux_Gpio);
}

/**
 * Force a PcrValue to refer to the Analogue function i.e. MUX field = PinMux_Analogue
 *
 * @param op   PCR value to base result on
 *
 * @return  Modified PCR value
 */
constexpr PcrValue analoguePcrValue(PcrValue op) {
   return (PcrValue)((op&~PORT_PCR_MUX_MASK)|PinMux_Analogue);
}


$(/PCR/extra_methods: // /GPIO/extra_methods Not found)

/**
 * Port information
 * Information required to configure the PCR for a particular function
 */
class PortInfo {

private:
   PortInfo() = delete;
   PortInfo(const PortInfo&) = delete;
   PortInfo(PortInfo&&) = delete;

public:
   const uint32_t      portAddress;  ///< Port hardware base pointer
   const uint32_t      clockInfo;    ///< Either clock mask or port clock control register address
   const uint32_t      gpioAddress;  ///< Associated GPIO Hardware base pointer
   const IRQn_Type     irqNum;       ///< Port interrupt number
   const NvicPriority  irqLevel;     ///< Interrupt priority level or NvicPriority_NotInstalled if handler not installed

   constexpr PortInfo(const uint32_t      portAddress,
                      const uint32_t      clockInfo,
                      const IRQn_Type     irqNum,
                      const uint32_t      gpioAddress,
                      const NvicPriority  nvicPriority) :
               portAddress(portAddress),
               clockInfo(clockInfo),
               gpioAddress(gpioAddress),
               irqNum(irqNum),
               irqLevel(nvicPriority) {
   }
};

/**
 * Pin information
 */
class PinInfo {

private:
   PinInfo() = delete;
   PinInfo(const PinInfo&) = delete;
   PinInfo(PinInfo&&) = delete;

public:
   const uint32_t      portAddress;  ///< Port hardware base pointer
   const uint32_t      clockInfo;    ///< Either clock mask or port clock control register address
   const uint32_t      gpioAddress;  ///< GPIO Hardware base pointer
   const PcrValue      pcrValue;     ///< Default PCR value for pin - Includes PinMux value which determines pin use in most cases
   const int8_t        gpioBit;      ///< Bit number for pin - must be signed for special values used for error checks
   const IRQn_Type     irqNum;       ///< Port interrupt number
   const NvicPriority  irqLevel;     ///< Interrupt priority level or NvicPriority_NotInstalled if handler not installed

   /**
    * Constructor from portInfo etc.
    *
    * @param portInfo      Describes port
    * @param gpioBit       Bit number GPIO being modified
    * @param pcrValue      Default PCR value for pin
    */
   constexpr PinInfo(
         const PortInfo &portInfo,
         int             gpioBit,
         PcrValue        pcrValue) :
                     portAddress(portInfo.portAddress), clockInfo(portInfo.clockInfo), gpioAddress(portInfo.gpioAddress),
                     pcrValue(pcrValue), gpioBit(gpioBit), irqNum(portInfo.irqNum), irqLevel(portInfo.irqLevel) {}

   /**
    * Constructor from pinInfo with override for bit number and PCR value.
    * This is useful when re-using a PinInfo for another PinMux value i.e. peripheral
    *
    * @param pinInfo       Describes pin
    * @param gpioBit       Bit number GPIO being modified
    * @param pcrValue      Default PCR value for pin
    */
   constexpr PinInfo(
         const PinInfo &pinInfo,
         int             gpioBit,
         PcrValue        pcrValue) :
                     portAddress(pinInfo.portAddress), clockInfo(pinInfo.clockInfo), gpioAddress(pinInfo.gpioAddress),
                     pcrValue(pcrValue), gpioBit(gpioBit), irqNum(pinInfo.irqNum), irqLevel(pinInfo.irqLevel) {}
};

#ifdef PORT_DFCR_CS_MASK
   /**
    * Controls the Digital Pin Filter clock source
    */
   enum PinDigitalFilterClock {
      PinDigitalFilterClock_BusClock = PORT_DFCR_CS(0),///< Pin Digital Filter Clock = BusClock
      PinDigitalFilterClock_LpoClock = PORT_DFCR_CS(1),///< Pin Digital Filter Clock = Low Power Oscillator
   };
#endif

/**
 * Type definition for PORT interrupt call back.
 * This callback is shared by all port pins
 *
 * @param[in] status 32-bit value from ISFR (each bit indicates a pin interrupt source)
 */
typedef void (*PinCallbackFunction)(uint32_t status);

/**
 * Provides common unhandledCallback for all PORTs
 */
class PcrBase {

public:
   /**
    * Limit index to permitted bit index range
    * Used to prevent noise from static assertion checks that detect a condition already detected in a more useful fashion.
    *
    * @param bitNum   Index to limit
    *
    * @return Index limited to permitted range
    */
   static inline constexpr int limitIndex(int bitNum) {
      if (bitNum<0) {
         return 0;
      }
      if (bitNum>(31)) {
         return 31;
      }
      return bitNum;
   }

   /** Class to static check inputNum input exists and is mapped to an input pin */
   template<int bitNum> class CheckPinExistsAndIsMapped {
      // Tests are chained so only a single assertion can fail so as to reduce noise

      // Function is not currently mapped to a pin
      static constexpr bool Test1 = (bitNum != UNMAPPED_PCR);
      // Peripheral signal does not exit
      static constexpr bool Test2 = !Test1 || (bitNum != INVALID_PCR);
      // Peripheral signal mapped directly to pin - no PCR (not an error)
      static constexpr bool Test3 = !Test2 || (bitNum != FIXED_NO_PCR);
      // Illegal value
      static constexpr bool Test4 = !Test3 || (bitNum>0) || (bitNum<=31);

      static_assert(Test1, "Peripheral signal is not mapped to a pin - Modify Configure.usbdm");
      static_assert(Test2, "Peripheral signal doesn't exist in this device/package - Check Configure.usbdm for available signals");
      static_assert(Test4, "Illegal bit number should be [0..31]");

   public:
      /** Dummy function to allow convenient in-line checking */
      static constexpr void check() {}
   };

private:
   /**
    * This class is not intended to be instantiated
    */
   PcrBase() = delete;
   PcrBase(const PcrBase&) = delete;
   PcrBase(PcrBase&&) = delete;

public:
   /** Callback to catch unhandled interrupt */
   static void unhandledCallback(uint32_t) {
      setAndCheckErrorCode(E_NO_HANDLER);
   }
};

/**
 * Common PORT features shared across all port pins
 *
 * @tparam portAddress           Address of port to be used
 * @tparam irqNum                Interrupt number for NVIC entry
 * @tparam defaultNvicPriority   Default interrupt priority.\n
 *                               NvicPriority_NotInstalled indicates PORT not configured for interrupts.
 */
template<uint32_t portAddress, IRQn_Type irqNum, NvicPriority defaultNvicPriority>
class PcrBase_T {

private:
   /**
    * This class is not intended to be instantiated
    */
   PcrBase_T(const PcrBase_T&) = delete;
   PcrBase_T(PcrBase_T&&) = delete;

   /** Callback functions for ISRs */
   static PinCallbackFunction fCallback;

public:

   // Empty Constructor
   constexpr PcrBase_T() = default;

#if defined(PORT_DFCR_CS_MASK)
   /** PORT hardware as pointer to struct */
   static constexpr HardwarePtr<PORT_DFER_Type> port = portAddress;
#else
   /** PORT hardware as pointer to struct */
   static constexpr HardwarePtr<PORT_Type> port = portAddress;
#endif

   static constexpr bool     HANDLER_INSTALLED  = defaultNvicPriority>=0;  ///< Used to check if USBDM port pin interrupt handler has been installed

   /**
    * Interrupt handler\n
    *  - Clears interrupt flag
    *  - Calls callback
    */
   static void irqHandler() {
      // Capture interrupt flags
      uint32_t status = port->ISFR;

      // Clear flags
      port->ISFR = status;

      fCallback(status);
   }

   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note Only usable with static objects.
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match PinCallbackFunction
    *    void callback(uint8_t status) {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * static AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Llwu::Pin<LlwuPin_0>::wrapCallback<AClass, &AClass::callback, aClass>();
    * // Use as callback
    * Llwu::Pin<LlwuPin_0>::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(uint32_t), T &object>
   static PinCallbackFunction wrapCallback() {
      static PinCallbackFunction fn = [](uint32_t status) {
         (object.*callback)(status);
      };
      return fn;
   }

   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note There is a considerable space and time overhead to using this method
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match PinCallbackFunction
    *    void callback(uint8_t status) {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Llwu::Pin<LlwuPin_0>::wrapCallback<AClass, &AClass::callback>(aClass);
    * // Use as callback
    * Llwu::Pin<LlwuPin_0>::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(uint32_t)>
   static PinCallbackFunction wrapCallback(T &object) {
      static T &obj = object;
      static PinCallbackFunction fn = [](uint32_t status) {
         (obj.*callback)(status);
      };
      return fn;
   }

   /**
    * Set callback for Pin interrupts
    *
    * @param[in] callback The function to call on Pin interrupt. \n
    *                     nullptr to indicate none
    *
    * @return E_NO_ERROR            No error
    * @return E_HANDLER_ALREADY_SET Handler already set
    *
    * @note There is a single callback function for all pins on the related port.
    *       It is necessary to identify the originating pin in the callback
    */
   static ErrorCode setPinCallback(PinCallbackFunction callback) {
      static_assert(HANDLER_INSTALLED, "Gpio not configured for interrupts - Modify Configure.usbdm");

      if (callback == nullptr) {
         fCallback = PcrBase::unhandledCallback;
         return E_NO_ERROR;
      }
#ifdef DEBUG_BUILD
      // Callback is shared across all port pins. Check if callback already assigned
      if ((fCallback != PcrBase::unhandledCallback) && (fCallback != callback)) {
         return setErrorCode(ErrorCode::E_HANDLER_ALREADY_SET);
      }
#endif
      fCallback = callback;
      return E_NO_ERROR;
   }

   /**
    * Enable Pin interrupts in NVIC.
    */
   static void enableNvicPinInterrupts() {
      static_assert(irqNum>=0, "Pin does not support interrupts");
      NVIC_EnableIRQ(irqNum);
   }

   /**
    * Enable and set priority of Pin interrupts in NVIC.
    * Any pending NVIC interrupts are first cleared.
    *
    * @param[in]  nvicPriority  Interrupt priority
    */
   static void enableNvicPinInterrupts(NvicPriority nvicPriority) {
      static_assert(irqNum>=0, "Pin does not support interrupts");
      enableNvicInterrupt(irqNum, nvicPriority);
   }

   /**
    * Disable Pin interrupts in NVIC.
    */
   static void disableNvicPinInterrupts() {
      static_assert(irqNum>=0, "Pin does not support interrupts");
      NVIC_DisableIRQ(irqNum);
   }
};

/**
 * @brief Template representing a Pin Control Register (PCR)
 *
 * Code examples:
 * @code
 * // Create PCR type
 * using PortC_3 = USBDM::Pcr_T<SIM_SCGC5_PORTC_MASK, PORTC_BasePtr, 3, USBDM::DEFAULT_PCR>;
 *
 * // Configure PCR
 * PortC_3::setPCR(PinPull_Up,PinDriveStrength_High,PinDriveMode_PushPull,PinAction_None,PinFilter_None,PinSlewRate_Fast,PinMux_3);
 *
 * // Disable Port clock
 * PortC_3::disableClock();
 * @endcode
 *
 * @tparam clockInfo             PCC register address or mask for SIM clock register associated with this PCR
 * @tparam portAddress           PORT to be manipulated e.g. PORTA (PCR array)
 * @tparam bitNum                Bit number e.g. 3
 * @tparam defPcrValue           Default value for PCR (including MUX value)
 * @tparam irqNum                IRQ number for pin interrupt
 * @tparam defaultNvicPriority   Default interrupt priority.\n
 *                               NvicPriority_NotInstalled indicates PORT not configured for interrupts.
 */
template<uint32_t clockInfo, uint32_t portAddress, IRQn_Type irqNum, PcrValue defPcrValue, NvicPriority defaultNvicPriority, int bitNum>
class Pcr_T : public PcrBase_T<portAddress, irqNum, defaultNvicPriority> {

   // This situation is checked for elsewhere with more specific error messages
//   PcrBase::CheckPinExistsAndIsMapped<bitNum> check;

protected:
   /// Default constructor used by derived classes only
   constexpr Pcr_T() {};

public:
   /// Bit number of bit being manipulated within underlying port hardware
   static constexpr int       BITNUM             = bitNum;

   /// Mask for the bit being manipulated within underlying port hardware
   static constexpr uint32_t  BITMASK            = makeBitMask(bitNum);

   /// Default PCR value including PinMux value for peripheral
   static constexpr PcrInit  defaultPcrValue = defPcrValue;

private:
   /**
    * This class is not intended to be instantiated
    */
   Pcr_T(const Pcr_T&) = delete;
   Pcr_T(Pcr_T&&) = delete;

#ifdef PORT_DFCR_CS_MASK
   static constexpr HardwarePtr<uint32_t>       PCR    = portAddress+offsetof(PORT_DFER_Type,PCR[bitNum]);
#else
   static constexpr HardwarePtr<uint32_t>       PCR    = portAddress+offsetof(PORT_Type,PCR[bitNum]);
#endif

   using PcrBase = PcrBase_T<portAddress, irqNum, defaultNvicPriority>;

public:
   /**
    * Enable clock associated with PORT
    */
   static void enablePortClock() {
      if constexpr (portAddress != 0) {
         enablePortClocks(clockInfo);
      }
   }

   /**
    * Disable clock associated with PORT
    */
   static void disablePortClock() {
      if constexpr (portAddress != 0) {
         disablePortClocks(clockInfo);
      }
   }

   /**
    * Get Pin Control Register (PCR) value \n
    * The clock to the port will be enabled before reading the PCR
    *
    * @return pcrValue PCR value.
    */
   static uint32_t getPCR() {
      if constexpr (portAddress == 0) {
         return 0;
      }
      enablePortClocks(clockInfo);
      return *PCR;
   }
   
$(/PCR/set_pcr: // /PCR/set_pcr not found)
$(/PCR/set_output: // /PCR/set_output not found)
$(/PCR/set_input: // /PCR/set_input not found)
$(/PCR/set_pcr_option: // /PCR/set_pcr_option not found)
   /**
    *  Disable Pin
    *  This sets the pin to MUX 0 which is specified for minimum leakage in low-power modes.
    *
    *  @note The clock is left enabled as shared with other pins.
    *  @note Mux(0) is also the Analogue MUX setting
    */
   static void disablePin() {
      if constexpr (portAddress != 0) {
         enablePortClock();
         setPcrOption(PinMux_Disabled);
      }
   }

   /**
    * Clear pin interrupt flag.
    * Assumes clock to the port has already been enabled.
    */
   static void clearPinInterruptFlag() {
      if constexpr (portAddress != 0) {
         *PCR = *PCR | PORT_PCR_ISF_MASK;
      }
   }

#ifdef PORT_DFCR_CS_MASK
   /**
    * Configures Digital Pin Filter
    *
    * @param pinDigitalFilterClock  Clock source
    * @param filterLength           Filter length in clock ticks
    *
    * @note Not all ports support this feature
    * @note This affects the digital filter for all pins of this port
    */
   static void configureDigitalPinFilter(PinDigitalFilterClock pinDigitalFilterClock, int filterLength) {
      if constexpr (portAddress != 0) {
         // Disable all filtering before change
         uint32_t dfer = Pcr_T::port->DFER;
         Pcr_T::port->DFER = 0;

         Pcr_T::port->DFCR = pinDigitalFilterClock;
         Pcr_T::port->DFWR = PORT_DFWR_FILT(filterLength);

         // Restore filtering on pins
         Pcr_T::port->DFER = dfer;
      }
   }

   /**
    * Enable digital filter on the pin
    *
    * @note Not all ports support this feature
    */
   static void enableDigitalPinFilter() {
      if constexpr (portAddress != 0) {
         Pcr_T::port->DFER = Pcr_T::port->DFER | BITMASK;
      }
   }

   /**
    * Disable digital filter on the pin
    *
    * @note Not all ports support this feature
    */
   static void disableDigitalPinFilter() {
      if constexpr (portAddress != 0) {
         Pcr_T::port->DFER = Pcr_T::port->DFER & ~BITMASK;
      }
   }
#endif

};

template<uint32_t portAddress, IRQn_Type irqNum, NvicPriority defaultNvicPriority>
PinCallbackFunction USBDM::PcrBase_T<portAddress, irqNum, defaultNvicPriority>::fCallback = PcrBase::unhandledCallback;

/**
 * @brief Template function to set a PCR to the default value
 *
 * @tparam  Last PCR to modify
 */
template<typename Last>
void processPcrs() {
   Last::setPCR();
}
/**
 * @brief Template function to set a collection of PCRs to the default value
 *
 * @tparam  Pcr1 PCR to modify
 * @tparam  Pcr2 PCR to modify
 * @tparam  Rest Remaining PCRs to modify
 */
template<typename Pcr1, typename  Pcr2, typename  ... Rest>
void processPcrs() {
   processPcrs<Pcr1>();
   processPcrs<Pcr2, Rest...>();
}
/**
 * @brief Template function to set a PCR to a given value
 *
 * @param[in]   pcrValue PCR value to set
 *
 * @tparam  Last PCR to modify
 */
template<typename Last>
void processPcrs(uint32_t pcrValue) {
   Last::setPCR(pcrValue);
}

/**
 * @brief Template function to set a collection of PCRs to a given value
 *
 * @param[in] pcrValue PCR value to set
 *
 * @tparam  Pcr1 PCR to modify
 * @tparam  Pcr2 PCR to modify
 * @tparam  Rest Remaining PCRs to modify
 */
template<typename Pcr1, typename  Pcr2, typename  ... Rest>
void processPcrs(uint32_t pcrValue) {
   processPcrs<Pcr1>(pcrValue);
   processPcrs<Pcr2, Rest...>(pcrValue);
}

/**
 * @brief Template representing a Pin Control Register (PCR)\n
 * Makes use of an info[] table in a configuration class
 *
 * Code examples:
 * @code
 * // Create PCR type
 * PcrTable_T<spiInfo, 3> SpiMOSI;
 *
 * // Configure PCR
 * SpiMOSI::setPCR(PinPull_Up,PinDriveStrength_High,PinDriveMode_PushPull,PinAction_None,PinFilter_None,PinSlewRate_Fast,PinMux_3);
 *
 * // Disable clock to associated PORT
 * SpiMOSI::disableClock();
 *
 * // Alternatively the PCR may be manipulated directly
 * Pcr_T<spiInfo, 3>::setPCR(PORT_PCR_DSE_MASK|PORT_PCR_PE_MASK|PORT_PCR_PS_MASK);
 * @endcode
 *
 * @tparam info          Configuration class
 * @tparam index         Index of pin in configuration table within class
 */
template<class Info, uint8_t index>
class PcrTable_T : public Pcr_T<Info::info[index].clockInfo, Info::info[index].portAddress, Info::info[index].irqNum, Info::info[index].pcrValue, Info::info[index].irqLevel, Info::info[index].gpioBit> {
};
/**
 * @}
 ** PeripheralPinTables
 */

#if defined(RELEASE_BUILD)
// MACRO to do OR operation
#define USBDM_PCR_OR(...) USBDM_CONCAT(USBDM_OR, USBDM_COUNT_ARGUMENTS(__VA_ARGS__))(__VA_ARGS__)
#define USBDM_OR0()
#define USBDM_OR1(a)           (PcrValue)(a)
#define USBDM_OR2(a,b)         (PcrValue)(a|b)
#define USBDM_OR3(a,b,c)       (PcrValue)(a|b|c)
#define USBDM_OR4(a,b,c,d)     (PcrValue)(a|b|c|d)
#define USBDM_OR5(a,b,c,d,e)   (PcrValue)(a|b|c|d|e)
#define USBDM_OR6(a,b,c,d,e,f) (PcrValue)(a|b|c|d|e|f)
#endif

#pragma GCC pop_options

} // End namespace USBDM

#endif /* HEADER_PCR_H */

