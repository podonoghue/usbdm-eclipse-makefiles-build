/**
 * @file     adc.h (180.ARM_Peripherals/Project_Headers/adc.h)
 * @brief    ADC routines
 */

#ifndef HEADER_ADC_H
#define HEADER_ADC_H

/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include <climits>
#include <cstddef>
#include "pin_mapping.h"

#if $(/ADC/enablePeripheralSupport) // /ADC/enablePeripheralSupport

namespace USBDM {

$(/ADC/peripheral_h_definition:// $/ADC/peripheral_h_definition not found)
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Abstraction for Analogue Input
 * @{
 */

/**
 * Provides:
 * - Common unhandledCallback for all ADCs.
 * - Shared constants
 *
 * This class is not intended to be instantiated directly.
 */
class Adc {

public:

   /// Pointer to hardware instance
   const HardwarePtr<ADC_Type> adc;

private:
   Adc(const Adc&) = delete;
   Adc(Adc&&) = delete;

protected:
   /**
    * Constructor
    *
    * @param adcBaseAddress Base address of ADC hardware
    */
   constexpr  Adc(uint32_t adcBaseAddress) : adc(adcBaseAddress) {
   }

   /**
    * Initiates a conversion but does not wait for it to complete.
    * Intended for use with interrupts or DMA.
    *
    * @param[in] sc1Value SC1 register value. This includes channel, differential mode and interrupts enable.
    */
   void startConversion(const int sc1Value) const {
      // Trigger conversion
      adc->SC1[0] = sc1Value;
   };

   /**
    * Initiates a conversion and waits for it to complete.
    *
    * @param[in] sc1Value SC1 register value including the ADC channel to use and differential mode
    *
    * @return - The result of the conversion as an integer converted from 16-bit ADC value
    *           For single-ended conversions this will be zero extended
    *           For differential conversions this will be sign-extended
    *
    * @note Result is signed but will always be positive for single-ended conversions.
    */
   int readAnalogue(uint32_t sc1Value) const {

      // Trigger conversion
      adc->SC1[0] = sc1Value;
      (void)adc->SC1[0];

      while ((adc->SC1[0]&ADC_SC1_COCO_MASK) == 0) {
         __asm__("nop");
      }

      return getConversionResult();
   };

   /**
    * Initiates a conversion and waits for it to complete.
    *
    * @param[in] sc1Value SC1 register value including the ADC channel to use and differential mode
    * @param[in] adcResolution Resolution for converter e.g. AdcResolution_16bit_se
    *
    * @return - The result of the conversion as an integer converted from 16-bit ADC value
    *           For single-ended conversions this will be zero extended
    *           For differential conversions this will be sign-extended
    *
    * @note Result is signed but will always be positive for single-ended conversions.
    * @note The resolution used affects all future conversion on all channels on the ADC
    */
   int readAnalogue(uint32_t sc1Value, AdcResolution adcResolution) const {
      adc->SC3 = (adc->SC3&~ADC_SC3_MODE_MASK)|adcResolution;
      return readAnalogue(sc1Value);
   };

public:

   /**
    * Get ADC maximum conversion value for an single-ended range
    *
    * @param adcResolution
    *
    * @return range e.g. AdcResolution_8bit_se => (2^8)-1
    */
   static constexpr int getSingleEndedMaximum(AdcResolution adcResolution) {
      switch(adcResolution) {
         case AdcResolution_8bit_se:  return (1<<8)-1;
         case AdcResolution_10bit_se: return (1<<10)-1;
         case AdcResolution_12bit_se: return (1<<12)-1;
         default:                     return 0;
      }
   }

   /**
    * Enables hardware trigger mode of operation and configures the channel.
    *
    * @param[in] sc1Value        SC1 register value including the ADC channel, Differential mode and interrupt enable
    * @param[in] adcPretrigger   Hardware pre-trigger to use for this channel

    *                            This corresponds to pre-triggers in the PDB channels and SC1[n] register setups
    */
   void enableHardwareConversion(int sc1Value, AdcPretrigger adcPretrigger) const {
      // Set hardware triggers
      adc->SC2 = (adc->SC2)|ADC_SC2_ADTRG(1);
      // Configure channel for hardware trigger input
      adc->SC1[adcPretrigger] = sc1Value;
   }

   /**
    * Set resolution
    *
    * @param[in] adcResolution Resolution for converter e.g. AdcResolution_16bit_se
    *
    * @note This affects all channels on the ADC
    */
   void setResolution(AdcResolution adcResolution) const {
      adc->SC3 = (adc->SC3&~ADC_SC3_MODE_MASK)|adcResolution;
   }

   /**
    * Set ADC  (and PGA if present) voltage reference
    *
    * @param adcRefSel Reference to select
    *
    * @note The PGA requires use of AdcRefSel_VrefOut (~1.2V)
    */
   void setReference(AdcReferenceSel adcRefSel=AdcReferenceSel_VrefhAndVrefl) {
      adc->SC2 = (adc->SC2&~ADC_SC2_REFSEL_MASK)|adcRefSel;
   }

   /**
    * Configure comparison mode.
    *
    * @param[in] adcCompare   Comparison operation to enable
    * @param[in] low          Lower threshold
    * @param[in] high         Higher threshold (if needed)
    */
   void enableComparison(AdcCompare adcCompare, int value) const {

      // Set comparison value;
      adc->CV = value;

      // Set comparison fields
      adc->SC2 = adc->SC2 | (adc->SC2&~(ADC_SC2_ACFE(1)|ADC_SC2_ACFGT(1)))|
            (adcCompare&(ADC_SC2_ACFE_MASK|ADC_SC2_ACFGT_MASK));
   }

   /**
    * Gets result of last software initiated conversion
    *
    * @return The result of the conversion as an integer converted from 16-bit ADC value\n
    *         For single-ended conversions this will be zero extended\n
    *         For differential conversions this will be sign-extended
    *
    * @note Result is signed but will always be positive for single-ended conversions.
    * @note This will also clear the conversion flag if set
    */
   int getConversionResult() const {

      // This is a 32-bit value with leading zeroes i.e unsigned
      int value = ADC_R_D_MASK & (adc->R[0]);
      return value;
   };

   /**
    * Gets result of hardware initiated conversion
    *
    * @param pretrigger Pretrigger to use (identifies which SC1 register to access)
    *
    * @return The result of the conversion as an integer converted from 16-bit ADC value\n
    *         For single-ended conversions this will be zero extended\n
    *         For differential conversions this will be sign-extended
    *
    * @note Result is signed but will always be positive for single-ended conversions.
    * @note This will also clear the conversion flag if set
    */
   int getHardwareConversionResult(AdcPretrigger preTrigger) const {

      // This is a 32-bit value with leading zeroes i.e unsigned
      int value = ADC_R_D_MASK & (adc->R[preTrigger]);

      return value;
   };

   /**
    * Check if ADC is current doing a conversion
    *
    * @return true   => ADC is busy doing a conversion
    * @return false  => ADC is idle
    */
   bool isBusy() const {
      return adc->SC2&ADC_SC2_ADACT_MASK;
   }

   /**
    * Configure the pin associated with this ADC channel.
    *
    * @param sc1Value Used to obtain channel number
    */
   void setInput(unsigned sc1Value) const {
      // Map pin to ADC
      adc->APCTL1 |= (1<<(sc1Value&0b11111));
   }

   /**
    *  Disable Pin
    *  The pin is restored to usual operation (non-ADC)
    *
    * @param sc1Value Used to obtain channel number
    */
   void disablePin(unsigned sc1Value) const {
      // Map pin to ADC
      adc->APCTL1 &= ~(1<<(sc1Value&0b11111));
   }

}; // class Adc

/**
 * Class representing a minimal ADC channel
 *
 * This class is not intended to be instantiated directly.
 */
class AdcChannel : public Adc {

private:
   AdcChannel() = delete;
   AdcChannel(const AdcChannel&) = delete;
   AdcChannel(AdcChannel&&) = delete;

protected:
   /// ADC channel (including ADC_SC1_DIFF_MASK mask)
   const uint32_t sc1Value;

   /**
    * Constructor
    *
    * @param adcAddress  ADC address
    * @param channel     ADC channel to use
    */
   constexpr AdcChannel(uint32_t adcAddress, uint8_t channel) : Adc(adcAddress), sc1Value(channel) {}

public:
   /**
    * Initiates a conversion and waits for it to complete.
    *
    * @return The result of the conversion as an integer converted from 16-bit ADC value\n
    *         For single-ended conversions this will be zero extended\n
    *         For differential conversions this will be sign-extended
    *
    * @note Result is signed but will always be positive for single-ended conversions.
    */
   int readAnalogue() const {
      return Adc::readAnalogue(sc1Value);
   };

   /**
    * Initiates a conversion and waits for it to complete.
    *
    * @param[in] adcResolution Resolution for converter e.g. AdcResolution_16bit_se
    *
    * @return The result of the conversion as an integer converted from 16-bit ADC value\n
    *         For single-ended conversions this will be zero extended\n
    *         For differential conversions this will be sign-extended
    *
    * @note Result is signed but will always be positive for single-ended conversions.
    * @note The resolution used here affects all future conversion on all channels on the ADC
    */
   int readAnalogue(AdcResolution adcResolution) const {
      return Adc::readAnalogue(sc1Value, adcResolution);
   };

   /**
    * Enables hardware trigger mode of operation and configures a channel.
    *
    * @param[in] adcPretrigger   Hardware pre-trigger to use for this channel.\n
    *                            This corresponds to pre-triggers in the PDB channels and SC1[n]/R[n] register selection
    * @param[in] adcInterrupt    Whether to generate an interrupt when each conversion completes
    */
   void enableHardwareConversion(AdcPretrigger adcPretrigger, AdcInterrupt adcInterrupt=AdcInterrupt_Disabled) const {
      Adc::enableHardwareConversion(adcInterrupt|sc1Value, adcPretrigger);
   }

   /**
    * Initiates a conversion but does not wait for it to complete.
    * Intended for use with interrupts or DMA.
    *
    * @param[in] adcInterrupt   Determines if an interrupt is generated when conversions are complete
    */
   void startConversion(AdcInterrupt adcInterrupt=AdcInterrupt_Disabled) const {
      Adc::startConversion(sc1Value|adcInterrupt);
   };

   /**
    * Configure the pin associated with this ADC channel.
    */
   void setInput() const {
      Adc::setInput(sc1Value);
   }

   /**
    *  Disable Pin
    *  The pin is restored to usual operation (non-ADC)
    */
   void disablePin() const {
      Adc::disablePin(sc1Value);
   }

}; // class AdcChannel

/**
 * Template class representing an ADC.
 * This class is not intended to be instantiated.
 *
 * Example
 * @code
 *  // Access to ADC0
 *  using Adc0 = AdcBase_T<Adc0Info>;
 *
 *  // Initialise ADC
 *  Adc0::setMode(AdcResolution_16bit_se);
 *  @endcode
 *
 * @tparam info Table of information describing ADC
 */
template<class Info>
class AdcBase_T : public Adc, public Info {

private:
   AdcBase_T(const AdcBase_T&) = delete;
   AdcBase_T(AdcBase_T&&) = delete;


protected:
$(/ADC/protectedMethods: // No /ADC/protectedMethods found)

public:
   /** Hardware instance pointer */
   static constexpr HardwarePtr<ADC_Type> adc = Info::baseAddress;

   /** Get reference to ADC hardware as struct */
   static volatile ADC_Type &adcPtr() { return Info::adc(); }

   /** @return Base address of SPI hardware as uint32_t */
   static constexpr uint32_t adcBase() { return Info::baseAddress; }
   /** @return Base address of ADC.SC1[index] registers as uint32_t */
   static constexpr uint32_t adcSC(unsigned index) { return adcBase() + offsetof(ADC_Type, SC1) + index*sizeof(ADC_Type::SC1[0]); }
   /** @return Base address of ADC.R[index] registers as uint32_t */
   static constexpr uint32_t adcR(unsigned index) { return adcBase() + offsetof(ADC_Type, R) + index*sizeof(ADC_Type::R[0]); }

public:

   constexpr AdcBase_T() : Adc(Info::baseAddress) {};

   /** Allow convenient access to associate AdcInfo */
   using AdcInfo = Info;
   using Info::configure;

$(/ADC/publicMethods: // No /ADC/publicMethods found)
$(/ADC/InitMethod: // /ADC/InitMethod not found)
   /**
    * Configure the ADC
    *
    * @param[in] adcResolution   Resolution for converter e.g. AdcResolution_16bit_se
    * @param[in] adcClockSource  Clock source e.g. AdcClockSource_Asynch
    * @param[in] adcSample       Input sample interval. Allows use of higher input impedance sources
    * @param[in] adcPower        Allows reduced power consumption but with restricted input clock speed
    * @param[in] adcMuxsel       Selects between A/B multiplexor inputs on channels 4-8
    * @param[in] adcClockRange   Allows higher input clock speed operation
    * @param[in] adcAsyncClock   Controls whether the internal ADC clock is always enabled or only when needed for a conversion
    *
    * @note These settings apply to all channels on the ADC.\n
    * The resulting ADC clock rate should be restricted to the following ranges (assumes AdcPower_Normal, AdcClockRange_High):\n
    *  [2..12MHz] for 16-bit conversion modes  \n
    *  [1..18MHz] for other conversion modes
    */
   static void configure(
         AdcResolution   adcResolution,
         AdcClockSource  adcClockSource  = AdcClockSource_Asynch,
         AdcSample       adcSample       = AdcSample_Short,
         AdcPower        adcPower        = AdcPower_Normal
   ) {
      Info::enable();
      adc->SC3 = adcResolution|calculateClockDivider(adcClockSource, adcPower)|adcPower|(adcSample&ADC_SC3_ADLSMP_MASK);
   }

   /**
    * Calculate ADC clock divider (ADC_CFG1_ADIV) and confirm clock source (ADC_CFG1_ADICLK)
    * @note adcClockSource may be modified in return value
    *
    * @param adcClockSource   ADC clock source
    * @param adcClockRange    ADC clock range (high/normal)
    * @param adcPower         ADC power level (normal/low)
    *
    *
    * @return ADC_CFG1_ADIV|ADC_CFG1_ADICLK value
    */
   static unsigned calculateClockDivider(AdcClockSource adcClockSource, AdcPower adcPower) {
      if (adcClockSource == AdcClockSource_Asynch) {
         // Internal clock is always OK with /1
         return AdcClockSource_Asynch|AdcClockDivider_DivBy1;
      }
      static constexpr unsigned MinClock =  2000000;
      unsigned maxClock = 0;
      switch(adcPower) {
         case AdcPower_Low :
            maxClock =  4000000;
            break;
         case AdcPower_Normal :
            maxClock =  8000000;
            break;
      }
      unsigned adiv;
      for(;;) {
         unsigned clockFrequency = Info::getClockFrequency(adcClockSource);
         for (adiv=0; adiv<=3; adiv++) {
            if ((clockFrequency <= maxClock) && (clockFrequency >= MinClock)) {
               break;
            }
            clockFrequency /= 2;
         }
         if ((adiv>3) && (adcClockSource == AdcClockSource_BusClock)) {
            // Automatically switch from  AdcClockSource_Bus -> AdcClockSource_Busdiv2
            adcClockSource = AdcClockSource_BusClockDiv2;
            continue;
         }
         break;
      }
      usbdm_assert(adiv<4, "Unable to find suitable ADC clock");
      return ADC_SC3_ADIV(adiv)|adcClockSource;
   }

   /**
    * Check if ADC is current doing a conversion
    *
    * @return true   => ADC is busy doing a conversion
    * @return false  => ADC is idle
    */
   static bool isBusy() {
      return adc->SC2&ADC_SC2_ADACT_MASK;
   }

   /**
    * Check if ADC result from last conversion is available.
    * This statis will be cleared if when the result is retrieved.
    *
    * @return true   => ADC conversion result is available
    * @return false  => ADC is idle
    */
   static bool isResultAvailable() {
      return adc->SC1[0]&ADC_SC1_COCO_MASK;
   }

   /**
    * Set conversion mode
    *
    * @param[in] adcResolution Resolution for converter e.g. AdcResolution_16bit_se
    *
    * @note This affects all channels on the ADC
    */
   static void setResolution(AdcResolution adcResolution) {
      adc->SC3 = (adc->SC3&~ADC_SC3_MODE_MASK)|adcResolution;
   }

   /**
    * Set clock source
    *
    * @param[in] adcClockSource  Clock source e.g. AdcClockSource_Asynch
    * @param[in] adcClockDivider Clock divider e.g. AdcClockDivider_4
    *
    * @note This affects all channels on the ADC.\n
    * The resulting ADC clock rate should be restricted to the following ranges:\n
    *  [2..12MHz] for 16-bit conversion modes  \n
    *  [1..18MHz] for other conversion modes
    */
   static void setClockSource(AdcClockSource adcClockSource, AdcClockDivider adcClockDivider=AdcClockDivider_DivBy1) {
      adc->SC3 = (adc->SC3&~(ADC_SC3_ADIV_MASK|ADC_SC3_ADICLK_MASK))|adcClockSource|adcClockDivider;
   }

   /**
    * Set ADC  (and PGA if present) voltage reference
    *
    * @param adcRefSel Reference to select
    */
   static void setReference(AdcReferenceSel adcRefSel=AdcReferenceSel_VrefhAndVrefl) {
      adc->SC2 = (adc->SC2&~ADC_SC2_REFSEL_MASK)|adcRefSel;
   }

   /**
    * Configure comparison mode.
    *
    * @param[in] adcCompare   Comparison operation to enable
    * @param[in] low          Lower threshold
    * @param[in] high         Higher threshold (if needed)
    */
   static void enableComparison(AdcCompare adcCompare, int value) {

      // Set comparison value
      adc->CV = value;

      // Set comparison fields
      adc->SC2 = adc->SC2 | (adc->SC2&~(ADC_SC2_ACFE_MASK|ADC_SC2_ACFGT_MASK))|
            (adcCompare&(ADC_SC2_ACFE_MASK|ADC_SC2_ACFGT_MASK));
   }

protected:
   /**
    * Enables hardware trigger mode of operation and configures the channel.
    *
    * @param[in] sc1Value        SC1 register value including the ADC channel, Differential mode and interrupt enable
    * @param[in] adcPretrigger   Hardware pre-trigger to use for this channel\n
    *                            This corresponds to pre-triggers in the PDB channels and SC1[n] register setups
    */
   static void enableHardwareConversion(int sc1Value, AdcPretrigger adcPretrigger) {
      // Set hardware triggers
      adc->SC2 = (adc->SC2)|ADC_SC2_ADTRG(1);
      // Configure channel for hardware trigger input
      adc->SC1[adcPretrigger] = sc1Value;
   }

   /**
    * Initiates a conversion but does not wait for it to complete.
    * Intended for use with interrupts or DMA.
    *
    * @param[in] sc1Value SC1 register value.
    *                     This includes channel, differential mode and interrupts enable.
    */
   static void startConversion(const int sc1Value) {
      // Trigger conversion
      adc->SC1[0] = sc1Value;
   };

public:
   /**
    * Gets result of last software initiated conversion
    *
    * @return - The result of the conversion as an integer converted from 16-bit ADC value\n
    *           For single-ended conversions this will be zero extended\n
    *           For differential conversions this will be sign-extended
    *
    * @note Result is signed but will always be positive for single-ended channels.
    * @note This will also clear the conversion flag if set
    */
   static int getConversionResult() {

      // This is a 32-bit value with leading zeroes i.e unsigned
      int value = ADC_R_D_MASK & (adc->R[0]);

      return value;
   };

   /**
    * Gets result of hardware initiated conversion
    *
    * @param pretrigger Pretrigger to use (identifies which SC1 register to access)
    *
    * @return The result of the conversion as an integer converted from 16-bit ADC value\n
    *         For single-ended conversions this will be zero extended\n
    *         For differential conversions this will be sign-extended
    *
    * @note Result is signed but will always be positive for single-ended channels.
    * @note This will also clear the conversion flag if set
    */
   static int getHardwareConversionResult(AdcPretrigger pretrigger) {

      // This is a 32-bit value with leading zeroes i.e unsigned
      int value = ADC_R_D_MASK & (adc->R[pretrigger]);

      return value;
   };

protected:
   /**
    * Initiates a conversion and waits for it to complete.
    *
    * @param[in] sc1Value SC1 register value including the ADC channel to use and whether differential mode
    *
    * @return - The result of the conversion as an integer converted from 16-bit ADC value\n
    *           For single-ended conversions this will be zero extended\n
    *           For differential conversions this will be sign-extended
    *
    * @note Result is signed but will always be positive for single-ended conversions.
    */
   static int readAnalogue(const int sc1Value) {
      // Trigger conversion
      adc->SC1[0] = sc1Value;
      (void)adc->SC1[0];

      while ((adc->SC1[0]&ADC_SC1_COCO_MASK) == 0) {
         __asm__("nop");
      }

      return getConversionResult();
   };

   /**
    * Initiates a conversion and waits for it to complete.
    *
    * @param[in] sc1Value SC1 register value including the ADC channel to use and whether differential mode
    * @param[in] adcResolution Resolution for converter e.g. AdcResolution_16bit_se
    *
    * @return - The result of the conversion as an integer converted from 16-bit ADC value\n
    *           For single-ended conversions this will be zero extended\n
    *           For differential conversions this will be sign-extended
    *
    * @note Result is signed but will always be positive for single-ended conversions.
    * @note The resolution used here affects all further conversion on all channels on the ADC
    *
    */
   static int readAnalogue(const int sc1Value, AdcResolution adcResolution) {
      adc->SC3 = (adc->SC3&~ADC_SC3_MODE_MASK)|adcResolution;
      return readAnalogue(sc1Value);
   }

public:
   /**
    * Configure the pin associated with this ADC channel.
    *
    * @param sc1Value Used to obtain channel number
    */
   static void setInput(unsigned sc1Value) {
      // Map pin to ADC
      adc->APCTL1 |= (1<<(sc1Value&0b11111));
   }

   /**
    *  Disable Pin
    *  The pin is restored to usual operation (non-ADC)
    *
    * @param sc1Value Used to obtain channel number
    */
   static void disablePin(unsigned sc1Value) {
      // Map pin to ADC
      adc->APCTL1 &= ~(1<<(sc1Value&0b11111));
   }

   /**
    * Template class representing an ADC channel.
    *
    * Example
    * @code
    * // Instantiate the ADC and the channel (for ADC0 channel 6)
    * using Adc0    = AdcBase_T<Adc0Info>;
    * using Adc0Ch6 = Adc0::Channel<6>;
    *
    * // Set ADC resolution
    * Adc0::setMode(AdcResolution_16bit_se);
    *
    * // Read ADC value
    * uint32_t value = Adc0Ch6::readAnalogue();
    * @endcode
    *
    * @tparam channel ADC channel
    */
   template<int channel>
   class Channel : public AdcChannel {
   private:
      /**
       * This class is not intended to be instantiated
       */
      Channel(const Channel&) = delete;
      Channel(Channel&&) = delete;

   public:
      constexpr Channel() : AdcChannel(AdcInfo::baseAddress, channel) {}

      /** Channel number */
      static constexpr AdcChannelNum CHANNEL=(AdcChannelNum)channel;

      /** The ADC that owns this channel */
      using OwningAdc = AdcBase_T;

      /** Information about this ADC */
      using AdcInfo = Info;

      /**
       * Gets result of last software initiated conversion
       *
       * @return - The result of the conversion as an integer converted from 16-bit ADC value\n
       *           For single-ended conversions this will be zero extended\n
       *           For differential conversions this will be sign-extended
       *
       * @note Result is signed but will always be positive for single-ended channels.
       * @note This will also clear the conversion flag if set
       */
      static int getConversionResult() {
         return OwningAdc::getConversionResult();
      }

      /**
       * Check if ADC result from last conversion is available.
       * This statis will be cleared if when the result is retrieved.
       *
       * @return true   => ADC conversion result is available
       * @return false  => ADC is idle
       */
      static bool isResultAvailable() {
         return OwningAdc::isResultAvailable();
      }

      /**
       * Check if ADC is current doing a conversion
       *
       * @return true   => ADC is busy doing a conversion
       * @return false  => ADC is idle
       */
      static int isBusy() {
         return OwningAdc::isBusy();
      }

      /**
       * Initiates a conversion but does not wait for it to complete.
       * Intended for use with interrupts or DMA.
       *
       * @param[in] adcInterrupt   Determines if an interrupt is generated when conversions are complete
       */
      static void startConversion(AdcInterrupt adcInterrupt=AdcInterrupt_Disabled) {
         if constexpr(!Info::irqHandlerInstalled) {
            usbdm_assert((adcInterrupt == AdcInterrupt_Disabled),
                  "ADC not configured for interrupts. Modify Configure.usbdmProject");
         }
         AdcBase_T::startConversion(channel|adcInterrupt);
      };

      /**
       * Initiates a conversion and waits for it to complete.
       *
       * @return - The result of the conversion as an integer converted from 16-bit ADC value\n
       *           For single-ended conversions this will be zero extended\n
       *           For differential conversions this will be sign-extended
       *
       * @note Result is signed but will always be positive for single-ended conversions.
       */
      static int readAnalogue() {
         return AdcBase_T::readAnalogue(channel);
      };
      /**
       * Initiates a conversion and waits for it to complete.
       *
       * @param[in] adcResolution Resolution for converter e.g. AdcResolution_16bit_se
       *
       * @return - The result of the conversion as an integer converted from 16-bit ADC value\n
       *           For single-ended conversions this will be zero extended\n
       *           For differential conversions this will be sign-extended
       *
       * @note Result is signed but will always be positive for single-ended conversions.
       * @note The resolution used here affects all further conversion on all channels on the ADC
       */
      static int readAnalogue(AdcResolution adcResolution) {
         return AdcBase_T::readAnalogue(channel, adcResolution);
      };

      /**
       * Enables hardware trigger mode of operation and configures a channel.
       *
       * @param[in] adcPretrigger   Hardware pre-trigger to use for this channel.\n
       *                            This corresponds to pre-triggers in the PDB channels and SC1[n]/R[n] register selection
       * @param[in] adcInterrupt    Whether to generate an interrupt when each conversion completes
       */
      static void enableHardwareConversion(AdcPretrigger adcPretrigger, AdcInterrupt adcInterrupt=AdcInterrupt_Disabled) {
         AdcBase_T::enableHardwareConversion(channel|adcInterrupt, adcPretrigger);
      }

      /**
       * Configure the pin associated with this ADC channel.
       */
      static void setInput() {
         AdcBase_T::setInput(channel);
      }

      /**
       *  Disable Pin
       *  The pin is restored to usual operation (non-ADC)
       */
      static void disablePin() {
         AdcBase_T::disablePin(channel);
      }

   }; // class Channel

}; // class AdcBase_T

$(/ADC/declarations:// #error "No declarations found")
/**
 * End ADC_Group
 * @}
 */

} // End namespace USBDM

#endif // /ADC/enablePeripheralSupport

#endif /* HEADER_ADC_H */

