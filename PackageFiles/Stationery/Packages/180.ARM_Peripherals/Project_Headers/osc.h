/**
 * @file     osc.h (180.ARM_Peripherals/Project_Headers/osc.h)
 * @brief    Oscillator interface
 *
 * @version  V4.12.1.80
 * @date     13 April 2016
 */

#ifndef HEADER_OSC_H
#define HEADER_OSC_H
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "pin_mapping.h"

namespace USBDM {
/**
 * @addtogroup OSC_Group OSC, Crystal Oscillator
 * @brief Abstraction for Crystal Oscillator
 * @{
 */

/**
 * Template class providing interface to Oscillator
 *
 * @tparam info      Information class for OSC
 *
 * @code
 * using osc = OscBase_T<OscInfo>;
 *
 *  osc::configure();
 *
 * @endcode
 */
template <class Info>
class OscBase_T :public Info {

private:
   /** Class to static check OSC signal is mapped to a pin - Assumes existence */
   template<int xtalPin> class CheckPinMapped {
   private:
      // Check mapping - no need to check existence
      static constexpr bool Test1 = (Info::info[xtalPin].pinIndex >= PinIndex::MIN_PIN_INDEX);

      static_assert(Test1, "OSC XTAL/EXTAL signal is not mapped to a pin - Modify Configure.usbdm");

   public:
      /// Dummy for inline checking
      static constexpr bool checker = false;
   };

protected:
   /** Hardware instance */
   static constexpr HardwarePtr<OSC_Type> osc = Info::baseAddress;

public:
   $(/OSC/classInfo: // No class Info found)

$(/OSC/InitMethod: // /OSC/InitMethod not found)

};

$(/OSC/declarations: // No declarations found)
/**
 * End OSC_Group
 * @}
 */
} // End namespace USBDM

#endif /* HEADER_OSC_H */
