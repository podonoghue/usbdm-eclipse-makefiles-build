/**
 * @file     rtc.h (180.ARM_Peripherals/Project_Headers/rtc.h)
 * @brief    Real Time Clock
 *
 * @version  V4.12.1.80
 * @date     13 April 2016
 */

#ifndef HEADER_RTC_H
#define HEADER_RTC_H
/*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "pin_mapping.h"

namespace USBDM {

/**
 * @addtogroup RTC_Group RTC, Real Time Clock
 * @brief Abstraction for Real Time Clock
 * @{
 */


/**
 * Template class providing interface to Real Time Clock
 *
 * @tparam info      Information class for RTC
 *
 * @code
 * using rtc = RtcBase_T<RtcInfo>;
 *
 * @endcode
 */
template <class Info>
class RtcBase_T : public Info {

public:
#if $(/RTC/irqHandlingMethod:false) // /RTC/irqHandlingMethod
   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note Only usable with static objects.
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match RtcCallbackFunction
    *    void callback() {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * static AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Rtc::wrapCallback<AClass, &AClass::callback, aClass>();
    * // Use as callback
    * Rtc::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(uint32_t), T &object>
   static typename Info::CallbackFunction wrapCallback() {
      static typename Info::RtcAlarmCallbackFunction fn = [](uint32_t timeSinceEpoch) {
         (object.*callback)(timeSinceEpoch);
      };
      return fn;
   }

   /**
    * Wrapper to allow the use of a class member as a callback function
    * @note There is a considerable space and time overhead to using this method
    *
    * @tparam T         Type of the object containing the callback member function
    * @tparam callback  Member function pointer
    * @tparam object    Object containing the member function
    *
    * @return  Pointer to a function suitable for the use as a callback
    *
    * @code
    * class AClass {
    * public:
    *    int y;
    *
    *    // Member function used as callback
    *    // This function must match RtcCallbackFunction
    *    void callback() {
    *       ...;
    *    }
    * };
    * ...
    * // Instance of class containing callback member function
    * AClass aClass;
    * ...
    * // Wrap member function
    * auto fn = Rtc::wrapCallback<AClass, &AClass::callback>(aClass);
    * // Use as callback
    * Rtc::setCallback(fn);
    * @endcode
    */
   template<class T, void(T::*callback)(uint32_t)>
   static typename Info::CallbackFunction wrapCallback(T &object) {
      static T &obj = object;
      static typename Info::CallbackFunction fn = [](uint32_t timeSinceEpoch) {
         (obj.*callback)(timeSinceEpoch);
      };
      return fn;
   }
#endif // /RTC/irqHandlingMethod

protected:
   /** Hardware instance */
   static constexpr HardwarePtr<RTC_Type> rtc = Info::baseAddress;

public:
   $(/RTC/classInfo: // No class Info found)

   /**
    * Sets the system RTC time
    *
    *  @param[in]  timeSinceEpoch - time since the epoch in seconds
    */
   static void setTime(uint32_t timeSinceEpoch) {
      rtc->SR  = 0;
      rtc->TSR = timeSinceEpoch;
      rtc->SR  = RTC_SR_TCE_MASK;
   }

};


$(/RTC/declarations: // No declarations found)
/**
 * End RTC_Group
 * @}
 */
} // End namespace USBDM

#endif /* HEADER_RTC_H */
