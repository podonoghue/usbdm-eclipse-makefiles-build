/**
 * @file     wdog.h (180.ARM_Peripherals/Project_Headers/wdog.h)
 * @brief    External Watchdog Monitor
 *
 * @version  V4.12.1.230
 * @date     13 April 2016
 */

#ifndef HEADER_WDOG_H_
#define HEADER_WDOG_H_
 /*
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#include "derivative.h"
#include "pin_mapping.h"

namespace USBDM {

/**
 * @addtogroup WDOG_Group WDOG, Watchdog Timer
 * @brief Abstraction for Watchdog Timer
 * @{
 */

/** Watchdog Refresh value 1 */
static constexpr uint16_t WdogRefresh1 = 0xA602;

/** Watchdog Refresh value 2 */
static constexpr uint16_t WdogRefresh2 = 0xB480;

/** Watchdog Unlock value 1 */
static constexpr uint16_t WdogUnlock1 = 0xC520;

/** Watchdog Unlock value 2 */
static constexpr uint16_t WdogUnlock2 = 0xD928;

/**
 * Template class representing the Watchdog Monitor
 *
 * The Watchdog Timer (WDOG) keeps a watch on the system functioning and resets it in
 * case of its failure. Reasons for failure include run-away software code and the stoppage
 * of the system clock that in a safety critical system can lead to serious consequences. In
 * such cases, the watchdog brings the system into a safe state of operation. The watchdog
 * monitors the operation of the system by expecting periodic communication from the
 * software, generally known as servicing or refreshing the watchdog. If this periodic
 * refreshing does not occur, the watchdog resets the system.
 *
 * @tparam info      Information class for WDOG
 */
template<class Info>
class WdogBase_T : public WdogInfo {

protected:
$(/WDOG/protectedMethods: // No protected methods found)

public:
$(/WDOG/publicMethods: // No public methods found)
   /**
    * Hardware instance pointer.
    *
    * @return Reference to WDOG hardware
    */
   static constexpr HardwarePtr<WDOG_Type> wdog = Info::baseAddress;

   /**
    * Writing the sequence of 0xA602 (WdogRefresh_1) followed by 0xB480 (WdogRefresh_2) within 20 bus clock
    * cycles refreshes the WDOG and prevents it from resetting the system. Writing a value other than
    * the above mentioned sequence or if the sequence is longer than 20 bus cycles, resets the system,
    * or if IRQRSTEN is set, it interrupts and then resets the system.
    *
    * @param wdogRefresh_1 1st value to write (WdogRefresh_1)
    * @param wdogRefresh_2 2nd value to write (WdogRefresh_2)
    *
    * @note This operation is time-critical so interrupts are disabled during refresh
    * @note Due to clock domain issues it is necessary to wait at least 5 clock
    *       cycles between attempted refreshes.  This is most significant when
    *       using the LPO clock source (i.e. at least 5 ms in that case).
    */
   static void refresh(WdogRefresh wdogRefresh_1, WdogRefresh wdogRefresh_2) {

      // Protect sequence from interrupts
      CriticalSection cs;

      wdog->CNT = wdogRefresh_1;
      wdog->CNT = wdogRefresh_2;
   }

protected:
#if $(/WDOG/secondsSupport:false)
   /**
    *
    * @param[in,out] cs2       Used to obtain clock source (CS2.WDOG_CS2_CLK), updated with prescaler (CS.WDOG_CS2_PRES)
    * @param[in,out] timeout   .seconds Timeout value in seconds -> .ticks   Timeout value in ticks
    * @param[in,out] window    .seconds  Window value in seconds -> .ticks    Window value in ticks
    *
    * @return Error code
    */
   static ErrorCode calculateTimingParameters(
         uint16_t      &cs2,
         Seconds_Ticks &timeout,
         Seconds_Ticks &window) {

      float constexpr maxCount = 0xFFFFUL;

      if ((int)window.toTicks()>(int)timeout.toTicks()) {
         return E_ILLEGAL_PARAM;
      }

      // Try without prescaler
      uint32_t counterFrequency = WdogInfo::getInputClockFrequency((WdogClock)(cs2 & WDOG_CS2_CLK_MASK));
      Seconds maxTime = maxCount/counterFrequency;
      cs2 &= ~WDOG_CS2_PRES_MASK;

      if (timeout.toSeconds()>maxTime) {
         // Try with prescaler
         maxTime *= 256;
         counterFrequency /=256;
         cs2 |= WDOG_CS2_PRES_MASK;
      }
      if (timeout.toSeconds()>maxTime) {
         return setErrorCode(E_TOO_LARGE);
      }
      timeout.fromTicks(roundf(timeout.toSeconds()*counterFrequency));
      window.fromTicks(roundf(window.toSeconds()*counterFrequency));
      return E_NO_ERROR;
   }
#endif

public:
$(/WDOG/InitMethod: // /WDOG/InitMethod not found)
public:

   /**
    * Basic enable WDOG.
    *
    * Dummy function as always clocked.
    */
   static void enable() {
   }

   /**
    * Gets watchdog timer value.
    *
    * @return current timer value
    */
   static Ticks getTimer() {
      return (wdog->CNTH<<16)|wdog->CNTL;
   }

   /**
    * Sets watchdog pre-scaler and time-out value in ticks.
    * The watchdog clock is divided by this value to provide the prescaled WDOG_CLK
    *
    * @param wdogPrescale This prescaler divides the input clock for the watchdog counter
    * @param timeout      The watchdog must be refreshed before the counter reaches this value
    * @param window       If windowed operation is enabled, then the watchdog can only be refreshed
    *        if the timer reaches a value greater than or equal to this window length value.
    *        A refresh outside of this window resets the system
    *
    * @note This is a protected operation which uses unlock
    */
   static void setTimeout(
            WdogPrescale wdogPrescale,
            Ticks        timeout,
            Ticks        window = 0_ticks) {

      // Disable interrupts while accessing watchdog
      CriticalSection cs;
      Info::writeUnlock(WdogUnlock1, WdogUnlock2);
      wdog->CS2    = (wdog->CS2&~WDOG_CS2_PRES_MASK)|wdogPrescale;
      wdog->TOVALH = (unsigned)timeout>>16;
      wdog->TOVALL = (unsigned)timeout;
      wdog->WINH   = (unsigned)window>>16;
      wdog->WINL   = (unsigned)window;
   }

#if $(/WDOG/secondsSupport:false)
   /**
    * Sets the watchdog time-out value in seconds.
    *
    * @param timeout The watchdog must be refreshed before this interval expires
    * @param window  Refresh of the watchdog may not be carried out before this interval has expired i.e.
    *        Refresh must occur within [window...timeout] if window mode is enabled.
    *        A refresh outside of this range resets the system
    *
    * @note This is a protected operation which uses unlock
    * @note This adjusts both the prescaler and the timeout value.
    */
   static ErrorCode setTimeout(
            Seconds timeout,
            Seconds window  = 0.0_s) {

      uint32_t inputClockFreq = WdogInfo::getInputClockFrequency();

      uint32_t timerValue = (uint32_t)(((float)timeout*inputClockFreq));

      WdogPrescale prescaler = WdogPrescale_Direct;
      if (timerValue>0xFFFF) {
         timerValue /= 256;
         prescaler = WdogPrescale_DivBy256;
      }
      if (timerValue>0xFFFF) {
         return setErrorCode(E_TOO_LARGE);
      }
      uint32_t windowValue = (uint64_t)(((float)window*inputClockFreq)/prescaler);
      setTimeout(prescaler, (Ticks)timerValue, (Ticks)windowValue);
      return E_NO_ERROR;
   }
#endif

   /**
    * Lock watchdog register against further changes
    */
   static void lockRegisters() {
      // Protect sequence from interrupts
      CriticalSection cs;

      // Unlock before changing settings
      wdog->CNT = WdogUnlock_1;
      wdog->CNT = WdogUnlock_2;

      // Read-back to delay until change effected
      (void)(wdog->CNT);

      wdog->CS1 = wdog->CS1 & ~WDOG_CS1_UPDATE_MASK;
   }

   /**
    * Disable interface to WDOG
    */
   static void disable() {
      Info::disableClock();
   }

};

$(/WDOG/staticDefinitions: // No static declarations found)

$(/WDOG/declarations: // No declarations found)
/**
 * End WDOG_Group
 * @}
 */
} // End namespace USBDM

#endif /* HEADER_WDOG_H_ */
