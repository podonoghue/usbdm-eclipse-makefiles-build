<?xml version="1.0" encoding="UTF-8"?>
<model version="5.3.0" links="0">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; example for USBDM
 
This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- Minimal BSP implementation for USBDM

This example is integrated into a USBDM project</documentation>
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="Blinky" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="instance" type="Blinky" visibility="0x00" properties="0x01"/>
   <operation name="Blinky" type="" visibility="0x00" properties="0x00">
    <documentation>Blinky constructor</documentation>
    <code>  : QActive(Q_STATE_CAST(&amp;Blinky::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action>// Initialise hardware
RGB_Blue::setOutput();

(void)e; // unused parameter
console.writeln(&quot;Starting&quot;);
</action>
     <initial_glyph conn="8,4,5,1,14,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry brief="LED Off">/*
 * Arm the private time event to expire in 1s
 */
m_timeEvt.armX(BSP::TICKS_PER_SEC, 0);
RGB_Blue::off();
console.writeln(&quot;led off!&quot;);</entry>
     <tran trig="TIMEOUT" target="../../2">
      <tran_glyph conn="20,14,1,1,2,11,-2">
       <action box="-9,-1,9,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,6,16,12">
      <entry box="1,2,9,2"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry brief="LED On">/*
 * Arm the private time event to expire in 1/4s
 */
m_timeEvt.armX(BSP::TICKS_PER_SEC/4, 0);
RGB_Blue::on();
console.writeln(&quot;led on!&quot;);</entry>
     <tran trig="TIMEOUT" target="../../1">
      <tran_glyph conn="4,26,5,3,-2,-12,2">
       <action box="0,-1,9,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,20,16,12">
      <entry box="1,2,10,2"/>
     </state_glyph>
    </state>
    <state_diagram size="24,34"/>
   </statechart>
  </class>
  <attribute name="AO_Blinky" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Blinky::instance;</code>
  </attribute>
 </package>
 <directory name="Sources">
  <file name="blinky.cpp">
   <text>#include &quot;qpcpp.hpp&quot;    // QP/C++ framework API
#include &quot;bsp.h&quot;        // Board Support Package interface
#include &quot;hardware.h&quot;   // Generated USBDM hardware objects

using namespace QP;
using namespace USBDM;

// Declare the Blinky class
$declare${AOs::Blinky}

// Opaque pointer to the Blinky active object
$define${AOs::AO_Blinky}

// Define the Blinky class (including the state machine)
$define${AOs::Blinky}</text>
  </file>
  <file name="bsp.h">
   <text>#ifndef BSP_HPP
#define BSP_HPP

/**
 * Simple Board Support Package (BSP)
 */
class BSP {
public:
    // Number of clock ticks in a second
    static constexpr int TICKS_PER_SEC = 100;

    // Initialise BSP
    static void init();
};

/**
 * Events
 */
enum BlinkySignals {
    TIMEOUT_SIG = QP::Q_USER_SIG, // First signal (offset to user range)
    MAX_SIG,
};

// Active object(s) used in this application -------------------------------
$declare${AOs::AO_Blinky}

#endif // BSP_HPP</text>
  </file>
  <file name="bsp.cpp">
   <text>#include &lt;cstdlib&gt;    // For exit()
#include &quot;qpcpp.hpp&quot;  // QP/C++ framework API
#include &quot;bsp.h&quot;      // Board Support Package interface
#include &quot;hardware.h&quot; // Generated USBDM hardware objects

using namespace std;
using namespace QP;
using namespace USBDM;

// Initialise BSP
void BSP::init()   {
}

/**
 * Callback functions needed by the framework
 */
void QF::onStartup() {

    // Start SYSTICK Timer at given rate
   SysTick_Config(SystemCoreClock / BSP::TICKS_PER_SEC);

   // Assign all priority bits for preemption-prio. and none to sub-prio.
   NVIC_SetPriorityGrouping(0U);

   // Set priorities of ISRs used in the system, see NOTE1
   NVIC_SetPriority(SysTick_IRQn, QF_AWARE_ISR_CMSIS_PRI + 1U);
}

void QP::QF::onCleanup() {
}

void QP::QV::onIdle() {
   QF_INT_ENABLE();
}

extern &quot;C&quot;
void SysTick_Handler() {

    QP::QTimeEvt::TICK_X(0U, nullptr); // process time events at rate 0
}

#if USE_CONSOLE
void Q_onAssert(char const * const module, int loc) {
    console.writeln(&quot;Assertion failed in &quot;, module, &quot;:&quot;, loc);
    exit(-1);
}
#else // !USE_CONSOLE
void Q_onAssert(char const * const, int) {
    exit(-1);
}
#endif
</text>
  </file>
  <file name="main.cpp">
   <text>#include &quot;qpcpp.hpp&quot;  // QP/C++ framework API
#include &quot;bsp.h&quot;      // Board Support Package interface
#include &quot;hardware.h&quot; // Generated USBDM hardware objects

using namespace QP;
using namespace USBDM;

// Main Function
int main() {

    // Initialise the framework
    QF::init();

    // Initialise the BSP
    BSP::init();

    // Start the Blinky active object

    // Event queue buffer for Blinky
    static QEvt const *blinky_queueSto[10];

    AO_Blinky-&gt;start(
        1U,                      // Priority of the active object
        blinky_queueSto,         // Event queue buffer
        Q_DIM(blinky_queueSto),  // Length of the buffer
        (void *)0, 0U);          // Private stack (not used on the desktop)

    return QF::run(); // let the framework run the application
}</text>
  </file>
 </directory>
</model>
