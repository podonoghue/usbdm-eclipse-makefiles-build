/**
 * @file      pin_mapping.h (derived from MKL25Z4.usbdmHardware)
 * @version   1.3.0
 * @brief     Pin declarations for FRDM_KL25Z
 *
 * *****************************
 * *** DO NOT EDIT THIS FILE ***
 * *****************************
 *
 * This file is generated automatically.
 * Any manual changes will be lost.
 */
#ifndef PROJECT_HEADERS_PIN_MAPPING_H
#define PROJECT_HEADERS_PIN_MAPPING_H

#include <stddef.h>
#include "derivative.h"

#include "pcr.h"

/**
 * Namespace enclosing USBDM classes
 */
namespace USBDM {

/**
 * @addtogroup USBDM_Group USBDM Peripheral Interface
 * @brief Hardware Peripheral Interface and library
 * @{
 */
/* Template:_common_settings.xml */

   /**
    * @tparam  T  Type of comparison object (inferred)
    * @param   a  Left-hand object for comparison
    * @param   b  Right-hand object for comparison
    *
    * @return Smaller of a or b
    */
   template<class T> 
   constexpr T min(const T a, const T b) {
      return (b < a) ? b : a;
   }

   /**
    * @tparam  T  Type of comparison object (inferred)
    * @param   a  Left-hand object for comparison
    * @param   b  Right-hand object for comparison
    *
    * @return Larger of a or b
    */
   template<class T> 
   constexpr T max(const T a, const T b) {
      return (b > a) ? b : a;
   }

constexpr IRQn_Type IRQn_None = static_cast<IRQn_Type>(-20);

/** Dummy port information for pins without an associated PCR */
constexpr PortInfo  __attribute__((unused)) NoPortInfo {0, 0, IRQn_None, 0, NvicPriority_NotInstalled};

/** Class to static check signal mapping is valid */
template<class Info, int signalNum> class CheckSignal {
   static_assert((signalNum<Info::numSignals), "Non-existent signal - Modify Configure.usbdm");
   static_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != UNMAPPED_PCR), "Signal is not mapped to a pin - Modify Configure.usbdm");
   static_assert((signalNum>=Info::numSignals)||(Info::info[signalNum].gpioBit != INVALID_PCR),  "Signal doesn't exist in this device/package");
   static_assert((signalNum>=Info::numSignals)||((Info::info[signalNum].gpioBit == UNMAPPED_PCR)||(Info::info[signalNum].gpioBit == INVALID_PCR)||(Info::info[signalNum].gpioBit >= 0)), "Illegal signal");
};

/** Enables mapping of all allocated pins during startup using mapAllPins() */
static constexpr bool MAP_ALL_PINS = false;

/** Used to configure pin-mapping before 1st use of peripherals */
extern void mapAllPins();

/* END Template:_common_settings.xml */

/*
 * Peripheral Information Classes
 */
/**
 * @addtogroup GPIO_Group GPIO, Digital Input/Output
 * @brief Abstraction for Digital Input/Output
 * @{
 */
#define USBDM_GPIOA_IS_DEFINED
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
/* gpio_def.xml */

#if defined(PCC_PCC_PORTA_CGC_MASK)
   /** Port information for PORTA */
   constexpr PortInfo  __attribute__((unused)) PortAInfo {PORTA_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTA)), PORTA_IRQn, GPIOA_BasePtr, NvicPriority_NotInstalled};
#elif defined(SIM_SCGC5_PORTA_MASK)
#ifndef PORTA_IRQS
   /** Port information for PORTA */
   constexpr PortInfo  __attribute__((unused)) PortAInfo {PORTA_BasePtr, SIM_SCGC5_PORTA_MASK, IRQn_None, GPIOA_BasePtr, NvicPriority_NotInstalled};
#else
   constexpr IRQn_Type PORTA_IRQS_AR[] = PORTA_IRQS;
   /** Port information for PORTA */
   constexpr PortInfo  __attribute__((unused)) PortAInfo {PORTA_BasePtr, SIM_SCGC5_PORTA_MASK, PORTA_IRQS_AR[0], GPIOA_BasePtr, NvicPriority_NotInstalled};
#endif
#endif

class GpioAInfo {
public:
   // Template:fgpioa_0xf80ff000

};

#define USBDM_GPIOB_IS_DEFINED
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
/* gpio_def.xml */

#if defined(PCC_PCC_PORTB_CGC_MASK)
   /** Port information for PORTB */
   constexpr PortInfo  __attribute__((unused)) PortBInfo {PORTB_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTB)), PORTB_IRQn, GPIOB_BasePtr, NvicPriority_NotInstalled};
#elif defined(SIM_SCGC5_PORTB_MASK)
#ifndef PORTB_IRQS
   /** Port information for PORTB */
   constexpr PortInfo  __attribute__((unused)) PortBInfo {PORTB_BasePtr, SIM_SCGC5_PORTB_MASK, IRQn_None, GPIOB_BasePtr, NvicPriority_NotInstalled};
#else
   constexpr IRQn_Type PORTB_IRQS_AR[] = PORTB_IRQS;
   /** Port information for PORTB */
   constexpr PortInfo  __attribute__((unused)) PortBInfo {PORTB_BasePtr, SIM_SCGC5_PORTB_MASK, PORTB_IRQS_AR[0], GPIOB_BasePtr, NvicPriority_NotInstalled};
#endif
#endif

class GpioBInfo {
public:
   // Template:fgpioa_0xf80ff000

};

#define USBDM_GPIOC_IS_DEFINED
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
/* gpio_def.xml */

#if defined(PCC_PCC_PORTC_CGC_MASK)
   /** Port information for PORTC */
   constexpr PortInfo  __attribute__((unused)) PortCInfo {PORTC_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTC)), PORTC_IRQn, GPIOC_BasePtr, NvicPriority_NotInstalled};
#elif defined(SIM_SCGC5_PORTC_MASK)
#ifndef PORTC_IRQS
   /** Port information for PORTC */
   constexpr PortInfo  __attribute__((unused)) PortCInfo {PORTC_BasePtr, SIM_SCGC5_PORTC_MASK, IRQn_None, GPIOC_BasePtr, NvicPriority_NotInstalled};
#else
   constexpr IRQn_Type PORTC_IRQS_AR[] = PORTC_IRQS;
   /** Port information for PORTC */
   constexpr PortInfo  __attribute__((unused)) PortCInfo {PORTC_BasePtr, SIM_SCGC5_PORTC_MASK, PORTC_IRQS_AR[0], GPIOC_BasePtr, NvicPriority_NotInstalled};
#endif
#endif

class GpioCInfo {
public:
   // Template:fgpioa_0xf80ff000

};

#define USBDM_GPIOD_IS_DEFINED
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
/* gpio_def.xml */

#if defined(PCC_PCC_PORTD_CGC_MASK)
   /** Port information for PORTD */
   constexpr PortInfo  __attribute__((unused)) PortDInfo {PORTD_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTD)), PORTD_IRQn, GPIOD_BasePtr, NvicPriority_NotInstalled};
#elif defined(SIM_SCGC5_PORTD_MASK)
#ifndef PORTD_IRQS
   /** Port information for PORTD */
   constexpr PortInfo  __attribute__((unused)) PortDInfo {PORTD_BasePtr, SIM_SCGC5_PORTD_MASK, IRQn_None, GPIOD_BasePtr, NvicPriority_NotInstalled};
#else
   constexpr IRQn_Type PORTD_IRQS_AR[] = PORTD_IRQS;
   /** Port information for PORTD */
   constexpr PortInfo  __attribute__((unused)) PortDInfo {PORTD_BasePtr, SIM_SCGC5_PORTD_MASK, PORTD_IRQS_AR[0], GPIOD_BasePtr, NvicPriority_NotInstalled};
#endif
#endif

class GpioDInfo {
public:
   // Template:fgpioa_0xf80ff000

};

#define USBDM_GPIOE_IS_DEFINED
/**
 * Peripheral information for GPIO, Digital Input/Output.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
/* gpio_def.xml */

#if defined(PCC_PCC_PORTE_CGC_MASK)
   /** Port information for PORTE */
   constexpr PortInfo  __attribute__((unused)) PortEInfo {PORTE_BasePtr, static_cast<uint32_t>(PCC_BasePtr+offsetof(PCC_Type, PCC_PORTE)), PORTE_IRQn, GPIOE_BasePtr, NvicPriority_NotInstalled};
#elif defined(SIM_SCGC5_PORTE_MASK)
#ifndef PORTE_IRQS
   /** Port information for PORTE */
   constexpr PortInfo  __attribute__((unused)) PortEInfo {PORTE_BasePtr, SIM_SCGC5_PORTE_MASK, IRQn_None, GPIOE_BasePtr, NvicPriority_NotInstalled};
#else
   constexpr IRQn_Type PORTE_IRQS_AR[] = PORTE_IRQS;
   /** Port information for PORTE */
   constexpr PortInfo  __attribute__((unused)) PortEInfo {PORTE_BasePtr, SIM_SCGC5_PORTE_MASK, PORTE_IRQS_AR[0], GPIOE_BasePtr, NvicPriority_NotInstalled};
#endif
#endif

class GpioEInfo {
public:
   // Template:fgpioa_0xf80ff000

};

/** 
 * End group GPIO_Group
 * @}
 */
/**
 * @addtogroup OSC_Group OSC, Crystal Oscillator
 * @brief Abstraction for Crystal Oscillator
 * @{
 */
#define USBDM_OSC0_IS_DEFINED
/**
 * Peripheral information for OSC, Crystal Oscillator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Osc0Info {
public:
   // Template:osc0_mk

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = OSC0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<OSC_Type> osc = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = true;

   //! Frequency of OSC Clock or Crystal
   static constexpr uint32_t osc_clock = 8000000UL;

   //! Frequency of 32K OSC Clock or Crystal (if applicable)
   static constexpr uint32_t osc32k_clock = 0UL;

   //! Oscillator control register
   static constexpr uint32_t cr =
      OSC_CR_ERCLKEN(1)  | // External Reference Enable
      OSC_CR_EREFSTEN(0) | // External Reference Stop Enable
      OSC_CR_SCP(2);       // Oscillator load capacitance

   /**
    * Get OSC clock (internal, assumed available)
    *
    * @return Clock frequency as uint32_t in Hz
    */
   static constexpr uint32_t getOscClock() {
      return osc_clock;
   }

   /**
    * Get OSC clock (external, gated by OSC_CR_ERCLKEN)
    *
    * @return Clock frequency as uint32_t in Hz
    */
   static uint32_t getOscerClock() {
      return (osc->CR&OSC_CR_ERCLKEN_MASK)?osc_clock:0;
   }

   /**
    * Get OSC32KCLK clock
    *
    * @return Clock frequency as uint32_t in Hz
   
    * @note This clock is only available if a 32kHz crystal or external clock is used 
    */
   static uint32_t getOsc32kClock() {
      return osc32k_clock;
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: XTAL0                = PTA19                          */  { PortAInfo,  19,      PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   1: EXTAL0               = PTA18                          */  { PortAInfo,  18,      PORT_PCR_MUX(0)|defaultPcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCHR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0x000CUL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCHR = PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0xCU);
   }

};

/** 
 * End group OSC_Group
 * @}
 */
/**
 * @addtogroup RTC_Group RTC, Real Time Clock
 * @brief Abstraction for Real Time Clock
 * @{
 */
#define USBDM_RTC_IS_DEFINED
/**
 * Peripheral information for RTC, Real Time Clock.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class RtcInfo {
public:
   // Template:rtc_mkl04z4

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = RTC_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<RTC_Type> rtc = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Whether to configure RTC
   //! If disabled then no RTC registers are touched.
   //! This is useful if RTC is not powered as register access will trap.
   static constexpr bool configure_rtc = 1;

   //! Frequency of RTC External Clock or Crystal
   static constexpr uint32_t rtcclk_clock = 8000000UL;

   //! Oscillator control register
   static constexpr uint32_t cr =
      RTC_CR_OSCE(0) | // Enables 32kHz oscillator [RTC_32K]
      RTC_CR_CLKO(0) | // Disables RTC 32kHz Clock Output
      RTC_CR_UM(0)   | // Update Mode
      RTC_CR_SUP(0)  | // Supervisor access
      RTC_CR_WPE(0)  | // Wakeup Pin Enable
      RTC_CR_SCP(0);   // RTC Oscillator load capacitance

   //! RTC Time Compensation Register
   static constexpr uint32_t tcr =
      RTC_TCR_CIR(0) | // Compensation Interval Register
      RTC_TCR_TCR(0);  // Time Compensation Register

   //! RTC Lock Register
   static constexpr uint32_t lr =
      RTC_LR_LRL(1) | // Lock Register Lock
      RTC_LR_SRL(1) | // Status Register Lock 
      RTC_LR_CRL(1) | // Control Register Lock
      RTC_LR_TCL(1);  // Time Compensation Lock

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   //! Time for cold start (corrected for 12 leap years since 1970)
   static constexpr uint32_t coldStartTime = 
            ((((2017-1970)*365UL +
               (181) +
               (1+12-1))*24 +
              (12))*60 +
             (0))*60;
   /** 
    *  Enable clock to Rtc
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableRtcClock();
#else
      SIM->SCGC6 |= SIM_SCGC6_RTC_MASK;
#endif
   }

   /** 
    *  Disable clock to Rtc
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableRtcClock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_RTC_MASK;
#endif
   }

   /**
    * Get RTC clock frequency (internal, not masked by RTC_CR_CLKO)
    *
    * @return Clock frequency as uint32_t
    */
   static uint32_t getInternalClock() {
      // RTC uses OSC0 EXTAL/XTAL clock
      return (rtc->CR&RTC_CR_OSCE_MASK)?Osc0Info::osc_clock:0;
   }

   /**
    * Get RTC clock frequency (external, masked by RTC_CR_CLKO)
    *
    * @return Clock frequency as uint32_t
    */
   static uint32_t getExternalClock() {
      return (rtc->CR&RTC_CR_CLKO_MASK)?0:getInternalClock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   1: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   2: RTC_CLKOUT           = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   3: RTC_CLKIN            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group RTC_Group
 * @}
 */
/**
 * @addtogroup MCG_Group MCG, Multipurpose Clock Generator
 * @brief Abstraction for Multipurpose Clock Generator
 * @{
 */
#define USBDM_MCG_IS_DEFINED
/**
 * Peripheral information for MCG, Multipurpose Clock Generator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class McgInfo {
public:
   // Template:mcg_mkl14z4

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = MCG_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<MCG_Type> mcg = baseAddress;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = MCG_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   //! Indicates need for special handling of CLKDIV1 register
   static constexpr int ERRATA_E2448 = 0;

   enum ClockMode : uint8_t {
      ClockMode_FEI      = 0,
      ClockMode_FEE,
      ClockMode_FBI,
      ClockMode_BLPI,
      ClockMode_FBE,
      ClockMode_BLPE,
      ClockMode_PBE,
      ClockMode_PEE,
   };

   //! Frequency of Slow Internal Reference Clock [~32kHz]
   static constexpr uint32_t system_slow_irc_clock = 32768UL;

   //! Frequency of Fast Internal Reference Clock [~4MHz]
   static constexpr uint32_t system_fast_irc_clock = 4000000UL;

   //! PLL VDIV min value
   static constexpr uint32_t pll_vdiv_min = 24;

   //! PLL post divider
   static constexpr uint32_t pll_post_divider = 1;

   //! Structure for clock configurations
   struct ClockInfo {
      //! System Clock Divider Register 1
      const uint32_t clkdiv1;

   #ifdef SIM_CLKDIV3_PLLFLLDIV
      //! PLLFLL clock divider divisor & fraction
      const uint32_t clkdiv3;
   #endif

      //! SIM SOPT2 - Clock selectors for various peripherals
      const uint32_t sopt2;

      //! Clock Mode
      const ClockMode clockMode:8;

      //! Control Register 1 - FRDIV, IRCLKEN, IREFSTEN, (-CLKS, -IREFS)
      const uint8_t c1;
      //! Control Register 2 - LOCRE0, RANGE0, HGO0, EREFS0, IRCS, (-LP)
      const uint8_t c2;
      //! Control Register 4 - DMX32, DRST_DRS
      const uint8_t c4;
      //! Control Register 5 - PLLCLKEN0, PLLSTEN0, PRDIV0
      const uint8_t c5;
      //! Control Register 6 - LOLIE0, CME0, VDIV0, (-PLLS)
      const uint8_t c6;
      //! Status and Control Register - FCRDIV
      const uint8_t sc;
      //! Control Register 8 - LOCRE1, LOLRE, CME1
      const uint8_t c8;
   };

   /**
    * Get MCGERCLK
    *
    * @return MCGERCLK as uint32_t
    */
   static uint32_t getErcClock() {
      return Osc0Info::getOscClock();
   }

   /**
    * Get Internal MCGIRCLK (ungated by MCG_C1_IRCLKEN_MASK)
    *
    * @return MCGIRCLK as uint32_t
    */
   static uint32_t getInternalIrcClock() {
         if (mcg->C2&MCG_C2_IRCS_MASK) {
   #ifdef MCG_SC_FCRDIV_MASK
            return (system_fast_irc_clock/(1<<((mcg->SC&MCG_SC_FCRDIV_MASK)>>MCG_SC_FCRDIV_SHIFT)));
   #else
            return system_fast_irc_clock;
   #endif
         }
         else {
            return system_slow_irc_clock;
         }
   }

   /**
    * Get MCGIRCLK (gated by MCG_C1_IRCLKEN_MASK)
    *
    * @return MCGIRCLK as uint32_t
    */
   static uint32_t getMcgIrClock() {
      if (mcg->C1&MCG_C1_IRCLKEN_MASK) {
         return getInternalIrcClock();
      }
      else {
         return 0;
      }
   }

};

/** 
 * End group MCG_Group
 * @}
 */
/**
 * @addtogroup SIM_Group SIM, System Integration Module
 * @brief Abstraction for System Integration Module
 * @{
 */
#define USBDM_SIM_IS_DEFINED
/**
 * Peripheral information for SIM, System Integration Module.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
   /**
    * Peripheral Clock sources
    */
   enum SimPeripheralClockSource {
      SimPeripheralClockSource_McgFll = SIM_SOPT2_PLLFLLSEL(0), //!< MCG FLL Clock
      SimPeripheralClockSource_McgPll = SIM_SOPT2_PLLFLLSEL(1), //!< MCG PLL Clock
      SimPeripheralClockSource_Irc48m = SIM_SOPT2_PLLFLLSEL(3), //!< IRC 48MHz clock
   };

   /**
    * UART0 Clock sources
    */
   enum SimUart0ClockSource {
      SimUart0ClockSource_Disabled   = SIM_SOPT2_UART0SRC(0), //!< Disabled
      SimUart0ClockSource_Peripheral = SIM_SOPT2_UART0SRC(1), //!< Peripheral clock selected by SIM.SOPT2[PLLFLLSEL]
      SimUart0ClockSource_OscerClk   = SIM_SOPT2_UART0SRC(2), //!< OSCERCLK clock
      SimUart0ClockSource_McgIrClk   = SIM_SOPT2_UART0SRC(3), //!< MCG Internal Reference clock
   };

   /**
    * USB full-speed clock sources
    */
   enum SimUsbFullSpeedClockSource {
      SimUsbFullSpeedClockSource_External    = SIM_SOPT2_USBSRC(0), //!< External bypass clock (USB_CLKIN)
      SimUsbFullSpeedClockSource_Peripheral  = SIM_SOPT2_USBSRC(1), //!< Peripheral clock selected by SIM.SOPT2[PLLFLLSEL] divided by SIM.CLKDIV2
   };

   /**
    * TPM Clock sources
    */
   enum SimTpmClockSource {
      SimTpmClockSource_Disabled   = SIM_SOPT2_TPMSRC(0), //!< Disabled
      SimTpmClockSource_Peripheral = SIM_SOPT2_TPMSRC(1), //!< Peripheral clock selected by SIM.SOPT2[PLLFLLSEL]
      SimTpmClockSource_OscerClk   = SIM_SOPT2_TPMSRC(2), //!< OSCERCLK clock
      SimTpmClockSource_McgIrClk   = SIM_SOPT2_TPMSRC(3), //!< MCG Internal Reference clock (MCGIRCLK)
   };

   /**
    * Selects the ADC0 Trigger source in STOP and VLPS modes, or when ADC0 Alternative Trigger is active.
    */
   enum SimAdc0Trigger {
      SimAdc0Trigger_External     = SIM_SOPT7_ADC0TRGSEL(0),   //!< External Trigger Source
      SimAdc0Trigger_Cmp0         = SIM_SOPT7_ADC0TRGSEL(1),   //!< Comparator 0
      SimAdc0Trigger_Cmp1         = SIM_SOPT7_ADC0TRGSEL(2),   //!< Comparator 1 (if present)
      SimAdc0Trigger_Cmp2         = SIM_SOPT7_ADC0TRGSEL(3),   //!< Comparator 2 (if present)
      SimAdc0Trigger_PitCh0       = SIM_SOPT7_ADC0TRGSEL(4),   //!< PIT Channel 0
      SimAdc0Trigger_PitCh1       = SIM_SOPT7_ADC0TRGSEL(5),   //!< PIT Channel 1
      SimAdc0Trigger_PitCh2       = SIM_SOPT7_ADC0TRGSEL(6),   //!< PIT Channel 2
      SimAdc0Trigger_PitCh3       = SIM_SOPT7_ADC0TRGSEL(7),   //!< PIT Channel 3
      SimAdc0Trigger_Tpm0         = SIM_SOPT7_ADC0TRGSEL(8),   //!< TPM0 Init and Ext Trigger Outputs
      SimAdc0Trigger_Tpm1         = SIM_SOPT7_ADC0TRGSEL(9),   //!< TPM1 Init and Ext Trigger Outputs
      SimAdc0Trigger_Tpm2         = SIM_SOPT7_ADC0TRGSEL(10),  //!< TPM2 Init and Ext Trigger Outputs (if present)
      SimAdc0Trigger_Tpm3         = SIM_SOPT7_ADC0TRGSEL(11),  //!< TPM3 Init and Ext Trigger Outputs (if present)
      SimAdc0Trigger_RtcAlarm     = SIM_SOPT7_ADC0TRGSEL(12),  //!< RTC Alarm
      SimAdc0Trigger_RtcSeconds   = SIM_SOPT7_ADC0TRGSEL(13),  //!< RTC Seconds
      SimAdc0Trigger_Lptrm        = SIM_SOPT7_ADC0TRGSEL(14),  //!< LPTMR
      SimAdc0Trigger_15           = SIM_SOPT7_ADC0TRGSEL(15),  //!< Reserved
   };

   /**
    * Selects the ADC0 trigger mode.
    * 
    *    _Tpm              - ADC is triggered by TPM. Pre-triggers are TPM channel 0 (A) and channel 1 (B)
    *    _Alt_PreTrigger_0 - ADC is triggered by SimAdc0Trigger selection and uses pretrigger 0 = A (SC1[0]/R[0])
    *    _Alt_PreTrigger_1 - ADC is triggered by SimAdc0Trigger selection and uses pretrigger 1 = B (SC1[1]/R[1])
    */
   enum SimAdc0TriggerMode {
      SimAdc0TriggerMode_Tpm               = SIM_SOPT7_ADC0ALTTRGEN(0),                              //!< TPM trigger
      SimAdc0TriggerMode_Alt_PreTrigger_0  = SIM_SOPT7_ADC0ALTTRGEN(1)|SIM_SOPT7_ADC0PRETRGSEL(0),   //!< Pre-trigger 0 = A (SC1[0])
      SimAdc0TriggerMode_Alt_PreTrigger_1  = SIM_SOPT7_ADC0ALTTRGEN(1)|SIM_SOPT7_ADC0PRETRGSEL(1),   //!< Pre-trigger 1 = B (SC1[1])
   };

class SimInfo {
public:
   // Template:sim_mkl25z4

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = SIM_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<SIM_Type> sim = baseAddress;

   //! System Options Register 1
   static constexpr uint32_t sopt1 = 
   #ifdef SIM_SOPT1_OSC32KOUT
      SIM_SOPT1_OSC32KOUT(-1) |    // 32K oscillator clock out pin select
   #endif
      SIM_SOPT1_OSC32KSEL(3);     // 32K oscillator clock select

   /**
    * Get ERCLK32K clock frequency
    *
    * @return Clock frequency as a uint32_t in Hz
    */
   static uint32_t getErc32kClock() {
   
      switch(sim->SOPT1&SIM_SOPT1_OSC32KSEL_MASK) {
         default                     : return 0;
         case SIM_SOPT1_OSC32KSEL(0) : return Osc0Info::getOsc32kClock();
         case SIM_SOPT1_OSC32KSEL(2) : return RtcInfo::rtcclk_clock;
         case SIM_SOPT1_OSC32KSEL(3) : return 1000;
      }
   }

   /**
    * Set Peripheral clock source
    *
    * @param simPeripheralClockSource Clock source for peripheral clock
    */
   static void setPeripheralClock(SimPeripheralClockSource simPeripheralClockSource) {
      sim->SOPT2 = (sim->SOPT2&~SIM_SOPT2_PLLFLLSEL_MASK) | simPeripheralClockSource;
   }

   /**
    * Get Peripheral clock frequency
    *
    * @return Frequency as a uint32_t in Hz
    */
   static uint32_t getPeripheralClock() {
      
      switch(sim->SOPT2&SIM_SOPT2_PLLFLLSEL_MASK) {
         default:                     return 0;
         case SIM_SOPT2_PLLFLLSEL(0): return SystemMcgFllClock;
         case SIM_SOPT2_PLLFLLSEL(1): return SystemMcgPllClock/2;
      }
   }

   /**
    * Set UART0 input clock source
    *
    * @param simUart0ClockSource Clock source for UART
    */
   static void setUart0Clock(SimUart0ClockSource simUart0ClockSource) {
      sim->SOPT2 = (sim->SOPT2&~SIM_SOPT2_UART0SRC_MASK) | simUart0ClockSource;
   }

   /** 
    * Get UART0 input clock frequency
    *
    * @return Clock frequency in Hz
    */
   static uint32_t getUart0Clock() {
      
      switch(sim->SOPT2&SIM_SOPT2_UART0SRC_MASK) {
         default:
         case SIM_SOPT2_UART0SRC(0): return 0;
         case SIM_SOPT2_UART0SRC(1): return getPeripheralClock();
         case SIM_SOPT2_UART0SRC(2): return Osc0Info::getOscerClock();
         case SIM_SOPT2_UART0SRC(3): return McgInfo::getMcgIrClock();
      }
   }

   /** 
    * Get UART1 input clock frequency
    *
    * @return Clock frequency in Hz
    */
   static inline uint32_t getUart1Clock() {
      return SystemBusClock;
   }

   /** 
    * Get UART2 input clock frequency
    *
    * @return Clock frequency in Hz
    */
   static inline uint32_t getUart2Clock() {
      return SystemBusClock;
   }

   #ifdef SIM_SOPT2_USBSRC_MASK
   /**
    * Set USB Full-speed clock source
    *
    * @param simUsbFullSpeedClockSource Clock source for peripheral clock
    */
   static void setUsbFullSpeedClock(SimUsbFullSpeedClockSource simUsbFullSpeedClockSource) {
      sim->SOPT2 = (sim->SOPT2&~SIM_SOPT2_USBSRC_MASK) | simUsbFullSpeedClockSource;
   }

   /**
    * Get USB clock frequency
    *
    * @return Clock frequency as a uint32_t in Hz
    */
   static uint32_t getUsbClock() {
      switch ((sim->SOPT2&SIM_SOPT2_USBSRC_MASK)) {
         default:
         case SIM_SOPT2_USBSRC(0): return 48000000;
         case SIM_SOPT2_USBSRC(1): return getPeripheralClock();
      }
   }
   #endif

   /**
    * Set TPM input clock source
    *
    * @param simTpmClockSource Clock source for TPM
    */
   static void setTpmClock(SimTpmClockSource simTpmClockSource) {
      sim->SOPT2 = (sim->SOPT2&~SIM_SOPT2_TPMSRC_MASK) | simTpmClockSource;
   }

   /**
    * Get TPM input clock frequency
    *
    * @return TPM input clock frequency as a uint32_t in Hz
    */
   static uint32_t getTpmClock() {
      switch(sim->SOPT2&SIM_SOPT2_TPMSRC_MASK) {
         default:
         case SIM_SOPT2_TPMSRC(0): return 0;
         case SIM_SOPT2_TPMSRC(1): return getPeripheralClock();
         case SIM_SOPT2_TPMSRC(2): return Osc0Info::getOscerClock();
         case SIM_SOPT2_TPMSRC(3): return McgInfo::getMcgIrClock();
      }
   }

   //! System Options Register 2
   static constexpr uint32_t sopt2 = 
   #ifdef SIM_SOPT2_TRACECLKSEL
      SIM_SOPT2_TRACECLKSEL(-1) |      // Debug trace clock select
   #endif
   #ifdef SIM_SOPT2_TIMESRC
      SIM_SOPT2_TIMESRC(-1) |          // IEEE 1588 timestamp clock source select
   #endif
   #ifdef SIM_SOPT2_RMIISRC
      SIM_SOPT2_RMIISRC(-1) |          // Ethernet RMII clock source select
   #endif
   #ifdef SIM_SOPT2_SDHCSRC
         SIM_SOPT2_SDHCSRC(-1) |       // SDHC clock source select
   #endif
   #ifdef SIM_SOPT2_UART0SRC
      SIM_SOPT2_UART0SRC(1) |         // UART0 clock source select
   #endif
   #ifdef SIM_SOPT2_LPUARTSRC
         SIM_SOPT2_LPUARTSRC(-1) |     // LPUART clock source select
   #endif
   #ifdef SIM_SOPT2_LPUART0SRC
         SIM_SOPT2_LPUART0SRC(-1) |     // LPUART clock source select
   #endif
   #ifdef SIM_SOPT2_PTD7PAD
         SIM_SOPT2_PTD7PAD(-1) |       // PTD7 pad drive strength
   #endif
   #ifdef SIM_SOPT2_TPMSRC
         SIM_SOPT2_TPMSRC(1) |        // TPM clock source select
   #endif
   #ifdef SIM_SOPT2_USBSRC
         SIM_SOPT2_USBSRC(1) |        // USB clock source select
   #endif
   #ifdef SIM_SOPT2_FBSL
         SIM_SOPT2_FBSL(-1) |          // FlexBus security level
   #endif
   #ifdef SIM_SOPT2_PLLFLLSEL
         SIM_SOPT2_PLLFLLSEL(1)|      // PLL/FLL clock select
   #endif
   #ifdef SIM_SOPT2_RTCCLKOUTSEL
         SIM_SOPT2_RTCCLKOUTSEL(0) |  // RTC clock out select
   #endif
         SIM_SOPT2_CLKOUTSEL(2);      // CLKOUT pin clock source select

   //! System Options Register 4
   static constexpr uint32_t sopt4 = 
      SIM_SOPT4_TPM2CLKSEL(0)  |   // TPM 2 External Clock Pin Select
      SIM_SOPT4_TPM1CLKSEL(0)  |   // TPM 1 External Clock Pin Select
      SIM_SOPT4_TPM0CLKSEL(0)  |   // TPM 0 External Clock Pin Select
      SIM_SOPT4_TPM2CH0SRC(0)  |   // TPM 2 channel 0 input capture source select
      SIM_SOPT4_TPM1CH0SRC(0);     // TPM 1 channel 0 input capture source select

   //! System Options Register 5
   static constexpr uint32_t sopt5 = 
      SIM_SOPT5_UART2ODE(0) |        // UART 2 Open Drain Enable
      SIM_SOPT5_UART1ODE(0) |        // UART 1 Open Drain Enable
      SIM_SOPT5_UART0ODE(0) |        // UART 0 Open Drain Enable
      SIM_SOPT5_UART0TXSRC(0) |      // UART 0 transmit data source select
      SIM_SOPT5_UART0RXSRC(0) |      // UART 0 receive data source select
      SIM_SOPT5_UART1TXSRC(0) |      // UART 1 transmit data source select
      SIM_SOPT5_UART1RXSRC(0) |      // UART 1 receive data source select
      0;

   /**
    * Select the ADC0 Trigger source
    * 
    * If TPM is selected by SimAdc0Trigger then Pre-triggers are TPM channel 0 (A) and channel 1 (B),
    * otherwise Pre-trigger 0/1 is determined by this parameter.
    * For example, setAdc0Triggers(SimAdc0TriggerMode_Alt_PreTrigger_1, SimAdc0Trigger_PitCh0) will set the trigger source
    * to PIT channel 0 and conversion will use SC1[1]/R[1]. 
    *
    * @param[in] simAdc0TriggerMode Select ADC0 Trigger mode 
    * @param[in] simAdc0Trigger     Select the ADC0 Trigger source in STOP and VLPS modes, or when ADC0 Alternative Trigger is active.
    */
   static void setAdc0Triggers(SimAdc0TriggerMode simAdc0TriggerMode, SimAdc0Trigger simAdc0Trigger=SimAdc0Trigger_External) {
      sim->SOPT7 = (sim->SOPT7&~(SIM_SOPT7_ADC0TRGSEL_MASK|SIM_SOPT7_ADC0ALTTRGEN_MASK))|simAdc0Trigger|simAdc0TriggerMode;
   };

   //! System Options Register 7
   static constexpr uint32_t sopt7 = 
      SIM_SOPT7_ADC0ALTTRGEN(0) |    // ADC0 alternate trigger enable
      SIM_SOPT7_ADC0PRETRGSEL(0) |   // ADC0 pretrigger select
      SIM_SOPT7_ADC0TRGSEL(0);       // ADC0 trigger select

   /**
    * Initialise SIM registers
    */
   static void initRegs() {
   #ifdef SIM_SCGC4_USBOTG_MASK
      // The USB interface must be disabled for clock changes to have effect
      sim->SCGC4 &= ~SIM_SCGC4_USBOTG_MASK;
   #endif
   
      sim->SOPT1 = sopt1;
      // sim_sopt2_pllfllsel may also be altered by MCG clock code
      sim->SOPT2 = sopt2;
      sim->SOPT4 = sopt4;
      sim->SOPT5 = sopt5;
      sim->SOPT7 = sopt7;
   
   #ifdef SIM_CLKDIV2_USBDIV_MASK
      sim->CLKDIV2 = clkdiv2;
   #endif
   }

};

/** 
 * End group SIM_Group
 * @}
 */
/**
 * @addtogroup PMC_Group PMC, Power Management Controller
 * @brief Abstraction for Power Management Controller
 * @{
 */
#define USBDM_PMC_IS_DEFINED
/**
 * Peripheral information for PMC, Power Management Controller.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class PmcInfo {
public:
   // Template:pmc_mk

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = PMC_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<PMC_Type> pmc = baseAddress;

   //! Default value for Low Voltage Detect Status And Control 1 register
   static constexpr uint32_t pmc_lvdsc1  = 
   #ifdef PMC_LVDSC1_LVDV
      PMC_LVDSC1_LVDV(0)   | // Low-Voltage Detect Voltage Select
   #endif
      PMC_LVDSC1_LVDIE(0) | // Low-Voltage Detect Interrupt Enable
      PMC_LVDSC1_LVDRE(0);  // Low-Voltage Detect Reset Enable

   //! Frequency of Low Power Oscillator (LPO) Clock [~1kHz]
   static constexpr uint32_t system_low_power_clock = 1000UL;

   //! Default value for Low Voltage Detect Status And Control 2 register
   static constexpr uint32_t pmc_lvdsc2  = 
   #ifdef PMC_LVDSC2_LVWV
      PMC_LVDSC2_LVWV(0)   | // Low-Voltage Warning Voltage Select
   #endif
      PMC_LVDSC2_LVWIE(0);  // Low-Voltage Warning Interrupt Enable

   /**
    * Get LPO clock
    *
    * @return frequency in Hz as uint32_t
    */
   static constexpr uint32_t getLpoClock() {
      return system_low_power_clock;
   }

   #ifdef PMC_REGSC_BGEN
   //! Default value for Regulator Status And Control register
   static constexpr uint32_t pmc_regsc  = 
      PMC_REGSC_BGEN(0) | // Bandgap Enable In VLPx Operation
      PMC_REGSC_BGBE(0);  // Bandgap Buffer Enable   

   #endif
   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = PMC_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

};

/** 
 * End group PMC_Group
 * @}
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Abstraction for Analogue Input
 * @{
 */
#define USBDM_ADC0_IS_DEFINED
/**
 * Peripheral information for ADC, Analogue Input.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
#ifndef USBDM_ADC_CLOCK_SOURCES_DEFINED
#define USBDM_ADC_CLOCK_SOURCES_DEFINED
   /**
    * ADC input clock source.
    */
   enum AdcClockSource {
      AdcClockSource_Bus      = ADC_CFG1_ADICLK(0), //!< Bus Clock
      AdcClockSource_Busdiv2  = ADC_CFG1_ADICLK(1), //!< Bus Clock / 2
      AdcClockSource_Alt      = ADC_CFG1_ADICLK(2), //!< Alternate clock (ALTCLK)
      AdcClockSource_Asynch   = ADC_CFG1_ADICLK(3), //!< Asynchronous clock (ADACK Internal ADC clock source)
      AdcClockSource_Default  = AdcClockSource_Asynch
   };
#endif

class Adc0Info {
public:
   // Template:adc0_diff_a

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = ADC0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<ADC_Type> adc = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = ADC0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /**
    *  Get input clock frequency for ADC
    *  
    *  @param adcClockSource Clock source chosen for ADC
    *
    *  @return Frequency in Hz
    */
   static unsigned getInputClockFrequency(AdcClockSource adcClockSource) {
      switch (adcClockSource) {
         case AdcClockSource_Bus:
            return SystemBusClock;
         case AdcClockSource_Busdiv2:
            return SystemBusClock/2;
         case AdcClockSource_Alt:
            return  Osc0Info::getOscerClock();;
         case AdcClockSource_Asynch:
            return 2000000; // Actually varies with ADLPC/ADHSC
         default:
            return 0;
            break;
      }
   }

   /**
    *  Get input clock frequency for ADC
    *
    *  @return Frequency in Hz
    */
   static unsigned getInputClockFrequency() {
      return getInputClockFrequency(static_cast<AdcClockSource>(adc->CFG1 & ADC_CFG1_ADICLK_MASK));
   }

   //! Default resolution
   static constexpr uint32_t defaultAdcResolution = ADC_CFG1_MODE(2);

   //! Default value for ADCx_CFG1 register
   static constexpr uint32_t cfg1  = 
       ADC_CFG1_ADICLK(3)|
       ADC_CFG1_MODE(2)|
       ADC_CFG1_ADLSMP(0)|
       ADC_CFG1_ADIV(0)|
       ADC_CFG1_ADLPC(0);

   //! Default value for ADCx_CFG2 register
    static constexpr uint32_t cfg2  = 
       ADC_CFG2_MUXSEL_MASK | // Choose 'b' channels
       ADC_CFG2_ADLSTS(0)|
       ADC_CFG2_ADHSC(0)|
       ADC_CFG2_ADACKEN(0);

   //! Default value for ADCx_SC2 register
   static constexpr uint32_t sc2  =
       ADC_SC2_ACFE(0)|
       ADC_SC2_ACFGT(0)|
       ADC_SC2_ACREN(0)|
       ADC_SC2_REFSEL(0)|
       ADC_SC2_DMAEN(0)|
       ADC_SC2_ADTRG(0);

   //! Default value for ADCx_CV1 register
   static constexpr uint32_t cv1  = 0;

   //! Default value for ADCx_CV2 register
   static constexpr uint32_t cv2  = 0;

   /** 
    *  Enable clock to Adc0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableAdc0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK;
#endif
   }

   /** 
    *  Disable clock to Adc0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableAdc0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_ADC0_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 40;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: ADC0_SE0             = PTE20 (A6)                     */  { PortEInfo,  20,      PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   1: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   2: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   3: ADC0_SE3             = PTE22 (A8)                     */  { PortEInfo,  22,      PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   4: ADC0_SE4b            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   5: ADC0_SE5b            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   6: ADC0_SE6b            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   7: ADC0_SE7b            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   8: ADC0_SE8             = PTB0 (A0)                      */  { PortBInfo,  0,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   9: ADC0_SE9             = PTB1 (A1)                      */  { PortBInfo,  1,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*  10: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  11: ADC0_SE11            = PTC2 (A4)                      */  { PortCInfo,  2,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*  12: ADC0_SE12            = PTB2 (A2)                      */  { PortBInfo,  2,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*  13: ADC0_SE13            = PTB3 (A3)                      */  { PortBInfo,  3,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*  14: ADC0_SE14            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*  15: ADC0_SE15            = PTC1 (A5)                      */  { PortCInfo,  1,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*  16: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  17: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  18: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  19: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  20: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  21: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  22: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  23: ADC0_SE23            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*  24: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  25: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  26: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  27: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  28: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  29: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  30: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  31: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  32: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  33: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  34: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  35: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  36: ADC0_SE4a            = PTE21 (A7)                     */  { PortEInfo,  21,      PORT_PCR_MUX(0)|defaultPcrValue  },
         /*  37: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  38: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  39: ADC0_SE7a            = PTE23 (A9)                     */  { PortEInfo,  23,      PORT_PCR_MUX(0)|defaultPcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTB = PCC_PCCn_CGC_MASK;
      PCC->PCC_PORTC = PCC_PCCn_CGC_MASK;
      PCC->PCC_PORTE = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTB_CLOCK_MASK|PORTC_CLOCK_MASK|PORTE_CLOCK_MASK);
#endif
      PORTB->GPCLR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x000FUL);
      PORTC->GPCLR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x0006UL);
      PORTE->GPCHR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0x00F0UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTB = PCC_PCCn_CGC_MASK;
      PCC->PCC_PORTC = PCC_PCCn_CGC_MASK;
      PCC->PCC_PORTE = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTB_CLOCK_MASK|PORTC_CLOCK_MASK|PORTE_CLOCK_MASK);
#endif
      PORTB->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0xFU);
      PORTC->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x6U);
      PORTE->GPCHR = PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0xF0U);
   }

#define USBDM_ADC0_INFODP_IS_DEFINED
   class InfoDP {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioBit       PCR value
            /*   0: ADC0_DP0             = PTE20 (A6)                     */  { PortEInfo,  20,      PORT_PCR_MUX(0)|defaultPcrValue  },
            /*   1: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
            /*   2: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
            /*   3: ADC0_DP3             = PTE22 (A8)                     */  { PortEInfo,  22,      PORT_PCR_MUX(0)|defaultPcrValue  },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
         PCC->PCC_PORTE = PCC_PCCn_CGC_MASK;
#else
         enablePortClocks(PORTE_CLOCK_MASK);
#endif
         PORTE->GPCHR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0x0050UL);
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
         PCC->PCC_PORTE = PCC_PCCn_CGC_MASK;
#else
         enablePortClocks(PORTE_CLOCK_MASK);
#endif
         PORTE->GPCHR = PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0x50U);
      }

   }; 

#define USBDM_ADC0_INFODM_IS_DEFINED
   class InfoDM {
   public:
      //! Number of signals available in info table
      static constexpr int numSignals  = 4;

      //! Information for each signal of peripheral
      static constexpr PinInfo  info[] = {
   
            //      Signal                 Pin                                  portInfo    gpioBit       PCR value
            /*   0: ADC0_DM0             = PTE21 (A7)                     */  { PortEInfo,  21,      PORT_PCR_MUX(0)|defaultPcrValue  },
            /*   1: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
            /*   2: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
            /*   3: ADC0_DM3             = PTE23 (A9)                     */  { PortEInfo,  23,      PORT_PCR_MUX(0)|defaultPcrValue  },
      };

      /**
       * Initialise pins used by peripheral
       * 
       * @param pcrValue PCR value controlling pin options
       */
      static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
         PCC->PCC_PORTE = PCC_PCCn_CGC_MASK;
#else
         enablePortClocks(PORTE_CLOCK_MASK);
#endif
         PORTE->GPCHR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0x00A0UL);
      }

      /**
       * Resets pins used by peripheral
       */
      static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
         PCC->PCC_PORTE = PCC_PCCn_CGC_MASK;
#else
         enablePortClocks(PORTE_CLOCK_MASK);
#endif
         PORTE->GPCHR = PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0xA0U);
      }

   }; 

};

/** 
 * End group ADC_Group
 * @}
 */
/**
 * @addtogroup CMP_Group CMP, Analogue Comparator
 * @brief Abstraction for Analogue Comparator
 * @{
 */
#define USBDM_CMP0_IS_DEFINED
/**
 * Peripheral information for CMP, Analogue Comparator.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Cmp0Info {
public:
   // Template:cmp0_pstm_trigm

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = CMP0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<CMP_Type> cmp = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Pin number in Info table for comparator output if mapped to a pin
   static constexpr int outputPin  = 8;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! CMP Control Register 0
   static constexpr uint32_t cr0 =
      CMP_CR0_FILTER_CNT(0)     | // Filter Sample Count
      CMP_CR0_HYSTCTR(0);         // Comparator hard block hysteresis control

   #ifndef CMP_CR1_TRIGM
   #define CMP_CR1_TRIGM(x) 0
   #endif

   //! CMP Control Register 1
   static constexpr uint32_t cr1 =
      CMP_CR1_SE(0)    | // Sample Enable
      CMP_CR1_WE(0)    | // Windowing Enable
      CMP_CR1_TRIGM(0) | // Trigger Mode Enable
      CMP_CR1_PMODE(0) | // Power mode Select
      CMP_CR1_INV(0)   | // Comparator Invert
      CMP_CR1_COS(0)   | // Comparator Output Select
      CMP_CR1_OPE(0);    // Comparator Output Pin Enable

   //! CMP Filter Period Register
   static constexpr uint32_t fpr =
      CMP_FPR_FILT_PER(0); // Filter Sample Period

   //! CMP Status and Control Register
   static constexpr uint32_t scr =
   #ifdef CMP_SCR_DMAEN
      CMP_SCR_DMAEN(0) | // DMA Enable Control
   #endif
      CMP_SCR_IER(0) | // Comparator Interrupt Enable Rising
      CMP_SCR_IEF(0);  // Comparator Interrupt Enable Falling

   //! DAC Control Register
   static constexpr uint32_t daccr =
      CMP_DACCR_VRSEL(0); // Supply Voltage Reference Source Select

   //! MUX Control Register
   static constexpr uint32_t muxcr =
      CMP_MUXCR_PSEL(0)| // Plus Input Mux Control
      CMP_MUXCR_MSEL(0); // Minus Input Mux Control

   /** 
    *  Enable clock to Cmp0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableCmp0Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_CMP_MASK;
#endif
   }

   /** 
    *  Disable clock to Cmp0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableCmp0Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_CMP_MASK;
#endif
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = CMP0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   //! Number of signals available in info table
   static constexpr int numSignals  = 9;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: CMP0_IN0             = PTC6 (D21)                     */  { PortCInfo,  6,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   1: CMP0_IN1             = PTC7 (D16)                     */  { PortCInfo,  7,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   2: CMP0_IN2             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   3: CMP0_IN3             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   4: CMP0_IN4             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   5: CMP0_IN5             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   6: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   7: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   8: CMP0_OUT             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTC = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTC_CLOCK_MASK);
#endif
      PORTC->GPCLR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x00C0UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTC = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTC_CLOCK_MASK);
#endif
      PORTC->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0xC0U);
   }

};

/** 
 * End group CMP_Group
 * @}
 */
/**
 * @addtogroup Control_Group CONTROL, Control
 * @brief Abstraction for Control
 * @{
 */
#define USBDM_CONTROL_IS_DEFINED
/**
 * Peripheral information for CONTROL, Control.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class ControlInfo {
public:
   // Template:control

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Number of signals available in info table
   static constexpr int numSignals  = 5;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: SWD_CLK              = PTA0                           */  { PortAInfo,  0,       PORT_PCR_MUX(7)|defaultPcrValue  },
         /*   1: SWD_DIO              = PTA3                           */  { PortAInfo,  3,       PORT_PCR_MUX(7)|defaultPcrValue  },
         /*   2: NMI_b                = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   3: RESET_b              = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   4: CLKOUT               = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCLR = pcrValue|PORT_PCR_MUX(7)|PORT_GPCLR_GPWE(0x0009UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x9U);
   }

};

/** 
 * End group Control_Group
 * @}
 */
/**
 * @addtogroup CONSOLE_Group Console, Console Interface
 * @brief Abstraction for Console Interface
 * @{
 */
/** 
 * End group CONSOLE_Group
 * @}
 */
/**
 * @addtogroup DAC_Group DAC, Digital-to-Analogue Converter
 * @brief Abstraction for Digital-to-Analogue Converter
 * @{
 */
#define USBDM_DAC0_IS_DEFINED
/**
 * Peripheral information for DAC, Digital-to-Analogue Converter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Dac0Info {
public:
   // Template:dac0_2ch_mkl05

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = DAC0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<DAC_Type> dac = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! DAC Control Register 0
   static constexpr uint32_t c0 =
      DAC_C0_DACRFS(1)        | // Reference Select
      DAC_C0_DACTRGSEL(1)     | // Trigger Select
      DAC_C0_LPEN(0)          | // Low Power Control
      DAC_C0_DACBTIEN(0)      | // Buffer Read Pointer Top Flag Interrupt Enable
      DAC_C0_DACBBIEN(0);       // Buffer Read Pointer Bottom Flag Interrupt Enable

   //! DAC Control Register 1
   static constexpr uint32_t c1 =
      DAC_C1_DMAEN(0)       | // DMA Enable Select
      DAC_C1_DACBFMD(0)     | // Buffer Work Mode Select
      DAC_C1_DACBFEN(0);      // Buffer Enable
   //! DAC Control Register 2
   static constexpr uint32_t c2 =
      DAC_C2_DACBFUP(1);   // DAC Buffer Upper Limit
   /** 
    *  Enable clock to Dac0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableDac0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_DAC0_MASK;
#endif
   }

   /** 
    *  Disable clock to Dac0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableDac0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_DAC0_MASK;
#endif
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = DAC0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: DAC0_OUT             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group DAC_Group
 * @}
 */
/**
 * @addtogroup DMA_Group DMA, Direct Memory Access (DMA)
 * @brief Abstraction for Direct Memory Access (DMA)
 * @{
 */
#define USBDM_DMA0_IS_DEFINED
/**
 * Peripheral information for DMA, Direct Memory Access (DMA).
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Dma0Info {
public:
   // Template:dma0_mkl

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = DMA0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<DMA_Type> dma = baseAddress;

   /** 
    *  Enable clock to Dma0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableDma0Clock();
#else
      SIM->SCGC7 |= SIM_SCGC7_DMA_MASK;
#endif
   }

   /** 
    *  Disable clock to Dma0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableDma0Clock();
#else
      SIM->SCGC7 &= ~SIM_SCGC7_DMA_MASK;
#endif
   }

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = DMA0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   //! Number of DMA channels implemented
   static constexpr unsigned NumChannels = 4;

   //! Number of DMA vectors implemented
   static constexpr unsigned NumVectors = 4;

};

/** 
 * End group DMA_Group
 * @}
 */
/**
 * @addtogroup DMAMUX_Group DMAMUX, Direct Memory Access (DMA)
 * @brief Abstraction for Direct Memory Access (DMA)
 * @{
 */
#define USBDM_DMAMUX0_IS_DEFINED
/**
 * Peripheral information for DMAMUX, Direct Memory Access (DMA).
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Dmamux0Info {
public:
   // Template:dmamux0_4ch_trig_mkl25z4

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = DMAMUX0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<DMAMUX_Type> dmamux = baseAddress;

   /** 
    *  Enable clock to Dmamux0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableDmamux0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_DMAMUX0_MASK;
#endif
   }

   /** 
    *  Disable clock to Dmamux0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableDmamux0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_DMAMUX0_MASK;
#endif
   }

   // Number of DMA channels implemented
   static constexpr unsigned NumChannels = 4;

   static constexpr uint8_t chcfg0_source  = DMAMUX_CHCFG_SOURCE(0);
   static constexpr uint8_t chcfg1_source  = DMAMUX_CHCFG_SOURCE(0);
   static constexpr uint8_t chcfg2_source  = DMAMUX_CHCFG_SOURCE(0);
   static constexpr uint8_t chcfg3_source  = DMAMUX_CHCFG_SOURCE(0);
};

/** 
 * End group DMAMUX_Group
 * @}
 */
/**
 * @addtogroup EXTERNALTRIGGER_Group ExternalTrigger, Shared Resources
 * @brief Abstraction for Shared Resources
 * @{
 */
#define USBDM_EXTERNALTRIGGER_IS_DEFINED
/**
 * Peripheral information for ExternalTrigger, Shared Resources.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class ExternaltriggerInfo {
public:
   // Template:externaltrigger

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Number of signals available in info table
   static constexpr int numSignals  = 1;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: EXTRG_IN             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group EXTERNALTRIGGER_Group
 * @}
 */
/**
 * @addtogroup FTFA_Group FTFA, Flash Memory Module
 * @brief Abstraction for Flash Memory Module
 * @{
 */
#define USBDM_FTFA_IS_DEFINED
/**
 * Peripheral information for FTFA, Flash Memory Module.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class FtfaInfo {
public:
   // Template:ftfa

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = FTFA_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<FTFA_Type> ftfa = baseAddress;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = FTFA_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Ftfa
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableFtfaClock();
#else
      SIM->SCGC6 |= SIM_SCGC6_FTF_MASK;
#endif
   }

   /** 
    *  Disable clock to Ftfa
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableFtfaClock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_FTF_MASK;
#endif
   }

};

/** 
 * End group FTFA_Group
 * @}
 */
/**
 * @addtogroup I2C_Group I2C, Inter-Integrated-Circuit Interface
 * @brief Abstraction for Inter-Integrated-Circuit Interface
 * @{
 */
#define USBDM_I2C0_IS_DEFINED
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class I2c0Info {
public:
   // Template:i2c0_mkl04z4

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = I2C0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<I2C_Type> i2c = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = I2C_DEFAULT_PCR;

   //! Pin number in Info table for SCL if mapped to a pin
   static constexpr int sclPin  = 0;

   //! Pin number in Info table for SDA if mapped to a pin
   static constexpr int sdaPin  = 1;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = true;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = I2C0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
      return SystemBusClock;
   }

   /** 
    *  Enable clock to I2c0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableI2c0Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_I2C0_MASK;
#endif
   }

   /** 
    *  Disable clock to I2c0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableI2c0Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_I2C0_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: I2C0_SCL             = PTE24 (ACCEL_SCL)              */  { PortEInfo,  24,      PORT_PCR_MUX(5)|defaultPcrValue  },
         /*   1: I2C0_SDA             = PTE25 (ACCEL_SDA)              */  { PortEInfo,  25,      PORT_PCR_MUX(5)|defaultPcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTE = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTE_CLOCK_MASK);
#endif
      PORTE->GPCHR = pcrValue|PORT_PCR_MUX(5)|PORT_GPCHR_GPWE(0x0300UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTE = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTE_CLOCK_MASK);
#endif
      PORTE->GPCHR = PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0x300U);
   }

};

#define USBDM_I2C1_IS_DEFINED
/**
 * Peripheral information for I2C, Inter-Integrated-Circuit Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class I2c1Info {
public:
   // Template:i2c0_mkl04z4

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = I2C1_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<I2C_Type> i2c = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = I2C_DEFAULT_PCR;

   //! Pin number in Info table for SCL if mapped to a pin
   static constexpr int sclPin  = 0;

   //! Pin number in Info table for SDA if mapped to a pin
   static constexpr int sdaPin  = 1;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = true;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = I2C1_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
      return SystemBusClock;
   }

   /** 
    *  Enable clock to I2c1
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableI2c1Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_I2C1_MASK;
#endif
   }

   /** 
    *  Disable clock to I2c1
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableI2c1Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_I2C1_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: I2C1_SCL             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   1: I2C1_SDA             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group I2C_Group
 * @}
 */
/**
 * @addtogroup LLWU_Group LLWU, Low-leakage Wake-up Unit
 * @brief Abstraction for Low-leakage Wake-up Unit
 * @{
 */
#define USBDM_LLWU_IS_DEFINED
/**
 * Peripheral information for LLWU, Low-leakage Wake-up Unit.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class LlwuInfo {
public:
   // Template:llwu_pe4_filt2_mkl25z4

   // Module wake ups
   static constexpr uint8_t me =  
      LLWU_ME_WUME0(0) |  // LPTMR
      LLWU_ME_WUME1(0) |  // CMP0
      LLWU_ME_WUME2(0) |  // CMP1
      LLWU_ME_WUME3(0) |  // CMP2/3 (if present)
      LLWU_ME_WUME4(0) |  // TSI0 (if present)
      LLWU_ME_WUME5(0) |  // RTC Alarm
      LLWU_ME_WUME6(0) |  //
      LLWU_ME_WUME7(0);   // RTC Seconds

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = LLWU_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<LLWU_Type> llwu = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   // LLWU Pin Enable registers
   static constexpr uint8_t pe1 = 
      LLWU_PE1_WUPE0(0)|   // LLWUP 0
      LLWU_PE1_WUPE1(0)|   // LLWUP 1
      LLWU_PE1_WUPE2(0)|   // LLWUP 2
      LLWU_PE1_WUPE3(0);   // LLWUP 3 

   static constexpr uint8_t pe2 = 
      LLWU_PE2_WUPE4(0)|   // LLWUP 4
      LLWU_PE2_WUPE5(0)|   // LLWUP 5
      LLWU_PE2_WUPE6(0)|   // LLWUP 6
      LLWU_PE2_WUPE7(0);   // LLWUP 7 

   static constexpr uint8_t pe3 = 
      LLWU_PE3_WUPE8(0)|   // LLWUP 8
      LLWU_PE3_WUPE9(0)|   // LLWUP 9
      LLWU_PE3_WUPE10(0)|  // LLWUP 10
      LLWU_PE3_WUPE11(0);  // LLWUP 11 

   static constexpr uint8_t pe4 = 
      LLWU_PE4_WUPE12(0)|  // LLWUP 12
      LLWU_PE4_WUPE13(0)|  // LLWUP 13
      LLWU_PE4_WUPE14(0)|  // LLWUP 14
      LLWU_PE4_WUPE15(0);  // LLWUP 15 

   // Pin Filter 1 register
   static constexpr uint8_t filt1 = 
      LLWU_FILT_FILTE(0) |   // Digital Filter On External Pin
      LLWU_FILT_FILTSEL(0);  // Filter Pin Select

   // Pin Filter 2 register
   static constexpr uint8_t filt2 =
      LLWU_FILT_FILTE(0) |   // Digital Filter On External Pin
      LLWU_FILT_FILTSEL(0);  // Filter Pin Select

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = LLWU_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   //! Number of signals available in info table
   static constexpr int numSignals  = 16;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   1: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   2: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   3: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   4: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   5: LLWU_P5              = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   6: LLWU_P6              = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   7: LLWU_P7              = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   8: LLWU_P8              = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   9: LLWU_P9              = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*  10: LLWU_P10             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*  11: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  12: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  13: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*  14: LLWU_P14             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*  15: LLWU_P15             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group LLWU_Group
 * @}
 */
/**
 * @addtogroup LPTMR_Group LPTMR, Low Power Timer
 * @brief Abstraction for Low Power Timer
 * @{
 */
#define USBDM_LPTMR0_IS_DEFINED
/**
 * Peripheral information for LPTMR, Low Power Timer.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Lptmr0Info {
public:
   // Template:lptmr0

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = LPTMR0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<LPTMR_Type> lptmr = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! Default Timer Compare value
   static constexpr uint32_t cmr = 0;

   //! Default PSR value
   static constexpr uint32_t psr = 
      LPTMR_PSR_PRESCALE(0)|
      LPTMR_PSR_PBYP(0)|
      LPTMR_PSR_PCS(0);

   //! Default CSR value
   static constexpr uint32_t csr = 
      LPTMR_CSR_TIE(0)|
      LPTMR_CSR_TMS(0)|
      LPTMR_CSR_TFC(0)|
      LPTMR_CSR_TPP(0)|
      LPTMR_CSR_TPS(0);

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = LPTMR0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as an uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(lptmr->PSR&LPTMR_PSR_PCS_MASK) {
      default:
      case LPTMR_PSR_PCS(0): return McgInfo::getMcgIrClock();
      case LPTMR_PSR_PCS(1): return PmcInfo::getLpoClock();
      case LPTMR_PSR_PCS(2): return SimInfo::getErc32kClock();
      case LPTMR_PSR_PCS(3): return Osc0Info::getOscerClock();
      }
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a float in Hz
    */
   static float getClockFrequencyF() {
   
      float freq = getInputClockFrequency();
      if (lptmr->PSR&LPTMR_PSR_PBYP_MASK) {
         return freq;
      }
      return freq/(1<<(((lptmr->PSR&LPTMR_PSR_PRESCALE_MASK)>>LPTMR_PSR_PRESCALE_SHIFT)+1));
   }

   /**
    * Get clock frequency
    *
    * @return Frequency as a uint32_t in Hz (may underflow)
    */
   static uint32_t getClockFrequency() {
   
      uint32_t freq = getInputClockFrequency();
      if (lptmr->PSR&LPTMR_PSR_PBYP_MASK) {
         return freq;
      }
      return freq/(1<<(((lptmr->PSR&LPTMR_PSR_PRESCALE_MASK)>>LPTMR_PSR_PRESCALE_SHIFT)+1));
   }

   /** 
    *  Enable clock to Lptmr0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableLptmr0Clock();
#else
      SIM->SCGC5 |= SIM_SCGC5_LPTMR_MASK;
#endif
   }

   /** 
    *  Disable clock to Lptmr0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableLptmr0Clock();
#else
      SIM->SCGC5 &= ~SIM_SCGC5_LPTMR_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 3;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: --                   = --                             */  { NoPortInfo, INVALID_PCR,  0                           },
         /*   1: LPTMR0_ALT1          = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   2: LPTMR0_ALT2          = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group LPTMR_Group
 * @}
 */
/**
 * @addtogroup PIT_Group PIT, Programmable Interrupt Timer
 * @brief Abstraction for Programmable Interrupt Timer
 * @{
 */
#define USBDM_PIT_IS_DEFINED
/**
 * Peripheral information for PIT, Programmable Interrupt Timer.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class PitInfo {
public:
   // Template:pit_2ch_chain_ltmr

   //! Number of PIT channels
   static constexpr uint32_t NumChannels  = 2;

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = PIT_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<PIT_Type> pit = baseAddress;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = PIT_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   //! Default value for PIT load value register
   static constexpr uint32_t pit_ldval  = 10000;

   //! PIT operation in debug mode
   static constexpr uint32_t mcr = 
      PIT_MCR_FRZ(0) |  // Freeze in debug mode
      PIT_MCR_MDIS(0);  // Disable

   /**
    * Get clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static __attribute__((always_inline)) uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   /** 
    *  Enable clock to Pit
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enablePitClock();
#else
      SIM->SCGC6 |= SIM_SCGC6_PIT_MASK;
#endif
   }

   /** 
    *  Disable clock to Pit
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disablePitClock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_PIT_MASK;
#endif
   }

};

/** 
 * End group PIT_Group
 * @}
 */
/**
 * @addtogroup Power_Group POWER, Power
 * @brief Abstraction for Power
 * @{
 */
#define USBDM_POWER_IS_DEFINED
/**
 * Peripheral information for POWER, Power.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class PowerInfo {
public:
   // Template:power

   //! Number of signals available in info table
   static constexpr int numSignals  = 12;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: VDD1                 = VDD1                           */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   1: VDD2                 = VDD2                           */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   2: VDD3                 = VDD3                           */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   3: VDDA                 = VDDA                           */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   4: VOUT33               = VOUT33                         */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   5: VREFH                = VREFH                          */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   6: VREFL                = VREFL                          */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   7: VREGIN               = VREGIN                         */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   8: VSS1                 = VSS1                           */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   9: VSS2                 = VSS2                           */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*  10: VSS3                 = VSS3                           */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*  11: VSSA                 = VSSA                           */  { NoPortInfo, FIXED_NO_PCR, 0                           },
   };

};

/** 
 * End group Power_Group
 * @}
 */
/**
 * @addtogroup RCM_Group RCM, Reset Control Module
 * @brief Abstraction for Reset Control Module
 * @{
 */
#define USBDM_RCM_IS_DEFINED
/**
 * Peripheral information for RCM, Reset Control Module.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class RcmInfo {
public:
   // Template:rcm_mkl_0x4007f000

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = RCM_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<RCM_Type> rcm = baseAddress;

   //! Reset Pin Filter Control Register
   static constexpr uint8_t rcm_rpfc = 
      RCM_RPFC_RSTFLTSS(0)|   // Reset pin filter select in stop mode
      RCM_RPFC_RSTFLTSRW(0);  // Reset pin filter select in run and wait modes

   //! Reset pin filter bus clock select
   static constexpr uint8_t rcm_rpfw = 
      RCM_RPFW_RSTFLTSEL(0); 

};

/** 
 * End group RCM_Group
 * @}
 */
/**
 * @addtogroup SMC_Group SMC, System Mode Controller
 * @brief Abstraction for System Mode Controller
 * @{
 */
#define USBDM_SMC_IS_DEFINED
/**
 * Peripheral information for SMC, System Mode Controller.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class SmcInfo {
public:
   // Template:smc_alls_mkl04z4

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = SMC_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<SMC_Type> smc = baseAddress;

   // Power Mode Protection Register
   static constexpr uint8_t pmprot =  
      SMC_PMPROT_AVLP(1) |  // Allow very low power modes
      SMC_PMPROT_ALLS(1) |  // Allow low leakage stop mode
      SMC_PMPROT_AVLLS(1);  // Allow very low leakage stop mode

   // VLLS Control Register
   static constexpr uint8_t stopctrl =  
#ifdef SMC_STOPCTRL_PSTOPO
      SMC_STOPCTRL_PSTOPO(2) |  // Partial Stop Option (if present)
#endif

      SMC_STOPCTRL_PORPO(1) |  // POR Power Option
#ifdef SMC_STOPCTRL_LPOPO
      SMC_STOPCTRL_LPOPO(0) |  // POR Power Option (if present)
#endif

      SMC_STOPCTRL_LLSM(0);   // LLS or VLLS Mode Control

};

/** 
 * End group SMC_Group
 * @}
 */
/**
 * @addtogroup SPI_Group SPI, Serial Peripheral Interface
 * @brief Abstraction for Serial Peripheral Interface
 * @{
 */
#define USBDM_SPI0_IS_DEFINED
/**
 * Peripheral information for SPI, Serial Peripheral Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Spi0Info {
public:
   // Template:spi0_mkl04z4_dma

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = SPI0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<SPI_Type> spi = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = true;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = SPI0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Spi0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableSpi0Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_SPI0_MASK;
#endif
   }

   /** 
    *  Disable clock to Spi0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableSpi0Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_SPI0_MASK;
#endif
   }

   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint8_t modeValue = 
      SPI_C1_LSBFE(0)| // LSB or MSB first
      SPI_C1_MODE(0);  // Mode (CPOL+CPHA)

   static uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   //! Default speed (Hz)
   static constexpr uint32_t speed = 
      10000000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: SPI0_SCK             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   1: SPI0_MISO            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   2: SPI0_MOSI            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   3: SPI0_PCS0            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_SPI1_IS_DEFINED
/**
 * Peripheral information for SPI, Serial Peripheral Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Spi1Info {
public:
   // Template:spi0_mkl04z4_dma

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = SPI1_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<SPI_Type> spi = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = true;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = SPI1_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Spi1
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableSpi1Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_SPI1_MASK;
#endif
   }

   /** 
    *  Disable clock to Spi1
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableSpi1Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_SPI1_MASK;
#endif
   }

   //! Default communication mode: order, clock phase and clock polarity
   static constexpr uint8_t modeValue = 
      SPI_C1_LSBFE(0)| // LSB or MSB first
      SPI_C1_MODE(0);  // Mode (CPOL+CPHA)

   static uint32_t getClockFrequency() {
      return SystemBusClock;
   }

   //! Default speed (Hz)
   static constexpr uint32_t speed = 
      10000000;

   //! Number of signals available in info table
   static constexpr int numSignals  = 4;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: SPI1_SCK             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   1: SPI1_MISO            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   2: SPI1_MOSI            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   3: SPI1_PCS0            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group SPI_Group
 * @}
 */
/**
 * @addtogroup TPM_Group TPM, PWM, Input capture and Output compare
 * @brief Abstraction for PWM, Input capture and Output compare
 * @{
 */
#define USBDM_TPM_IS_DEFINED
/**
 * Peripheral information for TPM, PWM, Input capture and Output compare.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class TpmInfo {
public:
   // Template:tpm

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: TPM_CLKIN0           = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   1: TPM_CLKIN1           = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_TPM0_IS_DEFINED
/**
 * Peripheral information for TPM, PWM, Input capture and Output compare.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Tpm0Info {
public:
   // Template:tpm0_6ch

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = TPM0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<TPM_Type> tpm = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! Timer external input frequency 
   static constexpr uint32_t tpmExternalClock =  0;

   //! Default Timer Modulo
   static constexpr uint32_t modulo =TPM_MOD_MOD(10000);

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       TPM_SC_CPWMS(0)|  // Centre-Aligned PWM Select
       TPM_SC_CMOD(1) |  // Clock Mode Selection
       TPM_SC_TOIE(0)|   // Timer Overflow Interrupt Enable
       TPM_SC_PS(0);     // Prescale Factor Selection 

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = TPM0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Tpm0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableTpm0Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_TPM0_MASK;
#endif
   }

   /** 
    *  Disable clock to Tpm0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableTpm0Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_TPM0_MASK;
#endif
   }

   /** Minimum resolution for PWM interval */
   static constexpr uint32_t minimumResolution=100;

   /** Minimum usable interval in ticks */      
   static constexpr uint32_t minimumInterval=20;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(tpm->SC&TPM_SC_CMOD_MASK) {
      default:
      case TPM_SC_CMOD(0): return 0;
      case TPM_SC_CMOD(1): return SimInfo::getTpmClock();
      case TPM_SC_CMOD(2): return tpmExternalClock;
      case TPM_SC_CMOD(3): return 0;
      }
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 6;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: TPM0_CH0             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   1: TPM0_CH1             = PTD1 (D13/LED_BLUE)            */  { PortDInfo,  1,       PORT_PCR_MUX(4)|defaultPcrValue  },
         /*   2: TPM0_CH2             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   3: TPM0_CH3             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   4: TPM0_CH4             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   5: TPM0_CH5             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTD = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTD_CLOCK_MASK);
#endif
      PORTD->GPCLR = pcrValue|PORT_PCR_MUX(4)|PORT_GPCLR_GPWE(0x0002UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTD = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTD_CLOCK_MASK);
#endif
      PORTD->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x2U);
   }

};

#define USBDM_TPM1_IS_DEFINED
/**
 * Peripheral information for TPM, PWM, Input capture and Output compare.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Tpm1Info {
public:
   // Template:tpm1_2ch

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = TPM1_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<TPM_Type> tpm = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! Timer external input frequency 
   static constexpr uint32_t tpmExternalClock =  0;

   //! Default Timer Modulo
   static constexpr uint32_t modulo =TPM_MOD_MOD(10000);

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       TPM_SC_CPWMS(0)|  // Centre-Aligned PWM Select
       TPM_SC_CMOD(1) |  // Clock Mode Selection
       TPM_SC_TOIE(0)|   // Timer Overflow Interrupt Enable
       TPM_SC_PS(0);     // Prescale Factor Selection 

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = TPM1_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Tpm1
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableTpm1Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_TPM1_MASK;
#endif
   }

   /** 
    *  Disable clock to Tpm1
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableTpm1Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_TPM1_MASK;
#endif
   }

   /** Minimum resolution for PWM interval */
   static constexpr uint32_t minimumResolution=100;

   /** Minimum usable interval in ticks */      
   static constexpr uint32_t minimumInterval=20;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(tpm->SC&TPM_SC_CMOD_MASK) {
      default:
      case TPM_SC_CMOD(0): return 0;
      case TPM_SC_CMOD(1): return SimInfo::getTpmClock();
      case TPM_SC_CMOD(2): return tpmExternalClock;
      case TPM_SC_CMOD(3): return 0;
      }
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: TPM1_CH0             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   1: TPM1_CH1             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_TPM2_IS_DEFINED
/**
 * Peripheral information for TPM, PWM, Input capture and Output compare.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Tpm2Info {
public:
   // Template:tpm1_2ch

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = TPM2_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<TPM_Type> tpm = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! Timer external input frequency 
   static constexpr uint32_t tpmExternalClock =  0;

   //! Default Timer Modulo
   static constexpr uint32_t modulo =TPM_MOD_MOD(10000);

   //! Default value for SC register
   static constexpr uint32_t sc  = 
       TPM_SC_CPWMS(0)|  // Centre-Aligned PWM Select
       TPM_SC_CMOD(1) |  // Clock Mode Selection
       TPM_SC_TOIE(0)|   // Timer Overflow Interrupt Enable
       TPM_SC_PS(0);     // Prescale Factor Selection 

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = TPM2_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Tpm2
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableTpm2Clock();
#else
      SIM->SCGC6 |= SIM_SCGC6_TPM2_MASK;
#endif
   }

   /** 
    *  Disable clock to Tpm2
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableTpm2Clock();
#else
      SIM->SCGC6 &= ~SIM_SCGC6_TPM2_MASK;
#endif
   }

   /** Minimum resolution for PWM interval */
   static constexpr uint32_t minimumResolution=100;

   /** Minimum usable interval in ticks */      
   static constexpr uint32_t minimumInterval=20;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static uint32_t getInputClockFrequency() {
   
      switch(tpm->SC&TPM_SC_CMOD_MASK) {
      default:
      case TPM_SC_CMOD(0): return 0;
      case TPM_SC_CMOD(1): return SimInfo::getTpmClock();
      case TPM_SC_CMOD(2): return tpmExternalClock;
      case TPM_SC_CMOD(3): return 0;
      }
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: TPM2_CH0             = PTB18 (LED_RED)                */  { PortBInfo,  18,      PORT_PCR_MUX(3)|defaultPcrValue  },
         /*   1: TPM2_CH1             = PTB19 (LED_GREEN)              */  { PortBInfo,  19,      PORT_PCR_MUX(3)|defaultPcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTB = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTB_CLOCK_MASK);
#endif
      PORTB->GPCHR = pcrValue|PORT_PCR_MUX(3)|PORT_GPCHR_GPWE(0x000CUL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTB = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTB_CLOCK_MASK);
#endif
      PORTB->GPCHR = PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0xCU);
   }

};

/** 
 * End group TPM_Group
 * @}
 */
/**
 * @addtogroup TSI_Group TSI, Touch Sense Interface
 * @brief Abstraction for Touch Sense Interface
 * @{
 */
#define USBDM_TSI0_IS_DEFINED
/**
 * Peripheral information for TSI, Touch Sense Interface.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Tsi0Info {
public:
   // Template:tsi0_mkl

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = TSI0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<TSI_Type> tsi = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   static constexpr uint32_t tsi_gencs = \
      TSI_GENCS_CURSW(0)      |  // Electrode/Reference OSC swap
      TSI_GENCS_STM(0)        |  // Scan Trigger Mode
      TSI_GENCS_STPE(0)       |  // TSI STOP Enable
      TSI_GENCS_TSIIEN(0)     |  // Touch Sensing Input Interrupt Module Enable
      TSI_GENCS_NSCN(8-1)     |  // Consecutive Scan number
      TSI_GENCS_PS(3)         |  // Electrode Oscillator Prescaler
      TSI_GENCS_EXTCHRG(4)    |  // External Oscillator Charge Current select
      TSI_GENCS_DVOLT(0)      |  // Oscillator's voltage rails
      TSI_GENCS_REFCHRG(4)    |  // Reference Oscillator Charge Current select
      TSI_GENCS_MODE(0b0000)  |  // TSI analogue modes setup and status bits
      TSI_GENCS_ESOR(1);         // EOS or OOR Interrupt select

   static constexpr uint32_t tsi_tshd = \
      TSI_TSHD_THRESH(65535) |   // Low Power Channel Low Threshold value
      TSI_TSHD_THRESL(0);    // Low Power Channel High Threshold value

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = TSI0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Tsi0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableTsi0Clock();
#else
      SIM->SCGC5 |= SIM_SCGC5_TSI0_MASK;
#endif
   }

   /** 
    *  Disable clock to Tsi0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableTsi0Clock();
#else
      SIM->SCGC5 &= ~SIM_SCGC5_TSI0_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 16;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: TSI0_CH0             = PTB0 (A0)                      */  { PortBInfo,  0,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   1: TSI0_CH1             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   2: TSI0_CH2             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   3: TSI0_CH3             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   4: TSI0_CH4             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   5: TSI0_CH5             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   6: TSI0_CH6             = PTB1 (A1)                      */  { PortBInfo,  1,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   7: TSI0_CH7             = PTB2 (A2)                      */  { PortBInfo,  2,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   8: TSI0_CH8             = PTB3 (A3)                      */  { PortBInfo,  3,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*   9: TSI0_CH9             = PTB16                          */  { PortBInfo,  16,      PORT_PCR_MUX(0)|defaultPcrValue  },
         /*  10: TSI0_CH10            = PTB17                          */  { PortBInfo,  17,      PORT_PCR_MUX(0)|defaultPcrValue  },
         /*  11: TSI0_CH11            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*  12: TSI0_CH12            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*  13: TSI0_CH13            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*  14: TSI0_CH14            = PTC1 (A5)                      */  { PortCInfo,  1,       PORT_PCR_MUX(0)|defaultPcrValue  },
         /*  15: TSI0_CH15            = PTC2 (A4)                      */  { PortCInfo,  2,       PORT_PCR_MUX(0)|defaultPcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTB = PCC_PCCn_CGC_MASK;
      PCC->PCC_PORTC = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTB_CLOCK_MASK|PORTC_CLOCK_MASK);
#endif
      PORTB->GPCLR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x000FUL);
      PORTB->GPCHR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0x0003UL);
      PORTC->GPCLR = pcrValue|PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x0006UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTB = PCC_PCCn_CGC_MASK;
      PCC->PCC_PORTC = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTB_CLOCK_MASK|PORTC_CLOCK_MASK);
#endif
      PORTB->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0xFU);
      PORTB->GPCHR = PORT_PCR_MUX(0)|PORT_GPCHR_GPWE(0x3U);
      PORTC->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x6U);
   }

};

/** 
 * End group TSI_Group
 * @}
 */
/**
 * @addtogroup UART_Group UART, Universal Asynchronous Receiver/Transmitter
 * @brief Abstraction for Universal Asynchronous Receiver/Transmitter
 * @{
 */
#define USBDM_UART0_IS_DEFINED
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Uart0Info {
public:
   // Template:uart0_mkl04z4

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = UART0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<UART_Type> uart = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! Number of samples per bit
   static constexpr uint32_t oversampleRatio = 8;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = UART0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Uart0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableUart0Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_UART0_MASK;
#endif
   }

   /** 
    *  Disable clock to Uart0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableUart0Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_UART0_MASK;
#endif
   }

   //! Indicates whether the UART needs a write to clear status errors
   static constexpr bool statusNeedsWrite = true;

   //! Default Baud rate used if not explicitly given
   static constexpr uint32_t defaultBaudRate = 115200;

   //! Default buffer size for receive queue when interrupt driven
   static constexpr unsigned receiveBufferSize = 50;

   //! Default buffer size for transmit queue when interrupt driven
   static constexpr unsigned transmitBufferSize = 50;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static inline uint32_t getInputClockFrequency() {
      return SimInfo::getUart0Clock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: UART0_TX             = PTA2 (D1/ConTx)                */  { PortAInfo,  2,       PORT_PCR_MUX(2)|defaultPcrValue  },
         /*   1: UART0_RX             = PTA1 (D0/ConRx)                */  { PortAInfo,  1,       PORT_PCR_MUX(2)|defaultPcrValue  },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCLR = pcrValue|PORT_PCR_MUX(2)|PORT_GPCLR_GPWE(0x0006UL);
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
#ifdef PCC_PCCn_CGC_MASK
      PCC->PCC_PORTA = PCC_PCCn_CGC_MASK;
#else
      enablePortClocks(PORTA_CLOCK_MASK);
#endif
      PORTA->GPCLR = PORT_PCR_MUX(0)|PORT_GPCLR_GPWE(0x6U);
   }

};

#define USBDM_UART1_IS_DEFINED
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Uart1Info {
public:
   // Template:uart1_mkl14z4

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = UART1_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<UART_Type> uart = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = UART1_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Uart1
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableUart1Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_UART1_MASK;
#endif
   }

   /** 
    *  Disable clock to Uart1
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableUart1Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_UART1_MASK;
#endif
   }

   //! Indicates whether the UART needs a write to clear status errors
   static constexpr bool statusNeedsWrite = false;

   //! Default Baud rate used if not explicitly given
   static constexpr uint32_t defaultBaudRate = 115200;

   //! Default buffer size for receive queue when interrupt driven
   static constexpr unsigned receiveBufferSize = 50;

   //! Default buffer size for transmit queue when interrupt driven
   static constexpr unsigned transmitBufferSize = 50;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static inline uint32_t getInputClockFrequency() {
      return SimInfo::getUart1Clock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: UART1_TX             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   1: UART1_RX             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

#define USBDM_UART2_IS_DEFINED
/**
 * Peripheral information for UART, Universal Asynchronous Receiver/Transmitter.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Uart2Info {
public:
   // Template:uart1_mkl14z4

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = UART2_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<UART_Type> uart = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue = 
      PORT_PCR_LK(0) |    // Lock Register
      PORT_PCR_DSE(0) |   // Drive Strength Enable
      PORT_PCR_ODE(0) |   // Open Drain Enable
      PORT_PCR_PFE(0) |   // Passive Filter Enable
      PORT_PCR_SRE(0) |   // Slew Rate Enable
      PORT_PCR_PS(0);     // Pull device

   //! Map all allocated pins on a peripheral when enabled
   static constexpr bool mapPinsOnEnable = false;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = UART2_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Uart2
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableUart2Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_UART2_MASK;
#endif
   }

   /** 
    *  Disable clock to Uart2
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableUart2Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_UART2_MASK;
#endif
   }

   //! Indicates whether the UART needs a write to clear status errors
   static constexpr bool statusNeedsWrite = false;

   //! Default Baud rate used if not explicitly given
   static constexpr uint32_t defaultBaudRate = 115200;

   //! Default buffer size for receive queue when interrupt driven
   static constexpr unsigned receiveBufferSize = 50;

   //! Default buffer size for transmit queue when interrupt driven
   static constexpr unsigned transmitBufferSize = 50;

   /**
    * Get input clock frequency
    *
    * @return Input clock frequency as a uint32_t in Hz
    */
   static inline uint32_t getInputClockFrequency() {
      return SimInfo::getUart2Clock();
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 2;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: UART2_TX             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
         /*   1: UART2_RX             = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group UART_Group
 * @}
 */
/**
 * @addtogroup USB_Group USB, USB OTG Controller
 * @brief Abstraction for USB OTG Controller
 * @{
 */
#define USBDM_USB0_IS_DEFINED
/**
 * Peripheral information for USB, USB OTG Controller.
 * 
 * This may include pin information, constants, register addresses, and default register values,
 * along with simple accessor functions.
 */
class Usb0Info {
public:
   // Template:usb0_otg_c

   //! Hardware base address as uint32_t 
   static constexpr uint32_t baseAddress = USB0_BasePtr;

   //! Hardware base pointer
   static constexpr HardwarePtr<USB_Type> usb = baseAddress;

   //! Base value for PCR (excluding MUX value)
   static constexpr uint32_t defaultPcrValue  = 0;

   //! IRQ numbers for hardware
   static constexpr IRQn_Type irqNums[]  = USB0_IRQS;

   //! Number of IRQs for hardware
   static constexpr uint32_t irqCount  = sizeof(irqNums)/sizeof(irqNums[0]);

   //! Class based callback handler has been installed in vector table
   static constexpr bool irqHandlerInstalled = 0;

   //! Default IRQ level
   static constexpr NvicPriority irqLevel =  NvicPriority_NotInstalled;

   /** 
    *  Enable clock to Usb0
    */
   static void enableClock() {
#ifdef PCC
      PccInfo::enableUsb0Clock();
#else
      SIM->SCGC4 |= SIM_SCGC4_USBOTG_MASK;
#endif
   }

   /** 
    *  Disable clock to Usb0
    */
   static void disableClock() {
#ifdef PCC
      PccInfo::disableUsb0Clock();
#else
      SIM->SCGC4 &= ~SIM_SCGC4_USBOTG_MASK;
#endif
   }

   //! Number of signals available in info table
   static constexpr int numSignals  = 3;

   //! Information for each signal of peripheral
   static constexpr PinInfo  info[] = {

         //      Signal                 Pin                                  portInfo    gpioBit       PCR value
         /*   0: USB0_DM              = USB0_DM                        */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   1: USB0_DP              = USB0_DP                        */  { NoPortInfo, FIXED_NO_PCR, 0                           },
         /*   2: USB_CLKIN            = --                             */  { NoPortInfo, UNMAPPED_PCR, 0                           },
   };

   /**
    * Initialise pins used by peripheral
    * 
    * @param pcrValue PCR value controlling pin options
    */
   static void initPCRs(uint32_t pcrValue=defaultPcrValue) {
      (void)pcrValue;
   }

   /**
    * Resets pins used by peripheral
    */
   static void clearPCRs() {
   }

};

/** 
 * End group USB_Group
 * @}
 */
/** 
 * End group USBDM_Group
 * @}
 */

} // End namespace USBDM


#include "gpio.h"
#include "adc.h"
#include "tpm.h"

/**
 * Namespace enclosing USBDM classes
 */
namespace USBDM {

/**
 * @addtogroup USBDM_Group USBDM Peripheral Interface
 * @brief Hardware Peripheral Interface and library
 * @{
 */
/**
 * @addtogroup ADC_Group ADC, Analogue Input
 * @brief Abstraction for Analogue Input
 * @{
 */
using Adc_A0               = const USBDM::Adc0::Channel<8>;
using Adc_A1               = const USBDM::Adc0::Channel<9>;
using Adc_A2               = const USBDM::Adc0::Channel<12>;
using Adc_A3               = const USBDM::Adc0::Channel<13>;
using Adc_A5               = const USBDM::Adc0::Channel<15>;
using Adc_A4               = const USBDM::Adc0::Channel<11>;
using Adc_A6               = const USBDM::Adc0::Channel<0>;
using Adc_A7               = const USBDM::Adc0::Channel<36>;
using Adc_A8               = const USBDM::Adc0::Channel<3>;
using Adc_A9               = const USBDM::Adc0::Channel<39>;
/** 
 * End group ADC_Group
 * @}
 */
/**
 * @addtogroup TPM_Group TPM, PWM, Input capture and Output compare
 * @brief Abstraction for PWM, Input capture and Output compare
 * @{
 */
using Tpm_D13              = const USBDM::Tpm0::Channel<1>;
using Tpm_LED_BLUE         = const USBDM::Tpm0::Channel<1>;
using Tpm_LED_RED          = const USBDM::Tpm2::Channel<0>;
using Tpm_LED_GREEN        = const USBDM::Tpm2::Channel<1>;
/** 
 * End group TPM_Group
 * @}
 */
/** 
 * End group USBDM_Group
 * @}
 */

} // End namespace USBDM

/**
 *
 * @page PinSummary Pin Mapping
 *
 * @section PinsByPinName Pins by Pin Name
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTA0                     | SWD_CLK                                     |                           | SWD       
 *  PTA1                     | UART0_RX                                    | D0/ConRx                  | Console       
 *  PTA2                     | UART0_TX                                    | D1/ConTx                  | Console       
 *  PTA3                     | SWD_DIO                                     |                           | SWD       
 *  PTA4                     | -                                           | D4                        | -       
 *  PTA5                     | -                                           | D5                        | -       
 *  PTA12                    | -                                           | D3                        | -       
 *  PTA13                    | -                                           | D8                        | -       
 *  PTA14                    | -                                           |                           | -       
 *  PTA15                    | -                                           |                           | -       
 *  PTA16                    | -                                           | D28                       | -       
 *  PTA17                    | -                                           | D29                       | -       
 *  PTA18                    | EXTAL0                                      |                           | 8MHz Crystal       
 *  PTA19                    | XTAL0                                       |                           | 8MHz Crystal       
 *  PTA20                    | -                                           |                           | Reset button       
 *  PTB0                     | ADC0_SE8/TSI0_CH0                           | A0                        | -       
 *  PTB1                     | ADC0_SE9/TSI0_CH6                           | A1                        | -       
 *  PTB2                     | ADC0_SE12/TSI0_CH7                          | A2                        | -       
 *  PTB3                     | ADC0_SE13/TSI0_CH8                          | A3                        | -       
 *  PTB8                     | -                                           | A20                       | -       
 *  PTB9                     | -                                           | A19                       | -       
 *  PTB10                    | -                                           | A18                       | -       
 *  PTB11                    | -                                           | A17                       | -       
 *  PTB16                    | TSI0_CH9                                    |                           | Touch Pad       
 *  PTB17                    | TSI0_CH10                                   |                           | Touch Pad       
 *  PTB18                    | TPM2_CH0                                    | LED_RED                   | Red LED       
 *  PTB19                    | TPM2_CH1                                    | LED_GREEN                 | Green LED       
 *  PTC0                     | -                                           | D17                       | -       
 *  PTC1                     | ADC0_SE15/TSI0_CH14                         | A5                        | -       
 *  PTC2                     | ADC0_SE11/TSI0_CH15                         | A4                        | -       
 *  PTC3                     | -                                           | D18                       | -       
 *  PTC4                     | -                                           | D19                       | -       
 *  PTC5                     | -                                           | D20                       | -       
 *  PTC6                     | CMP0_IN0                                    | D21                       | -       
 *  PTC7                     | CMP0_IN1                                    | D16                       | -       
 *  PTC8                     | -                                           | D6                        | -       
 *  PTC9                     | -                                           | D7                        | -       
 *  PTC10                    | -                                           | D22                       | -       
 *  PTC11                    | -                                           | D23                       | -       
 *  PTC12                    | -                                           | D24                       | -       
 *  PTC13                    | -                                           | D25                       | -       
 *  PTC16                    | -                                           | D26                       | -       
 *  PTC17                    | -                                           | D27                       | -       
 *  PTD0                     | -                                           | D10                       | -       
 *  PTD1                     | TPM0_CH1                                    | D13/LED_BLUE              | Blue LED       
 *  PTD2                     | -                                           | D11                       | -       
 *  PTD3                     | -                                           | D12                       | -       
 *  PTD4                     | -                                           | D2                        | -       
 *  PTD5                     | -                                           | D9                        | -       
 *  PTD6                     | -                                           | D32                       | -       
 *  PTD7                     | -                                           | D33                       | -       
 *  PTE0                     | -                                           | D14                       | -       
 *  PTE1                     | -                                           | D15                       | -       
 *  PTE2                     | -                                           | A16                       | -       
 *  PTE3                     | -                                           | A15                       | -       
 *  PTE4                     | -                                           | A14                       | -       
 *  PTE5                     | -                                           | A13                       | -       
 *  PTE20                    | ADC0_DP0/ADC0_SE0                           | A6                        | -       
 *  PTE21                    | ADC0_DM0/ADC0_SE4a                          | A7                        | -       
 *  PTE22                    | ADC0_DP3/ADC0_SE3                           | A8                        | -       
 *  PTE23                    | ADC0_DM3/ADC0_SE7a                          | A9                        | -       
 *  PTE24                    | I2C0_SCL                                    | ACCEL_SCL                 | Accelerometer       
 *  PTE25                    | I2C0_SDA                                    | ACCEL_SDA                 | Accelerometer       
 *  PTE29                    | -                                           | A10                       | -       
 *  PTE30                    | -                                           | A11                       | -       
 *  PTE31                    | -                                           | D30                       | -       
 *  USB0_DM                  | USB0_DM                                     |                           | USB       
 *  USB0_DP                  | USB0_DP                                     |                           | USB       
 *  VDD1                     | VDD1                                        |                           | -       
 *  VDD2                     | VDD2                                        |                           | -       
 *  VDD3                     | VDD3                                        |                           | -       
 *  VDDA                     | VDDA                                        |                           | -       
 *  VOUT33                   | VOUT33                                      |                           | -       
 *  VREFH                    | VREFH                                       |                           | -       
 *  VREFL                    | VREFL                                       |                           | -       
 *  VREGIN                   | VREGIN                                      |                           | -       
 *  VSS1                     | VSS1                                        |                           | -       
 *  VSS2                     | VSS2                                        |                           | -       
 *  VSS3                     | VSS3                                        |                           | -       
 *  VSSA                     | VSSA                                        |                           | -       
 *
 *
 * @section PinsByLocation Pins by Location
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTB0                     | ADC0_SE8/TSI0_CH0                           | A0                        | -       
 *  PTB1                     | ADC0_SE9/TSI0_CH6                           | A1                        | -       
 *  PTB2                     | ADC0_SE12/TSI0_CH7                          | A2                        | -       
 *  PTB3                     | ADC0_SE13/TSI0_CH8                          | A3                        | -       
 *  PTC2                     | ADC0_SE11/TSI0_CH15                         | A4                        | -       
 *  PTC1                     | ADC0_SE15/TSI0_CH14                         | A5                        | -       
 *  PTE20                    | ADC0_DP0/ADC0_SE0                           | A6                        | -       
 *  PTE21                    | ADC0_DM0/ADC0_SE4a                          | A7                        | -       
 *  PTE22                    | ADC0_DP3/ADC0_SE3                           | A8                        | -       
 *  PTE23                    | ADC0_DM3/ADC0_SE7a                          | A9                        | -       
 *  PTE29                    | -                                           | A10                       | -       
 *  PTE30                    | -                                           | A11                       | -       
 *  PTE5                     | -                                           | A13                       | -       
 *  PTE4                     | -                                           | A14                       | -       
 *  PTE3                     | -                                           | A15                       | -       
 *  PTE2                     | -                                           | A16                       | -       
 *  PTB11                    | -                                           | A17                       | -       
 *  PTB10                    | -                                           | A18                       | -       
 *  PTB9                     | -                                           | A19                       | -       
 *  PTB8                     | -                                           | A20                       | -       
 *  PTE24                    | I2C0_SCL                                    | ACCEL_SCL                 | Accelerometer       
 *  PTE25                    | I2C0_SDA                                    | ACCEL_SDA                 | Accelerometer       
 *  PTA1                     | UART0_RX                                    | D0/ConRx                  | Console       
 *  PTA2                     | UART0_TX                                    | D1/ConTx                  | Console       
 *  PTD4                     | -                                           | D2                        | -       
 *  PTA12                    | -                                           | D3                        | -       
 *  PTA4                     | -                                           | D4                        | -       
 *  PTA5                     | -                                           | D5                        | -       
 *  PTC8                     | -                                           | D6                        | -       
 *  PTC9                     | -                                           | D7                        | -       
 *  PTA13                    | -                                           | D8                        | -       
 *  PTD5                     | -                                           | D9                        | -       
 *  PTD0                     | -                                           | D10                       | -       
 *  PTD2                     | -                                           | D11                       | -       
 *  PTD3                     | -                                           | D12                       | -       
 *  PTD1                     | TPM0_CH1                                    | D13/LED_BLUE              | Blue LED       
 *  PTE0                     | -                                           | D14                       | -       
 *  PTE1                     | -                                           | D15                       | -       
 *  PTC7                     | CMP0_IN1                                    | D16                       | -       
 *  PTC0                     | -                                           | D17                       | -       
 *  PTC3                     | -                                           | D18                       | -       
 *  PTC4                     | -                                           | D19                       | -       
 *  PTC5                     | -                                           | D20                       | -       
 *  PTC6                     | CMP0_IN0                                    | D21                       | -       
 *  PTC10                    | -                                           | D22                       | -       
 *  PTC11                    | -                                           | D23                       | -       
 *  PTC12                    | -                                           | D24                       | -       
 *  PTC13                    | -                                           | D25                       | -       
 *  PTC16                    | -                                           | D26                       | -       
 *  PTC17                    | -                                           | D27                       | -       
 *  PTA16                    | -                                           | D28                       | -       
 *  PTA17                    | -                                           | D29                       | -       
 *  PTE31                    | -                                           | D30                       | -       
 *  PTD6                     | -                                           | D32                       | -       
 *  PTD7                     | -                                           | D33                       | -       
 *  PTB19                    | TPM2_CH1                                    | LED_GREEN                 | Green LED       
 *  PTB18                    | TPM2_CH0                                    | LED_RED                   | Red LED       
 *
 *
 * @section PinsByFunction Pins by Function
 *
 *    Pin Name               |   Functions                                 |  Location                 |  Description  
 *  ------------------------ | --------------------------------------------|---------------------------| ------------- 
 *  PTE31                    | -                                           | D30                       | -       
 *  PTE21                    | ADC0_DM0/ADC0_SE4a                          | A7                        | -       
 *  PTE23                    | ADC0_DM3/ADC0_SE7a                          | A9                        | -       
 *  PTE20                    | ADC0_DP0/ADC0_SE0                           | A6                        | -       
 *  PTE22                    | ADC0_DP3/ADC0_SE3                           | A8                        | -       
 *  PTB0                     | ADC0_SE8/TSI0_CH0                           | A0                        | -       
 *  PTB1                     | ADC0_SE9/TSI0_CH6                           | A1                        | -       
 *  PTC2                     | ADC0_SE11/TSI0_CH15                         | A4                        | -       
 *  PTB2                     | ADC0_SE12/TSI0_CH7                          | A2                        | -       
 *  PTB3                     | ADC0_SE13/TSI0_CH8                          | A3                        | -       
 *  PTC1                     | ADC0_SE15/TSI0_CH14                         | A5                        | -       
 *  PTC6                     | CMP0_IN0                                    | D21                       | -       
 *  PTC7                     | CMP0_IN1                                    | D16                       | -       
 *  PTA18                    | EXTAL0                                      |                           | 8MHz Crystal       
 *  PTE24                    | I2C0_SCL                                    | ACCEL_SCL                 | Accelerometer       
 *  PTE25                    | I2C0_SDA                                    | ACCEL_SDA                 | Accelerometer       
 *  PTA0                     | SWD_CLK                                     |                           | SWD       
 *  PTA3                     | SWD_DIO                                     |                           | SWD       
 *  PTD1                     | TPM0_CH1                                    | D13/LED_BLUE              | Blue LED       
 *  PTB18                    | TPM2_CH0                                    | LED_RED                   | Red LED       
 *  PTB19                    | TPM2_CH1                                    | LED_GREEN                 | Green LED       
 *  PTB16                    | TSI0_CH9                                    |                           | Touch Pad       
 *  PTB17                    | TSI0_CH10                                   |                           | Touch Pad       
 *  PTA1                     | UART0_RX                                    | D0/ConRx                  | Console       
 *  PTA2                     | UART0_TX                                    | D1/ConTx                  | Console       
 *  USB0_DM                  | USB0_DM                                     |                           | USB       
 *  USB0_DP                  | USB0_DP                                     |                           | USB       
 *  VDD1                     | VDD1                                        |                           | -       
 *  VDD2                     | VDD2                                        |                           | -       
 *  VDD3                     | VDD3                                        |                           | -       
 *  VDDA                     | VDDA                                        |                           | -       
 *  VOUT33                   | VOUT33                                      |                           | -       
 *  VREFH                    | VREFH                                       |                           | -       
 *  VREFL                    | VREFL                                       |                           | -       
 *  VREGIN                   | VREGIN                                      |                           | -       
 *  VSS1                     | VSS1                                        |                           | -       
 *  VSS2                     | VSS2                                        |                           | -       
 *  VSS3                     | VSS3                                        |                           | -       
 *  VSSA                     | VSSA                                        |                           | -       
 *  PTA19                    | XTAL0                                       |                           | 8MHz Crystal       
 *
 */

#endif /* PROJECT_HEADERS_PIN_MAPPING_H */
